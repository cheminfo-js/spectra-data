{"version":3,"sources":["webpack:///spectra-data/webpack/universalModuleDefinition","webpack:///spectra-data/spectra-data.min.js","webpack:///spectra-data/webpack/bootstrap ad379245df9cd608e7c5","webpack:///spectra-data/./src/index.js","webpack:///spectra-data/./src/SD.js","webpack:///spectra-data/./~/ml-stat/array.js","webpack:///spectra-data/./~/jcampconverter/src/index.js","webpack:///spectra-data/./src/NMR.js","webpack:///spectra-data/./src/PeakPicking.js","webpack:///spectra-data/./src/JAnalyzer.js","webpack:///spectra-data/./~/ml-gsd/src/index.js","webpack:///spectra-data/./~/ml-gsd/src/optimize.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/src/index.js","webpack:///spectra-data/./~/ml-curve-fitting/src/index.js","webpack:///spectra-data/./~/ml-curve-fitting/src/LM.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/index.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/matrix.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/decompositions.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/svd.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/util.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/evd.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/lu.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/qr.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/cholesky.js","webpack:///spectra-data/./~/ml-curve-fitting/src/algebra.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/index.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/matrix.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/decompositions.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/svd.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/util.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/evd.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/lu.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/qr.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/cholesky.js","webpack:///spectra-data/./~/ml-gsd/src/gsd.js","webpack:///spectra-data/./~/ml-gsd/~/ml-stat/index.js","webpack:///spectra-data/./~/ml-gsd/~/ml-stat/array.js","webpack:///spectra-data/./~/ml-gsd/~/ml-stat/matrix.js","webpack:///spectra-data/./~/extend/index.js","webpack:///spectra-data/./~/ml-savitzky-golay-generalized/src/index.js","webpack:///spectra-data/./~/ml-savitzky-golay-generalized/~/ml-stat/index.js","webpack:///spectra-data/./~/ml-savitzky-golay-generalized/~/ml-stat/array.js","webpack:///spectra-data/./~/ml-savitzky-golay-generalized/~/ml-stat/matrix.js","webpack:///spectra-data/./src/NMR2D.js","webpack:///spectra-data/./src/PeakPicking2D.js","webpack:///spectra-data/./~/ml-fft/src/index.js","webpack:///spectra-data/./~/ml-fft/src/FFTUtils.js","webpack:///spectra-data/./~/ml-fft/src/fftlib.js","webpack:///spectra-data/./src/PeakOptimizer.js","webpack:///spectra-data/./src/SimpleClustering.js","webpack:///spectra-data/./src/AcsParser.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","SD","NMR","NMR2D","ACS","JAnalyzer","sd","activeElement","DATACLASS_XY","DATACLASS_PEAK","TYPE_NMR_SPECTRUM","TYPE_NMR_FID","TYPE_IR","TYPE_RAMAN","TYPE_UV","TYPE_MASS","TYPE_HPLC","TYPE_GC","TYPE_CD","TYPE_2DNMR_SPECTRUM","TYPE_2DNMR_FID","TYPE_XY_DEC","TYPE_XY_INC","TYPE_IV","StatArray","JcampConverter","fromJcamp","jcamp","options","xy","spectrum","convert","prototype","setActiveElement","nactiveSpectrum","getActiveElement","getXUnits","getSpectrum","xUnit","getYUnits","yUnit","getNbPoints","i","getSpectrumData","y","length","getFirstX","spectra","firstX","getLastX","lastX","getFirstY","firstY","getLastY","lastY","setDataClass","dataClass","isPeaktable","isXYdata","isDataClassPeak","isDataClassXY","setDataType","dataType","getDataType","data","getNbSubSpectra","getXData","x","getYData","getX","getY","getXYData","getTitle","title","setTitle","newTitle","getMinY","min","getMaxY","max","getMinMaxY","minMax","getNoiseLevel","mean","stddev","averageDeviations","Array","Math","abs","sort","getNMRPeakThreshold","getNucleus","arrayPointToUnits","doublePoint","unitsToArrayPoint","inValue","round","getDeltaX","midPoint","currentArrayPoint","upperLimit","lowerLimit","floor","setMinMax","factor","setMin","currentMin","setMax","YShift","value","shift","globalShift","fillWith","from","to","tmp","start","end","suppressZone","splice","simplePeakPicking","parameters","getMaxPeak","getSpectraDataY","index","getSpectraDataX","getParamDouble","name","defvalue","info","getParamString","getParamInt","putParam","getArea","i0","ie","area","getVector","nPoints","direction","reversed","winPoints","xwin","ywin","di","k","is2D","twoD","compareNumbers","a","b","sum","values","Infinity","l","arithmeticMean","geometricMean","mul","pow","logMean","lnsum","log","grandMean","means","samples","n","truncatedMean","percent","alreadySorted","undefined","slice","harmonicMean","RangeError","contraHarmonicMean","r1","r2","median","half","variance","unbiased","theMean","theVariance","standardDeviation","sqrt","standardError","quartiles","quart","q1","ceil","q2","q3","pooledStandardDeviation","pooledVariance","vari","mode","itemCount","itemArray","count","indexOf","maxValue","maxIndex","covariance","vector1","vector2","mean1","mean2","cov","skewness","s2","s3","dev","m2","m3","g","kurtosis","s4","m4","v","entropy","eps","weightedMean","weights","weightedStandardDeviation","weightedVariance","z","w","center","inPlace","result","standardize","standardDev","cumulativeSum","array","getConverter","convertToFloatArray","stringArray","floatArray","parseFloat","keepRecordsRegExp","ldr","dataLabel","dataValue","ldrs","ii","position","endLine","infos","Date","ntuples","profiling","logs","push","action","time","split","replace","substring","trim","toUpperCase","xIndex","yIndex","firstVariable","secondVariable","symbol","first","last","vardim","nbPoints","xFactor","yFactor","units","datatable","deltaX","observeFrequency","xType","indirectFrequency","shiftOffsetNum","shiftOffsetVal","varname","vartype","varform","yType","page","pageValue","pageSymbol","pageSymbolIndex","unit","prepareSpectrum","match","parseXYData","parsePeakTable","isMSField","convertMSFieldToLabel","Object","keys","newNtuples","key","j","add2D","keepSpectra","toLowerCase","addGCMS","newData","GC_MS_FIELDS","existingGCMSFields","label","gcms","gc","ms","jj","currentData","lines","removeCommentRegExp","peakTableSplitRegExp","lastDif","ascii","currentX","currentY","xyDataSplitRegExp","DEBUG","firstPoint","expectedCurrentX","charCodeAt","String","fromCharCode","dup","convertTo3DZ","noise","minZ","maxZ","ySize","xSize","minX","maxX","minY","maxY","zData","contourLines","generateContourLines","pAx","pAy","pBx","pBy","lineZValue","contourLevels","nbLevels","povarHeight","Float32Array","isOver","nbSubSpectra","nbPovars","x0","xN","dx","y0","yN","dy","level","contourLevel","side","exp","zValue","iSubSpectra","povar","segments","input","useWorker","postToWorker","worker","createWorker","Promise","resolve","stamp","now","random","stamps","postMessage","workerURL","URL","createObjectURL","Blob","toString","type","Worker","revokeObjectURL","addEventListener","event","output","PeakPicking","create","constructor","dim","getSolventName","observeFrequencyX","nucleus","addNoise","SNR","addSpectraDatas","spec2","factor1","factor2","autoscale","autoBaseline","fourierTransform","postFourierTransform","ph1corr","zeroFilling","nPointsX","nPointsY","haarWhittakerBaselineCorrection","waveletScale","whittakerLambda","whittakerBaselineCorrection","ranges","brukerSpectra","apodization","functionName","lineBroadening","echoAntiechoFilter","SNVFilter","powerFilter","power","console","warn","logarithmFilter","base","correlationFilter","func","phaseCorrection","phi0","phi1","automaticPhase","useBrukerPhase","nmrPeakDetection","peakPicking","toJcamp","GSD","extend","impurities","maxJ","defaultOptions","nH","clean","realTop","thresholdFactor","compile","integralFn","optimize","optionsEx","nHi","noiseLevel","gsdOptions","minMaxRatio","broadRatio","smoothY","nL","sgOptions","windowSize","polynomial","peakList","gsd","post","joinBroadPeaks","width","optimizePeaks","clearList","signals","detectSignals","integralData","compilePattern","maskPattern","multiplicity","peaksO","peaks","peakR","intensity","mask","mask2","nbPeaks","peaks1","newSignals","updateIntegrals","delta1","signalID","_highlight","threshold","sampling","rowWise","ic","more","updateLimits","signal","nbPeaks0","toRemove","sumIntegral","sumObserved","integralType","cs","frequency","signal1D","prevPeak","rangeX","spectrumIntegral","startX","stopX","pattern","observe","integral","peak","labelPeaks","solvent","column","nImpurities","nPeaks","scores","diff","score","gamma","impurityID","prevImp","maxIntensity","prevIndex","candidates","impuritiesPeaks","updateScore","indexMin","thisJ1","thisJ2","thisJ3","thisJ4","createSignals","pascalTriangle","patterns","symRatio","maxErrorIter1","maxErrorIter2","symRank","symmetrizeChoiseBest","asymmetric","peaksComp","P1","n2","maxFlagged","Jc","normalize","validPattern","getRanges","JSON","stringify","heights","getNextCombination","numbering","nFlagged","u","jSum","idealPattern","updateSignal","abstractPattern","tol","cont","newNmrJs","coupling","nmrJs","hsum","lng","ok","currentIndex","active","maxError","iteration","symRank1","symmetrize","tmpPeaks","tmpMask","symRank2","avg","ratio","avgWidth","left","right","middle","error","heightSum","diffL","diffR","chemicalShift","isNaN","symFactor","weight","newSumHeights","dxi","parse","norm","norm2","sampleFunction","lastIndex","sampleX","sampleY","sign","delta","mid","stop","fnType","groups","groupPeaks","group","limits","opts","optPeaks","Opt","optimizeGaussianSum","optimizeLorentzianSum","optPeak","optimizeSingleGaussian","optimizeSingleLorentzian","broadLines","maxI","soft","Number","MAX_VALUE","indexes","fitted","map","sumOfLorentzians","t","p2","cols","rows","Matrix","zeros","singleLorentzian","columns","singleGaussian","xy2","parseData","y_data","dot","consts","dt","p_init","p_min","p_max","p_fit","LM","math","nbSeries","SizeException","algebra","y_dat","dp","tensor_parameter","Npar","Npnt","p_old","y_old","X2","X2_old","J","length_t","length_y_dat","multiply","transpose","prnt","MaxIter","epsilon_1","epsilon_4","lambda_0","lambda_UP_fac","lambda_DN_fac","Update_Type","dp_array","idx","Nfit","weight_sq","ones","dotMultiply","lm_matx","JtWJ","JtWdy","Chi_sq","y_hat","lambda","diag","nu","h","solve","add","eye","hidx","p_try","delta_y","subtract","X2_try","JtWdy_th","alpha","inv","mat","rho","dX2","apply","lm_FD_J","ps","clone","del","y1","dotDivide","lm_Broyden_J","h_t","div","Jt","Decompositions","DC","arr","nRows","nColumns","matrix","newInstance","isArray","TypeError","defineProperty","writable","__proto__","Asplice","Aconcat","concat","from1DArray","newRows","newColumns","rowVector","columnVector","vector","empty","fill","rand","indices","stack","arg1","isMatrix","arguments","r","current","setRow","expand","expansion","checkMatrix","klass","get","checkRowIndex","checkColumnIndex","checkDimensions","otherMatrix","callback","to2DArray","to1DArray","copy","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","set","rowIndex","columnIndex","neg","mulS","addS","addM","sub","subS","subM","mulM","divS","divM","getRow","getRowVector","removeRow","addRow","swapRows","row1","row2","temp","getColumn","getColumnVector","setColumn","removeColumn","addColumn","swapColumns","column1","column2","row","checkRowVector","checkColumnVector","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","size","prod","other","mmul","Bcolj","Arowi","s","sortRows","compareFunction","sortColumns","subMatrix","startRow","endRow","startColumn","endColumn","newMatrix","subMatrixRow","X","subMatrixColumn","trace","inverse","leftHandSide","rightHandSide","LuDecomposition","QrDecomposition","SingularValueDecomposition","EigenvalueDecomposition","CholeskyDecomposition","SVD","EVD","LU","QR","CHO","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","swapped","aux","ks","f","sn","kase","scale","sp","spm1","epm1","sk","ek","U","V","e","work","nct","nrt","hypotenuse","pp","iter","condition","rank","diagonal","leftSingularVectors","rightSingularVectors","diagonalMatrix","Y","scols","Ls","VL","vrows","urows","VLU","solveForDiagonal","vcols","ucols","Error","d","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c2","c3","el1","tst1","low","high","nn","ra","sa","vr","vi","notlast","cdivres","exshift","q","cdiv","xr","xi","yr","yi","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","LUrowi","LUcolj","kmax","lu","pivotVector","pivotSign","isSingular","col","determinant","lowerTriangularFactor","upperTriangularFactor","pivotPermutationVector","qr","rdiag","nrm","Rdiag","isFullRank","orthogonalFactor","dimension","positiveDefinite","Lrowj","Lrowk","L","leftTriangularFactor","B","A","dotPow","maxCriteria","realTopDetection","sgDefOptions","yCorrection","stats","maxDx","minDx","SG","derivative","dY","ddY","maxDdy","minddY","intervalL","intervalR","lastMax","lastMin","broadMask","possible","distanceJ","minDistance","gettingCloser","lastK","beta","currentPoint","log10","l1","l2","N","sum1","sum2","medians","modes","skew","kurt","standardDeviations","standardErrors","sqrtN","scatter","divisor","correlation","zScores","cor","resultRow","sourceRow","weightSum","arrayStat","weightedCovariance","s1","weightedScatter","hasOwn","hasOwnProperty","toStr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","src","copyIsArray","target","deep","SavitzkyGolay","isInteger","np","ans","fullWeights","hs","constantH","wg1","wg2","d1","d2","getHs","wg","GramPoly","Grampoly","GenFact","gf","Weight","PeakPicking2D","PeakOptimizer","isHomoNuclear","observeFrequencyY","getZUnits","getDeltaY","nmrPeakDetection2D","findPeaks2D","references","alignDimensions","lib","SimpleClustering","FFTUtils","smallFilter","getLoGnStdDevNMR","spectraData","isHomonuclear","iCol","nStdDev","convolutedSpectrum","convoluteWithLoG","peaksMC1","findPeaks2DLoG","peaksMax1","findPeaks2DMax","enhanceSymmetry","createSignals2D","inputSpectrum","nCols","ftSpectrum","fft2DArray","ftFilterData","iRow","ir","ftRows","ftCols","convolute2DI","ifft2DArray","bitmask","nbDetectedPoints","iStart","extractArea","rowI","colI","peakListMax","tmpIndex","peakPoints","scanBitmask","nValues","xAverage","yAverage","zSum","NEGATIVE_INFINITY","pt","minmax","newPeak","tolerance","bf1","bf2","connectivity","clusters","fullClusterGenerator","iCluster","nucleusX","nucleusY","resolutionX","resolutionY","peaks2D","shiftX","shiftY","sumZ","jPeak","FFT","ft","tempTransform","init","tmpCols","re","im","bt","finalTransform","tmpRows","indexB","iRow0","iRow1","iRow2","iRow3","fft1d","reconstructTwoRealFFT","realTransform1","realTransform2","rm","rp","ip","ftSignal","ftFilter","convolute","kernel","version","release","date","_n","_bitrev","_cstb","core","_initArray","_makeBitReversalTable","_makeCosSinTable","fft","ifft1d","bt1d","fft2d","tre","tim","x1","x2","y2","ifft2d","ik","wr","wi","n4","Uint32Array","Float64Array","_paddingZero","n8","n2p4","sin","PI","dc","ds","apis","ifft","diagonalError","toleranceX","toleranceY","properties","initializeProperties","hits","exist","checkCrossPeaks","completeMissingIfNeeded","toReturn","thisSignal","thisProp","addedPeaks","newSignal","tmpProp","diagX","diagY","updateProperties","cross","crossPeaksX","crossPeaksY","symmetricSearch","distanceTo","signalsProperties","toImage","signals2D","ref","_alignSingleDimension","signal2D","conn","clusterList","available","remaining","cluster","nextAv","toInclude","formater","fromNMRSignal1D2ACS","acsString","parenthesis","spectro","rangeForMultiplet","ascending","formatAcs_default","decimalValue","decimalJ","appendSeparator","appendSpectroInformation","numberSmartPeakLabels","appendDelta","appendParenthesis","formatNucleus","toFixed","formatMF","line","nbDecimal","appendMultiplicity","appendIntegration","appendCoupling","appendAssignment","pubIntegration","appendParenthesisSeparator","pubAssignment","formatAssignment","assignment","pubMultiplicity","mf","fromACS2NMRSignal1D","SDAPI","AcsParserAsJSONString","toACS","toNMRSignal"],"mappings":"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","file":"spectra-data.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectraData\"] = factory();\n\telse\n\t\troot[\"spectraData\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectraData\"] = factory();\n\telse\n\t\troot[\"spectraData\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\texports.SD = __webpack_require__(1);\n\texports.NMR = __webpack_require__(4);\n\texports.NMR2D = __webpack_require__(40);\n\texports.ACS = __webpack_require__(47);\n\texports.JAnalyzer = __webpack_require__(6);\n\t//exports.SD2 = require('/SD2');\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// small note on the best way to define array\n\t// http://jsperf.com/lp-array-and-loops/2\n\t\n\tvar StatArray = __webpack_require__(2);\n\tvar JcampConverter=__webpack_require__(3);\n\t\n\tfunction SD(sd) {\n\t    this.sd=sd;\n\t    this.activeElement=0;\n\t\n\t    this.DATACLASS_XY = 1;\n\t    this.DATACLASS_PEAK = 2;\n\t\n\t    this.TYPE_NMR_SPECTRUM = 'NMR Spectrum';\n\t    this.TYPE_NMR_FID = 'NMR FID';\n\t    this.TYPE_IR = 'IR';\n\t    this.TYPE_RAMAN = 'RAMAN';\n\t    this.TYPE_UV = 'UV';\n\t    this.TYPE_MASS = 'MASS';\n\t    this.TYPE_HPLC = 'HPLC';\n\t    this.TYPE_GC = 'GC';\n\t    this.TYPE_CD = 'CD';\n\t    this.TYPE_2DNMR_SPECTRUM = 'nD NMR SPECTRUM';\n\t    this.TYPE_2DNMR_FID = 'nD NMR FID';\n\t    this.TYPE_XY_DEC = 'XY DEC';\n\t    this.TYPE_XY_INC= 'XY INC';\n\t    this.TYPE_IV = 'IV';\n\t}\n\t\n\tSD.fromJcamp = function(jcamp, options) {\n\t    options = options ||{};\n\t    if(typeof options.xy ===\"undefined\")\n\t        options.xy=true;\n\t\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new SD(spectrum);\n\t}\n\t\n\t\n\t/**\n\t * @function setActiveElement(nactiveSpectrum);\n\t * This function sets the nactiveSpectrum sub-spectrum as active\n\t * \n\t */\n\tSD.prototype.setActiveElement = function(nactiveSpectrum){\n\t    this.activeElement=nactiveSpectrum;\n\t}\n\t\n\t/**\n\t * @function getActiveElement();\n\t * This function returns the index of the active sub-spectrum.\n\t */\n\tSD.prototype.getActiveElement = function(){\n\t    return this.activeElement;\n\t}\n\t/**\n\t * This function returns the units of the independent dimension.\n\t * @returns {xUnit|*|M.xUnit}\n\t */\n\tSD.prototype.getXUnits = function(){\n\t    return this.getSpectrum().xUnit;\n\t}\n\t\n\t/**\n\t * * This function returns the units of the dependent variable.\n\t * @returns {yUnit|*|M.yUnit}\n\t */\n\tSD.prototype.getYUnits = function(){\n\t    return this.getSpectrum().yUnit;\n\t}\n\t\n\t/**\n\t*   Returns the number of points in the current spectrum\n\t*/\n\tSD.prototype.getNbPoints=function(i){\n\t    return this.getSpectrumData(i).y.length;\n\t}\n\t\n\t/**\n\t * Return the first value of the direct dimension\n\t */\n\tSD.prototype.getFirstX=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].firstX;\n\t}\n\t\n\t/**\n\t * Return the last value of the direct dimension\n\t */\n\tSD.prototype.getLastX=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].lastX;\n\t}\n\t\n\t/**\n\t * Return the first value of the direct dimension\n\t */\n\tSD.prototype.getFirstY=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].firstY;\n\t}\n\t\n\t/**\n\t * Return the first value of the direct dimension\n\t */\n\tSD.prototype.getLastY = function(i){\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].lastY;\n\t}\n\t\n\tSD.prototype.setDataClass = function(dataClass){\n\t    if(dataClass==this.DATACLASS_PEAK) {\n\t        this.getSpectrum().isPeaktable = true;\n\t        this.getSpectrum().isXYdata = false;\n\t    }\n\t    if(dataClass==this.DATACLASS_XY){\n\t        this.getSpectrum().isXYdata = true;\n\t        this.getSpectrum().isPeaktable = false;\n\t    }\n\t}\n\t\n\t/**\n\t * @function isDataClassPeak();\n\t * Is this a PEAKTABLE spectrum?\n\t */\n\tSD.prototype.isDataClassPeak = function(){\n\t    if(this.getSpectrum().isPeaktable)\n\t        return  this.getSpectrum().isPeaktable;\n\t    return false;\n\t}\n\t\n\t/**\n\t * @function isDataClassXY();\n\t * Is this a XY spectrum?\n\t */\n\tSD.prototype.isDataClassXY = function(){\n\t    if(this.getSpectrum().isXYdata)\n\t        return  this.getSpectrum().isXYdata;\n\t    return false\n\t}\n\t\n\tSD.prototype.setDataType = function(dataType){\n\t    this.getSpectrum().dataType=dataType;\n\t}\n\t\n\tSD.prototype.getDataType = function(){\n\t    return this.getSpectrum().dataType;\n\t}\n\t\n\t/**\n\t* Return the i-th sub-spectra in the current spectrum\n\t*/\n\tSD.prototype.getSpectrumData=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].data[0];\n\t}\n\t\n\t/**\n\t * Return the i-th sub-spectra in the current spectrum\n\t */\n\tSD.prototype.getSpectrum=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i];\n\t}\n\t\n\t/**\n\t * Returns the number of sub-spectra in this object\n\t */\n\tSD.prototype.getNbSubSpectra=function(){\n\t    return this.sd.spectra.length;\n\t}\n\t\n\t\n\t/**\n\t *   Returns an array containing the x values of the spectrum\n\t */\n\tSD.prototype.getXData=function(i){\n\t    return this.getSpectrumData(i).x;\n\t}\n\t\n\t/**\n\t * @function getYData();\n\t * This function returns a double array containing the values of the intensity for the current sub-spectrum.\n\t */\n\tSD.prototype.getYData=function(i){\n\t    return this.getSpectrumData(i).y;\n\t}\n\t\n\tSD.prototype.getX=function(i){\n\t    return this.getXData()[i];\n\t}\n\t\n\tSD.prototype.getY=function(i){\n\t    return this.getYData()[i];\n\t}\n\t\n\t/**\n\t * @function getXYData();\n\t * To get a 2 dimensional array with the x and y of this spectraData( Only for 1D spectra).\n\t * Returns a double[2][nbPoints] where the first row contains the x values and the second row the y values.\n\t */\n\tSD.prototype.getXYData=function(i){\n\t    return [this.getXData(i),this.getYData(i)];\n\t}\n\t\n\tSD.prototype.getTitle=function(i) {\n\t    return this.getSpectrum(i).title;\n\t}\n\t\n\t/**\n\t * @function setTitle(newTitle);\n\t * To set the title of this spectraData.\n\t * @param newTitle The new title\n\t */\n\tSD.prototype.setTitle=function(newTitle,i) {\n\t    this.getSpectrum(i).title=newTitle;\n\t}\n\t\n\t/**\n\t * @function getMinY(i)\n\t * This function returns the minimal value of Y\n\t */\n\tSD.prototype.getMinY=function(i) {\n\t    return  StatArray.min(this.getYData(i));\n\t}\n\t\n\t/**\n\t * @function getMaxY(i)\n\t * This function returns the maximal value of Y\n\t */\n\tSD.prototype.getMaxY=function(i) {\n\t    return  StatArray.max(this.getYData(i));\n\t}\n\t\n\t/**\n\t * @function getMinMax(i)\n\t */\n\tSD.prototype.getMinMaxY=function(i) {\n\t    return  StatArray.minMax(this.getYData(i));\n\t}\n\t\n\t\n\t/**\n\t* Get the noise threshold level of the current spectrum. It uses median instead of the mean\n\t*/\n\tSD.prototype.getNoiseLevel=function(){\n\t    var mean = 0,stddev=0;\n\t    var y = this.getYData();\n\t    var length = this.getNbPoints(),i=0;\n\t    for(i = 0; i < length; i++){\n\t        mean+=y[i];\n\t    }\n\t    mean/=this.getNbPoints();\n\t    var averageDeviations = new Array(length);\n\t    for (i = 0; i < length; i++)\n\t        averageDeviations[i] = Math.abs(y[i] - mean);\n\t    averageDeviations.sort();\n\t    if (length % 2 == 1) {\n\t        stddev = averageDeviations[(length-1)/2] / 0.6745;\n\t    } else {\n\t        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n\t    }\n\t\n\t    return stddev*this.getNMRPeakThreshold(this.getNucleus(1));\n\t}\n\t\n\t\n\t/**\n\t* Return the xValue for the given index\n\t*/\n\tSD.prototype.arrayPointToUnits=function(doublePoint){\n\t    return (this.getFirstX() - (doublePoint* (this.getFirstX() - this.getLastX()) / (this.getNbPoints()-1)));\n\t}\n\t\n\t/**\n\t * Returns the index-value for the data array corresponding to a X-value in\n\t * units for the element of spectraData to which it is linked (spectraNb).\n\t * This method makes use of spectraData.getFirstX(), spectraData.getLastX()\n\t * and spectraData.getNbPoints() to derive the return value if it of data class XY\n\t * It performs a binary search if the spectrum is a peak table\n\t *\n\t * @param inValue\n\t *            (value in Units to be converted)\n\t * @return an integer representing the index value of the inValue\n\t */\n\tSD.prototype.unitsToArrayPoint=function(inValue){\n\t    if (this.isDataClassXY()) {\n\t        return Math.round((this.getFirstX() - inValue) * (-1.0 / this.getDeltaX()));\n\t    } else if (this.isDataClassPeak())\n\t    {\n\t        var currentArrayPoint = 0,upperLimit=this.getNbPoints()-1, lowerLimit=0, midPoint;\n\t        //If inverted scale\n\t        if(this.getFirstX()>this.getLastX()){\n\t            upperLimit=0;\n\t            lowerLimit=this.getNbPoints()-1;\n\t\n\t            if(inValue>this.getFirstX())\n\t                return this.getNbPoints();\n\t            if(inValue<this.getLastX())\n\t                return -1;\n\t        }\n\t        else{\n\t            if(inValue<this.getFirstX())\n\t                return -1;\n\t            if(inValue>this.getLastX())\n\t                return this.getNbPoints();\n\t        }\n\t\n\t        while (Math.abs(upperLimit-lowerLimit) > 1)\n\t        {\n\t            midPoint=Math.round(Math.floor((upperLimit+lowerLimit)/2));\n\t            //x=this.getX(midPoint);\n\t            if(this.getX(midPoint)==inValue)\n\t                return midPoint;\n\t            if(this.getX(midPoint)>inValue)\n\t                upperLimit=midPoint;\n\t            else\n\t                lowerLimit=midPoint;\n\t        }\n\t        currentArrayPoint=lowerLimit;\n\t        if(Math.abs(this.getX(lowerLimit)-inValue)>Math.abs(this.getX(upperLimit)-inValue))\n\t            currentArrayPoint=upperLimit;\n\t        return currentArrayPoint;\n\t    } else {\n\t        return 0;\n\t    }\n\t}\n\t\n\t\n\t\n\t/**\n\t* Returns the separation between 2 consecutive points in the spectra domain\n\t*/\n\tSD.prototype.getDeltaX=function(){\n\t    return (this.getLastX()-this.getFirstX()) / (this.getNbPoints()-1);\n\t}\n\t\n\t/**\n\t * @function setMinMax(min,max)\n\t * This function scales the values of Y between the min and max parameters\n\t * @param min   Minimum desired value for Y\n\t * @param max   Maximum desired value for Y\n\t */\n\tSD.prototype.setMinMax=function(min,max) {\n\t    var y = this.getYData();\n\t    var minMax = StatArray.minMax(y);\n\t    var factor = (max - min)/(minMax.max-minMax.min);\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]=(y[i]-minMax.min)*factor+min;\n\t    }\n\t}\n\t\n\t/**\n\t * @function setMin(min)\n\t * This function scales the values of Y to fit the min parameter\n\t * @param min   Minimum desired value for Y\n\t */\n\tSD.prototype.setMin=function(min) {\n\t    var y = this.getYData();\n\t    var currentMin = StatArray.min(y);\n\t    var factor = min/currentMin;\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]*=factor;\n\t    }\n\t}\n\t\n\t/**\n\t * @function setMax(max)\n\t * This function scales the values of Y to fit the max parameter\n\t * @param max   Maximum desired value for Y\n\t */\n\tSD.prototype.setMax=function(max) {\n\t    var y = this.getYData();\n\t    var currentMin = StatArray.max(y);\n\t    var factor = max/currentMin;\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]*=factor;\n\t    }\n\t}\n\t\n\t/**\n\t * @function YShift(value)\n\t * This function shifts the values of Y\n\t * @param value Distance of the shift\n\t */\n\tSD.prototype.YShift=function(value) {\n\t    var y = this.getSpectrumData().y;\n\t    var length = this.getNbPoints(),i=0;\n\t    for(i=0;i<length;i++){\n\t        y[i]+=value;\n\t    }\n\t    this.getSpectrum().firstY+=value;\n\t    this.getSpectrum().lastY+=value;\n\t}\n\t\n\t/**\n\t * @function shift(globalShift)\n\t * This function shift the given spectraData. After this function is applied, all the peaks in the\n\t * spectraData will be found at xi+globalShift\n\t * @param globalShift\n\t */\n\tSD.prototype.shift=function(globalShift) {\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        var x = this.getSpectrumData().x;\n\t        var length = this.getNbPoints(),i=0;\n\t        for(i=0;i<length;i++){\n\t            x[i]+=globalShift;\n\t        }\n\t\n\t        this.getSpectrum().firstX+=globalShift;\n\t        this.getSpectrum().lastX+=globalShift;\n\t    }\n\t\n\t}\n\t\n\t/**\n\t * @function fillWith(from, to, value)\n\t * This function fills a zone of the spectrum with the given value.\n\t * @param from\n\t * @param to\n\t * @param fillWith\n\t */\n\tSD.prototype.fillWith=function(from, to, value) {\n\t    var tmp, start, end, x, y;\n\t    if(from > to) {\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t    }\n\t\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        x = this.getXData();\n\t        y = this.getYData();\n\t        start = this.unitsToArrayPoint(from);\n\t        end = this.unitsToArrayPoint(to);\n\t        if(start > end){\n\t            tmp = start;\n\t            start = end;\n\t            end = tmp;\n\t        }\n\t        if(start<0)\n\t            start=0;\n\t        if(end>=this.getNbPoints)\n\t            end=this.getNbPoints-1;\n\t        for(i=start;i<=end;i++){\n\t                y[i]=value;\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * @function suppressZone(from, to)\n\t * This function suppress a zone from the given spectraData within the given x range.\n\t * Returns a spectraData of type PEAKDATA without peaks in the given region\n\t * @param from\n\t * @param to\n\t */\n\tSD.prototype.suppressZone=function(from, to) {\n\t    var tmp, start, end, x, y;\n\t    if(from > to) {\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t    }\n\t\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        x = this.getXData();\n\t        y = this.getYData();\n\t        start = this.unitsToArrayPoint(from);\n\t        end = this.unitsToArrayPoint(to);\n\t        if(start > end){\n\t            tmp = start;\n\t            start = end;\n\t            end = tmp;\n\t        }\n\t        if(start<0)\n\t            start=0;\n\t        if(end>=this.getNbPoints)\n\t            end=this.getNbPoints-1;\n\t        for(i=end;i>=start;i--){\n\t            y.splice(i,1);\n\t            x.splice(i,1);\n\t        }\n\t    }\n\t    this.setDataClass(this.DATACLASS_PEAK);\n\t}\n\t\n\t\n\t/**\n\t * @function peakPicking(parameters)\n\t * This function performs a simple peak detection in a spectraData. The parameters that can be specified are:\n\t * Returns a two dimensional array of double specifying [x,y] of the detected peaks.\n\t * @option from:    Lower limit.\n\t * @option to:      Upper limit.\n\t * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n\t * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n\t * @option resolution: The maximum resolution of the spectrum for considering peaks.\n\t * @option yInverted: Is it a Y inverted spectrum?(like an IR spectrum)\n\t * @option smooth: A function for smoothing the spectraData before the detection. If your are dealing with\n\t * experimental spectra, smoothing will make the algorithm less prune to false positives.\n\t */\n\tSD.prototype.simplePeakPicking=function(parameters) {\n\t    //@TODO implements this filter\n\t}\n\t\n\t/**\n\t * @function getMaxPeak();\n\t * Get the maximum peak\n\t */\n\tSD.prototype.getMaxPeak = function(){\n\t    var y = this.getSpectraDataY();\n\t    var max=y[0], index=0;\n\t    for(var i=0;i< y.length;i++){\n\t        if(max<y[i]){\n\t            max = y[i];\n\t            index=i;\n\t        }\n\t    }\n\t    return [this.getSpectraDataX()[index],max];\n\t}\n\t\n\t/**\n\t * @function getParamDouble(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t */\n\tSD.prototype.getParamDouble = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value;\n\t}\n\t\n\t/**\n\t * @function getParamString(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t */\n\tSD.prototype.getParamString = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value+\"\";\n\t}\n\t\n\t/**\n\t * @function getParamInt(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t */\n\tSD.prototype.getParamInt = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value;\n\t}\n\t\n\t/**\n\t * Return the y elements of the current spectrum\n\t * @returns {*}\n\t */\n\t\n\tSD.prototype.getSpectraDataY = function(){\n\t    return this.getYData();\n\t}\n\t\n\t/**\n\t * Return the x elements of the current spectrum\n\t * @returns {*}\n\t */\n\tSD.prototype.getSpectraDataX = function(){\n\t    return this.getXData();\n\t}\n\t\n\t/**\n\t * Set a new parameter to this spectrum\n\t * @param name\n\t * @param value\n\t */\n\tSD.prototype.putParam = function(name, value){\n\t    this.sd.info[name]=value;\n\t}\n\t\n\t/**\n\t * This function returns the area under the spectrum in the given window\n\t */\n\tSD.prototype.getArea = function(from, to){\n\t    var i0 = this.unitsToArrayPoint(from);\n\t    var ie = this.unitsToArrayPoint(to);\n\t    var area = 0;\n\t    if(i0>ie){\n\t        var tmp = i0;\n\t        i0 = ie;\n\t        ie = tmp;\n\t    }\n\t    i0=i0<0?0:i0;\n\t    ie=ie>=this.getNbPoints()?this.getNbPoints()-1:ie;\n\t    for(var i=i0;i<ie;i++){\n\t        area+= this.getY(i);\n\t    }\n\t    return area*Math.abs(this.getDeltaX());\n\t},\n\t\n\t/**\n\t * Returns a equally spaced vector within the given window.\n\t * @param from\n\t * @param to\n\t * @param nPoints\n\t * @returns {*}\n\t */\n\tSD.prototype.getVector = function(from, to, nPoints){\n\t    var x = this.getSpectraDataX();\n\t    var y = this.getSpectraDataY();\n\t    var result = [];\n\t    var start = 0, end = x.length- 1,direction=1;\n\t    var reversed = false;\n\t\n\t    if(x[0]>x[1]){\n\t        direction = -1;\n\t        start= x.length-1;\n\t        end = 0;\n\t    }\n\t\n\t    if(from > to){\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t        reversed = true;\n\t    }\n\t    //console.log(x[end]+\" \"+from+\" \"+x[start]+\" \"+to);\n\t    if(x[start]>to||x[end]<from){\n\t        //console.log(\"ssss\");\n\t        return [];\n\t    }\n\t\n\t    while(x[start]<from){start+=direction;}\n\t    while(x[end]>to){end-=direction;}\n\t\n\t    var winPoints = Math.abs(end-start)+1;\n\t    if(!nPoints){\n\t        nPoints = winPoints;\n\t    }\n\t    var xwin = new Array(nPoints);\n\t    var ywin = new Array(nPoints);\n\t    var index = 0;\n\t\n\t    if(direction==-1)\n\t        index=nPoints-1;\n\t\n\t    var di = winPoints/nPoints;\n\t    var i=start-direction;\n\t    for(var k=0;k<nPoints;k++) {\n\t        i += Math.round(di * direction);\n\t        //console.log(i+\" \"+y[i]);\n\t        xwin[index] = x[i];\n\t        ywin[index] = y[i];\n\t        index += direction;\n\t    }\n\t    return [xwin,ywin];\n\t}\n\t\n\t/**\n\t * @function is2D();\n\t * Is it a 2D spectrum?\n\t */\n\tSD.prototype.is2D = function(){\n\t    if(typeof this.sd.twoD == \"undefined\")\n\t        return false;\n\t    return this.sd.twoD;\n\t}\n\t\n\t\n\tmodule.exports = SD;\n\t\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction compareNumbers(a, b) {\n\t    return a - b;\n\t}\n\t\n\t/**\n\t * Computes the sum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.sum = function sum(values) {\n\t    var sum = 0;\n\t    for (var i = 0; i < values.length; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum;\n\t};\n\t\n\t/**\n\t * Computes the maximum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.max = function max(values) {\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return max;\n\t};\n\t\n\t/**\n\t * Computes the minimum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.min = function min(values) {\n\t    var min = Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t    }\n\t    return min;\n\t};\n\t\n\t/**\n\t * Computes the min and max of the given values\n\t * @param {Array} values\n\t * @returns {{min: number, max: number}}\n\t */\n\texports.minMax = function minMax(values) {\n\t    var min = Infinity;\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return {\n\t        min: min,\n\t        max: max\n\t    };\n\t};\n\t\n\t/**\n\t * Computes the arithmetic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.arithmeticMean = function arithmeticMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / l;\n\t};\n\t\n\t/**\n\t * {@link arithmeticMean}\n\t */\n\texports.mean = exports.arithmeticMean;\n\t\n\t/**\n\t * Computes the geometric mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.geometricMean = function geometricMean(values) {\n\t    var mul = 1;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        mul *= values[i];\n\t    }\n\t    return Math.pow(mul, 1 / l);\n\t};\n\t\n\t/**\n\t * Computes the mean of the log of the given values\n\t * If the return value is exponentiated, it gives the same result as the\n\t * geometric mean.\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.logMean = function logMean(values) {\n\t    var lnsum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        lnsum += Math.log(values[i]);\n\t    }\n\t    return lnsum / l;\n\t};\n\t\n\t/**\n\t * Computes the weighted grand mean for a list of means and sample sizes\n\t * @param {Array} means - Mean values for each set of samples\n\t * @param {Array} samples - Number of original values for each set of samples\n\t * @returns {number}\n\t */\n\texports.grandMean = function grandMean(means, samples) {\n\t    var sum = 0;\n\t    var n = 0;\n\t    var l = means.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += samples[i] * means[i];\n\t        n += samples[i];\n\t    }\n\t    return sum / n;\n\t};\n\t\n\t/**\n\t * Computes the truncated mean of the given values using a given percentage\n\t * @param {Array} values\n\t * @param {number} percent - The percentage of values to keep (range: [0,1])\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var k = Math.floor(l * percent);\n\t    var sum = 0;\n\t    for (var i = k; i < (l - k); i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / (l - 2 * k);\n\t};\n\t\n\t/**\n\t * Computes the harmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.harmonicMean = function harmonicMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] === 0) {\n\t            throw new RangeError('value at index ' + i + 'is zero');\n\t        }\n\t        sum += 1 / values[i];\n\t    }\n\t    return l / sum;\n\t};\n\t\n\t/**\n\t * Computes the contraharmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.contraHarmonicMean = function contraHarmonicMean(values) {\n\t    var r1 = 0;\n\t    var r2 = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        r1 += values[i] * values[i];\n\t        r2 += values[i];\n\t    }\n\t    if (r2 < 0) {\n\t        throw new RangeError('sum of values is negative');\n\t    }\n\t    return r1 / r2;\n\t};\n\t\n\t/**\n\t * Computes the median of the given values\n\t * @param {Array} values\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.median = function median(values, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var half = Math.floor(l / 2);\n\t    if (l % 2 === 0) {\n\t        return (values[half - 1] + values[half]) * 0.5;\n\t    } else {\n\t        return values[half];\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the variance of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.variance = function variance(values, unbiased) {\n\t    if (unbiased === undefined) unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var theVariance = 0;\n\t    var l = values.length;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var x = values[i] - theMean;\n\t        theVariance += x * x;\n\t    }\n\t\n\t    if (unbiased) {\n\t        return theVariance / (l - 1);\n\t    } else {\n\t        return theVariance / l;\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the standard deviation of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.standardDeviation = function standardDeviation(values, unbiased) {\n\t    return Math.sqrt(exports.variance(values, unbiased));\n\t};\n\t\n\texports.standardError = function standardError(values) {\n\t    return exports.standardDeviation(values) / Math.sqrt(values.length);\n\t};\n\t\n\texports.quartiles = function quartiles(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort(compareNumbers);\n\t    }\n\t\n\t    var quart = values.length / 4;\n\t    var q1 = values[Math.ceil(quart) - 1];\n\t    var q2 = exports.median(values, true);\n\t    var q3 = values[Math.ceil(quart * 3) - 1];\n\t\n\t    return {q1: q1, q2: q2, q3: q3};\n\t};\n\t\n\texports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n\t    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n\t};\n\t\n\texports.pooledVariance = function pooledVariance(samples, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var sum = 0;\n\t    var length = 0, l = samples.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var values = samples[i];\n\t        var vari = exports.variance(values);\n\t\n\t        sum += (values.length - 1) * vari;\n\t\n\t        if (unbiased)\n\t            length += values.length - 1;\n\t        else\n\t            length += values.length;\n\t    }\n\t    return sum / length;\n\t};\n\t\n\texports.mode = function mode(values) {\n\t    var l = values.length,\n\t        itemCount = new Array(l),\n\t        i;\n\t    for (i = 0; i < l; i++) {\n\t        itemCount[i] = 0;\n\t    }\n\t    var itemArray = new Array(l);\n\t    var count = 0;\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var index = itemArray.indexOf(values[i]);\n\t        if (index >= 0)\n\t            itemCount[index]++;\n\t        else {\n\t            itemArray[count] = values[i];\n\t            itemCount[count] = 1;\n\t            count++;\n\t        }\n\t    }\n\t\n\t    var maxValue = 0, maxIndex = 0;\n\t    for (i = 0; i < count; i++) {\n\t        if (itemCount[i] > maxValue) {\n\t            maxValue = itemCount[i];\n\t            maxIndex = i;\n\t        }\n\t    }\n\t\n\t    return itemArray[maxIndex];\n\t};\n\t\n\texports.covariance = function covariance(vector1, vector2, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var mean1 = exports.mean(vector1);\n\t    var mean2 = exports.mean(vector2);\n\t\n\t    if (vector1.length !== vector2.length)\n\t        throw \"Vectors do not have the same dimensions\";\n\t\n\t    var cov = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var x = vector1[i] - mean1;\n\t        var y = vector2[i] - mean2;\n\t        cov += x * y;\n\t    }\n\t\n\t    if (unbiased)\n\t        return cov / (l - 1);\n\t    else\n\t        return cov / l;\n\t};\n\t\n\texports.skewness = function skewness(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t\n\t    var s2 = 0, s3 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s3 += dev * dev * dev;\n\t    }\n\t    var m2 = s2 / l;\n\t    var m3 = s3 / l;\n\t\n\t    var g = m3 / (Math.pow(m2, 3 / 2.0));\n\t    if (unbiased) {\n\t        var a = Math.sqrt(l * (l - 1));\n\t        var b = l - 2;\n\t        return (a / b) * g;\n\t    }\n\t    else {\n\t        return g;\n\t    }\n\t};\n\t\n\texports.kurtosis = function kurtosis(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var n = values.length, s2 = 0, s4 = 0;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s4 += dev * dev * dev * dev;\n\t    }\n\t    var m2 = s2 / n;\n\t    var m4 = s4 / n;\n\t\n\t    if (unbiased) {\n\t        var v = s2 / (n - 1);\n\t        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t        var b = s4 / (v * v);\n\t        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t\n\t        return a * b - 3 * c;\n\t    }\n\t    else {\n\t        return m4 / (m2 * m2) - 3;\n\t    }\n\t};\n\t\n\texports.entropy = function entropy(values, eps) {\n\t    if (typeof(eps) === 'undefined') eps = 0;\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * Math.log(values[i] + eps);\n\t    return -sum;\n\t};\n\t\n\texports.weightedMean = function weightedMean(values, weights) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * weights[i];\n\t    return sum;\n\t};\n\t\n\texports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n\t    return Math.sqrt(exports.weightedVariance(values, weights));\n\t};\n\t\n\texports.weightedVariance = function weightedVariance(values, weights) {\n\t    var theMean = exports.weightedMean(values, weights);\n\t    var vari = 0, l = values.length;\n\t    var a = 0, b = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var z = values[i] - theMean;\n\t        var w = weights[i];\n\t\n\t        vari += w * (z * z);\n\t        b += w;\n\t        a += w * w;\n\t    }\n\t\n\t    return vari * (b / (b * b - a));\n\t};\n\t\n\texports.center = function center(values, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    var result = values;\n\t    if (!inPlace)\n\t        result = values.slice();\n\t\n\t    var theMean = exports.mean(result), l = result.length;\n\t    for (var i = 0; i < l; i++)\n\t        result[i] -= theMean;\n\t};\n\t\n\texports.standardize = function standardize(values, standardDev, inPlace) {\n\t    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t    var l = values.length;\n\t    var result = inPlace ? values : new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        result[i] = values[i] / standardDev;\n\t    return result;\n\t};\n\t\n\texports.cumulativeSum = function cumulativeSum(array) {\n\t    var l = array.length;\n\t    var result = new Array(l);\n\t    result[0] = array[0];\n\t    for (var i = 1; i < l; i++)\n\t        result[i] = result[i - 1] + array[i];\n\t    return result;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction getConverter() {\n\t\n\t    // the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\n\t    var xyDataSplitRegExp = /[,\\t \\+-]*(?=[^\\d,\\t \\.])|[ \\t]+(?=[\\d+\\.-])/;\n\t    var removeCommentRegExp = /\\$\\$.*/;\n\t    var peakTableSplitRegExp = /[,\\t ]+/;\n\t    var DEBUG = false;\n\t\n\t    var GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\t\n\t    function convertToFloatArray(stringArray) {\n\t        var l = stringArray.length;\n\t        var floatArray = new Array(l);\n\t        for (var i = 0; i < l; i++) {\n\t            floatArray[i] = parseFloat(stringArray[i]);\n\t        }\n\t        return floatArray;\n\t    }\n\t\n\t    /*\n\t     options.keepSpectra: keep the original spectra for a 2D\n\t     options.xy: true // create x / y array instead of a 1D array\n\t     options.keepRecordsRegExp: which fields do we keep\n\t     */\n\t\n\t    function convert(jcamp, options) {\n\t        options = options || {};\n\t\n\t        var keepRecordsRegExp=/^[A-Z]+$/;\n\t        if (options.keepRecordsRegExp) keepRecordsRegExp=options.keepRecordsRegExp;\n\t\n\t        var start = new Date();\n\t\n\t        var ntuples = {},\n\t            ldr,\n\t            dataLabel,\n\t            dataValue,\n\t            ldrs,\n\t            i, ii, position, endLine, infos;\n\t\n\t        var result = {};\n\t        result.profiling = [];\n\t        result.logs = [];\n\t        var spectra = [];\n\t        result.spectra = spectra;\n\t        result.info = {};\n\t        var spectrum = {};\n\t\n\t        if (!(typeof jcamp === 'string')) return result;\n\t        // console.time('start');\n\t\n\t        if (result.profiling) result.profiling.push({action: 'Before split to LDRS', time: new Date() - start});\n\t\n\t        ldrs = jcamp.split(/[\\r\\n]+##/);\n\t\n\t        if (result.profiling) result.profiling.push({action: 'Split to LDRS', time: new Date() - start});\n\t\n\t        if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\t\n\t        for (i = 0, ii = ldrs.length; i < ii; i++) {\n\t            ldr = ldrs[i];\n\t            // This is a new LDR\n\t            position = ldr.indexOf('=');\n\t            if (position > 0) {\n\t                dataLabel = ldr.substring(0, position);\n\t                dataValue = ldr.substring(position + 1).trim();\n\t            } else {\n\t                dataLabel = ldr;\n\t                dataValue = '';\n\t            }\n\t            dataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\t\n\t            if (dataLabel === 'DATATABLE') {\n\t                endLine = dataValue.indexOf('\\n');\n\t                if (endLine === -1) endLine = dataValue.indexOf('\\r');\n\t                if (endLine > 0) {\n\t                    var xIndex = -1;\n\t                    var yIndex = -1;\n\t                    // ##DATA TABLE= (X++(I..I)), XYDATA\n\t                    // We need to find the variables\n\t\n\t                    infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n\t                    if (infos[0].indexOf('++') > 0) {\n\t                        var firstVariable = infos[0].replace(/.*\\(([a-zA-Z0-9]+)\\+\\+.*/, '$1');\n\t                        var secondVariable = infos[0].replace(/.*\\.\\.([a-zA-Z0-9]+).*/, '$1');\n\t                        xIndex = ntuples.symbol.indexOf(firstVariable);\n\t                        yIndex = ntuples.symbol.indexOf(secondVariable);\n\t                    }\n\t\n\t                    if (xIndex === -1) xIndex = 0;\n\t                    if (yIndex === -1) yIndex = 0;\n\t\n\t                    if (ntuples.first) {\n\t                        if (ntuples.first.length > xIndex) spectrum.firstX = ntuples.first[xIndex];\n\t                        if (ntuples.first.length > yIndex) spectrum.firstY = ntuples.first[yIndex];\n\t                    }\n\t                    if (ntuples.last) {\n\t                        if (ntuples.last.length > xIndex) spectrum.lastX = ntuples.last[xIndex];\n\t                        if (ntuples.last.length > yIndex) spectrum.lastY = ntuples.last[yIndex];\n\t                    }\n\t                    if (ntuples.vardim && ntuples.vardim.length > xIndex) {\n\t                        spectrum.nbPoints = ntuples.vardim[xIndex];\n\t                    }\n\t                    if (ntuples.factor) {\n\t                        if (ntuples.factor.length > xIndex) spectrum.xFactor = ntuples.factor[xIndex];\n\t                        if (ntuples.factor.length > yIndex) spectrum.yFactor = ntuples.factor[yIndex];\n\t                    }\n\t                    if (ntuples.units) {\n\t                        if (ntuples.units.length > xIndex) spectrum.xUnit = ntuples.units[xIndex];\n\t                        if (ntuples.units.length > yIndex) spectrum.yUnit = ntuples.units[yIndex];\n\t                    }\n\t                    spectrum.datatable = infos[0];\n\t                    if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n\t                        dataLabel = 'PEAKTABLE';\n\t                    } else if (infos[1] && (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)) {\n\t                        dataLabel = 'XYDATA';\n\t                        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n\t                    }\n\t                }\n\t            }\n\t\n\t\n\t            if (dataLabel === 'TITLE') {\n\t                spectrum.title = dataValue;\n\t            } else if (dataLabel === 'DATATYPE') {\n\t                spectrum.dataType = dataValue;\n\t                if (dataValue.indexOf('nD') > -1) {\n\t                    result.twoD = true;\n\t                }\n\t            } else if (dataLabel === 'XUNITS') {\n\t                spectrum.xUnit = dataValue;\n\t            } else if (dataLabel === 'YUNITS') {\n\t                spectrum.yUnit = dataValue;\n\t            } else if (dataLabel === 'FIRSTX') {\n\t                spectrum.firstX = parseFloat(dataValue);\n\t            } else if (dataLabel === 'LASTX') {\n\t                spectrum.lastX = parseFloat(dataValue);\n\t            } else if (dataLabel === 'FIRSTY') {\n\t                spectrum.firstY = parseFloat(dataValue);\n\t            } else if (dataLabel === 'NPOINTS') {\n\t                spectrum.nbPoints = parseFloat(dataValue);\n\t            } else if (dataLabel === 'XFACTOR') {\n\t                spectrum.xFactor = parseFloat(dataValue);\n\t            } else if (dataLabel === 'YFACTOR') {\n\t                spectrum.yFactor = parseFloat(dataValue);\n\t            } else if (dataLabel === 'DELTAX') {\n\t                spectrum.deltaX = parseFloat(dataValue);\n\t            } else if (dataLabel === '.OBSERVEFREQUENCY' || dataLabel === '$SFO1') {\n\t                if (!spectrum.observeFrequency) spectrum.observeFrequency = parseFloat(dataValue);\n\t            } else if (dataLabel === '.OBSERVENUCLEUS') {\n\t                if (!spectrum.xType) result.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n\t            } else if (dataLabel === '$SFO2') {\n\t                if (!result.indirectFrequency) result.indirectFrequency = parseFloat(dataValue);\n\t\n\t            } else if (dataLabel === '$OFFSET') {   // OFFSET for Bruker spectra\n\t                result.shiftOffsetNum = 0;\n\t                if (!result.shiftOffsetVal)  result.shiftOffsetVal = parseFloat(dataValue);\n\t            } else if (dataLabel === '$REFERENCEPOINT') {   // OFFSET for Varian spectra\n\t\n\t\n\t                // if we activate this part it does not work for ACD specmanager\n\t                //         } else if (dataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n\t                //                 var parts = dataValue.split(/ *, */);\n\t                //                 result.shiftOffsetNum = parseInt(parts[2].trim());\n\t                //                 result.shiftOffsetVal = parseFloat(parts[3].trim());\n\t            } else if (dataLabel === 'VARNAME') {\n\t                ntuples.varname = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'SYMBOL') {\n\t                ntuples.symbol = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'VARTYPE') {\n\t                ntuples.vartype = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'VARFORM') {\n\t                ntuples.varform = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'VARDIM') {\n\t                ntuples.vardim = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'UNITS') {\n\t                ntuples.units = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'FACTOR') {\n\t                ntuples.factor = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'FIRST') {\n\t                ntuples.first = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'LAST') {\n\t                ntuples.last = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'MIN') {\n\t                ntuples.min = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'MAX') {\n\t                ntuples.max = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === '.NUCLEUS') {\n\t                if (result.twoD) {\n\t                    result.yType = dataValue.split(/[, \\t]{2,}/)[0];\n\t                }\n\t            } else if (dataLabel === 'PAGE') {\n\t                spectrum.page = dataValue.trim();\n\t                spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n\t                spectrum.pageSymbol = spectrum.page.replace(/=.*/, '');\n\t                var pageSymbolIndex = ntuples.symbol.indexOf(spectrum.pageSymbol);\n\t                var unit = '';\n\t                if (ntuples.units && ntuples.units[pageSymbolIndex]) {\n\t                    unit = ntuples.units[pageSymbolIndex];\n\t                }\n\t                if (result.indirectFrequency && unit !== 'PPM') {\n\t                    spectrum.pageValue /= result.indirectFrequency;\n\t                }\n\t            } else if (dataLabel === 'RETENTIONTIME') {\n\t                spectrum.pageValue = parseFloat(dataValue);\n\t            } else if (dataLabel === 'XYDATA') {\n\t                prepareSpectrum(result, spectrum);\n\t                // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n\t                if (dataValue.match(/.*\\+\\+.*/)) {\n\t                    parseXYData(spectrum, dataValue, result);\n\t                } else {\n\t                    parsePeakTable(spectrum, dataValue, result);\n\t                }\n\t                spectra.push(spectrum);\n\t                spectrum = {};\n\t            } else if (dataLabel === 'PEAKTABLE') {\n\t                prepareSpectrum(result, spectrum);\n\t                parsePeakTable(spectrum, dataValue, result);\n\t                spectra.push(spectrum);\n\t                spectrum = {};\n\t            } else if (isMSField(dataLabel)) {\n\t                spectrum[convertMSFieldToLabel(dataLabel)] = dataValue;\n\t            } else if (dataLabel.match(keepRecordsRegExp)) {\n\t                result.info[dataLabel] = dataValue.trim();\n\t            }\n\t        }\n\t\n\t        // Currently disabled\n\t        //    if (options && options.lowRes) addLowRes(spectra,options);\n\t\n\t        if (result.profiling) result.profiling.push({action: 'Finished parsing', time: new Date() - start});\n\t\n\t        if (Object.keys(ntuples).length>0) {\n\t            var newNtuples=[];\n\t            var keys=Object.keys(ntuples);\n\t            for (var i=0; i<keys.length; i++) {\n\t                var key=keys[i];\n\t                var values=ntuples[key];\n\t                for (var j=0; j<values.length; j++) {\n\t                    if (! newNtuples[j]) newNtuples[j]={};\n\t                    newNtuples[j][key]=values[j];\n\t                }\n\t            }\n\t            result.ntuples=newNtuples;\n\t        }\n\t\n\t        if (result.twoD) {\n\t            add2D(result);\n\t            if (result.profiling) result.profiling.push({\n\t                action: 'Finished countour plot calculation',\n\t                time: new Date() - start\n\t            });\n\t            if (!options.keepSpectra) {\n\t                delete result.spectra;\n\t            }\n\t        }\n\t\n\t\n\t        // maybe it is a GC (HPLC) / MS. In this case we add a new format\n\t        if (spectra.length > 1 && (! spectra[0].dataType || spectra[0].dataType.toLowerCase().match(/.*mass./))) {\n\t            addGCMS(result);\n\t            if (result.profiling) result.profiling.push({\n\t                action: 'Finished GCMS calculation',\n\t                time: new Date() - start\n\t            });\n\t        }\n\t\n\t\n\t        if (options.xy) { // the spectraData should not be a oneD array but an object with x and y\n\t            if (spectra.length > 0) {\n\t                for (var i=0; i<spectra.length; i++) {\n\t                    var spectrum=spectra[i];\n\t                    if (spectrum.data.length>0) {\n\t                        for (var j=0; j<spectrum.data.length; j++) {\n\t                            var data=spectrum.data[j];\n\t                            var newData={x:Array(data.length/2), y:Array(data.length/2)};\n\t                            for (var k=0; k<data.length; k=k+2) {\n\t                                newData.x[k/2]=data[k];\n\t                                newData.y[k/2]=data[k+1];\n\t                            }\n\t                            spectrum.data[j]=newData;\n\t                        }\n\t\n\t                    }\n\t\n\t                }\n\t            }\n\t        }\n\t\n\t        if (result.profiling) {\n\t            result.profiling.push({action: 'Total time', time: new Date() - start});\n\t        }\n\t\n\t        //   console.log(result);\n\t        //    console.log(JSON.stringify(spectra));\n\t        return result;\n\t\n\t    }\n\t\n\t\n\t    function convertMSFieldToLabel(value) {\n\t        return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n\t    }\n\t\n\t    function isMSField(dataLabel) {\n\t        for (var i = 0; i < GC_MS_FIELDS.length; i++) {\n\t            if (dataLabel === GC_MS_FIELDS[i]) return true;\n\t        }\n\t        return false;\n\t    }\n\t\n\t    function addGCMS(result) {\n\t        var spectra = result.spectra;\n\t        var existingGCMSFields = [];\n\t        var i;\n\t        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n\t            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n\t            if (spectra[0][label]) {\n\t                existingGCMSFields.push(label);\n\t            }\n\t        }\n\t        if (existingGCMSFields.length===0) return;\n\t        var gcms = {};\n\t        gcms.gc = {};\n\t        gcms.ms = [];\n\t        for (i = 0; i < existingGCMSFields.length; i++) {\n\t            gcms.gc[existingGCMSFields[i]] = [];\n\t        }\n\t        for (i = 0; i < spectra.length; i++) {\n\t            var spectrum = spectra[i];\n\t            for (var j = 0; j < existingGCMSFields.length; j++) {\n\t                gcms.gc[existingGCMSFields[j]].push(spectrum.pageValue);\n\t                gcms.gc[existingGCMSFields[j]].push(parseFloat(spectrum[existingGCMSFields[j]]));\n\t            }\n\t          if (spectrum.data) gcms.ms[i] = spectrum.data[0];\n\t\n\t        }\n\t        result.gcms = gcms;\n\t    }\n\t\n\t    function prepareSpectrum(result, spectrum) {\n\t        if (!spectrum.xFactor) spectrum.xFactor = 1;\n\t        if (!spectrum.yFactor) spectrum.yFactor = 1;\n\t        if (spectrum.observeFrequency) {\n\t            if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n\t                spectrum.xUnit = 'PPM';\n\t                spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n\t                spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n\t                spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n\t                spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n\t            }\n\t        }\n\t        if (result.shiftOffsetVal) {\n\t            var shift = spectrum.firstX - result.shiftOffsetVal;\n\t            spectrum.firstX = spectrum.firstX - shift;\n\t            spectrum.lastX = spectrum.lastX - shift;\n\t        }\n\t    }\n\t\n\t    function parsePeakTable(spectrum, value, result) {\n\t        spectrum.isPeaktable=true;\n\t        var i, ii, j, jj, values;\n\t        var currentData = [];\n\t        spectrum.data = [currentData];\n\t\n\t        // counts for around 20% of the time\n\t        var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\t\n\t        var k = 0;\n\t        for (i = 1, ii = lines.length; i < ii; i++) {\n\t            values = lines[i].trim().replace(removeCommentRegExp, '').split(peakTableSplitRegExp);\n\t            if (values.length % 2 === 0) {\n\t                for (j = 0, jj = values.length; j < jj; j = j + 2) {\n\t                    // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n\t                    currentData[k++] = (parseFloat(values[j]) * spectrum.xFactor);\n\t                    currentData[k++] = (parseFloat(values[j + 1]) * spectrum.yFactor);\n\t                }\n\t            } else {\n\t                result.logs.push('Format error: ' + values);\n\t            }\n\t        }\n\t    }\n\t\n\t    function parseXYData(spectrum, value, result) {\n\t        // we check if deltaX is defined otherwise we calculate it\n\t        if (!spectrum.deltaX) {\n\t            spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n\t        }\n\t\n\t        spectrum.isXYdata=true;\n\t\n\t        var currentData = [];\n\t        spectrum.data = [currentData];\n\t\n\t        var currentX = spectrum.firstX;\n\t        var currentY = spectrum.firstY;\n\t        var lines = value.split(/[\\r\\n]+/);\n\t        var lastDif, values, ascii, expectedY;\n\t        values = [];\n\t        for (var i = 1, ii = lines.length; i < ii; i++) {\n\t            //var previousValues=JSON.parse(JSON.stringify(values));\n\t            values = lines[i].trim().replace(removeCommentRegExp, '').split(xyDataSplitRegExp);\n\t            if (values.length > 0) {\n\t                if (DEBUG) {\n\t                    if (!spectrum.firstPoint) {\n\t                        spectrum.firstPoint = parseFloat(values[0]);\n\t                    }\n\t                    var expectedCurrentX = parseFloat(values[0] - spectrum.firstPoint) * spectrum.xFactor + spectrum.firstX;\n\t                    if ((lastDif || lastDif === 0)) {\n\t                        expectedCurrentX += spectrum.deltaX;\n\t                    }\n\t                    result.logs.push('Checking X value: currentX: ' + currentX + ' - expectedCurrentX: ' + expectedCurrentX);\n\t                }\n\t                for (var j = 1, jj = values.length; j < jj; j++) {\n\t                    if (j === 1 && (lastDif || lastDif === 0)) {\n\t                        lastDif = null; // at the beginning of each line there should be the full value X / Y so the diff is always undefined\n\t                        // we could check if we have the expected Y value\n\t                        ascii = values[j].charCodeAt(0);\n\t\n\t                        if (false) { // this code is just to check the jcamp DIFDUP and the next line repeat of Y value\n\t                            // + - . 0 1 2 3 4 5 6 7 8 9\n\t                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n\t                                expectedY = parseFloat(values[j]);\n\t                            } else\n\t                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n\t                            if ((ascii > 63) && (ascii < 74)) {\n\t                                // we could use parseInt but parseFloat is faster at least in Chrome\n\t                                expectedY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n\t                            } else\n\t                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n\t                            if ((ascii > 96) && (ascii < 106)) {\n\t                                // we could use parseInt but parseFloat is faster at least in Chrome\n\t                                expectedY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n\t                            }\n\t                            if (expectedY !== currentY) {\n\t                                result.logs.push('Y value check error: Found: ' + expectedY + ' - Current: ' + currentY);\n\t                                result.logs.push('Previous values: ' + previousValues.length);\n\t                                result.logs.push(previousValues);\n\t                            }\n\t                        }\n\t                    } else {\n\t                        if (values[j].length > 0) {\n\t                            ascii = values[j].charCodeAt(0);\n\t                            // + - . 0 1 2 3 4 5 6 7 8 9\n\t                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n\t                                lastDif = null;\n\t                                currentY = parseFloat(values[j]);\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n\t                            if ((ascii > 63) && (ascii < 74)) {\n\t                                lastDif = null;\n\t                                currentY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n\t                            if ((ascii > 96) && (ascii < 106)) {\n\t                                lastDif = null;\n\t                                currentY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t\n\t\n\t\n\t                            // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n\t                            if (((ascii > 82) && (ascii < 91)) || (ascii === 115)) {\n\t                                var dup = parseFloat(String.fromCharCode(ascii - 34) + values[j].substring(1)) - 1;\n\t                                if (ascii === 115) {\n\t                                    dup = parseFloat('9' + values[j].substring(1)) - 1;\n\t                                }\n\t                                for (var l = 0; l < dup; l++) {\n\t                                    if (lastDif) {\n\t                                        currentY = currentY + lastDif;\n\t                                    }\n\t                                    currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                    currentX += spectrum.deltaX;\n\t                                }\n\t                            } else\n\t                            // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n\t                            if (ascii === 37) {\n\t                                lastDif = parseFloat('0' + values[j].substring(1));\n\t                                currentY += lastDif;\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else if ((ascii > 73) && (ascii < 83)) {\n\t                                lastDif = parseFloat(String.fromCharCode(ascii - 25) + values[j].substring(1));\n\t                                currentY += lastDif;\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t                            // negative DIF digits j k l m n o p q r (ascii 106-114)\n\t                            if ((ascii > 105) && (ascii < 115)) {\n\t                                lastDif = -parseFloat(String.fromCharCode(ascii - 57) + values[j].substring(1));\n\t                                currentY += lastDif;\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t    }\n\t\n\t    function convertTo3DZ(spectra) {\n\t        var noise = 0;\n\t        var minZ = spectra[0].data[0][0];\n\t        var maxZ = minZ;\n\t        var ySize = spectra.length;\n\t        var xSize = spectra[0].data[0].length / 2;\n\t        var z = new Array(ySize);\n\t        for (var i = 0; i < ySize; i++) {\n\t            z[i] = new Array(xSize);\n\t            for (var j = 0; j < xSize; j++) {\n\t                z[i][j] = spectra[i].data[0][j * 2 + 1];\n\t                if (z[i][j] < minZ) minZ = spectra[i].data[0][j * 2 + 1];\n\t                if (z[i][j] > maxZ) maxZ = spectra[i].data[0][j * 2 + 1];\n\t                if (i !== 0 && j !== 0) {\n\t                    noise += Math.abs(z[i][j] - z[i][j - 1]) + Math.abs(z[i][j] - z[i - 1][j]);\n\t                }\n\t            }\n\t        }\n\t        return {\n\t            z: z,\n\t            minX: spectra[0].data[0][0],\n\t            maxX: spectra[0].data[0][spectra[0].data[0].length - 2],\n\t            minY: spectra[0].pageValue,\n\t            maxY: spectra[ySize - 1].pageValue,\n\t            minZ: minZ,\n\t            maxZ: maxZ,\n\t            noise: noise / ((ySize - 1) * (xSize - 1) * 2)\n\t        };\n\t\n\t    }\n\t\n\t    function add2D(result) {\n\t        var zData = convertTo3DZ(result.spectra);\n\t        result.contourLines = generateContourLines(zData);\n\t        delete zData.z;\n\t        result.minMax = zData;\n\t    }\n\t\n\t\n\t    function generateContourLines(zData, options) {\n\t        //console.time('generateContourLines');\n\t        var noise = zData.noise;\n\t        var z = zData.z;\n\t        var contourLevels = [];\n\t        var nbLevels = 7;\n\t        var povarHeight = new Float32Array(4);\n\t        var isOver = [];\n\t        var nbSubSpectra = z.length;\n\t        var nbPovars = z[0].length;\n\t        var pAx, pAy, pBx, pBy;\n\t\n\t        var x0 = zData.minX;\n\t        var xN = zData.maxX;\n\t        var dx = (xN - x0) / (nbPovars - 1);\n\t        var y0 = zData.minY;\n\t        var yN = zData.maxY;\n\t        var dy = (yN - y0) / (nbSubSpectra - 1);\n\t        var minZ = zData.minZ;\n\t        var maxZ = zData.maxZ;\n\t\n\t        //System.out.prvarln('y0 '+y0+' yN '+yN);\n\t        // -------------------------\n\t        // Povars attribution\n\t        //\n\t        // 0----1\n\t        // |  / |\n\t        // | /  |\n\t        // 2----3\n\t        //\n\t        // ---------------------d------\n\t\n\t        var lineZValue;\n\t        for (var level = 0; level < nbLevels * 2; level++) { // multiply by 2 for positif and negatif\n\t            var contourLevel = {};\n\t            contourLevels.push(contourLevel);\n\t            var side = level % 2;\n\t            if (side === 0) {\n\t                lineZValue = (maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) + 5 * noise;\n\t            } else {\n\t                lineZValue = -(maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) - 5 * noise;\n\t            }\n\t            var lines = [];\n\t            contourLevel.zValue = lineZValue;\n\t            contourLevel.lines = lines;\n\t\n\t            if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\t\n\t            for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n\t                for (var povar = 0; povar < nbPovars - 1; povar++) {\n\t                    povarHeight[0] = z[iSubSpectra][povar];\n\t                    povarHeight[1] = z[iSubSpectra][povar + 1];\n\t                    povarHeight[2] = z[(iSubSpectra + 1)][povar];\n\t                    povarHeight[3] = z[(iSubSpectra + 1)][(povar + 1)];\n\t\n\t                    for (var i = 0; i < 4; i++) {\n\t                        isOver[i] = (povarHeight[i] > lineZValue);\n\t                    }\n\t\n\t                    // Example povar0 is over the plane and povar1 and\n\t                    // povar2 are below, we find the varersections and add\n\t                    // the segment\n\t                    if (isOver[0] !== isOver[1] && isOver[0] !== isOver[2]) {\n\t                        pAx = povar + (lineZValue - povarHeight[0]) / (povarHeight[1] - povarHeight[0]);\n\t                        pAy = iSubSpectra;\n\t                        pBx = povar;\n\t                        pBy = iSubSpectra + (lineZValue - povarHeight[0]) / (povarHeight[2] - povarHeight[0]);\n\t                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                    }\n\t                    if (isOver[3] !== isOver[1] && isOver[3] !== isOver[2]) {\n\t                        pAx = povar + 1;\n\t                        pAy = iSubSpectra + 1 - (lineZValue - povarHeight[3]) / (povarHeight[1] - povarHeight[3]);\n\t                        pBx = povar + 1 - (lineZValue - povarHeight[3]) / (povarHeight[2] - povarHeight[3]);\n\t                        pBy = iSubSpectra + 1;\n\t                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                    }\n\t                    // test around the diagonal\n\t                    if (isOver[1] !== isOver[2]) {\n\t                        pAx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n\t                        pAy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n\t                        if (isOver[1] !== isOver[0]) {\n\t                            pBx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[0] - povarHeight[1]);\n\t                            pBy = iSubSpectra;\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                        if (isOver[2] !== isOver[0]) {\n\t                            pBx = povar;\n\t                            pBy = iSubSpectra + 1 - (lineZValue - povarHeight[2]) / (povarHeight[0] - povarHeight[2]);\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                        if (isOver[1] !== isOver[3]) {\n\t                            pBx = povar + 1;\n\t                            pBy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[3] - povarHeight[1]);\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                        if (isOver[2] !== isOver[3]) {\n\t                            pBx = povar + (lineZValue - povarHeight[2]) / (povarHeight[3] - povarHeight[2]);\n\t                            pBy = iSubSpectra + 1;\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        // console.timeEnd('generateContourLines');\n\t        return {\n\t            minX: zData.minX,\n\t            maxX: zData.maxX,\n\t            minY: zData.minY,\n\t            maxY: zData.maxY,\n\t            segments: contourLevels\n\t        };\n\t        //return contourLevels;\n\t    }\n\t\n\t\n\t    function addLowRes(spectra, options) {\n\t        var spectrum;\n\t        var averageX, averageY;\n\t        var targetNbPoints = options.lowRes;\n\t        var highResData;\n\t        for (var i = 0; i < spectra.length; i++) {\n\t            spectrum = spectra[i];\n\t            // we need to find the current higher resolution\n\t            if (spectrum.data.length > 0) {\n\t                highResData = spectrum.data[0];\n\t                for (var j = 1; j < spectrum.data.length; j++) {\n\t                    if (spectrum.data[j].length > highResData.length) {\n\t                        highResData = spectrum.data[j];\n\t                    }\n\t                }\n\t\n\t                if (targetNbPoints > (highResData.length / 2)) return;\n\t                var i, ii;\n\t                var lowResData = [];\n\t                var modulo = Math.ceil(highResData.length / (targetNbPoints * 2));\n\t                for (i = 0, ii = highResData.length; i < ii; i = i + 2) {\n\t                    if (i % modulo === 0) {\n\t                        lowResData.push(highResData[i], highResData[i + 1])\n\t                    }\n\t                }\n\t                spectrum.data.push(lowResData);\n\t            }\n\t        }\n\t    }\n\t\n\t    return convert;\n\t\n\t}\n\t\n\tvar convert = getConverter();\n\t\n\tfunction JcampConverter(input, options, useWorker) {\n\t    if (typeof options === 'boolean') {\n\t        useWorker = options;\n\t        options = {};\n\t    }\n\t    if (useWorker) {\n\t        return postToWorker(input, options);\n\t    } else {\n\t        return convert(input, options);\n\t    }\n\t}\n\t\n\tvar stamps = {},\n\t    worker;\n\t\n\tfunction postToWorker(input, options) {\n\t    if (!worker) {\n\t        createWorker();\n\t    }\n\t    return new Promise(function (resolve) {\n\t        var stamp = Date.now() + '' + Math.random();\n\t        stamps[stamp] = resolve;\n\t        worker.postMessage({stamp: stamp, input: input, options: options});\n\t    });\n\t}\n\t\n\tfunction createWorker() {\n\t    var workerURL = URL.createObjectURL(new Blob([\n\t        'var getConverter =' + getConverter.toString() + ';var convert = getConverter(); onmessage = function (event) { postMessage({stamp: event.data.stamp, output: convert(event.data.input, event.data.options)}); };'\n\t    ], {type: 'application/javascript'}));\n\t    worker = new Worker(workerURL);\n\t    URL.revokeObjectURL(workerURL);\n\t    worker.addEventListener('message', function (event) {\n\t        var stamp = event.data.stamp;\n\t        if (stamps[stamp]) {\n\t            stamps[stamp](event.data.output);\n\t        }\n\t    });\n\t}\n\t\n\tmodule.exports = {\n\t    convert: JcampConverter\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar SD = __webpack_require__(1);\n\tvar PeakPicking = __webpack_require__(5);\n\tvar JcampConverter=__webpack_require__(3);\n\t\n\tfunction NMR(sd) {\n\t    SD.call(this, sd); // Héritage\n\t}\n\t\n\tNMR.prototype = Object.create(SD.prototype);\n\tNMR.prototype.constructor = NMR;\n\t\n\tNMR.fromJcamp = function(jcamp,options) {\n\t    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new NMR(spectrum);\n\t}\n\t\n\t/**\n\t* Return the observed nucleus \n\t*/\n\tNMR.prototype.getNucleus=function(dim){\n\t    if(!dim||dim==0||dim==1)\n\t        return this.sd.xType;\n\t    else{\n\t        return \"\";\n\t    }\n\t}\n\t\n\t/**\n\t* Returns the solvent name\n\t*/\n\tNMR.prototype.getSolventName=function(){\n\t    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]||\"\").replace(\"<\",\"\").replace(\">\",\"\");\n\t}\n\t\n\t//Returns the observe frequency in the direct dimension\n\tNMR.prototype.observeFrequencyX=function(){\n\t    return this.sd.spectra[0].observeFrequency;\n\t}\n\t\n\t/**\n\t* Returns the noise factor depending on the nucleus.\n\t*/\n\tNMR.prototype.getNMRPeakThreshold=function(nucleus) {\n\t    if (nucleus == \"1H\")\n\t        return 3.0;\n\t    if (nucleus ==\"13C\")\n\t        return 5.0;\n\t    return 1.0;\n\t}\n\t\n\t\n\t    \n\t/**\n\t * @function addNoise(SNR)\n\t * This function adds white noise to the the given spectraData. The intensity of the noise is \n\t * calculated from the given signal to noise ratio.\n\t * @param SNR Signal to noise ratio\n\t */\n\t NMR.prototype.addNoise=function(SNR) {\n\t     //@TODO Implement addNoise filter\n\t}\n\t\n\t\n\t/**\n\t * @function addSpectraDatas(spec2,factor1,factor2,autoscale )   \n\t *  This filter performs a linear combination of two spectraDatas.\n\t * A=spec1\n\t * B=spec2\n\t * After to apply this filter you will get:\n\t *      A=A*factor1+B*factor2\n\t * if autoscale is set to 'true' then you will obtain:\n\t *  A=A*factor1+B*k*factor2\n\t * Where the k is a factor such that the maximum peak in A is equal to the maximum peak in spectraData2 \n\t * @param spec2 spectraData2\n\t * @param factor1 linear factor for spec1\n\t * @param factor2 linear factor for spec2\n\t * @param autoscale Auto-adjust scales before combine the spectraDatas\n\t * @example spec1 = addSpectraDatas(spec1,spec2,1,-1, false) This subtract spec2 from spec1\n\t*/\n\tNMR.prototype.addSpectraDatas=function(spec2,factor1,factor2,autoscale ) {\n\t    //@TODO Implement addSpectraDatas filter\n\t}\n\t\n\t/**\n\t * @function autoBaseline()\n\t * Automatically corrects the base line of a given spectraData. After this process the spectraData\n\t * should have meaningful integrals.\n\t */\n\tNMR.prototype.autoBaseline=function( ) {\n\t    //@TODO Implement autoBaseline filter\n\t}\n\t\n\t/**\n\t * @function fourierTransform()\n\t * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n\t */\n\tNMR.prototype.fourierTransform=function( ) {\n\t    //@TODO Implement fourierTransform filter\n\t}\n\t\n\t/**\n\t * @function postFourierTransform(ph1corr)\n\t * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained \n\t * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra \n\t * filter could not find the correct number of points to perform a circular shift.\n\t * The actual problem is that not all of the spectra has the necessary parameters for use only one method for \n\t * correcting the problem of the Bruker digital filters.\n\t * @param spectraData A fourier transformed spectraData.\n\t * @param ph1corr Phase 1 correction value in radians.\n\t */\n\tNMR.prototype.postFourierTransform=function(ph1corr) {\n\t    //@TODO Implement postFourierTransform filter\n\t}\n\t\n\t/**\n\t * @function zeroFilling(nPointsX [,nPointsY])\n\t * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one \n\t * could increase artificially the spectral resolution.\n\t * @param nPointsX Number of new zero points in the direct dimension\n\t * @param nPointsY Number of new zero points in the indirect dimension\n\t */\n\tNMR.prototype.zeroFilling=function(nPointsX, nPointsY) {\n\t    //@TODO Implement zeroFilling filter\n\t}\n\t\n\t/**\n\t * @function  haarWhittakerBaselineCorrection(waveletScale,whittakerLambda)\n\t * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n\t * The needed parameters are the wavelet scale and the lambda used in the whittaker smoother.\n\t * @param waveletScale To be described\n\t * @param whittakerLambda To be described\n\t */\n\tNMR.prototype.haarWhittakerBaselineCorrection=function(waveletScale,whittakerLambda) {\n\t    //@TODO Implement haarWhittakerBaselineCorrection filter\n\t}\n\t\n\t/**\n\t * @function whittakerBaselineCorrection(whittakerLambda,ranges)\n\t * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n\t * The needed parameters are the Wavelet scale and the lambda used in the Whittaker smoother.\n\t * @param waveletScale To be described\n\t * @param whittakerLambda To be described\n\t * @param ranges A string containing the ranges of no signal.\n\t */\n\tNMR.prototype.whittakerBaselineCorrection=function(whittakerLambda,ranges) {\n\t    //@TODO Implement whittakerBaselineCorrection filter\n\t}\n\t\n\t/**\n\t * @function brukerSpectra(options)\n\t * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that \n\t * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the \n\t * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n\t * @option DECIM: Acquisition parameter\n\t * @option DSPFVS: Acquisition parameter\n\t */\n\tNMR.prototype.brukerSpectra=function(options) {\n\t    //@TODO Implement brukerSpectra filter\n\t}\n\t\n\t/**\n\t * @function apodization(functionName, lineBroadening)\n\t * Apodization of a spectraData object.\n\t * @param spectraData An spectraData of type NMR_FID\n\t * @param functionName Valid values for functionsName are\n\t *  Exponential, exp\n\t *  Hamming, hamming\n\t *  Gaussian, gauss\n\t *  TRAF, traf\n\t *  Sine Bell, sb\n\t *  Sine Bell Squared, sb2\n\t * @param lineBroadening The parameter LB should either be a line broadening factor in Hz \n\t * or alternatively an angle given by degrees for sine bell functions and the like.\n\t * @example SD.apodization(, lineBroadening)\n\t */\n\tNMR.prototype.apodization=function(functionName, lineBroadening) {\n\t    //@TODO Implement apodization filter\n\t}\n\t\n\t/**\n\t * @function echoAntiechoFilter();\n\t * That decodes an Echo-Antiecho 2D spectrum.\n\t */\n\tNMR.prototype.echoAntiechoFilter=function() {\n\t    //@TODO Implement echoAntiechoFilter filter\n\t}\n\t\n\t/**\n\t * @function SNVFilter()\n\t * This function apply a Standard Normal Variate Transformation over the given spectraData. Mainly used for IR spectra.\n\t */\n\tNMR.prototype.SNVFilter=function() {\n\t    //@TODO Implement SNVFilter\n\t}\n\t\n\t/**\n\t * @function powerFilter(power)\n\t * This function applies a power to all the Y values.<br>If the power is less than 1 and the spectrum has negative values, it will be shifted so that the lowest value is zero \n\t * @param   power   The power to apply\n\t */\n\tNMR.prototype.powerFilter=function(power) {\n\t    var minY=this.getMinY();\n\t    if(power<1 && minY<0){\n\t        this.YShift(-1*minY);\n\t        console.warn(\"SD.powerFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n\t    }\n\t    //@TODO Implement powerFilter\n\t}\n\t\n\t/**\n\t * @function logarithmFilter(base)\n\t * This function applies a log to all the Y values.<br>If the spectrum has negative or zero values, it will be shifted so that the lowest value is 1 \n\t * @param   base    The base to use\n\t */\n\tNMR.prototype.logarithmFilter=function(base) {\n\t    var minY=this.getMinY();\n\t    if(minY<=0){\n\t        this.YShift((-1*minY)+1);\n\t        console.warn(\"SD.logarithmFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n\t    }\n\t   //@TODO Implement logarithmFilter filter\n\t}\n\t\n\t\n\t/**\n\t * @function correlationFilter(func) \n\t * This function correlates the given spectraData with the given vector func. The correlation\n\t * operation (*) is defined as:\n\t * \n\t *                    __ inf\n\t *  c(x)=f(x)(*)g(x)= \\        f(x)*g(x+i)\n\t *                   ./    \n\t *                    -- i=-inf\n\t * @param func A double array containing the function to correlates the spectraData\n\t * @example var smoothedSP = SD.correlationFilter(spectraData,[1,1]) returns a smoothed version of the\n\t * given spectraData. \n\t */\n\tNMR.prototype.correlationFilter=function(func) {\n\t    //@TODO Implement correlationFilter filter\n\t}\n\t\n\t/**\n\t * @function  phaseCorrection(phi0, phi1)\n\t * Applies the phase correction (phi0,phi1) to a Fourier transformed spectraData. The angles must be given in radians.\n\t * @param phi0 Zero order phase correction\n\t * @param phi1 One order phase correction\n\t*/\n\tNMR.prototype.phaseCorrection=function(phi0, phi1) {\n\t    //@TODO Implement phaseCorrection filter\n\t}\n\t\n\t/**\n\t * @function automaticPhase() \n\t * This function determines automatically the correct parameters phi0 and phi1 for a phaseCorrection\n\t * function and applies it.\n\t */ \n\tNMR.prototype.automaticPhase=function() {\n\t    //@TODO Implement automaticPhase filter\n\t}\n\t\n\t/**\n\t *  @function useBrukerPhase()\n\t *  This function extract the parameters of the phaseCorrection from the jcamp-dx parameters\n\t *  if the spectrum was acquired in Bruker spectrometers . Basically it will look for the parameters\n\t *  $PHC0 and $PHC1, and will use it to call the phaseCorrection function.\n\t */\n\tNMR.prototype.useBrukerPhase=function() {\n\t   //@TODO Implement useBrukerPhase filter\n\t}\n\t\n\t/**\n\t * @function nmrPeakDetection(parameters);\n\t * This function process the given spectraData and tries to determine the NMR signals. Returns an NMRSignal1D array containing all the detected 1D-NMR Signals\n\t * @param parameters A JSONObject containing the optional parameters:\n\t * @option fromX:   Lower limit.\n\t * @option toX:     Upper limit.\n\t * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n\t * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n\t */\n\tNMR.prototype.nmrPeakDetection=function(parameters) {\n\t    return PeakPicking.peakPicking(this, parameters);\n\t}\n\t\n\t/**\n\t * @function toJcamp(options)\n\t * This function creates a String that represents the given spectraData in the format JCAM-DX 5.0\n\t * The X,Y data can be compressed using one of the methods described in: \n\t * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\", \n\t *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n\t * @option encode: ['FIX','SQZ','DIF','DIFDUP','CVS','PAC'] (Default: 'FIX')\n\t * @option yfactor: The YFACTOR. It allows to compress the data by removing digits from the ordinate. (Default: 1)\n\t * @option type: [\"NTUPLES\", \"SIMPLE\"] (Default: \"SIMPLE\")\n\t * @option keep: A set of user defined parameters of the given SpectraData to be stored in the jcamp.\n\t * @example SD.toJcamp(spectraData,{encode:'DIFDUP',yfactor:0.01,type:\"SIMPLE\",keep:['#batchID','#url']});\n\t */ \n\tNMR.prototype.toJcamp=function(options) {\n\t     //@TODO Implement toJcamp filter\n\t     return \"NOT ImplementED\"\n\t}\n\t\n\t\n\tmodule.exports = NMR;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Implementation of the peak pickig method described by Cobas in:\n\t * A new approach to improving automated analysis of proton NMR spectra\n\t * through Global Spectral Deconvolution (GSD)\n\t * http://www.spectroscopyeurope.com/images/stories/ColumnPDFs/TD_23_1.pdf\n\t */\n\tvar JAnalyzer = __webpack_require__(6);\n\t/*var LM = require('ml-curve-fitting');\n\tvar Matrix = LM.Matrix;\n\tvar math = Matrix.algebra;*/\n\tvar GSD = __webpack_require__(7);\n\tvar extend = __webpack_require__(35);\n\t\n\tvar PeakPicking={\n\t    impurities:[],\n\t    maxJ:20,\n\t    defaultOptions:{nH:10,\n\t        clean:true,\n\t        realTop:false,\n\t        thresholdFactor:1,\n\t        compile:true,\n\t        integralFn:0,\n\t        optimize:true,\n\t        id:\"\"\n\t    },\n\t\n\t    peakPicking:function(spectrum, optionsEx){\n\t        var options = extend({}, this.defaultOptions, optionsEx);\n\t\n\t        var i, j, nHi, sum;\n\t\n\t        var noiseLevel = Math.abs(spectrum.getNoiseLevel())*(options.thresholdFactor);\n\t\n\t        //console.log(\"noiseLevel \"+noiseLevel);\n\t        var gsdOptions = extend({},\n\t            {noiseLevel: noiseLevel,\n\t                minMaxRatio:0.01,\n\t                broadRatio:0.0025,\n\t                smoothY:true,\n\t                nL:4,\n\t                sgOptions:{windowSize: 9, polynomial: 3}\n\t            },\n\t            options.gsdOptions);\n\t\n\t        var data = spectrum.getXYData();\n\t        var peakList = GSD.gsd(data[0],data[1], gsdOptions);\n\t        var peakList = GSD.post.joinBroadPeaks(peakList,{width:0.25});\n\t        if(options.optimize)\n\t            peakList = GSD.post.optimizePeaks(peakList,data[0],data[1],gsdOptions.nL,\"lorentzian\");\n\t\n\t        peakList = this.clearList(peakList, noiseLevel);\n\t        var signals = this.detectSignals(peakList, spectrum, options.nH, options.integralFn);\n\t        //console.log(JSON.stringify(signals));\n\t        //Remove all the signals with small integral\n\t        if(options.clean||false){\n\t            for(var i=signals.length-1;i>=0;i--){\n\t                if(signals[i].integralData.value<0.5) {\n\t                    signals.splice(i, 1);\n\t                }\n\t            }\n\t        }\n\t        if(options.compile||false){\n\t            for(i=0;i<signals.length;i++){\n\t                //console.log(\"Sum \"+signals[i].integralData.value);\n\t                JAnalyzer.compilePattern(signals[i]);\n\t                //console.log(signals[i])\n\t                if(signals[i].maskPattern&&signals[i].multiplicity!=\"m\"\n\t                    && signals[i].multiplicity!=\"\"){\n\t                    //Create a new signal with the removed peaks\n\t                    nHi = 0;\n\t                    sum=0;\n\t                    var peaksO = [];\n\t                    for(j=signals[i].maskPattern.length-1;j>=0;j--){\n\t                        sum+=this.area(signals[i].peaks[j]);\n\t\n\t                        if(signals[i].maskPattern[j]===false) {\n\t                            var peakR = signals[i].peaks.splice(j,1)[0];\n\t                            peaksO.push({x:peakR.x, y:peakR.intensity, width:peakR.width});\n\t                            //peaksO.push(peakR);\n\t                            signals[i].mask.splice(j,1);\n\t                            signals[i].mask2.splice(j,1);\n\t                            signals[i].maskPattern.splice(j,1);\n\t                            signals[i].nbPeaks--;\n\t                            nHi+=this.area(peakR);\n\t                        }\n\t                    }\n\t                    if(peaksO.length>0){\n\t                        nHi=nHi*signals[i].integralData.value/sum;\n\t                        signals[i].integralData.value-=nHi;\n\t                        var peaks1 = [];\n\t                        for(var j=peaksO.length-1;j>=0;j--)\n\t                            peaks1.push(peaksO[j]);\n\t                        var newSignals = this.detectSignals(peaks1, spectrum, nHi, options.integralFn);\n\t\n\t                        for(j=0;j<newSignals.length;j++)\n\t                            signals.push(newSignals[j]);\n\t                    }\n\t                }\n\t            }\n\t            //console.log(signals);\n\t            this.updateIntegrals(signals, options.nH);\n\t        }\n\t        signals.sort(function(a,b){\n\t            return b.delta1- a.delta1\n\t        });\n\t        //Remove all the signals with small integral\n\t        if(options.clean||false){\n\t            for(var i=signals.length-1;i>=0;i--){\n\t                //console.log(signals[i]);\n\t                if(signals[i].integralData.value<0.5) {\n\t                    signals.splice(i, 1);\n\t                }\n\t            }\n\t        }\n\t\n\t        for(var i=0;i<signals.length;i++){\n\t            signals[i].signalID = options.id+\"_\"+(i+1);\n\t            signals[i]._highlight=[signals[i].signalID];\n\t        }\n\t\n\t        return signals;\n\t\n\t        /*var frequency = spectrum.observeFrequencyX();//getParamDouble(\"$BF1\",400);\n\t        var imp = this.labelPeaks(peakList, solvent, frequency);\n\t        return [peakList,imp];\n\t        */\n\t        //return createSignals(peakList,nH);\n\t    },\n\t\n\t    clearList:function(peakList, threshold){\n\t        for(var i=peakList.length-1;i>=0;i--){\n\t            if(Math.abs(peakList[i].y)<threshold){\n\t                peakList.splice(i,1);\n\t            }\n\t        }\n\t        return peakList;\n\t    },\n\t\n\t\n\t    /**\n\t     * This method implements a non linear sampling of the spectrum. The point close to\n\t     * the critic points are more sampled than the other ones.\n\t     * @param spectrum\n\t     * @param peaks\n\t     * @param rowWise\n\t     */\n\t    sampling: function(spectrum, peaks, rowWise){\n\t        var i0, ie, ic,i, j,nbPoints;\n\t        var xy = []\n\t        if(i0>ie){\n\t            var tmp = i0;\n\t            i0 = ie;\n\t            ie = tmp;\n\t        }\n\t        //Non linear sampling for each peak.\n\t        for(i=0;i<peaks.length;i++){\n\t            var more = true;\n\t            var nL = 4;\n\t            while(more) {\n\t                i0 = spectrum.unitsToArrayPoint(peaks[i][0] - peaks[i][2] * nL);\n\t                ie = spectrum.unitsToArrayPoint(peaks[i][0] + peaks[i][2] * nL);\n\t                ic = spectrum.unitsToArrayPoint(peaks[i][0]);\n\t                if (i0 > ie) {\n\t                    tmp = i0;\n\t                    i0 = ie;\n\t                    ie = tmp;\n\t                }\n\t                i0 = i0 < 0 ? 0 : i0;\n\t                ie = ie >= spectrum.getNbPoints() ? spectrum.getNbPoints() - 1 : ie;\n\t\n\t                if (ie - i0 < 10) {\n\t                    for (j = i0; j <= ie; j++) {\n\t                        xy.push([spectrum.getX(j), spectrum.getY(j)]);\n\t                    }\n\t                    more = false;\n\t                }\n\t                else {\n\t                    xy.push([spectrum.getX(i0), spectrum.getY(i0)]);\n\t                    xy.push([spectrum.getX(ie), spectrum.getY(ie)]);\n\t                    if (nL > 0.5) {\n\t                        nL -= 0.5;\n\t                    }\n\t                    else {\n\t                        nL /= 2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        //console.log(xy);\n\t        xy.sort(function(a,b){\n\t            return a[0]-b[0];\n\t        });\n\t        //console.log(\"XX \"+xy.length);\n\t        var x=[],y=[];\n\t        var index =0;\n\t        if(rowWise){\n\t            x=[xy[0][0]],y=[xy[0][1]];\n\t            for(i=1;i<xy.length;i++){\n\t                if(x[index]!=xy[i][0]){\n\t                    x.push(xy[i][0]);\n\t                    y.push(xy[i][1]);\n\t                    index++;\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            x=[[xy[0][0]]],y=[[xy[0][1]]];\n\t            for(i=1;i<xy.length;i++){\n\t                if(x[index][0]!=xy[i][0]){\n\t                    x.push([xy[i][0]]);\n\t                    y.push([xy[i][1]]);\n\t                    index++;\n\t                }\n\t            }\n\t        }\n\t        return [x,y];\n\t\n\t    },\n\t\n\t    getVector: function(spectrum, from, to, rowWise){\n\t        var i0 = spectrum.unitsToArrayPoint(from);\n\t        var ie = spectrum.unitsToArrayPoint(to);\n\t        var x = [];\n\t        var y = [];\n\t        if(i0>ie){\n\t            var tmp = i0;\n\t            i0 = ie;\n\t            ie = tmp;\n\t        }\n\t        i0=i0<0?0:i0;\n\t        ie=ie>=spectrum.getNbPoints()?spectrum.getNbPoints()-1:ie;\n\t        for(var i=i0;i<ie;i+=10){\n\t            if(rowWise){\n\t                y.push(spectrum.getY(i));\n\t                x.push(spectrum.getX(i));\n\t            }\n\t            else{\n\t                y.push([spectrum.getY(i)]);\n\t                x.push([spectrum.getX(i)]);\n\t            }\n\t        }\n\t        return [x,y];\n\t    },\n\t\n\t\n\t\n\t    updateLimits : function(signal){\n\t        if(signal.multiplicity!=\"m\" && signal.multiplicity!=\"\"){\n\t            //Remove the integral of the removed peaks\n\t            var peaksO = signal.peaks;\n\t            var nbPeaks0 = peaksO.length, index = 0, factor = 0, toRemove = 0;\n\t\n\t            for(var i=0;i<nbPeaks0;i++){\n\t                if(signal.maskPattern[i]===false)\n\t                    toRemove+=this.area(peaksO[i]);\n\t                factor+= this.area(peaksO[i]);\n\t            }\n\t            factor=signal.integralData.value/factor;\n\t            signal.integralData.value-=toRemove*factor;\n\t        }\n\t        return signal.integralData.value;\n\t    },\n\t\n\t    updateIntegrals : function(signals, nH){\n\t        var sumIntegral = 0,i,sumObserved=0;\n\t        for(i=0;i<signals.length;i++){\n\t            sumObserved+=Math.round(signals[i].integralData.value);\n\t        }\n\t        if(sumObserved!=nH){\n\t\n\t            sumIntegral=nH/sumObserved;\n\t            for(i=0;i<signals.length;i++){\n\t                signals[i].integralData.value*=sumIntegral;\n\t            }\n\t        }\n\t    },\n\t\n\t    /*\n\t     {\n\t     \"nbPeaks\":1,\"multiplicity\":\"\",\"units\":\"PPM\",\"startX\":3.43505,\"assignment\":\"\",\n\t     \"pattern\":\"s\",\"stopX\":3.42282,\"observe\":400.08,\"asymmetric\":false,\n\t     \"delta1\":3.42752,\n\t     \"integralData\":{\"to\":3.43505,\"value\":590586504,\"from\":3.42282},\n\t     \"nucleus\":\"1H\",\n\t     \"peaks\":[{\"intensity\":60066147,\"x\":3.42752}]\n\t     }\n\t     */\n\t    detectSignals: function(peakList, spectrum, nH, integralType){\n\t\n\t        var frequency = spectrum.observeFrequencyX();\n\t        var signals = [];\n\t        var signal1D = {};\n\t        var prevPeak = {x:100000,y:0,width:0},peaks=null;\n\t        var rangeX = 16/frequency;//Peaks withing this range are considered to belongs to the same signal1D\n\t        var spectrumIntegral = 0,cs,sum, i,j;\n\t        //console.log(\"RangeX \"+rangeX);\n\t        for(i=0;i<peakList.length;i++){\n\t            //console.log(peakList[i]);\n\t            if(Math.abs(peakList[i].x-prevPeak.x)>rangeX){\n\t                //console.log(typeof peakList[i].x+\" \"+typeof peakList[i].width);\n\t                signal1D = {\"nbPeaks\":1,\"units\":\"PPM\",\n\t                    \"startX\":peakList[i].x+peakList[i].width,\n\t                    \"stopX\":peakList[i].x-peakList[i].width,\n\t                    \"multiplicity\":\"\",\"pattern\":\"\",\n\t                    \"observe\":frequency,\"nucleus\":\"1H\",\n\t                    \"integralData\":{\"from\":peakList[i].x-peakList[i].width*3,\n\t                                    \"to\":peakList[i].x+peakList[i].width*3\n\t                                    //\"value\":this.area(peakList[i])\n\t                    },\n\t                    \"peaks\":[]};\n\t                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n\t                signals.push(signal1D);\n\t                //spectrumIntegral+=this.area(peakList[i]);\n\t            }\n\t            else{\n\t                var tmp = peakList[i].x-peakList[i].width;\n\t                signal1D.stopX = Math.min(signal1D.stopX,tmp);\n\t                tmp = peakList[i].x+peakList[i].width;\n\t                signal1D.stopX = Math.max(signal1D.stopX,tmp);\n\t                signal1D.nbPeaks++;\n\t                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n\t                //signal1D.integralData.value+=this.area(peakList[i]);\n\t                signal1D.integralData.from = Math.min(signal1D.integralData.from, peakList[i].x-peakList[i].width*3);\n\t                signal1D.integralData.to = Math.max(signal1D.integralData.to,peakList[i].x+peakList[i].width*3);\n\t                //spectrumIntegral+=this.area(peakList[i]);\n\t            }\n\t            prevPeak = peakList[i];\n\t        }\n\t        //Normalize the integral to the normalization parameter and calculate cs\n\t        for(i=0;i<signals.length;i++){\n\t            peaks = signals[i].peaks;\n\t            var integral = signals[i].integralData;\n\t            cs = 0;\n\t            sum = 0;\n\t\n\t            for(var j=0;j<peaks.length;j++){\n\t                cs+=peaks[j].x*this.area(peaks[j]);//.intensity;\n\t                sum+=this.area(peaks[j]);\n\t            }\n\t            signals[i].delta1 = cs/sum;\n\t\n\t            if(integralType==0)\n\t                integral.value = sum;\n\t            else {\n\t                integral.value=spectrum.getArea(integral.from,integral.to);//*nH/spectrumIntegral;\n\t            }\n\t            spectrumIntegral+=integral.value;\n\t\n\t        }\n\t        for(var i=0;i<signals.length;i++){\n\t            //console.log(integral.value);\n\t            var integral = signals[i].integralData;\n\t            integral.value*=nH/spectrumIntegral;\n\t        }\n\t\n\t        return signals;\n\t    },\n\t\n\t    area: function(peak){\n\t        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n\t    },\n\t    /**\n\t     This function tries to determine which peaks belongs to common laboratory solvents\n\t     as trace impurities from DOI:10.1021/jo971176v. The only parameter of the table is\n\t     the solvent name.\n\t     */\n\t    labelPeaks:function(peakList, solvent, frequency){\n\t        var column = 0;\n\t        //console.log(this.impurities[0]);\n\t        for(column=4;column<this.impurities.length;column++){\n\t            //console.log(\"sss\".contains);\n\t            if(this.impurities[0][column].indexOf(solvent)>=0){\n\t                break;\n\t            }\n\t        }\n\t        //console.log(\"labelPeaks \"+column);\n\t        var nImpurities = this.impurities.length-1;\n\t        var nPeaks = peakList.length;\n\t        //Scores matrix\n\t        //console.log(nImpurities);\n\t        var scores = new Array(nImpurities);\n\t        var max = 0, diff=0, score=0;\n\t        var gamma = 0.2;//ppm\n\t        var impurityID=-1;\n\t        var prevImp = \"\";\n\t        var maxIntensity = 0,i;\n\t        for(var j=nPeaks-1;j>=0;j--){\n\t            if(peakList[j][1]>maxIntensity)\n\t                maxIntensity = peakList[j][1];\n\t        }\n\t\n\t        for(i=nImpurities-1;i>=0;i--){\n\t            if(this.impurities[i+1][0]!=prevImp){\n\t                impurityID++;\n\t                prevImp=this.impurities[i+1][0];\n\t            }\n\t\n\t            //impID, max, maxIndex, average\n\t            scores[i]=[impurityID,this.impurities[i+1][2],\n\t                this.impurities[i+1][3],0,[],0];\n\t            max = 0;\n\t            for(var j=nPeaks-1;j>=0;j--){\n\t                diff = 10000;//Big numnber\n\t                if(this.impurities[i+1][column]>0)\n\t                    diff = Math.abs(peakList[j][0]-this.impurities[i+1][column]);\n\t                if(diff<gamma*3){\n\t                    score=this.score(diff,gamma);\n\t                    if(score>max){\n\t                        max=score;\n\t                        scores[i][3]=max;\n\t                        scores[i][4]=[j];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        //Calculate the average score for each impurity set of signals\n\t        var prevIndex = -1, sum=0, count = 0;\n\t        var candidates=[];\n\t        var impuritiesPeaks = [];\n\t        var i=nImpurities-1;\n\t        while(i>=-1){\n\t            if(i==-1||scores[i][0]!=prevIndex&&prevIndex!=-1){\n\t                if(prevIndex!=-1){\n\t                    scores[i+1][5]=sum/count;\n\t                    //Now, lets chech the multiplicities\n\t                    if(scores[i+1][5]>0.9){\n\t                        //console.log(scores[i+1][0]+\" SS \");\n\t                        score=this.updateScore(candidates, peakList, maxIntensity, frequency);\n\t                        if(score>0.9){\n\t                            //console.log(candidates);\n\t                            //TODO: Remove peaks and add it do impuritiesPeaks\n\t                            for(var j=0;j<candidates.length;j++){\n\t                                for(var k=candidates[j][4].length-1;k>=0;k--){\n\t                                    impuritiesPeaks.push(peakList[candidates[j][4][k]]);\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t                if(i>=0){\n\t                    prevIndex=scores[i][0];\n\t                    sum=scores[i][3];\n\t                    count=1;\n\t                    candidates=[scores[i]];\n\t                }\n\t\n\t            }else{\n\t                prevIndex=scores[i][0];\n\t                candidates.push(scores[i]);\n\t                sum+=scores[i][3];\n\t                count++;\n\t            }\n\t            i--;\n\t        }\n\t        //console.log(impuritiesPeaks.length);\n\t\n\t        return impuritiesPeaks;\n\t    },\n\t    /**\n\t     Updates the score that a given impurity is present in the current spectrum. In this part I would expect\n\t     to have into account the multiplicity of the signal. Also the relative intensity of the signals.\n\t     THIS IS the KEY part of the algorithm!!!!!!!!!\n\t     */\n\t    updateScore:function(candidates, peakList, maxIntensity, frequency){\n\t        //You may do it to avoid this part.\n\t        //return 1;\n\t\n\t        //Check the multiplicity\n\t        var mul = \"\";\n\t        var j = 0,index, k, maxJppm=this.maxJ/frequency;\n\t        var min=0, indexMin=0, score=0;\n\t        for(var i=candidates.length-1;i>=0;i--){\n\t            mul = candidates[i][1];\n\t            j = candidates[i][2];\n\t            //console.log(candidates[i][4]);\n\t            index = candidates[i][4][0];\n\t            //console.log(peakList[index][0]+\" \"+mul+\" \"+j+\" \"+index);\n\t            //I guess we should try to identify the pattern in the nearby.\n\t            if(mul.indexOf(\"sep\")>=0){\n\t                if(peakList[index][1]>maxIntensity*0.33){\n\t                    candidates.splice(i,1);//Not a candidate anymore.\n\t                }\n\t            }else{\n\t                if(mul.indexOf(\"s\")>=0||mul.indexOf(\"X\")>=0){\n\t                    k=index-1;\n\t                    min=peakList[index][1];\n\t                    indexMin=index;\n\t                    while(k>=0&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n\t                        if(peakList[k][1]<min){\n\t                            min=peakList[k][1];\n\t                            indexMin=k;\n\t                        }\n\t                        k--;\n\t                    }\n\t                    k=index+1;\n\t                    while(k<peakList.length&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n\t                        if(peakList[k][1]<min){\n\t                            min=peakList[k][1];\n\t                            indexMin=k;\n\t                        }\n\t                        k++;\n\t                    }\n\t                    candidates[i][4][0]=indexMin;\n\t                    score+=1;\n\t                }\n\t            }\n\t            if(mul.indexOf(\"d\")>=0){\n\t                if(index>0&&index<peakList.length-1){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index-1][0])*frequency-j);\n\t                    if(thisJ1<2||thisJ2<2||thisJ3<2){\n\t                        if(thisJ1<thisJ2){\n\t                            if(thisJ1<thisJ3){\n\t                                candidates[i][4]=[index-1,index];\n\t                                score+=1;\n\t                            }\n\t                            else{\n\t                                candidates[i][4]=[index-1,index+1];\n\t                                score+=1;\n\t                            }\n\t                        }\n\t                        else{\n\t                            if(thisJ2<thisJ3){\n\t                                candidates[i][4]=[index,index+1];\n\t                                score+=1;\n\t                            }\n\t                            else{\n\t                                candidates[i][4]=[index-1,index+1];\n\t                                score+=1;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            if(mul.indexOf(\"t\")>=0){\n\t                //console.log(\"here\");\n\t                if(index>0&&index<peakList.length-1){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ4 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index+2][0])*frequency-j);\n\t                    //console.log(\"XX \"+thisJ1+\" \"+thisJ2);\n\t                    if(thisJ1<2){\n\t                        candidates[i][4]=[index-1, index];\n\t                        score+=0.5;\n\t                    }\n\t                    if(thisJ2<2){\n\t                        candidates[i][4].push(index+1);\n\t                        score+=0.5;\n\t                    }\n\t                    if(thisJ3<2){\n\t                        candidates[i][4].push(index+2);\n\t                        score+=0.5;\n\t                    }\n\t\n\t                }\n\t            }\n\t            if(mul.indexOf(\"q\")>=0){\n\t                if(index>1&&index<peakList.length-2){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-2][0]-peakList[index-1][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ4= Math.abs(Math.abs(peakList[index+2][0]-peakList[index+1][0])*frequency-j);\n\t                    if(thisJ1<2){\n\t                        candidates[i][4].push(index-2);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ2<2){\n\t                        candidates[i][4].push(index-1);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ3<2){\n\t                        candidates[i][4].push(index+1);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ4<2){\n\t                        candidates[i][4].push(index+2);\n\t                        score+=0.25;\n\t                    }\n\t                }\n\t            }\n\t\n\t\n\t        }\n\t\n\t        //console.log(score/candidates.length+ \" -> \"+candidates);\n\t        //Lets remove the candidates to be impurities.\n\t        //It would be equivalent to mark the peaks as valid again\n\t        if(score/candidates.length < 0.5){\n\t            for(var i=candidates.length-1;i>=0;i--){\n\t                candidates.splice(i,1);\n\t            }\n\t            return 0;\n\t        }\n\t        //Check the relative intensity\n\t        return 1;\n\t    },\n\t\n\t    score:function(value, gamma){\n\t        return Math.exp(-Math.pow(value/gamma,2)/2.0);\n\t    },\n\t    /**\n\t     This function joint all the nearby peaks into single signals. We may try to\n\t     determine the J-couplings and the multiplicity here.\n\t     */\n\t    createSignals:function(){\n\t\n\t    }\n\t\n\t}\n\t\n\tmodule.exports = PeakPicking;\n\t\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This library implements the J analyser described by Cobas et al in the paper:\n\t * A two-stage approach to automatic determination of 1H NMR coupling constants\n\t * Created by acastillo on 4/5/15.\n\t */\n\tvar JAnalyzer = {\n\t    pascalTriangle : [[0],[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]],\n\t    patterns: [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"],\n\t    symRatio : 1.5,\n\t    maxErrorIter1 : 2.5,//Hz\n\t    maxErrorIter2 : 1,//Hz\n\t    DEBUG : false,\n\t\n\t    /**\n\t     * The compilation process implements at the first stage a normalization procedure described by Golotvin et al.\n\t     * embedding in peak-component-counting method described by Hoyes et al.\n\t     * @param signal\n\t     */\n\t    compilePattern : function(signal){\n\t        if(this.DEBUG)console.log(\"Debugin...\");\n\t\n\t        signal.multiplicity=\"m\";//By default the multiplicity is massive\n\t        // 1.1 symmetrize\n\t        // It will add a set of peaks(signal.peaksComp) to the signal that will be used during\n\t        // the compilation process. The unit of those peaks will be in Hz\n\t        signal.symRank = this.symmetrizeChoiseBest(signal,this.maxErrorIter1,1);\n\t        signal.asymmetric = true;\n\t       // console.log(signal.delta1+\" \"+signal.symRank);\n\t        //Is the signal symmetric?\n\t        if(signal.symRank>=0.95&&signal.peaksComp.length<32){\n\t            if(this.DEBUG)console.log(signal.delta1+ \" nbPeaks \"+signal.peaksComp.length);\n\t            signal.asymmetric = false;\n\t            var i,j,min,max,k=1,P1,Jc=[],n2,maxFlagged;\n\t            //Loop over the possible number of coupling contributing to the multiplet\n\t            for(var n=0;n<9;n++){\n\t                if(this.DEBUG)console.log(\"Trying \"+n+\" couplings\");\n\t                //1.2 Normalize. It makes a deep copy of the peaks before to modify them.\n\t                peaks = this.normalize(signal,n);\n\t                //signal.peaksCompX = peaks;\n\t                var validPattern = false;//It will change to true, when we find the good patter\n\t                //Lets check if the signal could be a singulet.\n\t                if(peaks.length == 1 && n === 0){\n\t                    validPattern=true;\n\t                }\n\t                else{\n\t                    if(peaks.length <= 1){\n\t                        continue;\n\t                    }\n\t                }\n\t                // 1.3 Establish a range for the Heights Hi [peaks.intensity*0.85,peaks.intensity*1.15];\n\t                var ranges = this.getRanges(peaks);\n\t                n2 = Math.pow(2,n);\n\t\n\t                if(this.DEBUG){\n\t                    console.log(\"ranges: \"+JSON.stringify(ranges));\n\t                    console.log(\"Target sum: \"+n2);\n\t                }\n\t\n\t                // 1.4 Find a combination of integer heights Hi, one from each Si, that sums to 2^n.\n\t                var heights = null;\n\t                while(!validPattern&&(heights = this.getNextCombination(ranges, n2))!==null){\n\t\n\t                    if(this.DEBUG){\n\t                        console.log(\"Possible pattern found with \"+n+\" couplings!!!\");\n\t                        console.log(heights);\n\t                    }\n\t                    // 2.1 Number the components of the multiplet consecutively from 1 to 2n,\n\t                    //starting at peak 1\n\t                    var numbering = new Array(heights.length);\n\t                    k=1;\n\t                    for(i=0;i<heights.length;i++){\n\t                        numbering[i]=new Array(heights[i]);\n\t                        for(j=0;j<heights[i];j++){\n\t                            numbering[i][j]=k++;\n\t                        }\n\t                    }\n\t                    if(this.DEBUG){\n\t                        console.log(\"Numbering: \"+JSON.stringify(numbering));\n\t                    }\n\t                    Jc = []; //The array to store the detected j-coupling\n\t                    // 2.2 Set j = 1; J1 = P2 - P1. Flag components 1 and 2 as accounted for.\n\t                    j=1;\n\t                    Jc.push(peaks[1].x-peaks[0].x);\n\t                    P1 = peaks[0].x;\n\t                    numbering[0].splice(0,1);//Flagged\n\t                    numbering[1].splice(0,1);//Flagged\n\t                    k=1;\n\t                    var nFlagged = 2;\n\t                    maxFlagged = Math.pow(2,n)-1;\n\t                    while(Jc.length<n&&nFlagged<maxFlagged&&k<peaks.length){\n\t                        if(this.DEBUG){\n\t                            console.log(\"New Jc\"+JSON.stringify(Jc));\n\t                            console.log(\"Aval. numbering \"+JSON.stringify(numbering));\n\t                        }\n\t                        // 4.1. Increment j. Set k to the number of the first unflagged component.\n\t                        j++;\n\t                        while(k<peaks.length&&numbering[k].length===0){\n\t                            k++;\n\t                        }\n\t                        if(k<peaks.length){\n\t                            // 4.2 Jj = Pk - P1.\n\t                            Jc.push(peaks[k].x-peaks[0].x);\n\t                            //Flag component k and, for each sum of the...\n\t                            numbering[k].splice(0,1);//Flageed\n\t                            nFlagged++;\n\t                            //Flag the other components of the multiplet\n\t                            for(var u=2;u<=j;u++){\n\t                                //TODO improve those loops\n\t                                var jSum = 0;\n\t                                for(i=0;i<u;i++){\n\t                                    jSum+=Jc[i];\n\t                                }\n\t                                for(i=1;i<numbering.length;i++){\n\t                                    //Maybe 0.25 Hz is too much?\n\t                                    if(Math.abs(peaks[i].x-(P1+jSum))<0.25){\n\t                                        numbering[i].splice(0,1);//Flageed\n\t                                        nFlagged++;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                    //Calculate the ideal patter by using the extracted j-couplings\n\t                    var pattern = this.idealPattern(Jc);\n\t                    //Compare the ideal pattern with the proposed intensities.\n\t                    // All the intensities have to match to accept the multiplet\n\t                    validPattern = true;\n\t                    for(i=0;i<pattern.length;i++){\n\t                        if(pattern[i].intensity != heights[i])\n\t                            validPattern = false;\n\t                    }\n\t                    //More verbosity of the process\n\t                    if(this.DEBUG){\n\t                        console.log(\"Jc \"+JSON.stringify(Jc));\n\t                        console.log(\"Heights \"+JSON.stringify(heights));\n\t                        console.log(\"pattern \"+JSON.stringify(pattern));\n\t                        console.log(\"Valid? \"+validPattern);\n\t                    }\n\t                }\n\t                //If we found a valid pattern we should inform about the pattern.\n\t                if(validPattern){\n\t                    this.updateSignal(signal,Jc);\n\t                }\n\t            }\n\t        }\n\t\n\t        //Before to return, change the units of peaksComp from Hz to PPM again\n\t        for(i=0;i<signal.peaksComp.length;i++){\n\t            signal.peaksComp[i].x/=signal.observe;\n\t        }\n\t    },\n\t\n\t    updateSignal : function(signal, Jc){\n\t        //Update the limits of the signal\n\t        var peaks = signal.peaksComp;//Always in Hz\n\t        var nbPeaks = peaks.length;\n\t        signal.startX=peaks[0].x/signal.observe+peaks[0].width;\n\t        signal.stopX=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width;\n\t        signal.integralData.to=peaks[0].x/signal.observe+peaks[0].width*3;\n\t        signal.integralData.from=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width*3;\n\t\n\t        //Compile the pattern and format the constant couplings\n\t        signal.maskPattern = signal.mask2;\n\t        signal.multiplicity = this.abstractPattern(signal,Jc);\n\t        signal.pattern=signal.multiplicity;//Our library depends on this parameter, but it is old\n\t        //console.log(signal);\n\t        if(this.DEBUG)\n\t            console.log(\"Final j-couplings: \"+JSON.stringify(Jc));\n\t    },\n\t\n\t    /**\n\t     * Returns the multiplet in the compact format\n\t     */\n\t    abstractPattern : function(signal,Jc){\n\t        var tol = 0.05,i, pattern = \"\", cont = 1;\n\t        var newNmrJs = [];\n\t        if(Jc&&Jc.length>0){\n\t            Jc.sort(function(a,b){\n\t                return a-b;\n\t            });\n\t            for(i=0;i<Jc.length-1;i++){\n\t                if(Math.abs(Jc[i]-Jc[i+1])<tol){\n\t                    cont++;\n\t                }\n\t                else{\n\t                    newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n\t                    pattern+=this.patterns[cont];\n\t                    cont=1;\n\t                }\n\t            }\n\t            newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n\t            pattern+=this.patterns[cont];\n\t            signal.nmrJs =  newNmrJs;\n\t        }\n\t        else{\n\t            pattern=\"s\";\n\t            if(Math.abs(signal.startX-signal.stopX)*signal.observe>16){\n\t                pattern=\"bs\"\n\t            }\n\t        }\n\t        return pattern;\n\t    },\n\t\n\t    /**\n\t     *This function creates an ideal pattern from the given J-couplings\n\t     */\n\t    idealPattern : function(Jc){\n\t        var hsum = Math.pow(2,Jc.length),i,j;\n\t        var pattern = [{x:0,intensity:hsum}];\n\t        //To split the initial height\n\t        for(i=0;i<Jc.length;i++){\n\t            for(j=pattern.length-1;j>=0;j--){\n\t                pattern.push({x:pattern[j].x+Jc[i]/2,\n\t                    intensity:pattern[j].intensity/2});\n\t                pattern[j].x = pattern[j].x-Jc[i]/2;\n\t                pattern[j].intensity = pattern[j].intensity/2;\n\t            }\n\t        }\n\t        //To sum the heights in the same positions\n\t        pattern.sort(function compare(a,b) { return a.x-b.x});\n\t        for(j=pattern.length-2;j>=0;j--){\n\t            if(Math.abs(pattern[j].x-pattern[j+1].x)<0.1){\n\t                pattern[j].intensity+= pattern[j+1].intensity\n\t                pattern.splice(j+1,1);\n\t            }\n\t        }\n\t        return pattern;\n\t    },\n\t\n\t    /**\n\t     * Find a combination of integer heights Hi, one from each Si, that sums to 2n.\n\t     */\n\t    getNextCombination : function(ranges, value){\n\t        var half = Math.ceil(ranges.values.length/2), lng = ranges.values.length;\n\t        var sum = 0,i;\n\t        while(sum!=value){\n\t            //Update the indexes to point at the next possible combination\n\t            ok = false;\n\t            var leftIndex = 0;\n\t            while(!ok){\n\t                ok = true;\n\t                ranges.currentIndex[ranges.active]++;\n\t                if(ranges.currentIndex[ranges.active]>=ranges.values[ranges.active].length){\n\t                    //In this case, there is no more possible combinations\n\t                    if(ranges.active+1==half){\n\t                        return null;\n\t                    }\n\t                    else{\n\t                        //If this happens we need to try the next active peak\n\t                        ranges.currentIndex[ranges.active]=0;\n\t                        ok=false;\n\t                        ranges.active++;\n\t                    }\n\t                }\n\t                else{\n\t                    ranges.active=0;\n\t                }\n\t            }\n\t            // Sum the heights for this combination\n\t            sum=0;\n\t            for(i=0;i<half;i++){\n\t                sum+= ranges.values[i][ranges.currentIndex[i]]*2;\n\t            }\n\t            if(ranges.values.length%2!==0){\n\t                sum-= ranges.values[half-1][ranges.currentIndex[half-1]];\n\t            }\n\t            if(this.DEBUG){\n\t                console.log(ranges.currentIndex);\n\t                console.log(sum+\" \"+value);\n\t            }\n\t        }\n\t        //If the sum is equal to the expected value, fill the array to return\n\t        if(sum==value){\n\t            var heights = new Array(lng);\n\t            for(i=0;i<half;i++){\n\t                heights[i] = ranges.values[i][ranges.currentIndex[i]];\n\t                heights[lng-i-1] = ranges.values[i][ranges.currentIndex[i]];\n\t            }\n\t            return heights;\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /**\n\t     * This function generates the possible values that each peak can contribute\n\t     * to the multiplet.\n\t     * @param peaks\n\t     * @returns {{values: Array, currentIndex: Array, active: number}}\n\t     */\n\t    getRanges : function(peaks){\n\t        var ranges = new Array(peaks.length);\n\t        var currentIndex = new Array(peaks.length);\n\t        var min,max;\n\t        ranges[0] = [1];\n\t        ranges[peaks.length-1] = [1];\n\t        currentIndex[0]=-1;\n\t        currentIndex[peaks.length-1] = 0;\n\t        for(var i=1;i<peaks.length-1;i++){\n\t            min = Math.round(peaks[i].intensity*0.85);\n\t            max = Math.round(peaks[i].intensity*1.15);\n\t            ranges[i] =[];\n\t            for(var j=min;j<=max;j++){\n\t                ranges[i].push(j);\n\t            }\n\t            currentIndex[i]=0;\n\t        }\n\t        return {values:ranges, currentIndex:currentIndex, active:0};\n\t    },\n\t    /**\n\t     * Performs a symmetrization of the signal by using different aproximations to the center.\n\t     * It will return the result of the symmetrization that removes less peaks from the signal\n\t     * @param signal\n\t     * @param maxError\n\t     * @param iteration\n\t     * @returns {*}\n\t     */\n\t    symmetrizeChoiseBest : function(signal,maxError,iteration){\n\t        var symRank1 = this.symmetrize(signal,maxError,iteration);\n\t        var tmpPeaks = signal.peaksComp;\n\t        var tmpMask = signal.mask;\n\t        var cs = signal.delta1;\n\t        signal.delta1 = (signal.peaks[0].x+signal.peaks[signal.peaks.length-1].x)/2;\n\t        var symRank2 = this.symmetrize(signal,maxError,iteration);\n\t        if(signal.peaksComp.length>tmpPeaks.length)\n\t            return symRank2;\n\t        else{\n\t            signal.delta1 = cs;\n\t            signal.peaksComp = tmpPeaks;\n\t            signal.mask = tmpMask;\n\t            return symRank1;\n\t        }\n\t\n\t    },\n\t    /**\n\t     * This function will return a set of symmetric peaks that will\n\t     * be the enter point for the patter compilation process.\n\t     */\n\t    symmetrize : function(signal, maxError, iteration){\n\t        //Before to symmetrize we need to keep only the peaks that possibly conforms the multiplete\n\t        var max, min, avg, ratio, avgWidth;\n\t        var peaks = new Array(signal.peaks.length);\n\t        //Make a deep copy of the peaks and convert PPM ot HZ\n\t        for(j=0;j<peaks.length;j++){\n\t            peaks[j]= {x:signal.peaks[j].x*signal.observe,\n\t                intensity:signal.peaks[j].intensity,\n\t                width:signal.peaks[j].width};\n\t        }\n\t        //Join the peaks that are closer than 0.25 Hz\n\t        for(j=peaks.length-2;j>=0;j--){\n\t            if(Math.abs(peaks[j].x-peaks[j+1].x)<0.25){\n\t                peaks[j].x = (peaks[j].x*peaks[j].intensity+peaks[j+1].x*peaks[j+1].intensity);\n\t                peaks[j].intensity = peaks[j].intensity+peaks[j+1].intensity;\n\t                peaks[j].x/=peaks[j].intensity;\n\t                peaks[j].intensity/=2;\n\t                peaks[j].width+=peaks[j+1].width;\n\t                peaks.splice(j+1,1);\n\t            }\n\t        }\n\t        signal.peaksComp = peaks;\n\t        var nbPeaks = peaks.length;\n\t        var mask = new Array(nbPeaks);\n\t        signal.mask = mask;\n\t        var left=0, right=peaks.length-1, cs = signal.delta1*signal.observe, middle = [(peaks[0].x+peaks[nbPeaks-1].x)/2,1];\n\t        maxError = this.error(Math.abs(cs-middle[0]));\n\t        var heightSum = 0;\n\t        //We try to symmetrize the extreme peaks. We consider as candidates for symmetricing those which have\n\t        //ratio smaller than 3\n\t        for(var i=0;i<nbPeaks;i++){\n\t            mask[i]= true;\n\t            heightSum+=signal.peaks[i].intensity;\n\t        }\n\t\n\t        while(left<=right){\n\t            mask[left] = true;\n\t            mask[right] = true;\n\t            if(left==right){\n\t                if(nbPeaks>2&&Math.abs(peaks[left].x-cs)>maxError){\n\t                    mask[left] = false;\n\t                }\n\t            }\n\t            else{\n\t                max = Math.max(peaks[left].intensity,peaks[right].intensity);\n\t                min = Math.min(peaks[left].intensity,peaks[right].intensity);\n\t                ratio = max/min;\n\t                if(ratio>this.symRatio){\n\t                    if(peaks[left].intensity==min){\n\t                        mask[left] = false;\n\t                        right++;\n\t                    }\n\t                    else{\n\t                        mask[right] = false;\n\t                        left--;\n\t                    }\n\t                }\n\t                else{\n\t                    var diffL = Math.abs(peaks[left].x-cs);\n\t                    var diffR = Math.abs(peaks[right].x-cs);\n\t\n\t                    if(Math.abs(diffL-diffR)<maxError){\n\t                        //avg = (peaks[left].intensity+peaks[right].intensity)/2;\n\t                        avg = Math.min(peaks[left].intensity,peaks[right].intensity);\n\t                        avgWidth = Math.min(peaks[left].width,peaks[right].width);\n\t                        peaks[left].intensity=peaks[right].intensity=avg;\n\t                        peaks[left].width=peaks[right].width=avgWidth;\n\t                        middle=[middle[0]+((peaks[right].x+peaks[left].x)/2), middle[1]+1];\n\t                    }\n\t                    else{\n\t                        if(Math.max(diffL,diffR)==diffR){\n\t                            mask[right] = false;\n\t                            left--;\n\t                        }\n\t                        else{\n\t                            mask[left] = false;\n\t                            right++;\n\t                        }\n\t                    }\n\t                    if(this.DEBUG){\n\t                        console.log(\"MaxError: \"+maxError+\" \"+middle[0]+\" \"+middle[1]);\n\t                        console.log(iteration+\" CS: \"+cs+\" Hz \"+cs/signal.observe+\" PPM\");\n\t                        console.log(\"Middle: \"+(middle[0]/middle[1])+\" Hz \"+(middle[0]/middle[1])/signal.observe+\" PPM\");\n\t                        console.log(diffL+ \" \"+diffR);\n\t                        console.log(Math.abs(diffL-diffR));\n\t                        console.log(JSON.stringify(peaks));\n\t                        console.log(JSON.stringify(mask));\n\t                    }\n\t                }\n\t            }\n\t            left++;\n\t            right--;\n\t            //Only alter cs if it is the first iteration of the sym process.\n\t            if(iteration==1){\n\t                cs = this.chemicalShift(peaks, mask);\n\t                //There is not more available peaks\n\t                if(isNaN(cs)){ return 0;}\n\t            }\n\t            maxError = this.error(Math.abs(cs-middle[0]/middle[1]));\n\t        }\n\t        //To remove the weak peaks and recalculate the cs\n\t        for(i=nbPeaks-1;i>=0;i--){\n\t            if(mask[i]===false){\n\t                peaks.splice(i,1);\n\t            }\n\t        }\n\t        cs = this.chemicalShift(peaks);\n\t        if(isNaN(cs)){ return 0;}\n\t        signal.delta1 = cs/signal.observe;\n\t        //Now, the peak should be symmetric in heights, but we need to know if it is symmetric in x\n\t        var symFactor = 0,weight = 0;\n\t        if(peaks.length>1){\n\t            for(i=Math.ceil(peaks.length/2)-1;i>=0;i--){\n\t                symFactor+=(3+Math.min(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))\n\t                /(3+Math.max(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))*peaks[i].intensity;\n\t                weight+=peaks[i].intensity;\n\t            }\n\t            symFactor/=weight;\n\t        }\n\t        else{\n\t            if(peaks.length==1)\n\t                symFactor=1;\n\t        }\n\t        var newSumHeights = 0;\n\t        for(i=0;i<peaks.length;i++){\n\t            newSumHeights+=peaks[i].intensity;\n\t        }\n\t        symFactor-=(heightSum-newSumHeights)/heightSum*0.12; //Removed peaks penalty\n\t        if(this.DEBUG){\n\t            console.log(\"Penalty \"+(heightSum-newSumHeights)/heightSum*0.12);\n\t            console.log(\"cs: \"+(cs/signal.observe)+\" symFactor: \"+symFactor);\n\t        }\n\t        //Sometimes we need a second opinion after the first symmetrization.\n\t        if(symFactor>0.8&&symFactor<0.97&&iteration<2){\n\t            return this.symmetrize(signal, this.maxErrorIter2, 2);\n\t        }{\n\t            //Center the given pattern at cs and symmetrize x\n\t            if(peaks.length>1) {\n\t                var weight = 0, dxi;\n\t                for (i = Math.ceil(peaks.length / 2) - 1; i >= 0; i--) {\n\t                    dxi = (peaks[i].x - peaks[peaks.length - 1 - i].x)/2.0;\n\t                    peaks[i].x =cs+dxi;\n\t                    peaks[peaks.length - 1 - i].x=cs-dxi;\n\t                }\n\t            }\n\t        }\n\t        return symFactor;\n\t    },\n\t\n\t    error : function(value){\n\t        var maxError = value*2.5;\n\t        if(maxError<0.75)\n\t            maxError = 0.75;\n\t        if(maxError > 3)\n\t            maxError = 3;\n\t        return maxError;\n\t    },\n\t    /**\n\t     * 2 stages normalizarion of the peaks heights to Math.pow(2,n).\n\t     * Creates a new mask with the peaks that could contribute to the multiplete\n\t     * @param signal\n\t     * @param n\n\t     * @returns {*}\n\t     */\n\t    normalize : function(signal, n){\n\t        //Perhaps this is slow\n\t        var peaks = JSON.parse(JSON.stringify(signal.peaksComp));\n\t        var norm = 0,norm2=0,i;//Math.pow(2,n);\n\t        for(i=0;i<peaks.length;i++){\n\t            norm+= peaks[i].intensity;\n\t        }\n\t        norm=Math.pow(2,n)/norm;\n\t        signal.mask2 = JSON.parse(JSON.stringify(signal.mask));\n\t        //console.log(\"Mask0 \"+JSON.stringify(signal.mask2));\n\t        var index=signal.mask2.length-1;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            peaks[i].intensity*= norm;\n\t            while(index>=0&&signal.mask2[index]===false)\n\t                index--;\n\t            if(peaks[i].intensity<0.75){\n\t                if(this.DEBUG)\n\t                    console.log(\"Peak \"+i+\" does not seem to belong to this multiplet \"+peaks[i].intensity);\n\t                peaks.splice(i,1);\n\t                signal.mask2[index]=false;\n\t            }\n\t            else{\n\t                norm2+= peaks[i].intensity;\n\t            }\n\t            index--;\n\t        }\n\t        norm2=Math.pow(2,n)/norm2;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            peaks[i].intensity*= norm2;\n\t        }\n\t        //console.log(\"Mask1 \"+JSON.stringify(signal.mask2));\n\t        if(this.DEBUG) console.log(JSON.stringify(peaks));\n\t        return peaks;\n\t    },\n\t\n\t    /**\n\t     * Calculates the chemical shift as the weighted sum of the peaks\n\t     * @param peaks\n\t     * @param mask\n\t     * @returns {number}\n\t     */\n\t    chemicalShift : function(peaks, mask){\n\t        var sum=0,cs= 0, i, area;\n\t        if(mask){\n\t            for(i=0;i<peaks.length;i++){\n\t                //console.log(mask[i]);\n\t                if(mask[i]===true){\n\t                    area = this.area(peaks[i]);\n\t                    sum+=area;\n\t                    cs+=area*peaks[i].x;\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            for(i=0;i<peaks.length;i++){\n\t                area = this.area(peaks[i]);\n\t                sum+=area;\n\t                cs+=area*peaks[i].x;\n\t            }\n\t        }\n\t        return cs/sum;\n\t    },\n\t\n\t    area: function(peak){\n\t        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n\t    }\n\t}\n\t\n\tmodule.exports = JAnalyzer;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\tmodule.exports.post = __webpack_require__(8);\n\tmodule.exports.gsd = __webpack_require__(31);\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 9/6/15.\n\t */\n\tvar Opt = __webpack_require__(9);\n\t\n\tfunction sampleFunction(from, to, x, y, lastIndex){\n\t    var nbPoints = x.length;\n\t    var sampleX = [];\n\t    var sampleY = [];\n\t    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n\t    if(direction==-1){\n\t        lastIndex[0]= x.length-1;\n\t    }\n\t\n\t    var delta = Math.abs(to-from)/2;\n\t    var mid = (from+to)/2;\n\t    var stop = false;\n\t    var index = lastIndex[0];\n\t    while(!stop&&index<nbPoints&&index>=0){\n\t        if(Math.abs(x[index]-mid)<=delta){\n\t            sampleX.push(x[index]);\n\t            sampleY.push(y[index]);\n\t            index+=direction;\n\t        }\n\t        //It is outside the range.\n\t        else{\n\t\n\t            if(Math.sign(mid-x[index])==1){\n\t                //We'll reach the mid going in the current direction\n\t                index+=direction;\n\t            }\n\t            else{\n\t                //There is not more peaks in the current range\n\t                stop=true;\n\t            }\n\t        }\n\t        //console.log(sampleX);\n\t    }\n\t    lastIndex[0]=index;\n\t    return [sampleX, sampleY];\n\t}\n\t\n\tfunction optimizePeaks(peakList,x,y,n, fnType){\n\t    var i, j, lastIndex=[0];\n\t    var groups = groupPeaks(peakList,n);\n\t    var result = [];\n\t    var factor = 1;\n\t    if(fnType==\"gaussian\")\n\t        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n\t    for(i=0;i<groups.length;i++){\n\t        var peaks = groups[i].group;\n\t        if(peaks.length>1){\n\t            //Multiple peaks\n\t            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n\t            //console.log(\"here1\");\n\t            //console.log(groups[i].limits);\n\t            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n\t            //console.log(sampling);\n\t            if(sampling[0].length>5){\n\t                var error = peaks[0].width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                var optPeaks = [];\n\t                if(fnType==\"gaussian\")\n\t                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                for(j=0;j<optPeaks.length;j++){\n\t                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            //Single peak\n\t            peaks = peaks[0];\n\t            var sampling = sampleFunction(peaks.x-n*peaks.width,\n\t                peaks.x+n*peaks.width,x,y,lastIndex);\n\t            //console.log(\"here2\");\n\t            //console.log(groups[i].limits);\n\t            if(sampling[0].length>5){\n\t                var error = peaks.width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n\t                var optPeak = [];\n\t                if(fnType==\"gaussian\")\n\t                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n\t            }\n\t        }\n\t\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction groupPeaks(peakList,nL){\n\t    var group = [];\n\t    var groups = [];\n\t    var i, j;\n\t    var limits = [peakList[0].x,nL*peakList[0].width];\n\t    var upperLimit, lowerLimit;\n\t    //Merge forward\n\t    for(i=0;i<peakList.length;i++){\n\t        //If the 2 things overlaps\n\t        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n\t            //Add the peak to the group\n\t            group.push(peakList[i]);\n\t            //Update the group limits\n\t            upperLimit = limits[0]+limits[1];\n\t            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n\t                upperLimit = peakList[i].x+nL*peakList[i].width;\n\t            }\n\t            lowerLimit = limits[0]-limits[1];\n\t            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n\t                lowerLimit = peakList[i].x-nL*peakList[i].width;\n\t            }\n\t            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t        }\n\t        else{\n\t            groups.push({limits:limits,group:group});\n\t            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n\t            group=[peakList[i]];\n\t            limits = [peakList[i].x,nL*peakList[i].width];\n\t        }\n\t    }\n\t    groups.push({limits:limits,group:group});\n\t    //Merge backward\n\t    for(i =groups.length-2;i>=0;i--){\n\t        //The groups overlaps\n\t        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n\t            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n\t            for(j=0;j<groups[i+1].group.length;j++){\n\t                groups[i].group.push(groups[i+1].group[j]);\n\t            }\n\t            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n\t            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n\t                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n\t            }\n\t            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n\t            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n\t                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n\t            }\n\t            //console.log(limits);\n\t            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t            groups.splice(i+1,1);\n\t        }\n\t    }\n\t    return groups;\n\t}\n\t/**\n\t * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n\t * @param peakList\n\t * @param options\n\t */\n\tfunction joinBroadPeaks(peakList, options){\n\t    var width = options.width;\n\t    var broadLines=[];\n\t    //Optimize the possible broad lines\n\t    var max=0, maxI=0,count=1;\n\t    var isPartOf = false;\n\t    for(var i=peakList.length-1;i>=0;i--){\n\t        if(peakList[i].soft){\n\t            broadLines.push(peakList.splice(i,1)[0]);\n\t        }\n\t    }\n\t    //Push a feak peak\n\t    broadLines.push({x:Number.MAX_VALUE});\n\t\n\t    var candidates = [[broadLines[0].x,\n\t                        broadLines[0].y]];\n\t    var indexes = [0];\n\t\n\t    for(var i=1;i<broadLines.length;i++){\n\t        //console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n\t        if(Math.abs(broadLines[i-1].x-broadLines[i].x)<width){\n\t            candidates.push([broadLines[i].x,broadLines[i].y]);\n\t            if(broadLines[i].y>max){\n\t                max = broadLines[i].y;\n\t                maxI = i;\n\t            }\n\t            indexes.push(i);\n\t            count++;\n\t        }\n\t        else{\n\t            if(count>2){\n\t                var fitted =  Opt.optimizeSingleLorentzian(candidates,\n\t                    {x: broadLines[maxI].x, y:max, width: Math.abs(candidates[0][0]-candidates[candidates.length-1][0])});\n\t                //console.log(fitted)\n\t                peakList.push({x:fitted[0][0],y:fitted[1][0],width:fitted[2][0],soft:false});\n\t\n\t            }\n\t            else{\n\t                //Put back the candidates to the signals list\n\t                indexes.map(function(index){peakList.push(broadLines[index])});\n\t            }\n\t            candidates = [[broadLines[i].x,broadLines[i].y]];\n\t            indexes = [i];\n\t            max = broadLines[i].y;\n\t            maxI = i;\n\t            count = 1;\n\t        }\n\t    }\n\t\n\t    peakList.sort(function (a, b) {\n\t        return a.x - b.x;\n\t    });\n\t\n\t    return peakList;\n\t\n\t}\n\t\n\t/*if(options.broadRatio>0){\n\t var broadLines=[[Number.MAX_VALUE,0,0]];\n\t //Optimize the possible broad lines\n\t var max=0, maxI=0,count=0;\n\t var candidates = [],broadLinesS=[];\n\t var isPartOf = false;\n\t\n\t for(var i=broadLines.length-1;i>0;i--){\n\t //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n\t if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\t\n\t candidates.push(broadLines[i]);\n\t if(broadLines[i][1]>max){\n\t max = broadLines[i][1];\n\t maxI = i;\n\t }\n\t count++;\n\t }\n\t else{\n\t isPartOf = true;\n\t if(count>30){ // TODO, an options ?\n\t isPartOf = false;\n\t //for(var j=0;j<signals.length;j++){\n\t //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n\t //       isPartOf = true;\n\t //    }\n\t //console.log(\"Was part of \"+isPartOf);\n\t }\n\t if(isPartOf){\n\t for(var j=0;j<candidates.length;j++){\n\t signals.push([candidates[j][0], candidates[j][1], dx]);\n\t }\n\t }\n\t else{\n\t var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n\t width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n\t []);\n\t //console.log(fitted);\n\t signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n\t }\n\t candidates = [];\n\t max = 0;\n\t maxI = 0;\n\t count = 0;\n\t }\n\t }\n\t }*/\n\t\n\tmodule.exports={optimizePeaks:optimizePeaks,joinBroadPeaks:joinBroadPeaks};\n\t\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar LM = __webpack_require__(10);\n\tvar math = LM.Matrix.algebra;\n\tvar Matrix = __webpack_require__(22);\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfLorentzians(t,p,c){\n\t    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        p2 = Math.pow(p[i+nL*2][0]/2,2);\n\t        factor = p[i+nL][0]*p2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfGaussians(t,p,c){\n\t    var nL = p.length/3,factor,i, j, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t/**\n\t * Single 4 parameter lorentzian function\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleLorentzian(t,p,c){\n\t    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Single 3 parameter gaussian function\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters [mean, height, std]\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleGaussian(t,p,c){\n\t    var factor2 = p[2][0]*p[2][0]/2;\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleLorentzian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];\n\t    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t\n\t    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t\n\t\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t\n\t}\n\t\n\t/**\n\t * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleGaussian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];                         // optional vector of constants\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t\n\t    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n\t    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\t\n\t    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t}\n\t\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeLorentzianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = 1;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n\t        p_min[i+nL][0] = 0;\n\t        p_min[i+2*nL][0] = group[i].width/4;\n\t\n\t        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n\t        p_max[i+nL][0] = 1.5;\n\t        p_max[i+2*nL][0] = group[i].width*4;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t\n\t    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n\t    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n\t    p_fit=p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeGaussianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.rows,i;\n\t\n\t    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n\t    for(i=0;i<nbPoints;i++){\n\t        weight[i][0]=k;///(y_data[i][0]);\n\t        //weight[i][0]=k*(2-y_data[i][0]);\n\t    }\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n\t    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = group[i].y/maxY;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;\n\t        p_min[i+nL][0] = group[i].y*0.8/maxY;\n\t        p_min[i+2*nL][0] = group[i].width/2;\n\t\n\t        p_max[i][0] = group[i].x+dt;\n\t        p_max[i+nL][0] = group[i].y*1.2/maxY;\n\t        p_max[i+2*nL][0] = group[i].width*2;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t    //console.log(t);\n\t    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t/**\n\t *\n\t * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n\t * @param xy\n\t * @returns {*[]}\n\t */\n\tfunction parseData(xy){\n\t    var nbSeries = xy.length;\n\t    var t = null;\n\t    var y_data = null, x,y;\n\t    var maxY = 0, i,j;\n\t\n\t    if(nbSeries==2){\n\t        //Looks like row wise matrix [x,y]\n\t        var nbPoints = xy[0].length;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else{\n\t            t = new Matrix(nbPoints,1);\n\t            y_data = new Matrix(nbPoints,1);\n\t            x = xy[0];\n\t            y = xy[1];\n\t            if(typeof x[0] === \"number\"){\n\t                for(i=0;i<nbPoints;i++){\n\t                    t[i][0]=x[i];\n\t                    y_data[i][0]=y[i];\n\t                    if(y[i]>maxY)\n\t                        maxY = y[i];\n\t                }\n\t            }\n\t            else{\n\t                //It is a colum matrix\n\t                if(typeof x[0] === \"object\"){\n\t                    for(i=0;i<nbPoints;i++){\n\t                        t[i][0]=x[i][0];\n\t                        y_data[i][0]=y[i][0];\n\t                        if(y[i][0]>maxY)\n\t                            maxY = y[i][0];\n\t                    }\n\t                }\n\t\n\t            }\n\t\n\t        }\n\t    }\n\t    else{\n\t        //Looks like a column wise matrix [[x],[y]]\n\t        var nbPoints = nbSeries;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else {\n\t            t = new Matrix(nbPoints, 1);\n\t            y_data = new Matrix(nbPoints, 1);\n\t            for (i = 0; i < nbPoints; i++) {\n\t                t[i][0] = xy[i][0];\n\t                y_data[i][0] = xy[i][1];\n\t                if(y_data[i][0]>maxY)\n\t                    maxY = y_data[i][0];\n\t            }\n\t        }\n\t    }\n\t    for (i = 0; i < nbPoints; i++) {\n\t        y_data[i][0]/=maxY;\n\t    }\n\t    return [t,y_data,maxY];\n\t}\n\t\n\tfunction sizeException(nbPoints) {\n\t    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n\t}\n\t\n\tmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\n\tmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\n\tmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\n\tmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\n\tmodule.exports.singleGaussian = singleGaussian;\n\tmodule.exports.singleLorentzian = singleLorentzian;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(11);\n\tmodule.exports.Matrix = __webpack_require__(12);\n\tmodule.exports.Matrix.algebra = __webpack_require__(21);\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/5/15.\n\t */\n\tvar Matrix = __webpack_require__(12);\n\tvar math = __webpack_require__(21);\n\t\n\tvar DEBUG = false;\n\t/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n\t ----------  INPUT  VARIABLES  -----------\n\t func   = function of n independent variables, 't', and m parameters, 'p',\n\t returning the simulated model: y_hat = func(t,p,c)\n\t p      = n-vector of initial guess of parameter values\n\t t      = m-vectors or matrix of independent variables (used as arg to func)\n\t y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n\t weight = weighting vector for least squares fit ( weight >= 0 ) ...\n\t inverse of the standard measurement errors\n\t Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n\t dp     = fractional increment of 'p' for numerical derivatives\n\t dp(j)>0 central differences calculated\n\t dp(j)<0 one sided 'backwards' differences calculated\n\t dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t Default:  0.001;\n\t p_min  = n-vector of lower bounds for parameter values\n\t p_max  = n-vector of upper bounds for parameter values\n\t c      = an optional matrix of values passed to func(t,p,c)\n\t opts   = vector of algorithmic parameters\n\t parameter    defaults    meaning\n\t opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n\t opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n\t opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n\t opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n\t opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n\t opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n\t opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n\t opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n\t opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n\t opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n\t 2: Quadratic update\n\t 3: Nielsen's lambda update equations\n\t\n\t ----------  OUTPUT  VARIABLES  -----------\n\t p       = least-squares optimal estimate of the parameter values\n\t X2      = Chi squared criteria\n\t sigma_p = asymptotic standard error of the parameters\n\t sigma_y = asymptotic standard error of the curve-fit\n\t corr    = correlation matrix of the parameters\n\t R_sq    = R-squared cofficient of multiple determination\n\t cvg_hst = convergence history\n\t\n\t Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n\t modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n\t using references by\n\t Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n\t Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n\t Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n\t Mathworks        optimization toolbox reference manual\n\t K. Madsen, H.B., Nielsen, and O. Tingleff\n\t http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n\t */\n\tvar LM = {\n\t\n\t    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\t\n\t        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\t\n\t        var iteration  = 0;\t\t\t// iteration counter\n\t        //func_calls = 0;\t\t\t// running count of function evaluations\n\t\n\t        if((typeof p[0])!=\"object\"){\n\t            for(var i=0;i< p.length;i++){\n\t                p[i]=[p[i]];\n\t            }\n\t\n\t        }\n\t        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n\t        var i,k;\n\t        var eps = 2^-52;\n\t        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n\t        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n\t        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n\t        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n\t        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var J =  Matrix.zeros(Npnt,Npar);\n\t\n\t\n\t        if (t.length != y_dat.length) {\n\t            console.log('lm.m error: the length of t must equal the length of y_dat');\n\t\n\t            length_t = t.length;\n\t            length_y_dat = y_dat.length;\n\t            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n\t            if (!tensor_parameter) {\n\t                return;\n\t            }\n\t        }\n\t\n\t        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n\t        dp = dp || 0.001;\n\t        p_min   = p_min || math.multiply(Math.abs(p),-100);\n\t        p_max   = p_max || math.multiply(Math.abs(p),100);\n\t        c = c || 1;\n\t        // Algorithmic Paramters\n\t        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n\t        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\t\n\t        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n\t        var MaxIter       = opts[1];\t// maximum number of iterations\n\t        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n\t        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n\t        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n\t        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n\t        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n\t        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n\t        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n\t        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n\t        // 2: Quadratic update\n\t        // 3: Nielsen's lambda update equations\n\t\n\t        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\t\n\t\n\t        if(!dp.length || dp.length == 1){\n\t            var dp_array = new Array(Npar);\n\t            for(var i=0;i<Npar;i++)\n\t                dp_array[i]=[dp];\n\t            dp=dp_array;\n\t        }\n\t\n\t        // indices of the parameters to be fit\n\t        var idx   = [];\n\t        for(i=0;i<dp.length;i++){\n\t            if(dp[i][0]!=0){\n\t                idx.push(i);\n\t            }\n\t        }\n\t\n\t        var Nfit = idx.length;\t\t\t// number of parameters to fit\n\t        var stop = false;\t\t\t\t// termination flag\n\t\n\t        var weight_sq = null;\n\t        //console.log(weight);\n\t        if ( !weight.length || weight.length < Npnt )\t{\n\t            // squared weighting vector\n\t            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n\t            //console.log(\"weight[0] \"+typeof weight[0]);\n\t            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n\t            weight_sq = math.dotMultiply(tmp,tmp);\n\t        }\n\t        else{\n\t            //weight_sq = (weight(:)).^2;\n\t            weight_sq = math.dotMultiply(weight,weight);\n\t        }\n\t\n\t\n\t        // initialize Jacobian with finite difference calculation\n\t        //console.log(\"J \"+weight_sq);\n\t        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        //console.log(JtWJ);\n\t\n\t        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n\t            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n\t            console.log(' *** epsilon_1 = ', epsilon_1);\n\t            stop = true;\n\t        }\n\t\n\t\n\t        switch(Update_Type){\n\t            case 1: // Marquardt: init'l lambda\n\t                lambda  = lambda_0;\n\t                break;\n\t            default:    // Quadratic and Nielsen\n\t                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n\t                nu=2;\n\t        }\n\t        //console.log(X2);\n\t        X2_old = X2; // previous value of X2\n\t        //console.log(MaxIter+\" \"+Npar);\n\t        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n\t        var h = null;\n\t        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n\t            iteration = iteration + 1;\n\t            // incremental change in parameters\n\t            switch(Update_Type){\n\t                case 1:\t\t\t\t\t// Marquardt\n\t                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n\t                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n\t                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n\t                    break;\n\t                default:\t\t\t\t\t// Quadratic and Nielsen\n\t                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\t\n\t                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n\t            }\n\t\n\t            /*for(var k=0;k< h.length;k++){\n\t             h[k]=[h[k]];\n\t             }*/\n\t            //console.log(\"h \"+h);\n\t            //h=math.matrix(h);\n\t            //  big = max(abs(h./p)) > 2;\n\t            //this is a big step\n\t            // --- Are parameters [p+h] much better than [p] ?\n\t            var hidx = new Array(idx.length);\n\t            for(k=0;k<idx.length;k++){\n\t                hidx[k]=h[idx[k]];\n\t            }\n\t            var p_try = math.add(p, hidx);// update the [idx] elements\n\t\n\t            for(k=0;k<p_try.length;k++){\n\t                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n\t            }\n\t            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\t\n\t            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n\t            //func_calls = func_calls + 1;\n\t            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\t\n\t            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t\n\t            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n\t                //    One step of quadratic line update in the h direction for minimum X2\n\t                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n\t                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t\n\t                h = math.multiply(alpha, h);\n\t                for(var k=0;k<idx.length;k++){\n\t                    hidx[k]=h[idx[k]];\n\t                }\n\t\n\t                p_try = math.add(p ,hidx);                     // update only [idx] elements\n\t                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\t\n\t                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n\t                // func_calls = func_calls + 1;\n\t                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n\t                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n\t            }\n\t\n\t            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n\t            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n\t            //console.log(\"rho \"+rho);\n\t            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n\t                //console.log(\"Here\");\n\t                dX2 = X2 - X2_old;\n\t                X2_old = X2;\n\t                p_old = p;\n\t                y_old = y_hat;\n\t                p = p_try;\t\t\t// accept p_try\n\t\n\t                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n\t                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                // decrease lambda ==> Gauss-Newton method\n\t\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t\t// Nielsen\n\t                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n\t                        nu = 2;\n\t                        break;\n\t                }\n\t            }\n\t            else {\t\t\t\t\t// it IS NOT better\n\t                X2 = X2_old;\t\t\t// do not accept p_try\n\t                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n\t                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n\t                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                }\n\t\n\t                // increase lambda  ==> gradient descent method\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t// Nielsen\n\t                        lambda = lambda * nu;\n\t                        nu = 2 * nu;\n\t                        break;\n\t                }\n\t            }\n\t        }// --- End of Main Loop\n\t\n\t        // --- convergence achieved, find covariance and confidence intervals\n\t\n\t        // equal weights for paramter error analysis\n\t        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\t\n\t        weight_sq.apply(function(i,j){\n\t            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n\t        });\n\t        //console.log(weight_sq);\n\t        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n\t        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t\n\t        /*if nargout > 2\t\t\t\t// standard error of parameters\n\t         covar = inv(JtWJ);\n\t         sigma_p = sqrt(diag(covar));\n\t         end\n\t\n\t         if nargout > 3\t\t\t\t// standard error of the fit\n\t         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n\t         sigma_y = zeros(Npnt,1);\n\t         for i=1:Npnt\n\t         sigma_y(i) = J(i,:) * covar * J(i,:)';\n\t         end\n\t         sigma_y = sqrt(sigma_y);\n\t         end\n\t\n\t         if nargout > 4\t\t\t\t// parameter correlation matrix\n\t         corr = covar ./ [sigma_p*sigma_p'];\n\t         end\n\t\n\t         if nargout > 5\t\t\t\t// coefficient of multiple determination\n\t         R_sq = corrcoef([y_dat y_hat]);\n\t         R_sq = R_sq(1,2).^2;\n\t         end\n\t\n\t         if nargout > 6\t\t\t\t// convergence history\n\t         cvg_hst = cvg_hst(1:iteration,:);\n\t         end*/\n\t\n\t        // endfunction  # ---------------------------------------------------------- LM\n\t\n\t        return { p:p, X2:X2};\n\t    },\n\t\n\t    lm_FD_J:function(func,t,p,y,dp,c) {\n\t        // J = lm_FD_J(func,t,p,y,{dp},{c})\n\t        //\n\t        // partial derivatives (Jacobian) dy/dp for use with lm.m\n\t        // computed via Finite Differences\n\t        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n\t        // -------- INPUT VARIABLES ---------\n\t        // func = function of independent variables, 't', and parameters, 'p',\n\t        //        returning the simulated model: y_hat = func(t,p,c)\n\t        // t  = m-vector of independent variables (used as arg to func)\n\t        // p  = n-vector of current parameter values\n\t        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n\t        // dp = fractional increment of p for numerical derivatives\n\t        //      dp(j)>0 central differences calculated\n\t        //      dp(j)<0 one sided differences calculated\n\t        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //      Default:  0.001;\n\t        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t        var m = y.length;\t\t\t// number of data points\n\t        var n = p.length;\t\t\t// number of parameters\n\t\n\t        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\t\n\t        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n\t        //var ps = $.extend(true, [], p);\n\t        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\t\n\t        for (var j = 0;j < n; j++) {\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n\t            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t\n\t            if (del[j] != 0){\n\t                y1 = func(t, p, c);\n\t                //func_calls = func_calls + 1;\n\t                if (dp[j][0] < 0) {\t\t// backwards difference\n\t                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n\t                    //console.log(del[j]);\n\t                    //console.log(y);\n\t                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t                    //console.log(column);\n\t                }\n\t                else{\n\t                    p[j][0] = ps[j][0] - del[j];\n\t                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n\t                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t\n\t                }\t\t\t// central difference, additional func call\n\t            }\n\t\n\t            p[j] = ps[j];\t\t// restore p(j)\n\t\n\t        }\n\t        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n\t        return J;\n\t\n\t    },\n\t\n\t    // endfunction # -------------------------------------------------- LM_FD_J\n\t    lm_Broyden_J: function(p_old,y_old,J,p,y){\n\t        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n\t        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n\t        //---------- INPUT VARIABLES -------\n\t        // p_old = previous set of parameters\n\t        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n\t        // J  = current version of the Jacobian matrix\n\t        // p     = current  set of parameters\n\t        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t        //console.log(p+\" X \"+ p_old)\n\t        var h  = math.subtract(p, p_old);\n\t\n\t        //console.log(\"hhh \"+h);\n\t        var h_t = math.transpose(h);\n\t        h_t.div(math.multiply(h_t,h));\n\t\n\t        //console.log(h_t);\n\t        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n\t        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n\t        return J;\n\t        // endfunction # ---------------------------------------------- LM_Broyden_J\n\t    },\n\t\n\t    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n\t        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n\t        //\n\t        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n\t        // and calculate the Chi-squared error function, Chi_sq\n\t        // Used by Levenberg-Marquard algorithm, lm.m\n\t        // -------- INPUT VARIABLES ---------\n\t        // func   = function ofpn independent variables, p, and m parameters, p,\n\t        //         returning the simulated model: y_hat = func(t,p,c)\n\t        // t      = m-vectors or matrix of independent variables (used as arg to func)\n\t        // p_old  = n-vector of previous parameter values\n\t        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n\t        // dX2    = previous change in Chi-squared criteria\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t        // p      = n-vector of current  parameter values\n\t        // y_dat  = n-vector of data to be fit by func(t,p,c)\n\t        // weight_sq = square of the weighting vector for least squares fit ...\n\t        //\t    inverse of the standard measurement errors\n\t        // dp     = fractional increment of 'p' for numerical derivatives\n\t        //          dp(j)>0 central differences calculated\n\t        //          dp(j)<0 one sided differences calculated\n\t        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //          Default:  0.001;\n\t        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n\t        // JtWdy   = linearized fitting vector\n\t        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n\t        // y_hat  = model evaluated with parameters 'p'\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t\n\t        var Npnt = y_dat.length;\t\t// number of data points\n\t        var Npar = p.length;\t\t// number of parameters\n\t\n\t        dp = dp || 0.001;\n\t\n\t\n\t        //var JtWJ = new Matrix.zeros(Npar);\n\t        //var JtWdy  = new Matrix.zeros(Npar,1);\n\t\n\t        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n\t        //func_calls = func_calls + 1;\n\t        //console.log(J);\n\t        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n\t            //console.log(\"Par\");\n\t            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n\t        }\n\t        else{\n\t            //console.log(\"ImPar\");\n\t            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n\t        }\n\t        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n\t        //console.log(delta_y[0][0]);\n\t        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n\t        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n\t        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n\t        var Jt = math.transpose(J);\n\t\n\t        //console.log(weight_sq);\n\t\n\t        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\t\n\t        //JtWdy = J' * ( weight_sq .* delta_y );\n\t        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\t\n\t\n\t        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n\t        // endfunction  # ------------------------------------------------------ LM_MATX\n\t    }\n\t\n\t\n\t\n\t};\n\t\n\tmodule.exports = LM;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(13);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(14);\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(15);\n\tvar EigenvalueDecomposition = __webpack_require__(17);\n\tvar LuDecomposition = __webpack_require__(18);\n\tvar QrDecomposition = __webpack_require__(19);\n\tvar CholeskyDecomposition = __webpack_require__(20);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\tvar hypotenuse = __webpack_require__(16).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\tvar hypotenuse = __webpack_require__(16).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\tvar hypotenuse = __webpack_require__(16).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/24/15.\n\t */\n\t/**\n\t * Non in-place function definitions, compatible with mathjs code *\n\t */\n\t\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(12);\n\t\n\tfunction matrix(A,B){\n\t    return new Matrix(A,B);\n\t}\n\t\n\tfunction ones(rows, cols){\n\t    return Matrix.ones(rows,cols);\n\t}\n\t\n\tfunction eye(rows, cols){\n\t    return Matrix.eye(rows, cols);\n\t}\n\t\n\tfunction zeros(rows, cols){\n\t    return Matrix.zeros(rows, cols);\n\t}\n\t\n\tfunction random(rows, cols){\n\t    return Matrix.rand(rows,cols);\n\t}\n\t\n\tfunction transpose(A){\n\t    if(typeof A == 'number')\n\t        return A;\n\t    var result = A.clone();\n\t    return result.transpose();\n\t}\n\t\n\tfunction add(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A+B;\n\t    if(typeof A == 'number')\n\t        return this.add(B,A);\n\t\n\t    var result = A.clone();\n\t    return result.add(B);\n\t\n\t}\n\t\n\tfunction subtract(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A-B;\n\t    if(typeof A == 'number')\n\t        return this.subtract(B,A);\n\t    var result = A.clone();\n\t    return result.sub(B);\n\t}\n\t\n\tfunction multiply(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A*B;\n\t    if(typeof A == 'number')\n\t        return this.multiply(B,A);\n\t\n\t    var result = A.clone();\n\t\n\t    if(typeof B === 'number')\n\t        result.mul(B);\n\t    else\n\t        result = result.mmul(B);\n\t\n\t    if(result.rows==1&&result.columns==1)\n\t        return result[0][0];\n\t    else\n\t        return result;\n\t\n\t}\n\t\n\tfunction dotMultiply(A, B){\n\t    var result = A.clone();\n\t    return result.mul(B);\n\t}\n\t\n\tfunction dotDivide(A, B){\n\t    var result = A.clone();\n\t    return result.div(B);\n\t}\n\t\n\tfunction diag(A){\n\t    var diag = null;\n\t    var rows = A.rows, cols = A.columns, j, r;\n\t    //It is an array\n\t    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n\t        if(A[0]&&A[0].length){\n\t            rows = A.length;\n\t            cols = A[0].length;\n\t            r = Math.min(rows,cols);\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j][j];\n\t            }\n\t        }\n\t        else{\n\t            cols = A.length;\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j];\n\t            }\n\t        }\n\t\n\t    }\n\t    if(rows == 1){\n\t        diag = Matrix.zeros(cols, cols);\n\t        for (j = 0; j < cols; j++) {\n\t            diag[j][j]=A[0][j];\n\t        }\n\t    }\n\t    else{\n\t        if(rows>0 && cols > 0){\n\t            r = Math.min(rows,cols);\n\t            diag = new Array(r);\n\t            for (j = 0; j < r; j++) {\n\t                diag[j] = A[j][j];\n\t            }\n\t        }\n\t    }\n\t    return diag;\n\t}\n\t\n\tfunction min(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.min(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] < B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction max(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.max(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] > B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction sqrt(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.sqrt(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction abs(A){\n\t    if(typeof A==='number' )\n\t        return Math.abs(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.abs(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction exp(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.exp(A[i][j]);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction dotPow(A, b){\n\t    if(typeof A==='number' )\n\t        return Math.pow(A,b);\n\t    //console.log(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.pow(A[i][j],b);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction solve(A, B){\n\t    return A.solve(B);\n\t}\n\t\n\tfunction inv(A){\n\t    if(typeof A ===\"number\")\n\t        return 1/A;\n\t    return A.inverse();\n\t}\n\t\n\tmodule.exports = {\n\t    transpose:transpose,\n\t    add:add,\n\t    subtract:subtract,\n\t    multiply:multiply,\n\t    dotMultiply:dotMultiply,\n\t    dotDivide:dotDivide,\n\t    diag:diag,\n\t    min:min,\n\t    max:max,\n\t    solve:solve,\n\t    inv:inv,\n\t    sqrt:sqrt,\n\t    exp:exp,\n\t    dotPow:dotPow,\n\t    abs:abs,\n\t    matrix:matrix,\n\t    ones:ones,\n\t    zeros:zeros,\n\t    random:random,\n\t    eye:eye\n\t};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(23);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(24);\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(23);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(25);\n\tvar EigenvalueDecomposition = __webpack_require__(27);\n\tvar LuDecomposition = __webpack_require__(28);\n\tvar QrDecomposition = __webpack_require__(29);\n\tvar CholeskyDecomposition = __webpack_require__(30);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(23);\n\tvar hypotenuse = __webpack_require__(26).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(23);\n\tvar hypotenuse = __webpack_require__(26).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(23);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(23);\n\tvar hypotenuse = __webpack_require__(26).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(23);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Opt = __webpack_require__(9);\n\tvar stats = __webpack_require__(32);\n\tvar extend = __webpack_require__(35);\n\tvar SG = __webpack_require__(36);\n\t\n\tvar sgDefOptions = {\n\t    windowSize: 5,\n\t    polynomial: 3\n\t};\n\t\n\t\n\tfunction gsd(x, y, options){\n\t    //options = extend({}, defaultOptions, options);\n\t    var options=Object.create(options || {});\n\t    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n\t    if (options.broadRatio===undefined) options.broadRatio=0.00;\n\t    if (options.noiseLevel===undefined) options.noiseLevel=0;\n\t    if (options.maxCriteria===undefined) options.maxCriteria=true;\n\t    if (options.smoothY===undefined) options.smoothY=true;\n\t    if (options.realTopDetection===undefined) options.realTopDetection=false;\n\t\n\t    var sgOptions = extend({}, sgDefOptions, options.sgOptions);\n\t\n\t    //Transform y to use the standard algorithm.\n\t    var yCorrection = {m:1, b:0};\n\t    if(!options.maxCriteria||options.noiseLevel>0){\n\t        y=[].concat(y);\n\t        if(!options.maxCriteria){\n\t            yCorrection = {m:-1, b:stats.array.max(y)};\n\t            for (var i=0; i<y.length; i++){\n\t                y[i]=-y[i]+yCorrection.b;\n\t            }\n\t            options.noiseLevel=-options.noiseLevel+yCorrection.b;\n\t        }\n\t        if (options.noiseLevel>0) {\n\t            for (var i=0; i<y.length; i++){\n\t                if(Math.abs(y[i])<options.noiseLevel) {\n\t                    y[i]=0;\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    //We have to know if x is equally spaced\n\t    var maxDx=0, minDx=Number.MAX_VALUE,tmp;\n\t    for(var i=0;i< x.length-1;i++){\n\t        var tmp = Math.abs(x[i+1]-x[i]);\n\t        if(tmp<minDx){\n\t            minDx = tmp;\n\t        }\n\t        if(tmp>maxDx){\n\t            maxDx = tmp;\n\t        }\n\t    }\n\t    //If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n\t    if((maxDx-minDx)/maxDx<0.05){\n\t        var Y = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n\t        var dY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n\t        var ddY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n\t    }\n\t    else{\n\t        var Y = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n\t        var dY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n\t        var ddY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n\t    }\n\t    \n\t    var X = x;\n\t    var dx = x[1]-x[0];\n\t    var maxDdy=0;\n\t    var maxY = 0;\n\t    //console.log(Y.length);\n\t    for (var i = 0; i < Y.length ; i++){\n\t        if(Math.abs(ddY[i])>maxDdy){\n\t            maxDdy = Math.abs(ddY[i]);\n\t        }\n\t        if(Math.abs(Y[i])>maxY){\n\t            maxY = Math.abs(Y[i]);\n\t        }\n\t    }\n\t    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n\t\n\t    var minddY = [];\n\t    var intervalL = [];\n\t    var intervalR = [];\n\t    var lastMax = null;\n\t    var lastMin = null;\n\t    var broadMask = new Array();\n\t    //console.log(dx);\n\t    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n\t    for (var i = 1; i < Y.length -1 ; i++){\n\t        //console.log(dY[i]);\n\t        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n\t            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n\t            lastMin = X[i];\n\t            //console.log(\"min \"+lastMin);\n\t            if(dx>0&&lastMax!=null){\n\t                intervalL.push(lastMax);\n\t                intervalR.push(lastMin);\n\t\n\t            }\n\t        }\n\t\n\t        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n\t            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n\t            lastMax = X[i];\n\t            //console.log(\"max \"+lastMax);\n\t            if(dx<0&&lastMin!=null){\n\t                intervalL.push(lastMax);\n\t                intervalR.push(lastMin);\n\t            }\n\t        }\n\t        if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n\t            minddY.push(i);//( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n\t            if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n\t                broadMask.push(false);\n\t            }\n\t            else{\n\t                broadMask.push(true);\n\t            }\n\t        }\n\t    }\n\t    if(options.realTopDetection){\n\t        realTopDetection(minddY,X,Y);\n\t    }\n\t    //\n\t    //console.log(intervalL.length+\" \"+minddY.length+\" \"+broadMask.length);\n\t    var signals = [];\n\t    var lastK = 0,possible, k, f,frequency, distanceJ, minDistance, gettingCloser;\n\t    for (var j = 0; j < minddY.length; j++){\n\t        frequency = X[minddY[j]];//minddY[j][0];\n\t        possible = -1;\n\t        k=lastK+1;\n\t        minDistance = Number.MAX_VALUE;\n\t        distanceJ = 0;\n\t        gettingCloser=true;\n\t        while(possible==-1&&k<intervalL.length&&gettingCloser){\n\t            distanceJ = Math.abs(frequency-(intervalL[k]+intervalR[k])/2);\n\t            //Still getting closer?\n\t            if(distanceJ<minDistance){\n\t                minDistance = distanceJ;\n\t            }\n\t            else{\n\t                gettingCloser = false;\n\t            }\n\t            if( distanceJ <Math.abs(intervalL[k]-intervalR[k])/2){\n\t                possible=k;\n\t                lastK = k;\n\t            }\n\t            k++;\n\t        }\n\t        //console.log(lastK+\" \"+intervalL.length+\" possible \"+k);\n\t        if (possible!=-1){\n\t            //console.log(height);\n\t            if (Math.abs(Y[minddY[j]]) > options.minMaxRatio*maxY) {\n\t                signals.push({\n\t                    x: frequency,\n\t                    y: (Y[minddY[j]]-yCorrection.b)/yCorrection.m,\n\t                    width:Math.abs(intervalR[possible] - intervalL[possible]),//widthCorrection\n\t                    soft:broadMask[j]\n\t                })\n\t            }\n\t        }\n\t    }\n\t\n\t    signals.sort(function (a, b) {\n\t        return a.x - b.x;\n\t    });\n\t\n\t    return signals;\n\t\n\t}\n\t\n\tfunction realTopDetection(peakList, x, y){\n\t    var listP = [];\n\t    var alpha, beta, gamma, p,currentPoint;\n\t    for(var j=0;j<peakList.length;j++){\n\t        currentPoint = peakList[j];//peakList[j][2];\n\t        //The detected peak could be moved 1 or 2 unit to left or right.\n\t        if(y[currentPoint-1]>=y[currentPoint-2]\n\t            &&y[currentPoint-1]>=y[currentPoint]) {\n\t            currentPoint--;\n\t        }\n\t        else{\n\t            if(y[currentPoint+1]>=y[currentPoint]\n\t                &&y[currentPoint+1]>=y[currentPoint+2]) {\n\t                currentPoint++;\n\t            }\n\t            else{\n\t                if(y[currentPoint-2]>=y[currentPoint-3]\n\t                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n\t                    currentPoint-=2;\n\t                }\n\t                else{\n\t                    if(y[currentPoint+2]>=y[currentPoint+1]\n\t                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n\t                        currentPoint+=2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n\t            &&y[currentPoint]>=y[currentPoint-1]\n\t            &&y[currentPoint]>=y[currentPoint+1]) {\n\t            alpha = 20 * Math.log10(y[currentPoint - 1]);\n\t            beta = 20 * Math.log10(y[currentPoint]);\n\t            gamma = 20 * Math.log10(y[currentPoint + 1]);\n\t            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n\t\n\t            x[peakList[j]] = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n\t            y[peakList[j]] = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n\t                - [currentPoint + 1]) * p;//signal.peaks[j].intensity);\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports=gsd;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.array = __webpack_require__(33);\n\texports.matrix = __webpack_require__(34);\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction compareNumbers(a, b) {\n\t    return a - b;\n\t}\n\t\n\t/**\n\t * Computes the sum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.sum = function sum(values) {\n\t    var sum = 0;\n\t    for (var i = 0; i < values.length; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum;\n\t};\n\t\n\t/**\n\t * Computes the maximum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.max = function max(values) {\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return max;\n\t};\n\t\n\t/**\n\t * Computes the minimum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.min = function min(values) {\n\t    var min = Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t    }\n\t    return min;\n\t};\n\t\n\t/**\n\t * Computes the min and max of the given values\n\t * @param {Array} values\n\t * @returns {{min: number, max: number}}\n\t */\n\texports.minMax = function minMax(values) {\n\t    var min = Infinity;\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return {\n\t        min: min,\n\t        max: max\n\t    };\n\t};\n\t\n\t/**\n\t * Computes the arithmetic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.arithmeticMean = function arithmeticMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / l;\n\t};\n\t\n\t/**\n\t * {@link arithmeticMean}\n\t */\n\texports.mean = exports.arithmeticMean;\n\t\n\t/**\n\t * Computes the geometric mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.geometricMean = function geometricMean(values) {\n\t    var mul = 1;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        mul *= values[i];\n\t    }\n\t    return Math.pow(mul, 1 / l);\n\t};\n\t\n\t/**\n\t * Computes the mean of the log of the given values\n\t * If the return value is exponentiated, it gives the same result as the\n\t * geometric mean.\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.logMean = function logMean(values) {\n\t    var lnsum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        lnsum += Math.log(values[i]);\n\t    }\n\t    return lnsum / l;\n\t};\n\t\n\t/**\n\t * Computes the weighted grand mean for a list of means and sample sizes\n\t * @param {Array} means - Mean values for each set of samples\n\t * @param {Array} samples - Number of original values for each set of samples\n\t * @returns {number}\n\t */\n\texports.grandMean = function grandMean(means, samples) {\n\t    var sum = 0;\n\t    var n = 0;\n\t    var l = means.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += samples[i] * means[i];\n\t        n += samples[i];\n\t    }\n\t    return sum / n;\n\t};\n\t\n\t/**\n\t * Computes the truncated mean of the given values using a given percentage\n\t * @param {Array} values\n\t * @param {number} percent - The percentage of values to keep (range: [0,1])\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var k = Math.floor(l * percent);\n\t    var sum = 0;\n\t    for (var i = k; i < (l - k); i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / (l - 2 * k);\n\t};\n\t\n\t/**\n\t * Computes the harmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.harmonicMean = function harmonicMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] === 0) {\n\t            throw new RangeError('value at index ' + i + 'is zero');\n\t        }\n\t        sum += 1 / values[i];\n\t    }\n\t    return l / sum;\n\t};\n\t\n\t/**\n\t * Computes the contraharmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.contraHarmonicMean = function contraHarmonicMean(values) {\n\t    var r1 = 0;\n\t    var r2 = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        r1 += values[i] * values[i];\n\t        r2 += values[i];\n\t    }\n\t    if (r2 < 0) {\n\t        throw new RangeError('sum of values is negative');\n\t    }\n\t    return r1 / r2;\n\t};\n\t\n\t/**\n\t * Computes the median of the given values\n\t * @param {Array} values\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.median = function median(values, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var half = Math.floor(l / 2);\n\t    if (l % 2 === 0) {\n\t        return (values[half - 1] + values[half]) * 0.5;\n\t    } else {\n\t        return values[half];\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the variance of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.variance = function variance(values, unbiased) {\n\t    if (unbiased === undefined) unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var theVariance = 0;\n\t    var l = values.length;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var x = values[i] - theMean;\n\t        theVariance += x * x;\n\t    }\n\t\n\t    if (unbiased) {\n\t        return theVariance / (l - 1);\n\t    } else {\n\t        return theVariance / l;\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the standard deviation of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.standardDeviation = function standardDeviation(values, unbiased) {\n\t    return Math.sqrt(exports.variance(values, unbiased));\n\t};\n\t\n\texports.standardError = function standardError(values) {\n\t    return exports.standardDeviation(values) / Math.sqrt(values.length);\n\t};\n\t\n\texports.quartiles = function quartiles(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort(compareNumbers);\n\t    }\n\t\n\t    var quart = values.length / 4;\n\t    var q1 = values[Math.ceil(quart) - 1];\n\t    var q2 = exports.median(values, true);\n\t    var q3 = values[Math.ceil(quart * 3) - 1];\n\t\n\t    return {q1: q1, q2: q2, q3: q3};\n\t};\n\t\n\texports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n\t    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n\t};\n\t\n\texports.pooledVariance = function pooledVariance(samples, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var sum = 0;\n\t    var length = 0, l = samples.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var values = samples[i];\n\t        var vari = exports.variance(values);\n\t\n\t        sum += (values.length - 1) * vari;\n\t\n\t        if (unbiased)\n\t            length += values.length - 1;\n\t        else\n\t            length += values.length;\n\t    }\n\t    return sum / length;\n\t};\n\t\n\texports.mode = function mode(values) {\n\t    var l = values.length,\n\t        itemCount = new Array(l),\n\t        i;\n\t    for (i = 0; i < l; i++) {\n\t        itemCount[i] = 0;\n\t    }\n\t    var itemArray = new Array(l);\n\t    var count = 0;\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var index = itemArray.indexOf(values[i]);\n\t        if (index >= 0)\n\t            itemCount[index]++;\n\t        else {\n\t            itemArray[count] = values[i];\n\t            itemCount[count] = 1;\n\t            count++;\n\t        }\n\t    }\n\t\n\t    var maxValue = 0, maxIndex = 0;\n\t    for (i = 0; i < count; i++) {\n\t        if (itemCount[i] > maxValue) {\n\t            maxValue = itemCount[i];\n\t            maxIndex = i;\n\t        }\n\t    }\n\t\n\t    return itemArray[maxIndex];\n\t};\n\t\n\texports.covariance = function covariance(vector1, vector2, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var mean1 = exports.mean(vector1);\n\t    var mean2 = exports.mean(vector2);\n\t\n\t    if (vector1.length !== vector2.length)\n\t        throw \"Vectors do not have the same dimensions\";\n\t\n\t    var cov = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var x = vector1[i] - mean1;\n\t        var y = vector2[i] - mean2;\n\t        cov += x * y;\n\t    }\n\t\n\t    if (unbiased)\n\t        return cov / (l - 1);\n\t    else\n\t        return cov / l;\n\t};\n\t\n\texports.skewness = function skewness(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t\n\t    var s2 = 0, s3 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s3 += dev * dev * dev;\n\t    }\n\t    var m2 = s2 / l;\n\t    var m3 = s3 / l;\n\t\n\t    var g = m3 / (Math.pow(m2, 3 / 2.0));\n\t    if (unbiased) {\n\t        var a = Math.sqrt(l * (l - 1));\n\t        var b = l - 2;\n\t        return (a / b) * g;\n\t    }\n\t    else {\n\t        return g;\n\t    }\n\t};\n\t\n\texports.kurtosis = function kurtosis(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var n = values.length, s2 = 0, s4 = 0;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s4 += dev * dev * dev * dev;\n\t    }\n\t    var m2 = s2 / n;\n\t    var m4 = s4 / n;\n\t\n\t    if (unbiased) {\n\t        var v = s2 / (n - 1);\n\t        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t        var b = s4 / (v * v);\n\t        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t\n\t        return a * b - 3 * c;\n\t    }\n\t    else {\n\t        return m4 / (m2 * m2) - 3;\n\t    }\n\t};\n\t\n\texports.entropy = function entropy(values, eps) {\n\t    if (typeof(eps) === 'undefined') eps = 0;\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * Math.log(values[i] + eps);\n\t    return -sum;\n\t};\n\t\n\texports.weightedMean = function weightedMean(values, weights) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * weights[i];\n\t    return sum;\n\t};\n\t\n\texports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n\t    return Math.sqrt(exports.weightedVariance(values, weights));\n\t};\n\t\n\texports.weightedVariance = function weightedVariance(values, weights) {\n\t    var theMean = exports.weightedMean(values, weights);\n\t    var vari = 0, l = values.length;\n\t    var a = 0, b = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var z = values[i] - theMean;\n\t        var w = weights[i];\n\t\n\t        vari += w * (z * z);\n\t        b += w;\n\t        a += w * w;\n\t    }\n\t\n\t    return vari * (b / (b * b - a));\n\t};\n\t\n\texports.center = function center(values, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    var result = values;\n\t    if (!inPlace)\n\t        result = values.slice();\n\t\n\t    var theMean = exports.mean(result), l = result.length;\n\t    for (var i = 0; i < l; i++)\n\t        result[i] -= theMean;\n\t};\n\t\n\texports.standardize = function standardize(values, standardDev, inPlace) {\n\t    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t    var l = values.length;\n\t    var result = inPlace ? values : new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        result[i] = values[i] / standardDev;\n\t    return result;\n\t};\n\t\n\texports.cumulativeSum = function cumulativeSum(array) {\n\t    var l = array.length;\n\t    var result = new Array(l);\n\t    result[0] = array[0];\n\t    for (var i = 1; i < l; i++)\n\t        result[i] = result[i - 1] + array[i];\n\t    return result;\n\t};\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar arrayStat = __webpack_require__(33);\n\t\n\t// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\t\n\tfunction entropy(matrix, eps) {\n\t    if (typeof(eps) === 'undefined') {\n\t        eps = 0;\n\t    }\n\t    var sum = 0,\n\t        l1 = matrix.length,\n\t        l2 = matrix[0].length;\n\t    for (var i = 0; i < l1; i++) {\n\t        for (var j = 0; j < l2; j++) {\n\t            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n\t        }\n\t    }\n\t    return -sum;\n\t}\n\t\n\tfunction mean(matrix, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        theMean, N, i, j;\n\t\n\t    if (dimension === -1) {\n\t        theMean = [0];\n\t        N = rows * cols;\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = 0; j < cols; j++) {\n\t                theMean[0] += matrix[i][j];\n\t            }\n\t        }\n\t        theMean[0] /= N;\n\t    } else if (dimension === 0) {\n\t        theMean = new Array(cols);\n\t        N = rows;\n\t        for (j = 0; j < cols; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < rows; i++) {\n\t                theMean[j] += matrix[i][j];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else if (dimension === 1) {\n\t        theMean = new Array(rows);\n\t        N = cols;\n\t        for (j = 0; j < rows; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < cols; i++) {\n\t                theMean[j] += matrix[j][i];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t    return theMean;\n\t}\n\t\n\tfunction standardDeviation(matrix, means, unbiased) {\n\t    var vari = variance(matrix, means, unbiased), l = vari.length;\n\t    for (var i = 0; i < l; i++) {\n\t        vari[i] = Math.sqrt(vari[i]);\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction variance(matrix, means, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') {\n\t        unbiased = true;\n\t    }\n\t    means = means || mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum1 = 0, sum2 = 0, x = 0;\n\t        for (var i = 0; i < rows; i++) {\n\t            x = matrix[i][j] - means[j];\n\t            sum1 += x;\n\t            sum2 += x * x;\n\t        }\n\t        if (unbiased) {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n\t        } else {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n\t        }\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction median(matrix) {\n\t    var rows = matrix.length, cols = matrix[0].length;\n\t    var medians = new Array(cols);\n\t\n\t    for (var i = 0; i < cols; i++) {\n\t        var data = new Array(rows);\n\t        for (var j = 0; j < rows; j++) {\n\t            data[j] = matrix[j][i];\n\t        }\n\t        data.sort();\n\t        var N = data.length;\n\t        if (N % 2 === 0) {\n\t            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n\t        } else {\n\t            medians[i] = data[Math.floor(N / 2)];\n\t        }\n\t    }\n\t    return medians;\n\t}\n\t\n\tfunction mode(matrix) {\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        modes = new Array(cols),\n\t        i, j;\n\t    for (i = 0; i < cols; i++) {\n\t        var itemCount = new Array(rows);\n\t        for (var k = 0; k < rows; k++) {\n\t            itemCount[k] = 0;\n\t        }\n\t        var itemArray = new Array(rows);\n\t        var count = 0;\n\t\n\t        for (j = 0; j < rows; j++) {\n\t            var index = itemArray.indexOf(matrix[j][i]);\n\t            if (index >= 0) {\n\t                itemCount[index]++;\n\t            } else {\n\t                itemArray[count] = matrix[j][i];\n\t                itemCount[count] = 1;\n\t                count++;\n\t            }\n\t        }\n\t\n\t        var maxValue = 0, maxIndex = 0;\n\t        for (j = 0; j < count; j++) {\n\t            if (itemCount[j] > maxValue) {\n\t                maxValue = itemCount[j];\n\t                maxIndex = j;\n\t            }\n\t        }\n\t\n\t        modes[i] = itemArray[maxIndex];\n\t    }\n\t    return modes;\n\t}\n\t\n\tfunction skewness(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, l = means.length;\n\t    var skew = new Array(l);\n\t\n\t    for (var j = 0; j < l; j++) {\n\t        var s2 = 0, s3 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s3 += dev * dev * dev;\n\t        }\n\t\n\t        var m2 = s2 / n;\n\t        var m3 = s3 / n;\n\t        var g = m3 / Math.pow(m2, 3 / 2);\n\t\n\t        if (unbiased) {\n\t            var a = Math.sqrt(n * (n - 1));\n\t            var b = n - 2;\n\t            skew[j] = (a / b) * g;\n\t        } else {\n\t            skew[j] = g;\n\t        }\n\t    }\n\t    return skew;\n\t}\n\t\n\tfunction kurtosis(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, m = matrix[0].length;\n\t    var kurt = new Array(m);\n\t\n\t    for (var j = 0; j < m; j++) {\n\t        var s2 = 0, s4 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s4 += dev * dev * dev * dev;\n\t        }\n\t        var m2 = s2 / n;\n\t        var m4 = s4 / n;\n\t\n\t        if (unbiased) {\n\t            var v = s2 / (n - 1);\n\t            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t            var b = s4 / (v * v);\n\t            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t            kurt[j] = a * b - 3 * c;\n\t        } else {\n\t            kurt[j] = m4 / (m2 * m2) - 3;\n\t        }\n\t    }\n\t    return kurt;\n\t}\n\t\n\tfunction standardError(matrix) {\n\t    var samples = matrix.length;\n\t    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n\t    var standardErrors = new Array(l);\n\t    var sqrtN = Math.sqrt(samples);\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        standardErrors[i] = standardDeviations[i] / sqrtN;\n\t    }\n\t    return standardErrors;\n\t}\n\t\n\tfunction covariance(matrix, dimension) {\n\t    return scatter(matrix, undefined, dimension);\n\t}\n\t\n\tfunction scatter(matrix, divisor, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    if (typeof(divisor) === 'undefined') {\n\t        if (dimension === 0) {\n\t            divisor = matrix.length - 1;\n\t        } else if (dimension === 1) {\n\t            divisor = matrix[0].length - 1;\n\t        }\n\t    }\n\t    var means = mean(matrix, dimension),\n\t        rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, s, k;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tfunction correlation(matrix) {\n\t    var means = mean(matrix),\n\t        standardDeviations = standardDeviation(matrix, true, means),\n\t        scores = zScores(matrix, means, standardDeviations),\n\t        rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        i, j;\n\t\n\t    var cor = new Array(cols);\n\t    for (i = 0; i < cols; i++) {\n\t        cor[i] = new Array(cols);\n\t    }\n\t    for (i = 0; i < cols; i++) {\n\t        for (j = i; j < cols; j++) {\n\t            var c = 0;\n\t            for (var k = 0, l = scores.length; k < l; k++) {\n\t                c += scores[k][j] * scores[k][i];\n\t            }\n\t            c /= rows - 1;\n\t            cor[i][j] = c;\n\t            cor[j][i] = c;\n\t        }\n\t    }\n\t    return cor;\n\t}\n\t\n\tfunction zScores(matrix, means, standardDeviations) {\n\t    means = means || mean(matrix);\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n\t    return standardize(center(matrix, means, false), standardDeviations, true);\n\t}\n\t\n\tfunction center(matrix, means, inPlace) {\n\t    means = means || mean(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var row = result[i];\n\t        for (j = 0, jj = row.length; j < jj; j++) {\n\t            row[j] = matrix[i][j] - means[j];\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction standardize(matrix, standardDeviations, inPlace) {\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var resultRow = result[i];\n\t        var sourceRow = matrix[i];\n\t        for (j = 0, jj = resultRow.length; j < jj; j++) {\n\t            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n\t                resultRow[j] = sourceRow[j] / standardDeviations[j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction weightedVariance(matrix, weights) {\n\t    var means = mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum = 0;\n\t        var a = 0, b = 0;\n\t\n\t        for (var i = 0; i < rows; i++) {\n\t            var z = matrix[i][j] - means[j];\n\t            var w = weights[i];\n\t\n\t            sum += w * (z * z);\n\t            b += w;\n\t            a += w * w;\n\t        }\n\t\n\t        vari[j] = sum * (b / (b * b - a));\n\t    }\n\t\n\t    return vari;\n\t}\n\t\n\tfunction weightedMean(matrix, weights, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length,\n\t        means, i, ii, j, w, row;\n\t\n\t    if (dimension === 0) {\n\t        means = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            row = matrix[i];\n\t            w = weights[i];\n\t            for (j = 0; j < cols; j++) {\n\t                means[j] += row[j] * w;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        means = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (j = 0; j < rows; j++) {\n\t            row = matrix[j];\n\t            w = weights[j];\n\t            for (i = 0; i < cols; i++) {\n\t                means[j] += row[i] * w;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    var weightSum = arrayStat.sum(weights);\n\t    if (weightSum !== 0) {\n\t        for (i = 0, ii = means.length; i < ii; i++) {\n\t            means[i] /= weightSum;\n\t        }\n\t    }\n\t    return means;\n\t}\n\t\n\tfunction weightedCovariance(matrix, weights, means, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    var s1 = 0, s2 = 0;\n\t    for (var i = 0, ii = weights.length; i < ii; i++) {\n\t        s1 += weights[i];\n\t        s2 += weights[i] * weights[i];\n\t    }\n\t    var factor = s1 / (s1 * s1 - s2);\n\t    return weightedScatter(matrix, weights, means, factor, dimension);\n\t}\n\t\n\tfunction weightedScatter(matrix, weights, means, factor, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    if (typeof(factor) === 'undefined') {\n\t        factor = 1;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, k, s;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tmodule.exports = {\n\t    entropy: entropy,\n\t    mean: mean,\n\t    standardDeviation: standardDeviation,\n\t    variance: variance,\n\t    median: median,\n\t    mode: mode,\n\t    skewness: skewness,\n\t    kurtosis: kurtosis,\n\t    standardError: standardError,\n\t    covariance: covariance,\n\t    scatter: scatter,\n\t    correlation: correlation,\n\t    zScores: zScores,\n\t    center: center,\n\t    standardize: standardize,\n\t    weightedVariance: weightedVariance,\n\t    weightedMean: weightedMean,\n\t    weightedCovariance: weightedCovariance,\n\t    weightedScatter: weightedScatter\n\t};\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\n\tvar extend = __webpack_require__(35);\n\tvar stat = __webpack_require__(37);\n\t\n\tvar defaultOptions = {\n\t    windowSize: 11,\n\t    derivative: 0,\n\t    polynomial: 2,\n\t};\n\t\n\t\n\tfunction SavitzkyGolay(data, h, options) {\n\t    options = extend({}, defaultOptions, options);\n\t\n\t    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n\t            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\t\n\t\n\t    if (options.windowSize>data.length)\n\t        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n\t    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n\t        throw new RangeError('Derivative should be a positive integer');\n\t    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n\t        throw new RangeError('Polynomial should be a positive integer');\n\t    if (options.polynomial >= 6)\n\t        console.warn('You should not use polynomial grade higher than 5 if you are' +\n\t            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\t\n\t    var windowSize = options.windowSize;\n\t\n\t    var half = Math.floor(windowSize/2);\n\t    var np = data.length;\n\t    var ans = new Array(np);\n\t    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n\t    var hs = 0;\n\t    var constantH = true;\n\t    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n\t        constantH = false;\n\t    }\n\t    else{\n\t        hs = Math.pow(h, options.derivative);\n\t    }\n\t    //console.log(\"Constant h: \"+constantH);\n\t    //For the borders\n\t    for(var i=0;i<half;i++){\n\t        var wg1=weights[half-i-1];\n\t        var wg2=weights[half+i+1];\n\t        var d1 = 0,d2=0;\n\t        for (var l = 0; l < windowSize; l++){\n\t            d1 += wg1[l] * data[l];\n\t            d2 += wg2[l] * data[np-windowSize+l-1];\n\t        }\n\t        if(constantH){\n\t            ans[half-i-1] = d1/hs;\n\t            ans[np-half+i] = d2/hs;\n\t        }\n\t        else{\n\t            hs = getHs(h,half-i-1,half, options.derivative);\n\t            ans[half-i-1] = d1/hs;\n\t            hs = getHs(h,np-half+i,half, options.derivative);\n\t            ans[np-half+i] = d2/hs;\n\t        }\n\t    }\n\t    //For the internal points\n\t    var wg = weights[half];\n\t    for(var i=windowSize;i<np+1;i++){\n\t        var d = 0;\n\t        for (var l = 0; l < windowSize; l++)\n\t            d += wg[l] * data[l+i-windowSize];\n\t        if(!constantH)\n\t            hs = getHs(h,i-half-1,half, options.derivative);\n\t        ans[i-half-1] = d/hs;\n\t    }\n\t    return ans;\n\t}\n\t\n\tfunction getHs(h,center,half,derivative){\n\t    var hs = 0;\n\t    var count = 0;\n\t    for(var i=center-half;i<center+half;i++){\n\t        if(i>=0 && i < h.length-1){\n\t            hs+= (h[i+1]-h[i]);\n\t            count++;\n\t        }\n\t    }\n\t    return Math.pow(hs/count,derivative);\n\t}\n\t\n\tfunction GramPoly(i,m,k,s){\n\t    var Grampoly = 0;\n\t    if(k>0){\n\t        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n\t            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n\t    }\n\t    else{\n\t        if(k==0&&s==0){\n\t            Grampoly=1;\n\t        }\n\t        else{\n\t            Grampoly=0;\n\t        }\n\t    }\n\t    //console.log(Grampoly);\n\t    return Grampoly;\n\t}\n\t\n\tfunction GenFact(a,b){\n\t    var gf=1;\n\t    if(a>=b){\n\t        for(var j=a-b+1;j<=a;j++){\n\t            gf*=j;\n\t        }\n\t    }\n\t    return gf;\n\t}\n\t\n\tfunction Weight(i,t,m,n,s){\n\t    var sum=0;\n\t    for(var k=0;k<=n;k++){\n\t        //console.log(k);\n\t        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n\t    }\n\t    return sum;\n\t}\n\t\n\t/**\n\t *\n\t * @param m  Number of points\n\t * @param n  Polynomial grade\n\t * @param s  Derivative\n\t */\n\tfunction fullWeights(m,n,s){\n\t    var weights = new Array(m);\n\t    var np = Math.floor(m/2);\n\t    for(var t=-np;t<=np;t++){\n\t        weights[t+np] = new Array(m);\n\t        for(var j=-np;j<=np;j++){\n\t            weights[t+np][j+np]=Weight(j,t,np,n,s);\n\t        }\n\t    }\n\t    return weights;\n\t}\n\t\n\t/*function entropy(data,h,options){\n\t    var trend = SavitzkyGolay(data,h,trendOptions);\n\t    var copy = new Array(data.length);\n\t    var sum = 0;\n\t    var max = 0;\n\t    for(var i=0;i<data.length;i++){\n\t        copy[i] = data[i]-trend[i];\n\t    }\n\t\n\t    sum/=data.length;\n\t    console.log(sum+\" \"+max);\n\t    console.log(stat.array.standardDeviation(copy));\n\t    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n\t    return sum;\n\t\n\t}\n\t\n\t\n\t\n\tfunction guessWindowSize(data, h){\n\t    console.log(\"entropy \"+entropy(data,h,trendOptions));\n\t    return 5;\n\t}\n\t*/\n\tmodule.exports = SavitzkyGolay;\n\t \n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.array = __webpack_require__(38);\n\texports.matrix = __webpack_require__(39);\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction compareNumbers(a, b) {\n\t    return a - b;\n\t}\n\t\n\t/**\n\t * Computes the sum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.sum = function sum(values) {\n\t    var sum = 0;\n\t    for (var i = 0; i < values.length; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum;\n\t};\n\t\n\t/**\n\t * Computes the maximum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.max = function max(values) {\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return max;\n\t};\n\t\n\t/**\n\t * Computes the minimum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.min = function min(values) {\n\t    var min = Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t    }\n\t    return min;\n\t};\n\t\n\t/**\n\t * Computes the min and max of the given values\n\t * @param {Array} values\n\t * @returns {{min: number, max: number}}\n\t */\n\texports.minMax = function minMax(values) {\n\t    var min = Infinity;\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return {\n\t        min: min,\n\t        max: max\n\t    };\n\t};\n\t\n\t/**\n\t * Computes the arithmetic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.arithmeticMean = function arithmeticMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / l;\n\t};\n\t\n\t/**\n\t * {@link arithmeticMean}\n\t */\n\texports.mean = exports.arithmeticMean;\n\t\n\t/**\n\t * Computes the geometric mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.geometricMean = function geometricMean(values) {\n\t    var mul = 1;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        mul *= values[i];\n\t    }\n\t    return Math.pow(mul, 1 / l);\n\t};\n\t\n\t/**\n\t * Computes the mean of the log of the given values\n\t * If the return value is exponentiated, it gives the same result as the\n\t * geometric mean.\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.logMean = function logMean(values) {\n\t    var lnsum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        lnsum += Math.log(values[i]);\n\t    }\n\t    return lnsum / l;\n\t};\n\t\n\t/**\n\t * Computes the weighted grand mean for a list of means and sample sizes\n\t * @param {Array} means - Mean values for each set of samples\n\t * @param {Array} samples - Number of original values for each set of samples\n\t * @returns {number}\n\t */\n\texports.grandMean = function grandMean(means, samples) {\n\t    var sum = 0;\n\t    var n = 0;\n\t    var l = means.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += samples[i] * means[i];\n\t        n += samples[i];\n\t    }\n\t    return sum / n;\n\t};\n\t\n\t/**\n\t * Computes the truncated mean of the given values using a given percentage\n\t * @param {Array} values\n\t * @param {number} percent - The percentage of values to keep (range: [0,1])\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var k = Math.floor(l * percent);\n\t    var sum = 0;\n\t    for (var i = k; i < (l - k); i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / (l - 2 * k);\n\t};\n\t\n\t/**\n\t * Computes the harmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.harmonicMean = function harmonicMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] === 0) {\n\t            throw new RangeError('value at index ' + i + 'is zero');\n\t        }\n\t        sum += 1 / values[i];\n\t    }\n\t    return l / sum;\n\t};\n\t\n\t/**\n\t * Computes the contraharmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.contraHarmonicMean = function contraHarmonicMean(values) {\n\t    var r1 = 0;\n\t    var r2 = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        r1 += values[i] * values[i];\n\t        r2 += values[i];\n\t    }\n\t    if (r2 < 0) {\n\t        throw new RangeError('sum of values is negative');\n\t    }\n\t    return r1 / r2;\n\t};\n\t\n\t/**\n\t * Computes the median of the given values\n\t * @param {Array} values\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.median = function median(values, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var half = Math.floor(l / 2);\n\t    if (l % 2 === 0) {\n\t        return (values[half - 1] + values[half]) * 0.5;\n\t    } else {\n\t        return values[half];\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the variance of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.variance = function variance(values, unbiased) {\n\t    if (unbiased === undefined) unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var theVariance = 0;\n\t    var l = values.length;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var x = values[i] - theMean;\n\t        theVariance += x * x;\n\t    }\n\t\n\t    if (unbiased) {\n\t        return theVariance / (l - 1);\n\t    } else {\n\t        return theVariance / l;\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the standard deviation of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.standardDeviation = function standardDeviation(values, unbiased) {\n\t    return Math.sqrt(exports.variance(values, unbiased));\n\t};\n\t\n\texports.standardError = function standardError(values) {\n\t    return exports.standardDeviation(values) / Math.sqrt(values.length);\n\t};\n\t\n\texports.quartiles = function quartiles(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort(compareNumbers);\n\t    }\n\t\n\t    var quart = values.length / 4;\n\t    var q1 = values[Math.ceil(quart) - 1];\n\t    var q2 = exports.median(values, true);\n\t    var q3 = values[Math.ceil(quart * 3) - 1];\n\t\n\t    return {q1: q1, q2: q2, q3: q3};\n\t};\n\t\n\texports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n\t    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n\t};\n\t\n\texports.pooledVariance = function pooledVariance(samples, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var sum = 0;\n\t    var length = 0, l = samples.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var values = samples[i];\n\t        var vari = exports.variance(values);\n\t\n\t        sum += (values.length - 1) * vari;\n\t\n\t        if (unbiased)\n\t            length += values.length - 1;\n\t        else\n\t            length += values.length;\n\t    }\n\t    return sum / length;\n\t};\n\t\n\texports.mode = function mode(values) {\n\t    var l = values.length,\n\t        itemCount = new Array(l),\n\t        i;\n\t    for (i = 0; i < l; i++) {\n\t        itemCount[i] = 0;\n\t    }\n\t    var itemArray = new Array(l);\n\t    var count = 0;\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var index = itemArray.indexOf(values[i]);\n\t        if (index >= 0)\n\t            itemCount[index]++;\n\t        else {\n\t            itemArray[count] = values[i];\n\t            itemCount[count] = 1;\n\t            count++;\n\t        }\n\t    }\n\t\n\t    var maxValue = 0, maxIndex = 0;\n\t    for (i = 0; i < count; i++) {\n\t        if (itemCount[i] > maxValue) {\n\t            maxValue = itemCount[i];\n\t            maxIndex = i;\n\t        }\n\t    }\n\t\n\t    return itemArray[maxIndex];\n\t};\n\t\n\texports.covariance = function covariance(vector1, vector2, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var mean1 = exports.mean(vector1);\n\t    var mean2 = exports.mean(vector2);\n\t\n\t    if (vector1.length !== vector2.length)\n\t        throw \"Vectors do not have the same dimensions\";\n\t\n\t    var cov = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var x = vector1[i] - mean1;\n\t        var y = vector2[i] - mean2;\n\t        cov += x * y;\n\t    }\n\t\n\t    if (unbiased)\n\t        return cov / (l - 1);\n\t    else\n\t        return cov / l;\n\t};\n\t\n\texports.skewness = function skewness(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t\n\t    var s2 = 0, s3 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s3 += dev * dev * dev;\n\t    }\n\t    var m2 = s2 / l;\n\t    var m3 = s3 / l;\n\t\n\t    var g = m3 / (Math.pow(m2, 3 / 2.0));\n\t    if (unbiased) {\n\t        var a = Math.sqrt(l * (l - 1));\n\t        var b = l - 2;\n\t        return (a / b) * g;\n\t    }\n\t    else {\n\t        return g;\n\t    }\n\t};\n\t\n\texports.kurtosis = function kurtosis(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var n = values.length, s2 = 0, s4 = 0;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s4 += dev * dev * dev * dev;\n\t    }\n\t    var m2 = s2 / n;\n\t    var m4 = s4 / n;\n\t\n\t    if (unbiased) {\n\t        var v = s2 / (n - 1);\n\t        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t        var b = s4 / (v * v);\n\t        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t\n\t        return a * b - 3 * c;\n\t    }\n\t    else {\n\t        return m4 / (m2 * m2) - 3;\n\t    }\n\t};\n\t\n\texports.entropy = function entropy(values, eps) {\n\t    if (typeof(eps) === 'undefined') eps = 0;\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * Math.log(values[i] + eps);\n\t    return -sum;\n\t};\n\t\n\texports.weightedMean = function weightedMean(values, weights) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * weights[i];\n\t    return sum;\n\t};\n\t\n\texports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n\t    return Math.sqrt(exports.weightedVariance(values, weights));\n\t};\n\t\n\texports.weightedVariance = function weightedVariance(values, weights) {\n\t    var theMean = exports.weightedMean(values, weights);\n\t    var vari = 0, l = values.length;\n\t    var a = 0, b = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var z = values[i] - theMean;\n\t        var w = weights[i];\n\t\n\t        vari += w * (z * z);\n\t        b += w;\n\t        a += w * w;\n\t    }\n\t\n\t    return vari * (b / (b * b - a));\n\t};\n\t\n\texports.center = function center(values, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    var result = values;\n\t    if (!inPlace)\n\t        result = values.slice();\n\t\n\t    var theMean = exports.mean(result), l = result.length;\n\t    for (var i = 0; i < l; i++)\n\t        result[i] -= theMean;\n\t};\n\t\n\texports.standardize = function standardize(values, standardDev, inPlace) {\n\t    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t    var l = values.length;\n\t    var result = inPlace ? values : new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        result[i] = values[i] / standardDev;\n\t    return result;\n\t};\n\t\n\texports.cumulativeSum = function cumulativeSum(array) {\n\t    var l = array.length;\n\t    var result = new Array(l);\n\t    result[0] = array[0];\n\t    for (var i = 1; i < l; i++)\n\t        result[i] = result[i - 1] + array[i];\n\t    return result;\n\t};\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar arrayStat = __webpack_require__(38);\n\t\n\t// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\t\n\tfunction entropy(matrix, eps) {\n\t    if (typeof(eps) === 'undefined') {\n\t        eps = 0;\n\t    }\n\t    var sum = 0,\n\t        l1 = matrix.length,\n\t        l2 = matrix[0].length;\n\t    for (var i = 0; i < l1; i++) {\n\t        for (var j = 0; j < l2; j++) {\n\t            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n\t        }\n\t    }\n\t    return -sum;\n\t}\n\t\n\tfunction mean(matrix, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        theMean, N, i, j;\n\t\n\t    if (dimension === -1) {\n\t        theMean = [0];\n\t        N = rows * cols;\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = 0; j < cols; j++) {\n\t                theMean[0] += matrix[i][j];\n\t            }\n\t        }\n\t        theMean[0] /= N;\n\t    } else if (dimension === 0) {\n\t        theMean = new Array(cols);\n\t        N = rows;\n\t        for (j = 0; j < cols; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < rows; i++) {\n\t                theMean[j] += matrix[i][j];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else if (dimension === 1) {\n\t        theMean = new Array(rows);\n\t        N = cols;\n\t        for (j = 0; j < rows; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < cols; i++) {\n\t                theMean[j] += matrix[j][i];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t    return theMean;\n\t}\n\t\n\tfunction standardDeviation(matrix, means, unbiased) {\n\t    var vari = variance(matrix, means, unbiased), l = vari.length;\n\t    for (var i = 0; i < l; i++) {\n\t        vari[i] = Math.sqrt(vari[i]);\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction variance(matrix, means, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') {\n\t        unbiased = true;\n\t    }\n\t    means = means || mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum1 = 0, sum2 = 0, x = 0;\n\t        for (var i = 0; i < rows; i++) {\n\t            x = matrix[i][j] - means[j];\n\t            sum1 += x;\n\t            sum2 += x * x;\n\t        }\n\t        if (unbiased) {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n\t        } else {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n\t        }\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction median(matrix) {\n\t    var rows = matrix.length, cols = matrix[0].length;\n\t    var medians = new Array(cols);\n\t\n\t    for (var i = 0; i < cols; i++) {\n\t        var data = new Array(rows);\n\t        for (var j = 0; j < rows; j++) {\n\t            data[j] = matrix[j][i];\n\t        }\n\t        data.sort();\n\t        var N = data.length;\n\t        if (N % 2 === 0) {\n\t            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n\t        } else {\n\t            medians[i] = data[Math.floor(N / 2)];\n\t        }\n\t    }\n\t    return medians;\n\t}\n\t\n\tfunction mode(matrix) {\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        modes = new Array(cols),\n\t        i, j;\n\t    for (i = 0; i < cols; i++) {\n\t        var itemCount = new Array(rows);\n\t        for (var k = 0; k < rows; k++) {\n\t            itemCount[k] = 0;\n\t        }\n\t        var itemArray = new Array(rows);\n\t        var count = 0;\n\t\n\t        for (j = 0; j < rows; j++) {\n\t            var index = itemArray.indexOf(matrix[j][i]);\n\t            if (index >= 0) {\n\t                itemCount[index]++;\n\t            } else {\n\t                itemArray[count] = matrix[j][i];\n\t                itemCount[count] = 1;\n\t                count++;\n\t            }\n\t        }\n\t\n\t        var maxValue = 0, maxIndex = 0;\n\t        for (j = 0; j < count; j++) {\n\t            if (itemCount[j] > maxValue) {\n\t                maxValue = itemCount[j];\n\t                maxIndex = j;\n\t            }\n\t        }\n\t\n\t        modes[i] = itemArray[maxIndex];\n\t    }\n\t    return modes;\n\t}\n\t\n\tfunction skewness(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, l = means.length;\n\t    var skew = new Array(l);\n\t\n\t    for (var j = 0; j < l; j++) {\n\t        var s2 = 0, s3 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s3 += dev * dev * dev;\n\t        }\n\t\n\t        var m2 = s2 / n;\n\t        var m3 = s3 / n;\n\t        var g = m3 / Math.pow(m2, 3 / 2);\n\t\n\t        if (unbiased) {\n\t            var a = Math.sqrt(n * (n - 1));\n\t            var b = n - 2;\n\t            skew[j] = (a / b) * g;\n\t        } else {\n\t            skew[j] = g;\n\t        }\n\t    }\n\t    return skew;\n\t}\n\t\n\tfunction kurtosis(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, m = matrix[0].length;\n\t    var kurt = new Array(m);\n\t\n\t    for (var j = 0; j < m; j++) {\n\t        var s2 = 0, s4 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s4 += dev * dev * dev * dev;\n\t        }\n\t        var m2 = s2 / n;\n\t        var m4 = s4 / n;\n\t\n\t        if (unbiased) {\n\t            var v = s2 / (n - 1);\n\t            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t            var b = s4 / (v * v);\n\t            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t            kurt[j] = a * b - 3 * c;\n\t        } else {\n\t            kurt[j] = m4 / (m2 * m2) - 3;\n\t        }\n\t    }\n\t    return kurt;\n\t}\n\t\n\tfunction standardError(matrix) {\n\t    var samples = matrix.length;\n\t    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n\t    var standardErrors = new Array(l);\n\t    var sqrtN = Math.sqrt(samples);\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        standardErrors[i] = standardDeviations[i] / sqrtN;\n\t    }\n\t    return standardErrors;\n\t}\n\t\n\tfunction covariance(matrix, dimension) {\n\t    return scatter(matrix, undefined, dimension);\n\t}\n\t\n\tfunction scatter(matrix, divisor, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    if (typeof(divisor) === 'undefined') {\n\t        if (dimension === 0) {\n\t            divisor = matrix.length - 1;\n\t        } else if (dimension === 1) {\n\t            divisor = matrix[0].length - 1;\n\t        }\n\t    }\n\t    var means = mean(matrix, dimension),\n\t        rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, s, k;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tfunction correlation(matrix) {\n\t    var means = mean(matrix),\n\t        standardDeviations = standardDeviation(matrix, true, means),\n\t        scores = zScores(matrix, means, standardDeviations),\n\t        rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        i, j;\n\t\n\t    var cor = new Array(cols);\n\t    for (i = 0; i < cols; i++) {\n\t        cor[i] = new Array(cols);\n\t    }\n\t    for (i = 0; i < cols; i++) {\n\t        for (j = i; j < cols; j++) {\n\t            var c = 0;\n\t            for (var k = 0, l = scores.length; k < l; k++) {\n\t                c += scores[k][j] * scores[k][i];\n\t            }\n\t            c /= rows - 1;\n\t            cor[i][j] = c;\n\t            cor[j][i] = c;\n\t        }\n\t    }\n\t    return cor;\n\t}\n\t\n\tfunction zScores(matrix, means, standardDeviations) {\n\t    means = means || mean(matrix);\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n\t    return standardize(center(matrix, means, false), standardDeviations, true);\n\t}\n\t\n\tfunction center(matrix, means, inPlace) {\n\t    means = means || mean(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var row = result[i];\n\t        for (j = 0, jj = row.length; j < jj; j++) {\n\t            row[j] = matrix[i][j] - means[j];\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction standardize(matrix, standardDeviations, inPlace) {\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var resultRow = result[i];\n\t        var sourceRow = matrix[i];\n\t        for (j = 0, jj = resultRow.length; j < jj; j++) {\n\t            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n\t                resultRow[j] = sourceRow[j] / standardDeviations[j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction weightedVariance(matrix, weights) {\n\t    var means = mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum = 0;\n\t        var a = 0, b = 0;\n\t\n\t        for (var i = 0; i < rows; i++) {\n\t            var z = matrix[i][j] - means[j];\n\t            var w = weights[i];\n\t\n\t            sum += w * (z * z);\n\t            b += w;\n\t            a += w * w;\n\t        }\n\t\n\t        vari[j] = sum * (b / (b * b - a));\n\t    }\n\t\n\t    return vari;\n\t}\n\t\n\tfunction weightedMean(matrix, weights, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length,\n\t        means, i, ii, j, w, row;\n\t\n\t    if (dimension === 0) {\n\t        means = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            row = matrix[i];\n\t            w = weights[i];\n\t            for (j = 0; j < cols; j++) {\n\t                means[j] += row[j] * w;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        means = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (j = 0; j < rows; j++) {\n\t            row = matrix[j];\n\t            w = weights[j];\n\t            for (i = 0; i < cols; i++) {\n\t                means[j] += row[i] * w;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    var weightSum = arrayStat.sum(weights);\n\t    if (weightSum !== 0) {\n\t        for (i = 0, ii = means.length; i < ii; i++) {\n\t            means[i] /= weightSum;\n\t        }\n\t    }\n\t    return means;\n\t}\n\t\n\tfunction weightedCovariance(matrix, weights, means, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    var s1 = 0, s2 = 0;\n\t    for (var i = 0, ii = weights.length; i < ii; i++) {\n\t        s1 += weights[i];\n\t        s2 += weights[i] * weights[i];\n\t    }\n\t    var factor = s1 / (s1 * s1 - s2);\n\t    return weightedScatter(matrix, weights, means, factor, dimension);\n\t}\n\t\n\tfunction weightedScatter(matrix, weights, means, factor, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    if (typeof(factor) === 'undefined') {\n\t        factor = 1;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, k, s;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tmodule.exports = {\n\t    entropy: entropy,\n\t    mean: mean,\n\t    standardDeviation: standardDeviation,\n\t    variance: variance,\n\t    median: median,\n\t    mode: mode,\n\t    skewness: skewness,\n\t    kurtosis: kurtosis,\n\t    standardError: standardError,\n\t    covariance: covariance,\n\t    scatter: scatter,\n\t    correlation: correlation,\n\t    zScores: zScores,\n\t    center: center,\n\t    standardize: standardize,\n\t    weightedVariance: weightedVariance,\n\t    weightedMean: weightedMean,\n\t    weightedCovariance: weightedCovariance,\n\t    weightedScatter: weightedScatter\n\t};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar SD = __webpack_require__(1);\n\tvar PeakPicking2D = __webpack_require__(41);\n\tvar PeakOptimizer = __webpack_require__(45);\n\tvar JcampConverter=__webpack_require__(3);\n\t\n\tfunction NMR2D(sd) {\n\t    SD.call(this, sd); // Héritage\n\t}\n\t\n\tNMR2D.prototype = Object.create(SD.prototype);\n\tNMR2D.prototype.constructor = NMR2D;\n\t\n\tNMR2D.fromJcamp = function(jcamp,options) {\n\t    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new NMR2D(spectrum);\n\t}\n\t\n\tNMR2D.prototype.isHomoNuclear=function(){\n\t    return this.sd.xType==this.sd.yType;\n\t}\n\t\n\t//Returns the observe frequency in the direct dimension\n\tNMR2D.prototype.observeFrequencyX=function(){\n\t    return this.sd.spectra[0].observeFrequency;\n\t}\n\t\n\t//Returns the observe frequency in the indirect dimension\n\tNMR2D.prototype.observeFrequencyY=function(){\n\t    return this.sd.indirectFrequency;\n\t}\n\t\n\t/**\n\t * Returns the solvent name\n\t */\n\tNMR2D.prototype.getSolventName=function(){\n\t    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]).replace(\"<\",\"\").replace(\">\",\"\");\n\t}\n\t\n\t/**\n\t * This function returns the units of the direct dimension. It overrides the SD getXUnits function\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getXUnits = function(){\n\t    return this.sd.ntuples[1].units;\n\t}\n\t/**\n\t * This function returns the units of the indirect dimension. It overrides the SD getYUnits function\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getYUnits = function(){\n\t    return this.sd.ntuples[0].units;\n\t}\n\t/**\n\t * Returns the units of the dependent variable\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getZUnits = function(){\n\t    return this.sd.ntuples[2].units;\n\t}\n\t/**\n\t * Overwrite this function. Now, the Y axe refers to the indirect dimension\n\t * @returns {sd.minMax.maxY}\n\t */\n\tNMR2D.prototype.getLastY = function(){\n\t    return this.sd.minMax.maxY;\n\t}\n\t/**\n\t * * Overwrite this function. Now, the Y axe refers to the indirect dimension\n\t * @returns {sd.minMax.minY}\n\t */\n\tNMR2D.prototype.getFirstY = function(){\n\t    return this.sd.minMax.minY;\n\t}\n\t\n\t//Returns the separation between 2 consecutive points in the indirect domain\n\tNMR2D.prototype.getDeltaY=function(){\n\t    return ( this.getLastY()-this.getFirstY()) / (this.getNbSubSpectra()-1);\n\t}\n\t\n\t/**\n\t * @function nmrPeakDetection2D(options)\n\t * This function process the given spectraData and tries to determine the NMR signals. \n\t + Returns an NMRSignal2D array containing all the detected 2D-NMR Signals\n\t * @param\toptions:+Object\t\t\tObject containing the options\n\t * @option\tthresholdFactor:number\tA factor to scale the automatically determined noise threshold.\n\t * @returns\t+Object\tset of NMRSignal2D\n\t */\n\tNMR2D.prototype.nmrPeakDetection2D=function(options){\n\t    options = options||{};\n\t    if(!options.thresholdFactor)\n\t        options.thresholdFactor=1;\n\t    var id = Math.round(Math.random()*255);\n\t    if(!options.id){\n\t        id=options.id;\n\t    }\n\t    var peakList = PeakPicking2D.findPeaks2D(this, options.thresholdFactor);\n\t\n\t    //lets add an unique ID for each peak.\n\t    for(var i=0;i<peakList.length;i++){\n\t        peakList[i]._highlight=[id+\"_\"+i];\n\t    }\n\t    if(options.references)\n\t        PeakOptimizer.alignDimensions(peakList,options.references);\n\t\n\t    return peakList;\n\t}\n\t\n\t/**\n\t* Returns the noise factor depending on the nucleus.\n\t*/\n\tNMR2D.prototype.getNMRPeakThreshold=function(nucleus) {\n\t    if (nucleus == \"1H\")\n\t        return 3.0;\n\t    if (nucleus ==\"13C\")\n\t        return 5.0;\n\t    return 1.0;\n\t}\n\t\n\t/**\n\t* Returns the nucleus in the specified dimension\n\t*/\n\tNMR2D.prototype.getNucleus=function(dim){\n\t    if(dim==1)\n\t        return this.sd.xType;\n\t    if(dim==2)\n\t        return this.sd.yType;\n\t    return this.sd.xType;\n\t}\n\t\n\tmodule.exports = NMR2D;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lib = __webpack_require__(42);\n\tvar PeakOptimizer = __webpack_require__(45);\n\tvar SimpleClustering =  __webpack_require__(46);\n\tvar StatArray = __webpack_require__(2);\n\tvar FFTUtils = lib.FFTUtils;\n\t\n\tvar PeakPicking2D= {\n\t    DEBUG : false,\n\t    smallFilter : [\n\t        [0, 0, 1, 2, 2, 2, 1, 0, 0],\n\t        [0, 1, 4, 7, 7, 7, 4, 1, 0],\n\t        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n\t        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n\t        [2, 7, 0, -23, -40, -23, 0, 7, 2],\n\t        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n\t        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n\t        [0, 1, 3, 7, 7, 7, 3, 1, 0],\n\t        [0, 0, 1, 2, 2, 2, 1, 0, 0]],\n\t\n\t\n\t    //How noisy is the spectrum depending on the kind of experiment.\n\t    getLoGnStdDevNMR : function(spectraData) {\n\t    if (spectraData.isHomoNuclear())\n\t        return 1.5\n\t    else\n\t        return 3;\n\t    },\n\t\n\t    findPeaks2D : function(spectraData, thresholdFactor){\n\t        if(thresholdFactor==0)\n\t            thresholdFactor=1;\n\t        if(thresholdFactor<0)\n\t            thresholdFactor=-thresholdFactor;\n\t        var nbPoints = spectraData.getNbPoints();\n\t        var nbSubSpectra = spectraData.getNbSubSpectra();\n\t\n\t        var data = new Array(nbPoints * nbSubSpectra);\n\t        //var data = new Array(nbPoints * nbSubSpectra/2);\n\t\n\t        var isHomonuclear = spectraData.isHomoNuclear();\n\t\n\t        //var sum = new Array(nbPoints);\n\t\n\t        for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra; iSubSpectra++) {\n\t            var spectrum = spectraData.getYData(iSubSpectra);\n\t            for (var iCol = 0; iCol < nbPoints; iCol++) {\n\t                if(isHomonuclear){\n\t                    data[iSubSpectra * nbPoints + iCol] =(spectrum[iCol]>0?spectrum[iCol]:0);\n\t                }\n\t                else{\n\t                    data[iSubSpectra * nbPoints + iCol] =Math.abs(spectrum[iCol]);\n\t                }\n\t            }\n\t        }\n\t\n\t        var nStdDev = this.getLoGnStdDevNMR(spectraData);\n\t        if(isHomonuclear){\n\t            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n\t            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);//)1.5);\n\t            var peaksMax1 = this.findPeaks2DMax(data, convolutedSpectrum, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);//2.0);\n\t            for(var i=0;i<peaksMC1.length;i++)\n\t                peaksMax1.push(peaksMC1[i]);\n\t            //console.log(peaksMax1);\n\t            return PeakOptimizer.enhanceSymmetry(this.createSignals2D(peaksMax1,spectraData,24));\n\t\n\t        }\n\t        else{\n\t            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n\t            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);\n\t            //Peak2D[] peaksMC1 = PeakPicking2D.findPeaks2DMax(data, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);\n\t            //Remove peaks with less than 3% of the intensity of the highest peak\n\t            return this.createSignals2D(PeakOptimizer.clean(peaksMC1, 0.05), spectraData,24);\n\t        }\n\t\n\t    },\n\t    /**\n\t     Calculates the 1st derivative of the 2D matrix, using the LoG kernel approximation\n\t     */\n\t    convoluteWithLoG : function(inputSpectrum, nRows, nCols){\n\t        var ftSpectrum = new Array(nCols * nRows);\n\t        for (var i = nRows * nCols-1; i >=0; i--){\n\t            ftSpectrum[i] = inputSpectrum[i];\n\t        }\n\t\n\t        ftSpectrum = FFTUtils.fft2DArray(ftSpectrum, nRows, nCols);\n\t\n\t        var dim = this.smallFilter.length;\n\t        var ftFilterData = new Array(nCols * nRows);\n\t        for(var i=nCols * nRows-1;i>=0;i--){\n\t            ftFilterData[i]=0;\n\t        }\n\t\n\t        var iRow, iCol;\n\t        var shift = (dim - 1) / 2;\n\t        //console.log(dim);\n\t        for (var ir = 0; ir < dim; ir++) {\n\t            iRow = (ir - shift + nRows) % nRows;\n\t            for (var ic = 0; ic < dim; ic++) {\n\t                iCol = (ic - shift + nCols) % nCols;\n\t                ftFilterData[iRow * nCols + iCol] = this.smallFilter[ir][ic];\n\t            }\n\t        }\n\t\n\t        ftFilterData = FFTUtils.fft2DArray(ftFilterData, nRows, nCols);\n\t\n\t        var ftRows = nRows * 2;\n\t        var ftCols = nCols / 2 + 1;\n\t        FFTUtils.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\t\n\t        return  FFTUtils.ifft2DArray(ftSpectrum, ftRows, ftCols);\n\t    },\n\t    /**\n\t     Detects all the 2D-peaks in the given spectrum based on center of mass logic.\n\t     */\n\t    findPeaks2DLoG : function(inputSpectrum, convolutedSpectrum, nRows, nCols, nStdDev) {\n\t        var threshold = 0;\n\t        for(var i=nCols*nRows-2;i>=0;i--)\n\t            threshold+=Math.pow(convolutedSpectrum[i]-convolutedSpectrum[i+1],2);\n\t        threshold=-Math.sqrt(threshold);\n\t        threshold*=nStdDev/nRows;\n\t\n\t        var bitmask = new Array(nCols * nRows);\n\t        for(var i=nCols * nRows-1;i>=0;i--){\n\t            bitmask[i]=0;\n\t        }\n\t        var nbDetectedPoints = 0;\n\t        var lasti=-1;\n\t        for (var i = convolutedSpectrum.length-1; i >=0 ; i--) {\n\t            if (convolutedSpectrum[i] < threshold) {\n\t                bitmask[i] = 1;\n\t                nbDetectedPoints++;\n\t            }\n\t        }\n\t        var iStart = 0;\n\t        //int ranges = 0;\n\t        var peakList = [];\n\t\n\t        while (nbDetectedPoints != 0) {\n\t            for (iStart; iStart < bitmask.length && bitmask[iStart]==0; iStart++){};\n\t            //\n\t            if (iStart == bitmask.length)\n\t                break;\n\t\n\t            nbDetectedPoints -= this.extractArea(inputSpectrum, convolutedSpectrum,\n\t                bitmask, iStart, nRows, nCols, peakList, threshold);\n\t        }\n\t\n\t        if (peakList.length > 0&&this.DEBUG) {\n\t            console.log(\"No peak found\");\n\t        }\n\t        return peakList;\n\t    },\n\t    /**\n\t     Detects all the 2D-peaks in the given spectrum based on the Max logic.\n\t     */\n\t    findPeaks2DMax : function(inputSpectrum, cs, nRows, nCols, nStdDev) {\n\t        var threshold = 0;\n\t        for(var i=nCols*nRows-2;i>=0;i--)\n\t            threshold+=Math.pow(cs[i]-cs[i+1],2);\n\t        threshold=-Math.sqrt(threshold);\n\t        threshold*=nStdDev/nRows;\n\t\n\t        var rowI,colI;\n\t        var peakListMax = [];\n\t        var tmpIndex = 0;\n\t        for (var i = 0; i < cs.length; i++) {\n\t            if (cs[i] < threshold) {\n\t                //It is a peak?\n\t                rowI=Math.floor(i/nCols);\n\t                colI=i%nCols;\n\t                //Verifies if this point is a peak;\n\t                if(rowI>0&&rowI+1<nRows&&colI+1<nCols&&colI>0){\n\t                    //It is the minimum in the same row\n\t                    if(cs[i]<cs[i+1]&&cs[i]<cs[i-1]){\n\t                        //It is the minimum in the previous row\n\t                        tmpIndex=(rowI-1)*nCols+colI;\n\t                        if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t                            //It is the minimum in the next row\n\t                            tmpIndex=(rowI+1)*nCols+colI;\n\t                            if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t                                peakListMax.push({x:colI,y:rowI,z:inputSpectrum[i]});\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return peakListMax;\n\t    },\n\t    /*\n\t     This function detects the peaks\n\t     */\n\t    extractArea : function(spectrum, convolutedSpectrum, bitmask, iStart,\n\t                                                   nRows, nCols, peakList, threshold) {\n\t        var iRow = Math.floor(iStart / nCols);\n\t        var iCol = iStart % nCols;\n\t        var peakPoints =[];\n\t        //console.log(iStart+\" \"+iRow+\" \"+iCol);\n\t        // scanBitmask(bitmask, convolutedSpectrum, nRows, nCols, iRow, iCol,\n\t        // peakPoints);\n\t        this.scanBitmask(bitmask, nRows, nCols, iRow, iCol, peakPoints);\n\t        //console.log(\"extractArea.lng \"+peakPoints.length);\n\t        var x = new Array(peakPoints.length);\n\t        var y = new Array(peakPoints.length);\n\t        var z = new Array(peakPoints.length);\n\t        var nValues = peakPoints.length;\n\t        var xAverage = 0.0;\n\t        var yAverage = 0.0;\n\t        var zSum = 0.0;\n\t        if (nValues >= 9) {\n\t            if (this.DEBUG)\n\t                console.log(\"nValues=\" + nValues);\n\t            var maxValue = Number.NEGATIVE_INFINITY;\n\t            var maxIndex = -1;\n\t            for (var i = 0; i < nValues; i++) {\n\t                var pt = (peakPoints.splice(0,1))[0];\n\t                x[i] = pt[0];\n\t                y[i] = pt[1];\n\t                z[i] = spectrum[pt[1] * nCols + pt[0]];\n\t                xAverage += x[i] * z[i];\n\t                yAverage += y[i] * z[i];\n\t                zSum += z[i];\n\t                if (z[i] > maxValue) {\n\t                    maxValue = z[i];\n\t                    maxIndex = i;\n\t                }\n\t            }\n\t            if (maxIndex != -1) {\n\t                xAverage /= zSum;\n\t                yAverage /= zSum;\n\t                var newPeak = {x:xAverage, y:yAverage, z:zSum};\n\t                var minmax;\n\t                minmax =StatArray.minMax(x);\n\t                newPeak.minX=minmax.min;\n\t                newPeak.maxX=minmax.max;\n\t                minmax = StatArray.minMax(y);\n\t                newPeak.minY=minmax.min;\n\t                newPeak.maxY=minmax.max;\n\t                peakList.push(newPeak);\n\t            }\n\t        }\n\t        return nValues;\n\t    },\n\t    /*\n\t     Return all the peaks(x,y points) that composes a signal.\n\t     */\n\t    scanBitmask : function(bitmask, nRows, nCols, iRow, iCol, peakPoints) {\n\t        //console.log(nRows+\" \"+iRow+\" \"+nCols+\" \"+iCol);\n\t        if (iRow < 0 || iCol < 0 || iCol == nCols || iRow == nRows)\n\t            return;\n\t        if (bitmask[iRow * nCols + iCol]) {\n\t            bitmask[iRow * nCols + iCol] = 0;\n\t            peakPoints.push([iCol, iRow]);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow + 1, iCol, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow - 1, iCol, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol + 1, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol - 1, peakPoints);\n\t        }\n\t    },\n\t    /**\n\t     This function converts a set of 2D-peaks in 2D-signals. Each signal could be composed\n\t     of many 2D-peaks, and it has some additional information related to the NMR spectrum.\n\t     */\n\t    createSignals2D : function(peaks, spectraData, tolerance){\n\t        //console.log(peaks.length);\n\t        var signals=[];\n\t        var nbSubSpectra = spectraData.getNbSubSpectra();\n\t\n\t        var bf1=spectraData.observeFrequencyX();\n\t        var bf2=spectraData.observeFrequencyY();\n\t\n\t        var firstY = spectraData.getFirstY();\n\t        var lastY = spectraData.getLastY();\n\t        var dy = spectraData.getDeltaY();\n\t\n\t        //console.log(firstY+\" \"+lastY+\" \"+dy+\" \"+nbSubSpectra);\n\t        //spectraData.setActiveElement(0);\n\t        var noValid=0;\n\t        for (var i = peaks.length-1; i >=0 ; i--) {\n\t            //console.log(peaks[i].x+\" \"+spectraData.arrayPointToUnits(peaks[i].x));\n\t            //console.log(peaks[i].y+\" \"+(firstY + dy * (peaks[i].y)));\n\t            peaks[i].x=(spectraData.arrayPointToUnits(peaks[i].x));\n\t            peaks[i].y=(firstY + dy * (peaks[i].y));\n\t\n\t            //console.log(peaks[i])\n\t            //Still having problems to correctly detect peaks on those areas. So I'm removing everything there.\n\t            if(peaks[i].y<-1||peaks[i].y>=210){\n\t                peaks.splice(i,1);\n\t            }\n\t        }\n\t        //console.log(peaks);\n\t        //The connectivity matrix is an square and symmetric matrix, so we'll only store the upper diagonal in an\n\t        //array like form\n\t        var connectivity = [];\n\t        var tmp=0;\n\t        tolerance*=tolerance;\n\t        //console.log(tolerance);\n\t        for (var i = 0; i < peaks.length; i++) {\n\t            for (var j = i; j < peaks.length; j++) {\n\t                tmp=Math.pow((peaks[i].x-peaks[j].x)*bf1,2)+Math.pow((peaks[i].y-peaks[j].y)*bf2,2);\n\t                //Console.log(peaks[i].getX()+\" \"+peaks[j].getX()+\" \"+tmp);\n\t                if(tmp<tolerance){//30*30Hz We cannot distinguish peaks with less than 20 Hz of separation\n\t                    connectivity.push(1);\n\t                }\n\t                else{\n\t                    connectivity.push(0);\n\t                }\n\t            }\n\t        }\n\t\n\t        //console.log(connectivity);\n\t\n\t        var clusters = SimpleClustering.fullClusterGenerator(connectivity);\n\t\n\t        //console.log(clusters)\n\t\n\t        var signals = [];\n\t        if (peaks != null) {\n\t            var xValue, yValue;\n\t            for (var iCluster = 0; iCluster < clusters.length; iCluster++) {\n\t                var signal={nucleusX:spectraData.getNucleus(1),nucleusY:spectraData.getNucleus(2)};\n\t                signal.resolutionX=( spectraData.getLastX()-spectraData.getFirstX()) / spectraData.getNbPoints();\n\t                signal.resolutionY=dy;\n\t                var peaks2D = [];\n\t                signal.shiftX = 0;\n\t                signal.shiftY = 0;\n\t                var sumZ = 0;\n\t                for(var jPeak = clusters[iCluster].length-1;jPeak>=0;jPeak--){\n\t                    if(clusters[iCluster][jPeak]==1){\n\t                        peaks2D.push(peaks[jPeak]);\n\t                        signal.shiftX+=peaks[jPeak].x*peaks[jPeak].z;\n\t                        signal.shiftY+=peaks[jPeak].y*peaks[jPeak].z;\n\t                        sumZ+=peaks[jPeak].z;\n\t                    }\n\t                }\n\t                signal.shiftX/=sumZ;\n\t                signal.shiftY/=sumZ;\n\t                signal.peaks = peaks2D;\n\t                signals.push(signal);\n\t            }\n\t        }\n\t        //console.log(signals);\n\t        return signals;\n\t    }\n\t}\n\t\n\tmodule.exports = PeakPicking2D;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.FFTUtils = __webpack_require__(43);\n\texports.FFT = __webpack_require__(44);\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar FFT = __webpack_require__(44);\n\t\n\tvar FFTUtils= {\n\t    DEBUG : false,\n\t\n\t    /**\n\t     * Calculates the inverse of a 2D Fourier transform\n\t     *\n\t     * @param ft\n\t     * @param ftRows\n\t     * @param ftCols\n\t     * @return\n\t     */\n\t    ifft2DArray : function(ft, ftRows, ftCols){\n\t        var tempTransform = new Array(ftRows * ftCols);\n\t        var nRows = ftRows / 2;\n\t        var nCols = (ftCols - 1) * 2;\n\t        // reverse transform columns\n\t        FFT.init(nRows);\n\t        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n\t        for (var iCol = 0; iCol < ftCols; iCol++) {\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tmpCols.re[iRow] = ft[(iRow * 2) * ftCols + iCol];\n\t                tmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];\n\t            }\n\t            //Unnormalized inverse transform\n\t            FFT.bt(tmpCols.re, tmpCols.im);\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tempTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t                tempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t            }\n\t        }\n\t\n\t        // reverse row transform\n\t        var finalTransform = new Array(nRows * nCols);\n\t        FFT.init(nCols);\n\t        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n\t        var scale = nCols * nRows;\n\t        for (var iRow = 0; iRow < ftRows; iRow += 2) {\n\t            tmpRows.re[0] = tempTransform[iRow * ftCols];\n\t            tmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];\n\t            for (var iCol = 1; iCol < ftCols; iCol++) {\n\t                tmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];\n\t                tmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];\n\t                tmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];\n\t                tmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];\n\t            }\n\t            //Unnormalized inverse transform\n\t            FFT.bt(tmpRows.re, tmpRows.im);\n\t\n\t            var indexB = (iRow / 2) * nCols;\n\t            for (var iCol = nCols - 1; iCol >= 0; iCol--) {\n\t                finalTransform[indexB + iCol] = tmpRows.re[iCol] / scale;\n\t            }\n\t        }\n\t        return finalTransform;\n\t    },\n\t    /**\n\t     * Calculates the fourier transform of a matrix of size (nRows,nCols) It is\n\t     * assumed that both nRows and nCols are a power of two\n\t     *\n\t     * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the\n\t     * even rows contain the real part and the odd rows the imaginary part of the\n\t     * transform\n\t     * @param data\n\t     * @param nRows\n\t     * @param nCols\n\t     * @return\n\t     */\n\t    fft2DArray:function(data, nRows, nCols) {\n\t        var ftCols = (nCols / 2 + 1);\n\t        var ftRows = nRows * 2;\n\t        var tempTransform = new Array(ftRows * ftCols);\n\t        FFT.init(nCols);\n\t        // transform rows\n\t        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n\t        var row1 = {re: new Array(nCols), im: new Array(nCols)}\n\t        var row2 = {re: new Array(nCols), im: new Array(nCols)}\n\t        var index, iRow0, iRow1, iRow2, iRow3;\n\t        for (var iRow = 0; iRow < nRows / 2; iRow++) {\n\t            index = (iRow * 2) * nCols;\n\t            tmpRows.re = data.slice(index, index + nCols);\n\t\n\t            index = (iRow * 2 + 1) * nCols;\n\t            tmpRows.im = data.slice(index, index + nCols);\n\t\n\t            FFT.fft1d(tmpRows.re, tmpRows.im);\n\t\n\t            this.reconstructTwoRealFFT(tmpRows, row1, row2);\n\t            //Now lets put back the result into the output array\n\t            iRow0 = (iRow * 4) * ftCols;\n\t            iRow1 = (iRow * 4 + 1) * ftCols;\n\t            iRow2 = (iRow * 4 + 2) * ftCols;\n\t            iRow3 = (iRow * 4 + 3) * ftCols;\n\t            for (var k = ftCols - 1; k >= 0; k--) {\n\t                tempTransform[iRow0 + k] = row1.re[k];\n\t                tempTransform[iRow1 + k] = row1.im[k];\n\t                tempTransform[iRow2 + k] = row2.re[k];\n\t                tempTransform[iRow3 + k] = row2.im[k];\n\t            }\n\t        }\n\t\n\t        //console.log(tempTransform);\n\t        row1 = null;\n\t        row2 = null;\n\t        // transform columns\n\t        var finalTransform = new Array(ftRows * ftCols);\n\t        FFT.init(nRows);\n\t        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n\t        for (var iCol = ftCols - 1; iCol >= 0; iCol--) {\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tmpCols.re[iRow] = tempTransform[(iRow * 2) * ftCols + iCol];\n\t                tmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];\n\t            }\n\t            FFT.fft1d(tmpCols.re, tmpCols.im);\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                finalTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t                finalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t            }\n\t        }\n\t\n\t        //console.log(finalTransform);\n\t        return finalTransform;\n\t\n\t    },\n\t    /**\n\t     *\n\t     * @param fourierTransform\n\t     * @param realTransform1\n\t     * @param realTransform2\n\t     *\n\t     * Reconstructs the individual Fourier transforms of two simultaneously\n\t     * transformed series. Based on the Symmetry relationships (the asterisk\n\t     * denotes the complex conjugate)\n\t     *\n\t     * F_{N-n} = F_n^{*} for a purely real f transformed to F\n\t     *\n\t     * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G\n\t     *\n\t     */\n\t    reconstructTwoRealFFT:function(fourierTransform, realTransform1, realTransform2) {\n\t        var length = fourierTransform.re.length;\n\t\n\t        // the components n=0 are trivial\n\t        realTransform1.re[0] = fourierTransform.re[0];\n\t        realTransform1.im[0] = 0.0;\n\t        realTransform2.re[0] = fourierTransform.im[0];\n\t        realTransform2.im[0] = 0.0;\n\t        var rm, rp, im, ip, j;\n\t        for (var i = length / 2; i > 0; i--) {\n\t            j = length - i;\n\t            rm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);\n\t            rp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);\n\t            im = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);\n\t            ip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);\n\t            realTransform1.re[i] = rp;\n\t            realTransform1.im[i] = im;\n\t            realTransform1.re[j] = rp;\n\t            realTransform1.im[j] = -im;\n\t            realTransform2.re[i] = ip;\n\t            realTransform2.im[i] = -rm;\n\t            realTransform2.re[j] = ip;\n\t            realTransform2.im[j] = rm;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * In place version of convolute 2D\n\t     *\n\t     * @param ftSignal\n\t     * @param ftFilter\n\t     * @param ftRows\n\t     * @param ftCols\n\t     * @return\n\t     */\n\t    convolute2DI:function(ftSignal, ftFilter, ftRows, ftCols) {\n\t        var re, im;\n\t        for (var iRow = 0; iRow < ftRows / 2; iRow++) {\n\t            for (var iCol = 0; iCol < ftCols; iCol++) {\n\t                //\n\t                re = ftSignal[(iRow * 2) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2) * ftCols + iCol]\n\t                - ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2 + 1) * ftCols + iCol];\n\t                im = ftSignal[(iRow * 2) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2 + 1) * ftCols + iCol]\n\t                + ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2) * ftCols + iCol];\n\t                //\n\t                ftSignal[(iRow * 2) * ftCols + iCol] = re;\n\t                ftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;\n\t            }\n\t        }\n\t    },\n\t    /**\n\t     *\n\t     * @param data\n\t     * @param kernel\n\t     * @param nRows\n\t     * @param nCols\n\t     * @returns {*}\n\t     */\n\t    convolute:function(data, kernel, nRows, nCols){\n\t        var ftSpectrum = new Array(nCols * nRows);\n\t        for (var i = 0; i<nRows * nCols; i++){\n\t            ftSpectrum[i] = data[i];\n\t        }\n\t\n\t        ftSpectrum = this.fft2DArray(ftSpectrum, nRows, nCols);\n\t\n\t        var dim = kernel.length;\n\t        var ftFilterData = new Array(nCols * nRows);\n\t        for(var i=0;i<nCols * nRows;i++){\n\t            ftFilterData[i]=0;\n\t        }\n\t\n\t        var iRow, iCol;\n\t        var shift = (dim - 1) / 2;\n\t        //console.log(dim);\n\t        for (var ir = 0; ir < dim; ir++) {\n\t            iRow = (ir - shift + nRows) % nRows;\n\t            for (var ic = 0; ic < dim; ic++) {\n\t                iCol = (ic - shift + nCols) % nCols;\n\t                ftFilterData[iRow * nCols + iCol] = kernel[ir][ic];\n\t            }\n\t        }\n\t\n\t        ftFilterData = this.fft2DArray(ftFilterData, nRows, nCols);\n\t\n\t        var ftRows = nRows * 2;\n\t        var ftCols = nCols / 2 + 1;\n\t        this.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\t\n\t        return  this.ifft2DArray(ftSpectrum, ftRows, ftCols);\n\t    }\n\t}\n\t\n\tmodule.exports = FFTUtils;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Fast Fourier Transform module\n\t * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n\t */\n\tvar FFT = (function(){\n\t  var FFT;  \n\t  \n\t  if(true) {\n\t    FFT = exports;   // for CommonJS\n\t  } else {\n\t    FFT = {};\n\t  }\n\t  \n\t  var version = {\n\t    release: '0.3.0',\n\t    date: '2013-03'\n\t  };\n\t  FFT.toString = function() {\n\t    return \"version \" + version.release + \", released \" + version.date;\n\t  };\n\t\n\t  // core operations\n\t  var _n = 0,          // order\n\t      _bitrev = null,  // bit reversal table\n\t      _cstb = null;    // sin/cos table\n\t\n\t  var core = {\n\t    init : function(n) {\n\t      if(n !== 0 && (n & (n - 1)) === 0) {\n\t        _n = n;\n\t        core._initArray();\n\t        core._makeBitReversalTable();\n\t        core._makeCosSinTable();\n\t      } else {\n\t        throw new Error(\"init: radix-2 required\");\n\t      }\n\t    },\n\t    // 1D-FFT\n\t    fft1d : function(re, im) {\n\t      core.fft(re, im, 1);\n\t    },\n\t    // 1D-IFFT\n\t    ifft1d : function(re, im) {\n\t      var n = 1/_n;\n\t      core.fft(re, im, -1);\n\t      for(var i=0; i<_n; i++) {\n\t        re[i] *= n;\n\t        im[i] *= n;\n\t      }\n\t    },\n\t     // 1D-IFFT\n\t    bt1d : function(re, im) {\n\t      core.fft(re, im, -1);\n\t    },\n\t    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n\t    fft2d : function(re, im) {\n\t      var tre = [],\n\t          tim = [],\n\t          i = 0;\n\t      // x-axis\n\t      for(var y=0; y<_n; y++) {\n\t        i = y*_n;\n\t        for(var x1=0; x1<_n; x1++) {\n\t          tre[x1] = re[x1 + i];\n\t          tim[x1] = im[x1 + i];\n\t        }\n\t        core.fft1d(tre, tim);\n\t        for(var x2=0; x2<_n; x2++) {\n\t          re[x2 + i] = tre[x2];\n\t          im[x2 + i] = tim[x2];\n\t        }\n\t      }\n\t      // y-axis\n\t      for(var x=0; x<_n; x++) {\n\t        for(var y1=0; y1<_n; y1++) {\n\t          i = x + y1*_n;\n\t          tre[y1] = re[i];\n\t          tim[y1] = im[i];\n\t        }\n\t        core.fft1d(tre, tim);\n\t        for(var y2=0; y2<_n; y2++) {\n\t          i = x + y2*_n;\n\t          re[i] = tre[y2];\n\t          im[i] = tim[y2];\n\t        }\n\t      }\n\t    },\n\t    // 2D-IFFT\n\t    ifft2d : function(re, im) {\n\t      var tre = [],\n\t          tim = [],\n\t          i = 0;\n\t      // x-axis\n\t      for(var y=0; y<_n; y++) {\n\t        i = y*_n;\n\t        for(var x1=0; x1<_n; x1++) {\n\t          tre[x1] = re[x1 + i];\n\t          tim[x1] = im[x1 + i];\n\t        }\n\t        core.ifft1d(tre, tim);\n\t        for(var x2=0; x2<_n; x2++) {\n\t          re[x2 + i] = tre[x2];\n\t          im[x2 + i] = tim[x2];\n\t        }\n\t      }\n\t      // y-axis\n\t      for(var x=0; x<_n; x++) {\n\t        for(var y1=0; y1<_n; y1++) {\n\t          i = x + y1*_n;\n\t          tre[y1] = re[i];\n\t          tim[y1] = im[i];\n\t        }\n\t        core.ifft1d(tre, tim);\n\t        for(var y2=0; y2<_n; y2++) {\n\t          i = x + y2*_n;\n\t          re[i] = tre[y2];\n\t          im[i] = tim[y2];\n\t        }\n\t      }\n\t    },\n\t    // core operation of FFT\n\t    fft : function(re, im, inv) {\n\t      var d, h, ik, m, tmp, wr, wi, xr, xi,\n\t          n4 = _n >> 2;\n\t      // bit reversal\n\t      for(var l=0; l<_n; l++) {\n\t        m = _bitrev[l];\n\t        if(l < m) {\n\t          tmp = re[l];\n\t          re[l] = re[m];\n\t          re[m] = tmp;\n\t          tmp = im[l];\n\t          im[l] = im[m];\n\t          im[m] = tmp;\n\t        }\n\t      }\n\t      // butterfly operation\n\t      for(var k=1; k<_n; k<<=1) {\n\t        h = 0;\n\t        d = _n/(k << 1);\n\t        for(var j=0; j<k; j++) {\n\t          wr = _cstb[h + n4];\n\t          wi = inv*_cstb[h];\n\t          for(var i=j; i<_n; i+=(k<<1)) {\n\t            ik = i + k;\n\t            xr = wr*re[ik] + wi*im[ik];\n\t            xi = wr*im[ik] - wi*re[ik];\n\t            re[ik] = re[i] - xr;\n\t            re[i] += xr;\n\t            im[ik] = im[i] - xi;\n\t            im[i] += xi;\n\t          }\n\t          h += d;\n\t        }\n\t      }\n\t    },\n\t    // initialize the array (supports TypedArray)\n\t    _initArray : function() {\n\t      if(typeof Uint32Array !== 'undefined') {\n\t        _bitrev = new Uint32Array(_n);\n\t      } else {\n\t        _bitrev = [];\n\t      }\n\t      if(typeof Float64Array !== 'undefined') {\n\t        _cstb = new Float64Array(_n*1.25);\n\t      } else {\n\t        _cstb = [];\n\t      }\n\t    },\n\t    // zero padding\n\t    _paddingZero : function() {\n\t      // TODO\n\t    },\n\t    // makes bit reversal table\n\t    _makeBitReversalTable : function() {\n\t      var i = 0,\n\t          j = 0,\n\t          k = 0;\n\t      _bitrev[0] = 0;\n\t      while(++i < _n) {\n\t        k = _n >> 1;\n\t        while(k <= j) {\n\t          j -= k;\n\t          k >>= 1;\n\t        }\n\t        j += k;\n\t        _bitrev[i] = j;\n\t      }\n\t    },\n\t    // makes trigonometiric function table\n\t    _makeCosSinTable : function() {\n\t      var n2 = _n >> 1,\n\t          n4 = _n >> 2,\n\t          n8 = _n >> 3,\n\t          n2p4 = n2 + n4,\n\t          t = Math.sin(Math.PI/_n),\n\t          dc = 2*t*t,\n\t          ds = Math.sqrt(dc*(2 - dc)),\n\t          c = _cstb[n4] = 1,\n\t          s = _cstb[0] = 0;\n\t      t = 2*dc;\n\t      for(var i=1; i<n8; i++) {\n\t        c -= dc;\n\t        dc += t*c;\n\t        s += ds;\n\t        ds -= t*s;\n\t        _cstb[i] = s;\n\t        _cstb[n4 - i] = c;\n\t      }\n\t      if(n8 !== 0) {\n\t        _cstb[n8] = Math.sqrt(0.5);\n\t      }\n\t      for(var j=0; j<n4; j++) {\n\t        _cstb[n2 - j]  = _cstb[j];\n\t      }\n\t      for(var k=0; k<n2p4; k++) {\n\t        _cstb[k + n2] = -_cstb[k];\n\t      }\n\t    }\n\t  };\n\t  // aliases (public APIs)\n\t  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n\t  for(var i=0; i<apis.length; i++) {\n\t    FFT[apis[i]] = core[apis[i]];\n\t  }\n\t  FFT.bt = core.bt1d;\n\t  FFT.fft = core.fft1d;\n\t  FFT.ifft = core.ifft1d;\n\t  \n\t  return FFT;\n\t}).call(this);\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports) {\n\n\tvar PeakOptimizer={\n\t\tdiagonalError:0.05,\n\t\ttolerance:0.05,\n\t\tDEBUG:false,\n\t    toleranceX : 0.025,\n\t    toleranceY : 0.5,\n\t\n\t    clean: function(peaks, threshold){\n\t        var max = Number.NEGATIVE_INFINITY;\n\t        var i,peak;\n\t        //double min = Double.MAX_VALUE;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            if(Math.abs(peaks[i].z)>max)\n\t                max=Math.abs(peaks[i].z);\n\t        }\n\t        max*=threshold;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            if(Math.abs(peaks[i].z)<max)\n\t                peaks.splice(i,1);\n\t        }\n\t        return peaks;\n\t    },\n\t\t\n\t\tenhanceSymmetry: function(signals){\n\t\t\t\n\t\t\tvar properties = this.initializeProperties(signals);\n\t\t\tvar output = signals;\n\t\n\t\t\tif(this.DEBUG)\n\t\t\t\tconsole.log(\"Before optimization size: \"+output.size());\n\t\t\t\n\t\t\t//First step of the optimization: Symmetry validation\n\t\t\tvar i,hits,index;\n\t\t\tvar signal;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tsignal = output[i];\n\t\t\t\tif(signal.peaks.length>1)\n\t\t\t\t\tproperties[i][1]++;\n\t\t\t\tif(properties[i][0]==1){\n\t\t\t\t\tindex = this.exist(output, properties, signal,-1,true);\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tproperties[i][1]+=2;\n\t\t\t\t\t\tproperties[index][1]+=2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Second step of the optimization: Diagonal image existence\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tsignal = output[i];\n\t\t\t\tif(properties[i][0]==0){\n\t\t\t\t\thits = this.checkCrossPeaks(output, properties, signal, true);\n\t\t\t\t\tproperties[i][1]+=hits;\n\t\t\t\t\t//checkCrossPeaks(output, properties, signal, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Now, each peak have a score between 0 and 4, we can complete the patterns which\n\t\t\t//contains peaks with high scores, and finally, we can remove peaks with scores 0 and 1\n\t\t\tvar count = 0;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]!==0&&properties[i][1]>2){\n\t\t\t\t\tcount++;\n\t\t\t\t\tcount+=this.completeMissingIfNeeded(output,properties,output[i],properties[i]);\n\t\t\t\t}\n\t\t\t\tif(properties[i][1]>=2&&properties[i][0]===0)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tif(this.DEBUG)\n\t\t\t\tconsole.log(\"After optimization size: \"+count);\n\t\t\tvar  toReturn = new Array(count);\n\t\t\tcount--;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]!==0&&properties[i][1]>2\n\t\t\t\t\t\t||properties[i][0]===0&&properties[i][1]>1){\n\t\t\t\t\ttoReturn[count--]=output[i];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"Removed \"+i+\" \"+output[i].peaks.length);\n\t\t\t\t}\n\t\t\t\t//if(properties.get(i)[1]>=2)\n\t\t\t\t//\ttoReturn[count--]=output.get(i);\n\t\t\t}\n\t\t\treturn toReturn;\n\t\t},\n\t\t\n\t\tcompleteMissingIfNeeded: function(output, properties, thisSignal, thisProp) {\n\t\t\t//Check for symmetry\n\t\t\tvar index = this.exist(output, properties, thisSignal,-thisProp[0],true);\n\t\t\tvar addedPeaks=0;\n\t\t\tvar newSignal = null, tmpProp=null;\n\t\t\tif(index<0){//If this signal have no a symmetry image, we have to include it\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftX,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [-thisProp[0],thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\t//Check for diagonal peaks\n\t\t\tvar j=0;\n\t\t\tvar diagX=false, diagY=false;\n\t\t\tvar signal;\n\t\t\tfor(j=output.length-1;j>=0;j--){\n\t\t\t\tsignal = output[j];\n\t\t\t\tif(properties[j][0]===0){\n\t\t\t\t\tif(Math.abs(signal.shiftX-thisSignal.shiftX)<this.diagonalError)\n\t\t\t\t\t\tdiagX=true;\n\t\t\t\t\tif(Math.abs(signal.shiftY-thisSignal.shiftY)<this.diagonalError)\n\t\t\t\t\t\tdiagY=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(diagX===false){\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftX;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftX,y:thisSignal.shiftX,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\tif(diagY===false){\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftY;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftY,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\treturn addedPeaks;\n\t\t\t\n\t\t},\n\t\t\n\t\t//Check for any diagonal peak that match this cross peak\n\t\tcheckCrossPeaks: function(output, properties, signal, updateProperties) {\n\t\t\tvar hits = 0, i=0, shift=signal.shiftX*4;\n\t\t\tvar crossPeaksX = [],crossPeaksY = [];\n\t\t\tvar cross;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tcross = output[i];\n\t\t\t\tif(properties[i][0]!==0){\n\t\t\t\t\tif(Math.abs(cross.shiftX-signal.shiftX)<this.diagonalError){\n\t\t\t\t\t\thits++;\n\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\tcrossPeaksX.push(i);\n\t\t\t\t\t\tshift+=cross.shiftX;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(Math.abs(cross.shiftY-signal.shiftY)<this.diagonalError){\n\t\t\t\t\t\t\thits++;\n\t\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\t\tcrossPeaksY.push(i);\n\t\t\t\t\t\t\tshift+=cross.shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Update found crossPeaks and diagonal peak\n\t\t\tshift/=(crossPeaksX.length+crossPeaksY.length+4);\n\t\t\tif(crossPeaksX.length>0){\n\t\t\t\tfor( i=crossPeaksX.length-1;i>=0;i--){\n\t\t\t\t\toutput[crossPeaksX[i]].shiftX=shift;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(crossPeaksY.length>0){\n\t\t\t\tfor( i=crossPeaksY.length-1;i>=0;i--){\n\t\t\t\t\toutput[crossPeaksY[i]].shiftY=shift;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsignal.shiftX=shift;\n\t\t\tsignal.shiftY=shift;\n\t\t\treturn hits;\n\t\t},\n\t\n\t\texist: function(output, properties, signal, type, symmetricSearch) {\n\t\t\tfor(var i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]==type){\n\t\t\t\t\tif(this.distanceTo(signal, output[i], symmetricSearch)<this.tolerance){\n\t\t\t\t\t\tif(!symmetricSearch){\n\t\t\t\t\t\t\tvar shiftX=(output[i].shiftX+signal.shiftX)/2.0;\n\t\t\t\t\t\t\tvar shiftY=(output[i].shiftY+signal.shiftY)/2.0;\n\t\t\t\t\t\t\toutput[i].shiftX=shiftX;\n\t\t\t\t\t\t\toutput[i].shiftY=shiftY;\n\t\t\t\t\t\t\tsignal.shiftX=shiftX;\n\t\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tvar shiftX=signal.shiftX;\n\t\t\t\t\t\t\tvar shiftY=output[i].shiftX;\n\t\t\t\t\t\t\toutput[i].shiftY=shiftX;\n\t\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\t/**\n\t\t * We try to determine the position of each signal within the spectrum matrix.\n\t\t * Peaks could be of 3 types: upper diagonal, diagonal or under diagonal 1,0,-1\n\t\t * respectively.\n\t\t * @param Signals\n\t\t * @return A matrix containing the properties of each signal\n\t\t */\n\t\tinitializeProperties: function(signals){\n\t\t\tvar signalsProperties = new Array(signals.length);\n\t\t\tfor(var i=signals.length-1;i>=0;i--){\n\t\t\t\tsignalsProperties[i]=[0,0];\n\t\t\t\t//We check if it is a diagonal peak\n\t\t\t\tif(Math.abs(signals[i].shiftX-signals[i].shiftY)<=this.diagonalError){\n\t\t\t\t\tsignalsProperties[i][1]=1;\n\t\t\t\t\t//We adjust the x and y value to be symmetric.\n\t\t\t\t\t//In general chemical shift in the direct dimension is better than in the other one,\n\t\t\t\t\t//so, we believe more to the shiftX than to the shiftY.\n\t\t\t\t\tvar shift = (signals[i].shiftX*2+signals[i].shiftY)/3.0;\n\t\t\t\t\tsignals[i].shiftX=shift;\n\t\t\t\t\tsignals[i].shiftY=shift;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(signals[i].shiftX-signals[i].shiftY>0)\n\t\t\t\t\t\tsignalsProperties[i][0]=1;\n\t\t\t\t\telse\n\t\t\t\t\t\tsignalsProperties[i][0]=-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn signalsProperties;\n\t\t},\n\t\t\n\t\t/**\n\t\t * This function calculates the distance between 2 nmr signals . If toImage is true, \n\t\t * it will interchange x by y in the distance calculation for the second signal.\n\t\t */\n\t\tdistanceTo: function(a, b, toImage){\n\t\t\tif(!toImage){\n\t\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftX, 2)\n\t\t\t\t\t\t+Math.pow(a.shiftY-b.shiftY, 2));\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftY, 2)\n\t\t\t\t\t\t+Math.pow(a.shiftY-b.shiftX, 2));\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * This function maps the corresponding 2D signals to the given set of 1D signals\n\t\t */\n\t\talignDimensions:function(signals2D,references){\n\t\t\t//For each reference dimension\n\t\t\tfor(var i=0;i<references.length;i++){\n\t\t\t\tvar ref = references[i];\n\t\t\t\t_alignSingleDimension(signals2D,ref);\n\t\t\t}\n\t\t},\n\t\n\t\t_alignSingleDimension: function(signals2D, references){\n\t\t\t//For each 2D signal\n\t\t\tvar center = 0, width = 0, i, j;\n\t\t\tfor(i=0;i<signals2D.length;i++){\n\t\t\t\tvar signal2D = signals2D[i];\n\t\t\t\t//For each reference 1D signal\n\t\t\t\tfor(j=0;j<references.length;j++){\n\t\t\t\t\tcenter = (references[j].startX+references[j].stopX)/2;\n\t\t\t\t\twidth = Math.abs(references[j].startX-references[j].stopX)/2;\n\t\t\t\t\tif(signal2D.nucleusX==references[j].nucleus){\n\t\t\t\t\t\t//The 2D peak overlaps with the 1D signal\n\t\t\t\t\t\tif(Math.abs(signal2D.shiftX-center)<=width){\n\t\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t\tif(signal2D.nucleusY==references[j].nucleus){\n\t\t\t\t\t\tif(Math.abs(signal2D.shiftY-center)<=width){\n\t\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t}\n\t\n\t};\n\t\n\tmodule.exports = PeakOptimizer;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports) {\n\n\tvar SimpleClustering={\n\t\n\t\t/*This function returns the cluster list for a given connectivity matrix.\n\t\t*To improve the performance, the connectivity(square and symmetric) matrix \n\t\t*is given as a single vector containing  the upper diagonal of the matrix\n\t\t*Note: This algorithm is O(n*n) complexity. I wonder if there is something better. \n\t\t*acastillo\n\t\t*/\n\t\tfullClusterGenerator:function(conn){\n\t\t\tvar nRows = Math.sqrt(conn.length*2+0.25)-0.5;\n\t\t\t//console.log(\"nRows: \"+nRows+\" - \"+conn.length);\n\t\t\tvar clusterList = [];\n\t\t\tvar available = new Array(nRows);\n\t\t\tvar remaining = nRows, i=0;\n\t\t\tvar cluster = [];\n\t\t\t//Mark all the elements as available\n\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\tavailable[i]=1;\n\t\t\t}\n\t\t\tvar nextAv=-1;\n\t\t\tvar toInclude = [];\n\t\t\twhile(remaining>0){\n\t\t\t\tif(toInclude.length===0){\n\t\t\t\t\t//If there is no more elements to include. Start a new cluster\n\t\t\t\t\tcluster = new Array(nRows);\n\t\t\t\t\tfor(i=nRows-1;i>=0;i--)\n\t\t\t\t\t\tcluster[i]=0;\n\t\t\t\t\tclusterList.push(cluster);\n\t\t\t    \tfor(nextAv = nRows-1;available[nextAv]==0;nextAv--){};\n\t\t\t    }\n\t\t\t    else{\n\t\t\t    \tnextAv=toInclude.splice(0,1);\n\t\t\t    }\n\t\t\t    //console.log(\"row: \"+nextAv);\n\t\t\t    cluster[nextAv]=1;\n\t\t\t    available[nextAv]=0;\n\t\t\t    remaining--;\n\t\t\t    //Copy the next available row\n\t\t\t    var row = new Array(nRows);\n\t\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\t\tvar c=Math.max(nextAv,i);\n\t\t\t\t\tvar r=Math.min(nextAv,i);\n\t\t\t\t\t//The element in the conn matrix\n\t\t\t\t\t//console.log(\"index: \"+r*(2*nRows-r-1)/2+c)\n\t\t\t\t\trow[i]=conn[r*(2*nRows-r-1)/2+c];\n\t\t\t\t\t//console.log(\"col: \"+i+\":\"+row[i]);\n\t\t\t\t\t//There is new elements to include in this row?\n\t\t\t\t\t//Then, include it to the current cluster\n\t\t\t\t\tif(row[i]==1&&available[i]==1&&cluster[i]==0){\n\t\t\t\t\t\ttoInclude.push(i);\n\t\t\t\t\t\tcluster[i]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn clusterList;\n\t\t}\n\t}\n\t\n\tmodule.exports = SimpleClustering;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This library formats a set of nmr1D signals to the ACS format.\n\t * Created by acastillo on 3/11/15. p\n\t */\n\tvar ACS=ACS || {};\n\tACS.formater =(function() {\n\t    var acsString=\"\";\n\t    var parenthesis=\"\";\n\t    var spectro=\"\";\n\t    rangeForMultiplet=false;\n\t\n\t    function fromNMRSignal1D2ACS(spectrum, options){\n\t        acsString=\"\";\n\t        parenthesis=\"\";\n\t        spectro=\"\";\n\t        var solvent = null;\n\t        if(options&&options.solvent)\n\t            solvent = options.solvent;\n\t        //options.rangeForMultiplet=false;\n\t        if(options&&options.rangeForMultiplet!=undefined)\n\t            rangeForMultiplet = options.rangeForMultiplet;\n\t\n\t        if(options&&options.ascending){\n\t            spectrum.sort(function(a,b){\n\t                return b.delta1- a.delta1\n\t            });\n\t        }\n\t        else{\n\t            spectrum.sort(function(a,b){\n\t                return a.delta1- b.delta1\n\t            });\n\t        }\n\t\n\t        //console.log(\"Range1: \"+options.rangeForMultiplet);\n\t\n\t        spectrum.type=\"NMR SPEC\";\n\t        if (spectrum[0][\"nucleus\"]==\"1H\") {\n\t            formatAcs_default(spectrum, false, 2, 1, solvent);\n\t        } else if (spectrum[0][\"nucleus\"]==\"13C\") {\n\t            formatAcs_default(spectrum, false, 1, 0, solvent);\n\t        }\n\t\n\t        if (acsString.length>0) acsString+=\".\";\n\t\n\t        return acsString;\n\t    }\n\t\n\t    /*function formatAcs_default_IR(spectra, ascending, decimalValue, smw) {\n\t     appendSeparator();\n\t     appendSpectroInformation(spectra);\n\t     if (spectra[\"peakLabels\"]) {\n\t     var numberPeakLabels=spectra[\"peakLabels\"].length;\n\t     var minIntensity= 9999999;\n\t     var maxIntensity=-9999999;\n\t     for (var i=0; i<numberPeakLabels; i++) {\n\t     if (spectra[\"peakLabels\"][i].intensity<minIntensity) minIntensity=spectra[\"peakLabels\"][i].intensity;\n\t     if (spectra[\"peakLabels\"][i].intensity>maxIntensity) maxIntensity=spectra[\"peakLabels\"][i].intensity;\n\t     }\n\t     for (var i=0; i<numberPeakLabels; i++) {\n\t     if (ascending) {\n\t     var peakLabel=spectra[\"peakLabels\"][i];\n\t     } else {\n\t     var peakLabel=spectra[\"peakLabels\"][numberPeakLabels-i-1];\n\t     }\n\t     if (peakLabel) {\n\t     appendSeparator();\n\t     appendValue(peakLabel,decimalValue);\n\t     if (smw) { // we need to add small / medium / strong\n\t     if (peakLabel.intensity<((maxIntensity-minIntensity)/3+minIntensity)) acsString+=\" (s)\";\n\t     else if (peakLabel.intensity>(maxIntensity-(maxIntensity-minIntensity)/3)) acsString+=\" (w)\";\n\t     else acsString+=\" (m)\";\n\t     }\n\t     }\n\t     }\n\t     }\n\t     }*/\n\t\n\t    function formatAcs_default(spectra, ascending, decimalValue, decimalJ, solvent) {\n\t        appendSeparator();\n\t        appendSpectroInformation(spectra, solvent);\n\t        var numberSmartPeakLabels=spectra.length;\n\t        //console.log(\"SP \"+spectra);\n\t        //console.log(\"# \"+numberSmartPeakLabels);\n\t        for (var i=0; i<numberSmartPeakLabels; i++) {\n\t            if (ascending) {\n\t                var signal=spectra[i];\n\t            } else {\n\t                var signal=spectra[numberSmartPeakLabels-i-1];\n\t            }\n\t            if (signal) {\n\t                //console.log(\"X2X\"+i+JSON.stringify(signal));\n\t                appendSeparator();\n\t                appendDelta(signal,decimalValue);\n\t                appendParenthesis(signal,decimalJ);\n\t                //console.log(\"S2S\"+i);\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendSpectroInformation(spectrum, solvent) {\n\t        if (spectrum.type==\"NMR SPEC\") {\n\t            if (spectrum[0].nucleus) {\n\t                acsString+=formatNucleus(spectrum[0].nucleus);\n\t            }\n\t            acsString+=\" NMR\";\n\t            if ((solvent) || (spectrum[0].observe)) {\n\t                acsString+=\" (\";\n\t                if (spectrum[0].observe) {\n\t                    acsString+=(spectrum[0].observe*1).toFixed(0)+\" MHz\";\n\t                    if (solvent) acsString+=\", \";\n\t                }\n\t                if (solvent) {\n\t                    acsString+=formatMF(solvent);\n\t                }\n\t                acsString+=\")\";\n\t            }\n\t            acsString+=\" δ \";\n\t        } else if (spectrum.type==\"IR\") {\n\t            acsString+=\" IR \";\n\t        } else if (spectrum.type==\"MASS\") {\n\t            acsString+=\" MASS \";\n\t        }\n\t    }\n\t\n\t    function appendDelta(line, nbDecimal) {\n\t        //console.log(\"appendDelta1\");\n\t        var startX = 0,stopX=0,delta1=0;\n\t        if(line.startX){\n\t            if((typeof line.startX)==\"string\"){\n\t                startX=parseFloat(line.startX);\n\t            }\n\t            else\n\t                startX=line.startX;\n\t        }\n\t        if(line.stopX){\n\t            if((typeof line.stopX)==\"string\"){\n\t                stopX=parseFloat(line.stopX);\n\t            }\n\t            else\n\t                stopX=line.stopX;\n\t        }\n\t        if(line.delta1){\n\t            if((typeof line.delta1)==\"string\"){\n\t                delta1=parseFloat(line.delta1);\n\t            }\n\t            else\n\t                delta1=line.delta1;\n\t\n\t        }\n\t        //console.log(\"Range2: \"+rangeForMultiplet+\" \"+line.multiplicity);\n\t        if (line.asymmetric===true||(line.multiplicity==\"m\"&&rangeForMultiplet===true)) {//Is it massive??\n\t            if (line.startX&&line.stopX) {\n\t                if (startX<stopX) {\n\t                    acsString+=startX.toFixed(nbDecimal)+\"-\"+stopX.toFixed(nbDecimal);\n\t                } else {\n\t                    acsString+=stopX.toFixed(nbDecimal)+\"-\"+startX.toFixed(nbDecimal);\n\t                }\n\t            } else {\n\t                if(line.delta1)\n\t                    acsString+=delta1.toFixed(nbDecimal);\n\t            }\n\t        }\n\t        else{\n\t            if(line.delta1)\n\t                acsString+=delta1.toFixed(nbDecimal);\n\t            else{\n\t                if(line.startX&&line.stopX){\n\t                    acsString+=((startX+stopX)/2).toFixed(nbDecimal);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendValue(line, nbDecimal) {\n\t        if (line.xPosition) {\n\t            acsString+=line.xPosition.toFixed(nbDecimal);\n\t        }\n\t    }\n\t\n\t    function appendParenthesis(line, nbDecimal) {\n\t        //console.log(\"appendParenthesis1\");\n\t        // need to add assignment - coupling - integration\n\t        parenthesis=\"\";\n\t        appendMultiplicity(line);\n\t        appendIntegration(line);\n\t        appendCoupling(line,nbDecimal);\n\t        appendAssignment(line);\n\t\n\t\n\t        if (parenthesis.length>0) {\n\t            acsString+=\" (\"+parenthesis+\")\";\n\t        }\n\t        //console.log(\"appendParenthesis2\");\n\t    }\n\t\n\t    function appendIntegration(line) {\n\t        if (line.pubIntegration) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.pubIntegration;\n\t        } else if (line.integralData) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.integralData.value.toFixed(0)+\" H\";\n\t        }\n\t    }\n\t\n\t    function appendAssignment(line) {\n\t        if (line.pubAssignment) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=formatAssignment(line.pubAssignment);\n\t        }\n\t        else{\n\t            if (line.assignment) {\n\t                appendParenthesisSeparator();\n\t                parenthesis+=formatAssignment(line.assignment);\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendMultiplicity(line) {\n\t        if (line.pubMultiplicity) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.pubMultiplicity;\n\t        } else if (line.multiplicity) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.multiplicity;\n\t        }\n\t    }\n\t\n\t    function appendCoupling(line, nbDecimal) {\n\t        if (line.nmrJs) {\n\t            var j=\"<i>J</i> = \";\n\t            for (var i=0; i<line.nmrJs.length; i++) {\n\t                var coupling=line.nmrJs[i].coupling;\n\t                if (j.length>11) j+=\", \";\n\t                j+=coupling.toFixed(nbDecimal);\n\t            }\n\t            appendParenthesisSeparator();\n\t            parenthesis+=j+\" Hz\";\n\t        }\n\t\n\t    }\n\t\n\t    function formatAssignment(assignment) {\n\t        assignment=assignment.replace(/([0-9])/g,\"<sub>$1</sub>\");\n\t        assignment=assignment.replace(/\\\"([^\\\"]*)\\\"/g,\"<i>$1</i>\");\n\t        return assignment;\n\t    }\n\t\n\t    function formatMF(mf) {\n\t        mf=mf.replace(/([0-9])/g,\"<sub>$1</sub>\");\n\t        return mf;\n\t    }\n\t\n\t    function formatNucleus(nucleus) {\n\t        nucleus=nucleus.replace(/([0-9])/g,\"<sup>$1</sup>\");\n\t        return nucleus;\n\t    }\n\t\n\t    function appendSeparator() {\n\t        if ((acsString.length>0) && (! acsString.match(/ $/))) {\n\t            acsString+=\", \";\n\t        }\n\t    }\n\t\n\t    function appendParenthesisSeparator() {\n\t        if ((parenthesis.length>0) && (! parenthesis.match(\", $\"))) parenthesis+=\", \";\n\t    }\n\t\n\t    function fromACS2NMRSignal1D(acsString){\n\t        return JSON.parse(SDAPI.AcsParserAsJSONString(acsString));\n\t    }\n\t\n\t    return {\n\t        toACS:fromNMRSignal1D2ACS,\n\t        toNMRSignal:fromACS2NMRSignal1D\n\t    }\n\t})();\n\t\n\tmodule.exports=ACS;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** spectra-data.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ad379245df9cd608e7c5\n **/","'use strict';\n\n\nexports.SD = require('./SD');\nexports.NMR = require('./NMR');\nexports.NMR2D = require('./NMR2D');\nexports.ACS = require('./AcsParser');\nexports.JAnalyzer = require('./JAnalyzer');\n//exports.SD2 = require('/SD2');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","// small note on the best way to define array\n// http://jsperf.com/lp-array-and-loops/2\n\nvar StatArray = require('ml-stat/array');\nvar JcampConverter=require(\"jcampconverter\");\n\nfunction SD(sd) {\n    this.sd=sd;\n    this.activeElement=0;\n\n    this.DATACLASS_XY = 1;\n    this.DATACLASS_PEAK = 2;\n\n    this.TYPE_NMR_SPECTRUM = 'NMR Spectrum';\n    this.TYPE_NMR_FID = 'NMR FID';\n    this.TYPE_IR = 'IR';\n    this.TYPE_RAMAN = 'RAMAN';\n    this.TYPE_UV = 'UV';\n    this.TYPE_MASS = 'MASS';\n    this.TYPE_HPLC = 'HPLC';\n    this.TYPE_GC = 'GC';\n    this.TYPE_CD = 'CD';\n    this.TYPE_2DNMR_SPECTRUM = 'nD NMR SPECTRUM';\n    this.TYPE_2DNMR_FID = 'nD NMR FID';\n    this.TYPE_XY_DEC = 'XY DEC';\n    this.TYPE_XY_INC= 'XY INC';\n    this.TYPE_IV = 'IV';\n}\n\nSD.fromJcamp = function(jcamp, options) {\n    options = options ||{};\n    if(typeof options.xy ===\"undefined\")\n        options.xy=true;\n\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new SD(spectrum);\n}\n\n\n/**\n * @function setActiveElement(nactiveSpectrum);\n * This function sets the nactiveSpectrum sub-spectrum as active\n * \n */\nSD.prototype.setActiveElement = function(nactiveSpectrum){\n    this.activeElement=nactiveSpectrum;\n}\n\n/**\n * @function getActiveElement();\n * This function returns the index of the active sub-spectrum.\n */\nSD.prototype.getActiveElement = function(){\n    return this.activeElement;\n}\n/**\n * This function returns the units of the independent dimension.\n * @returns {xUnit|*|M.xUnit}\n */\nSD.prototype.getXUnits = function(){\n    return this.getSpectrum().xUnit;\n}\n\n/**\n * * This function returns the units of the dependent variable.\n * @returns {yUnit|*|M.yUnit}\n */\nSD.prototype.getYUnits = function(){\n    return this.getSpectrum().yUnit;\n}\n\n/**\n*   Returns the number of points in the current spectrum\n*/\nSD.prototype.getNbPoints=function(i){\n    return this.getSpectrumData(i).y.length;\n}\n\n/**\n * Return the first value of the direct dimension\n */\nSD.prototype.getFirstX=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].firstX;\n}\n\n/**\n * Return the last value of the direct dimension\n */\nSD.prototype.getLastX=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].lastX;\n}\n\n/**\n * Return the first value of the direct dimension\n */\nSD.prototype.getFirstY=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].firstY;\n}\n\n/**\n * Return the first value of the direct dimension\n */\nSD.prototype.getLastY = function(i){\n    i=i||this.activeElement;\n    return this.sd.spectra[i].lastY;\n}\n\nSD.prototype.setDataClass = function(dataClass){\n    if(dataClass==this.DATACLASS_PEAK) {\n        this.getSpectrum().isPeaktable = true;\n        this.getSpectrum().isXYdata = false;\n    }\n    if(dataClass==this.DATACLASS_XY){\n        this.getSpectrum().isXYdata = true;\n        this.getSpectrum().isPeaktable = false;\n    }\n}\n\n/**\n * @function isDataClassPeak();\n * Is this a PEAKTABLE spectrum?\n */\nSD.prototype.isDataClassPeak = function(){\n    if(this.getSpectrum().isPeaktable)\n        return  this.getSpectrum().isPeaktable;\n    return false;\n}\n\n/**\n * @function isDataClassXY();\n * Is this a XY spectrum?\n */\nSD.prototype.isDataClassXY = function(){\n    if(this.getSpectrum().isXYdata)\n        return  this.getSpectrum().isXYdata;\n    return false\n}\n\nSD.prototype.setDataType = function(dataType){\n    this.getSpectrum().dataType=dataType;\n}\n\nSD.prototype.getDataType = function(){\n    return this.getSpectrum().dataType;\n}\n\n/**\n* Return the i-th sub-spectra in the current spectrum\n*/\nSD.prototype.getSpectrumData=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].data[0];\n}\n\n/**\n * Return the i-th sub-spectra in the current spectrum\n */\nSD.prototype.getSpectrum=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i];\n}\n\n/**\n * Returns the number of sub-spectra in this object\n */\nSD.prototype.getNbSubSpectra=function(){\n    return this.sd.spectra.length;\n}\n\n\n/**\n *   Returns an array containing the x values of the spectrum\n */\nSD.prototype.getXData=function(i){\n    return this.getSpectrumData(i).x;\n}\n\n/**\n * @function getYData();\n * This function returns a double array containing the values of the intensity for the current sub-spectrum.\n */\nSD.prototype.getYData=function(i){\n    return this.getSpectrumData(i).y;\n}\n\nSD.prototype.getX=function(i){\n    return this.getXData()[i];\n}\n\nSD.prototype.getY=function(i){\n    return this.getYData()[i];\n}\n\n/**\n * @function getXYData();\n * To get a 2 dimensional array with the x and y of this spectraData( Only for 1D spectra).\n * Returns a double[2][nbPoints] where the first row contains the x values and the second row the y values.\n */\nSD.prototype.getXYData=function(i){\n    return [this.getXData(i),this.getYData(i)];\n}\n\nSD.prototype.getTitle=function(i) {\n    return this.getSpectrum(i).title;\n}\n\n/**\n * @function setTitle(newTitle);\n * To set the title of this spectraData.\n * @param newTitle The new title\n */\nSD.prototype.setTitle=function(newTitle,i) {\n    this.getSpectrum(i).title=newTitle;\n}\n\n/**\n * @function getMinY(i)\n * This function returns the minimal value of Y\n */\nSD.prototype.getMinY=function(i) {\n    return  StatArray.min(this.getYData(i));\n}\n\n/**\n * @function getMaxY(i)\n * This function returns the maximal value of Y\n */\nSD.prototype.getMaxY=function(i) {\n    return  StatArray.max(this.getYData(i));\n}\n\n/**\n * @function getMinMax(i)\n */\nSD.prototype.getMinMaxY=function(i) {\n    return  StatArray.minMax(this.getYData(i));\n}\n\n\n/**\n* Get the noise threshold level of the current spectrum. It uses median instead of the mean\n*/\nSD.prototype.getNoiseLevel=function(){\n    var mean = 0,stddev=0;\n    var y = this.getYData();\n    var length = this.getNbPoints(),i=0;\n    for(i = 0; i < length; i++){\n        mean+=y[i];\n    }\n    mean/=this.getNbPoints();\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort();\n    if (length % 2 == 1) {\n        stddev = averageDeviations[(length-1)/2] / 0.6745;\n    } else {\n        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n    }\n\n    return stddev*this.getNMRPeakThreshold(this.getNucleus(1));\n}\n\n\n/**\n* Return the xValue for the given index\n*/\nSD.prototype.arrayPointToUnits=function(doublePoint){\n    return (this.getFirstX() - (doublePoint* (this.getFirstX() - this.getLastX()) / (this.getNbPoints()-1)));\n}\n\n/**\n * Returns the index-value for the data array corresponding to a X-value in\n * units for the element of spectraData to which it is linked (spectraNb).\n * This method makes use of spectraData.getFirstX(), spectraData.getLastX()\n * and spectraData.getNbPoints() to derive the return value if it of data class XY\n * It performs a binary search if the spectrum is a peak table\n *\n * @param inValue\n *            (value in Units to be converted)\n * @return an integer representing the index value of the inValue\n */\nSD.prototype.unitsToArrayPoint=function(inValue){\n    if (this.isDataClassXY()) {\n        return Math.round((this.getFirstX() - inValue) * (-1.0 / this.getDeltaX()));\n    } else if (this.isDataClassPeak())\n    {\n        var currentArrayPoint = 0,upperLimit=this.getNbPoints()-1, lowerLimit=0, midPoint;\n        //If inverted scale\n        if(this.getFirstX()>this.getLastX()){\n            upperLimit=0;\n            lowerLimit=this.getNbPoints()-1;\n\n            if(inValue>this.getFirstX())\n                return this.getNbPoints();\n            if(inValue<this.getLastX())\n                return -1;\n        }\n        else{\n            if(inValue<this.getFirstX())\n                return -1;\n            if(inValue>this.getLastX())\n                return this.getNbPoints();\n        }\n\n        while (Math.abs(upperLimit-lowerLimit) > 1)\n        {\n            midPoint=Math.round(Math.floor((upperLimit+lowerLimit)/2));\n            //x=this.getX(midPoint);\n            if(this.getX(midPoint)==inValue)\n                return midPoint;\n            if(this.getX(midPoint)>inValue)\n                upperLimit=midPoint;\n            else\n                lowerLimit=midPoint;\n        }\n        currentArrayPoint=lowerLimit;\n        if(Math.abs(this.getX(lowerLimit)-inValue)>Math.abs(this.getX(upperLimit)-inValue))\n            currentArrayPoint=upperLimit;\n        return currentArrayPoint;\n    } else {\n        return 0;\n    }\n}\n\n\n\n/**\n* Returns the separation between 2 consecutive points in the spectra domain\n*/\nSD.prototype.getDeltaX=function(){\n    return (this.getLastX()-this.getFirstX()) / (this.getNbPoints()-1);\n}\n\n/**\n * @function setMinMax(min,max)\n * This function scales the values of Y between the min and max parameters\n * @param min   Minimum desired value for Y\n * @param max   Maximum desired value for Y\n */\nSD.prototype.setMinMax=function(min,max) {\n    var y = this.getYData();\n    var minMax = StatArray.minMax(y);\n    var factor = (max - min)/(minMax.max-minMax.min);\n    for(var i=0;i< y.length;i++){\n        y[i]=(y[i]-minMax.min)*factor+min;\n    }\n}\n\n/**\n * @function setMin(min)\n * This function scales the values of Y to fit the min parameter\n * @param min   Minimum desired value for Y\n */\nSD.prototype.setMin=function(min) {\n    var y = this.getYData();\n    var currentMin = StatArray.min(y);\n    var factor = min/currentMin;\n    for(var i=0;i< y.length;i++){\n        y[i]*=factor;\n    }\n}\n\n/**\n * @function setMax(max)\n * This function scales the values of Y to fit the max parameter\n * @param max   Maximum desired value for Y\n */\nSD.prototype.setMax=function(max) {\n    var y = this.getYData();\n    var currentMin = StatArray.max(y);\n    var factor = max/currentMin;\n    for(var i=0;i< y.length;i++){\n        y[i]*=factor;\n    }\n}\n\n/**\n * @function YShift(value)\n * This function shifts the values of Y\n * @param value Distance of the shift\n */\nSD.prototype.YShift=function(value) {\n    var y = this.getSpectrumData().y;\n    var length = this.getNbPoints(),i=0;\n    for(i=0;i<length;i++){\n        y[i]+=value;\n    }\n    this.getSpectrum().firstY+=value;\n    this.getSpectrum().lastY+=value;\n}\n\n/**\n * @function shift(globalShift)\n * This function shift the given spectraData. After this function is applied, all the peaks in the\n * spectraData will be found at xi+globalShift\n * @param globalShift\n */\nSD.prototype.shift=function(globalShift) {\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        var x = this.getSpectrumData().x;\n        var length = this.getNbPoints(),i=0;\n        for(i=0;i<length;i++){\n            x[i]+=globalShift;\n        }\n\n        this.getSpectrum().firstX+=globalShift;\n        this.getSpectrum().lastX+=globalShift;\n    }\n\n}\n\n/**\n * @function fillWith(from, to, value)\n * This function fills a zone of the spectrum with the given value.\n * @param from\n * @param to\n * @param fillWith\n */\nSD.prototype.fillWith=function(from, to, value) {\n    var tmp, start, end, x, y;\n    if(from > to) {\n        var tmp = from;\n        from = to;\n        to = tmp;\n    }\n\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        x = this.getXData();\n        y = this.getYData();\n        start = this.unitsToArrayPoint(from);\n        end = this.unitsToArrayPoint(to);\n        if(start > end){\n            tmp = start;\n            start = end;\n            end = tmp;\n        }\n        if(start<0)\n            start=0;\n        if(end>=this.getNbPoints)\n            end=this.getNbPoints-1;\n        for(i=start;i<=end;i++){\n                y[i]=value;\n        }\n    }\n}\n\n/**\n * @function suppressZone(from, to)\n * This function suppress a zone from the given spectraData within the given x range.\n * Returns a spectraData of type PEAKDATA without peaks in the given region\n * @param from\n * @param to\n */\nSD.prototype.suppressZone=function(from, to) {\n    var tmp, start, end, x, y;\n    if(from > to) {\n        var tmp = from;\n        from = to;\n        to = tmp;\n    }\n\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        x = this.getXData();\n        y = this.getYData();\n        start = this.unitsToArrayPoint(from);\n        end = this.unitsToArrayPoint(to);\n        if(start > end){\n            tmp = start;\n            start = end;\n            end = tmp;\n        }\n        if(start<0)\n            start=0;\n        if(end>=this.getNbPoints)\n            end=this.getNbPoints-1;\n        for(i=end;i>=start;i--){\n            y.splice(i,1);\n            x.splice(i,1);\n        }\n    }\n    this.setDataClass(this.DATACLASS_PEAK);\n}\n\n\n/**\n * @function peakPicking(parameters)\n * This function performs a simple peak detection in a spectraData. The parameters that can be specified are:\n * Returns a two dimensional array of double specifying [x,y] of the detected peaks.\n * @option from:    Lower limit.\n * @option to:      Upper limit.\n * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n * @option resolution: The maximum resolution of the spectrum for considering peaks.\n * @option yInverted: Is it a Y inverted spectrum?(like an IR spectrum)\n * @option smooth: A function for smoothing the spectraData before the detection. If your are dealing with\n * experimental spectra, smoothing will make the algorithm less prune to false positives.\n */\nSD.prototype.simplePeakPicking=function(parameters) {\n    //@TODO implements this filter\n}\n\n/**\n * @function getMaxPeak();\n * Get the maximum peak\n */\nSD.prototype.getMaxPeak = function(){\n    var y = this.getSpectraDataY();\n    var max=y[0], index=0;\n    for(var i=0;i< y.length;i++){\n        if(max<y[i]){\n            max = y[i];\n            index=i;\n        }\n    }\n    return [this.getSpectraDataX()[index],max];\n}\n\n/**\n * @function getParamDouble(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n */\nSD.prototype.getParamDouble = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value;\n}\n\n/**\n * @function getParamString(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n */\nSD.prototype.getParamString = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value+\"\";\n}\n\n/**\n * @function getParamInt(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n */\nSD.prototype.getParamInt = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value;\n}\n\n/**\n * Return the y elements of the current spectrum\n * @returns {*}\n */\n\nSD.prototype.getSpectraDataY = function(){\n    return this.getYData();\n}\n\n/**\n * Return the x elements of the current spectrum\n * @returns {*}\n */\nSD.prototype.getSpectraDataX = function(){\n    return this.getXData();\n}\n\n/**\n * Set a new parameter to this spectrum\n * @param name\n * @param value\n */\nSD.prototype.putParam = function(name, value){\n    this.sd.info[name]=value;\n}\n\n/**\n * This function returns the area under the spectrum in the given window\n */\nSD.prototype.getArea = function(from, to){\n    var i0 = this.unitsToArrayPoint(from);\n    var ie = this.unitsToArrayPoint(to);\n    var area = 0;\n    if(i0>ie){\n        var tmp = i0;\n        i0 = ie;\n        ie = tmp;\n    }\n    i0=i0<0?0:i0;\n    ie=ie>=this.getNbPoints()?this.getNbPoints()-1:ie;\n    for(var i=i0;i<ie;i++){\n        area+= this.getY(i);\n    }\n    return area*Math.abs(this.getDeltaX());\n},\n\n/**\n * Returns a equally spaced vector within the given window.\n * @param from\n * @param to\n * @param nPoints\n * @returns {*}\n */\nSD.prototype.getVector = function(from, to, nPoints){\n    var x = this.getSpectraDataX();\n    var y = this.getSpectraDataY();\n    var result = [];\n    var start = 0, end = x.length- 1,direction=1;\n    var reversed = false;\n\n    if(x[0]>x[1]){\n        direction = -1;\n        start= x.length-1;\n        end = 0;\n    }\n\n    if(from > to){\n        var tmp = from;\n        from = to;\n        to = tmp;\n        reversed = true;\n    }\n    //console.log(x[end]+\" \"+from+\" \"+x[start]+\" \"+to);\n    if(x[start]>to||x[end]<from){\n        //console.log(\"ssss\");\n        return [];\n    }\n\n    while(x[start]<from){start+=direction;}\n    while(x[end]>to){end-=direction;}\n\n    var winPoints = Math.abs(end-start)+1;\n    if(!nPoints){\n        nPoints = winPoints;\n    }\n    var xwin = new Array(nPoints);\n    var ywin = new Array(nPoints);\n    var index = 0;\n\n    if(direction==-1)\n        index=nPoints-1;\n\n    var di = winPoints/nPoints;\n    var i=start-direction;\n    for(var k=0;k<nPoints;k++) {\n        i += Math.round(di * direction);\n        //console.log(i+\" \"+y[i]);\n        xwin[index] = x[i];\n        ywin[index] = y[i];\n        index += direction;\n    }\n    return [xwin,ywin];\n}\n\n/**\n * @function is2D();\n * Is it a 2D spectrum?\n */\nSD.prototype.is2D = function(){\n    if(typeof this.sd.twoD == \"undefined\")\n        return false;\n    return this.sd.twoD;\n}\n\n\nmodule.exports = SD;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/SD.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/array.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nfunction getConverter() {\n\n    // the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\n    var xyDataSplitRegExp = /[,\\t \\+-]*(?=[^\\d,\\t \\.])|[ \\t]+(?=[\\d+\\.-])/;\n    var removeCommentRegExp = /\\$\\$.*/;\n    var peakTableSplitRegExp = /[,\\t ]+/;\n    var DEBUG = false;\n\n    var GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\n    function convertToFloatArray(stringArray) {\n        var l = stringArray.length;\n        var floatArray = new Array(l);\n        for (var i = 0; i < l; i++) {\n            floatArray[i] = parseFloat(stringArray[i]);\n        }\n        return floatArray;\n    }\n\n    /*\n     options.keepSpectra: keep the original spectra for a 2D\n     options.xy: true // create x / y array instead of a 1D array\n     options.keepRecordsRegExp: which fields do we keep\n     */\n\n    function convert(jcamp, options) {\n        options = options || {};\n\n        var keepRecordsRegExp=/^[A-Z]+$/;\n        if (options.keepRecordsRegExp) keepRecordsRegExp=options.keepRecordsRegExp;\n\n        var start = new Date();\n\n        var ntuples = {},\n            ldr,\n            dataLabel,\n            dataValue,\n            ldrs,\n            i, ii, position, endLine, infos;\n\n        var result = {};\n        result.profiling = [];\n        result.logs = [];\n        var spectra = [];\n        result.spectra = spectra;\n        result.info = {};\n        var spectrum = {};\n\n        if (!(typeof jcamp === 'string')) return result;\n        // console.time('start');\n\n        if (result.profiling) result.profiling.push({action: 'Before split to LDRS', time: new Date() - start});\n\n        ldrs = jcamp.split(/[\\r\\n]+##/);\n\n        if (result.profiling) result.profiling.push({action: 'Split to LDRS', time: new Date() - start});\n\n        if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\n        for (i = 0, ii = ldrs.length; i < ii; i++) {\n            ldr = ldrs[i];\n            // This is a new LDR\n            position = ldr.indexOf('=');\n            if (position > 0) {\n                dataLabel = ldr.substring(0, position);\n                dataValue = ldr.substring(position + 1).trim();\n            } else {\n                dataLabel = ldr;\n                dataValue = '';\n            }\n            dataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\n            if (dataLabel === 'DATATABLE') {\n                endLine = dataValue.indexOf('\\n');\n                if (endLine === -1) endLine = dataValue.indexOf('\\r');\n                if (endLine > 0) {\n                    var xIndex = -1;\n                    var yIndex = -1;\n                    // ##DATA TABLE= (X++(I..I)), XYDATA\n                    // We need to find the variables\n\n                    infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n                    if (infos[0].indexOf('++') > 0) {\n                        var firstVariable = infos[0].replace(/.*\\(([a-zA-Z0-9]+)\\+\\+.*/, '$1');\n                        var secondVariable = infos[0].replace(/.*\\.\\.([a-zA-Z0-9]+).*/, '$1');\n                        xIndex = ntuples.symbol.indexOf(firstVariable);\n                        yIndex = ntuples.symbol.indexOf(secondVariable);\n                    }\n\n                    if (xIndex === -1) xIndex = 0;\n                    if (yIndex === -1) yIndex = 0;\n\n                    if (ntuples.first) {\n                        if (ntuples.first.length > xIndex) spectrum.firstX = ntuples.first[xIndex];\n                        if (ntuples.first.length > yIndex) spectrum.firstY = ntuples.first[yIndex];\n                    }\n                    if (ntuples.last) {\n                        if (ntuples.last.length > xIndex) spectrum.lastX = ntuples.last[xIndex];\n                        if (ntuples.last.length > yIndex) spectrum.lastY = ntuples.last[yIndex];\n                    }\n                    if (ntuples.vardim && ntuples.vardim.length > xIndex) {\n                        spectrum.nbPoints = ntuples.vardim[xIndex];\n                    }\n                    if (ntuples.factor) {\n                        if (ntuples.factor.length > xIndex) spectrum.xFactor = ntuples.factor[xIndex];\n                        if (ntuples.factor.length > yIndex) spectrum.yFactor = ntuples.factor[yIndex];\n                    }\n                    if (ntuples.units) {\n                        if (ntuples.units.length > xIndex) spectrum.xUnit = ntuples.units[xIndex];\n                        if (ntuples.units.length > yIndex) spectrum.yUnit = ntuples.units[yIndex];\n                    }\n                    spectrum.datatable = infos[0];\n                    if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n                        dataLabel = 'PEAKTABLE';\n                    } else if (infos[1] && (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)) {\n                        dataLabel = 'XYDATA';\n                        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n                    }\n                }\n            }\n\n\n            if (dataLabel === 'TITLE') {\n                spectrum.title = dataValue;\n            } else if (dataLabel === 'DATATYPE') {\n                spectrum.dataType = dataValue;\n                if (dataValue.indexOf('nD') > -1) {\n                    result.twoD = true;\n                }\n            } else if (dataLabel === 'XUNITS') {\n                spectrum.xUnit = dataValue;\n            } else if (dataLabel === 'YUNITS') {\n                spectrum.yUnit = dataValue;\n            } else if (dataLabel === 'FIRSTX') {\n                spectrum.firstX = parseFloat(dataValue);\n            } else if (dataLabel === 'LASTX') {\n                spectrum.lastX = parseFloat(dataValue);\n            } else if (dataLabel === 'FIRSTY') {\n                spectrum.firstY = parseFloat(dataValue);\n            } else if (dataLabel === 'NPOINTS') {\n                spectrum.nbPoints = parseFloat(dataValue);\n            } else if (dataLabel === 'XFACTOR') {\n                spectrum.xFactor = parseFloat(dataValue);\n            } else if (dataLabel === 'YFACTOR') {\n                spectrum.yFactor = parseFloat(dataValue);\n            } else if (dataLabel === 'DELTAX') {\n                spectrum.deltaX = parseFloat(dataValue);\n            } else if (dataLabel === '.OBSERVEFREQUENCY' || dataLabel === '$SFO1') {\n                if (!spectrum.observeFrequency) spectrum.observeFrequency = parseFloat(dataValue);\n            } else if (dataLabel === '.OBSERVENUCLEUS') {\n                if (!spectrum.xType) result.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n            } else if (dataLabel === '$SFO2') {\n                if (!result.indirectFrequency) result.indirectFrequency = parseFloat(dataValue);\n\n            } else if (dataLabel === '$OFFSET') {   // OFFSET for Bruker spectra\n                result.shiftOffsetNum = 0;\n                if (!result.shiftOffsetVal)  result.shiftOffsetVal = parseFloat(dataValue);\n            } else if (dataLabel === '$REFERENCEPOINT') {   // OFFSET for Varian spectra\n\n\n                // if we activate this part it does not work for ACD specmanager\n                //         } else if (dataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n                //                 var parts = dataValue.split(/ *, */);\n                //                 result.shiftOffsetNum = parseInt(parts[2].trim());\n                //                 result.shiftOffsetVal = parseFloat(parts[3].trim());\n            } else if (dataLabel === 'VARNAME') {\n                ntuples.varname = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'SYMBOL') {\n                ntuples.symbol = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'VARTYPE') {\n                ntuples.vartype = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'VARFORM') {\n                ntuples.varform = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'VARDIM') {\n                ntuples.vardim = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'UNITS') {\n                ntuples.units = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'FACTOR') {\n                ntuples.factor = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'FIRST') {\n                ntuples.first = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'LAST') {\n                ntuples.last = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'MIN') {\n                ntuples.min = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'MAX') {\n                ntuples.max = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === '.NUCLEUS') {\n                if (result.twoD) {\n                    result.yType = dataValue.split(/[, \\t]{2,}/)[0];\n                }\n            } else if (dataLabel === 'PAGE') {\n                spectrum.page = dataValue.trim();\n                spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n                spectrum.pageSymbol = spectrum.page.replace(/=.*/, '');\n                var pageSymbolIndex = ntuples.symbol.indexOf(spectrum.pageSymbol);\n                var unit = '';\n                if (ntuples.units && ntuples.units[pageSymbolIndex]) {\n                    unit = ntuples.units[pageSymbolIndex];\n                }\n                if (result.indirectFrequency && unit !== 'PPM') {\n                    spectrum.pageValue /= result.indirectFrequency;\n                }\n            } else if (dataLabel === 'RETENTIONTIME') {\n                spectrum.pageValue = parseFloat(dataValue);\n            } else if (dataLabel === 'XYDATA') {\n                prepareSpectrum(result, spectrum);\n                // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n                if (dataValue.match(/.*\\+\\+.*/)) {\n                    parseXYData(spectrum, dataValue, result);\n                } else {\n                    parsePeakTable(spectrum, dataValue, result);\n                }\n                spectra.push(spectrum);\n                spectrum = {};\n            } else if (dataLabel === 'PEAKTABLE') {\n                prepareSpectrum(result, spectrum);\n                parsePeakTable(spectrum, dataValue, result);\n                spectra.push(spectrum);\n                spectrum = {};\n            } else if (isMSField(dataLabel)) {\n                spectrum[convertMSFieldToLabel(dataLabel)] = dataValue;\n            } else if (dataLabel.match(keepRecordsRegExp)) {\n                result.info[dataLabel] = dataValue.trim();\n            }\n        }\n\n        // Currently disabled\n        //    if (options && options.lowRes) addLowRes(spectra,options);\n\n        if (result.profiling) result.profiling.push({action: 'Finished parsing', time: new Date() - start});\n\n        if (Object.keys(ntuples).length>0) {\n            var newNtuples=[];\n            var keys=Object.keys(ntuples);\n            for (var i=0; i<keys.length; i++) {\n                var key=keys[i];\n                var values=ntuples[key];\n                for (var j=0; j<values.length; j++) {\n                    if (! newNtuples[j]) newNtuples[j]={};\n                    newNtuples[j][key]=values[j];\n                }\n            }\n            result.ntuples=newNtuples;\n        }\n\n        if (result.twoD) {\n            add2D(result);\n            if (result.profiling) result.profiling.push({\n                action: 'Finished countour plot calculation',\n                time: new Date() - start\n            });\n            if (!options.keepSpectra) {\n                delete result.spectra;\n            }\n        }\n\n\n        // maybe it is a GC (HPLC) / MS. In this case we add a new format\n        if (spectra.length > 1 && (! spectra[0].dataType || spectra[0].dataType.toLowerCase().match(/.*mass./))) {\n            addGCMS(result);\n            if (result.profiling) result.profiling.push({\n                action: 'Finished GCMS calculation',\n                time: new Date() - start\n            });\n        }\n\n\n        if (options.xy) { // the spectraData should not be a oneD array but an object with x and y\n            if (spectra.length > 0) {\n                for (var i=0; i<spectra.length; i++) {\n                    var spectrum=spectra[i];\n                    if (spectrum.data.length>0) {\n                        for (var j=0; j<spectrum.data.length; j++) {\n                            var data=spectrum.data[j];\n                            var newData={x:Array(data.length/2), y:Array(data.length/2)};\n                            for (var k=0; k<data.length; k=k+2) {\n                                newData.x[k/2]=data[k];\n                                newData.y[k/2]=data[k+1];\n                            }\n                            spectrum.data[j]=newData;\n                        }\n\n                    }\n\n                }\n            }\n        }\n\n        if (result.profiling) {\n            result.profiling.push({action: 'Total time', time: new Date() - start});\n        }\n\n        //   console.log(result);\n        //    console.log(JSON.stringify(spectra));\n        return result;\n\n    }\n\n\n    function convertMSFieldToLabel(value) {\n        return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n    }\n\n    function isMSField(dataLabel) {\n        for (var i = 0; i < GC_MS_FIELDS.length; i++) {\n            if (dataLabel === GC_MS_FIELDS[i]) return true;\n        }\n        return false;\n    }\n\n    function addGCMS(result) {\n        var spectra = result.spectra;\n        var existingGCMSFields = [];\n        var i;\n        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n            if (spectra[0][label]) {\n                existingGCMSFields.push(label);\n            }\n        }\n        if (existingGCMSFields.length===0) return;\n        var gcms = {};\n        gcms.gc = {};\n        gcms.ms = [];\n        for (i = 0; i < existingGCMSFields.length; i++) {\n            gcms.gc[existingGCMSFields[i]] = [];\n        }\n        for (i = 0; i < spectra.length; i++) {\n            var spectrum = spectra[i];\n            for (var j = 0; j < existingGCMSFields.length; j++) {\n                gcms.gc[existingGCMSFields[j]].push(spectrum.pageValue);\n                gcms.gc[existingGCMSFields[j]].push(parseFloat(spectrum[existingGCMSFields[j]]));\n            }\n          if (spectrum.data) gcms.ms[i] = spectrum.data[0];\n\n        }\n        result.gcms = gcms;\n    }\n\n    function prepareSpectrum(result, spectrum) {\n        if (!spectrum.xFactor) spectrum.xFactor = 1;\n        if (!spectrum.yFactor) spectrum.yFactor = 1;\n        if (spectrum.observeFrequency) {\n            if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n                spectrum.xUnit = 'PPM';\n                spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n                spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n                spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n                spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n            }\n        }\n        if (result.shiftOffsetVal) {\n            var shift = spectrum.firstX - result.shiftOffsetVal;\n            spectrum.firstX = spectrum.firstX - shift;\n            spectrum.lastX = spectrum.lastX - shift;\n        }\n    }\n\n    function parsePeakTable(spectrum, value, result) {\n        spectrum.isPeaktable=true;\n        var i, ii, j, jj, values;\n        var currentData = [];\n        spectrum.data = [currentData];\n\n        // counts for around 20% of the time\n        var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\n        var k = 0;\n        for (i = 1, ii = lines.length; i < ii; i++) {\n            values = lines[i].trim().replace(removeCommentRegExp, '').split(peakTableSplitRegExp);\n            if (values.length % 2 === 0) {\n                for (j = 0, jj = values.length; j < jj; j = j + 2) {\n                    // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n                    currentData[k++] = (parseFloat(values[j]) * spectrum.xFactor);\n                    currentData[k++] = (parseFloat(values[j + 1]) * spectrum.yFactor);\n                }\n            } else {\n                result.logs.push('Format error: ' + values);\n            }\n        }\n    }\n\n    function parseXYData(spectrum, value, result) {\n        // we check if deltaX is defined otherwise we calculate it\n        if (!spectrum.deltaX) {\n            spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n        }\n\n        spectrum.isXYdata=true;\n\n        var currentData = [];\n        spectrum.data = [currentData];\n\n        var currentX = spectrum.firstX;\n        var currentY = spectrum.firstY;\n        var lines = value.split(/[\\r\\n]+/);\n        var lastDif, values, ascii, expectedY;\n        values = [];\n        for (var i = 1, ii = lines.length; i < ii; i++) {\n            //var previousValues=JSON.parse(JSON.stringify(values));\n            values = lines[i].trim().replace(removeCommentRegExp, '').split(xyDataSplitRegExp);\n            if (values.length > 0) {\n                if (DEBUG) {\n                    if (!spectrum.firstPoint) {\n                        spectrum.firstPoint = parseFloat(values[0]);\n                    }\n                    var expectedCurrentX = parseFloat(values[0] - spectrum.firstPoint) * spectrum.xFactor + spectrum.firstX;\n                    if ((lastDif || lastDif === 0)) {\n                        expectedCurrentX += spectrum.deltaX;\n                    }\n                    result.logs.push('Checking X value: currentX: ' + currentX + ' - expectedCurrentX: ' + expectedCurrentX);\n                }\n                for (var j = 1, jj = values.length; j < jj; j++) {\n                    if (j === 1 && (lastDif || lastDif === 0)) {\n                        lastDif = null; // at the beginning of each line there should be the full value X / Y so the diff is always undefined\n                        // we could check if we have the expected Y value\n                        ascii = values[j].charCodeAt(0);\n\n                        if (false) { // this code is just to check the jcamp DIFDUP and the next line repeat of Y value\n                            // + - . 0 1 2 3 4 5 6 7 8 9\n                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n                                expectedY = parseFloat(values[j]);\n                            } else\n                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n                            if ((ascii > 63) && (ascii < 74)) {\n                                // we could use parseInt but parseFloat is faster at least in Chrome\n                                expectedY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n                            } else\n                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n                            if ((ascii > 96) && (ascii < 106)) {\n                                // we could use parseInt but parseFloat is faster at least in Chrome\n                                expectedY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n                            }\n                            if (expectedY !== currentY) {\n                                result.logs.push('Y value check error: Found: ' + expectedY + ' - Current: ' + currentY);\n                                result.logs.push('Previous values: ' + previousValues.length);\n                                result.logs.push(previousValues);\n                            }\n                        }\n                    } else {\n                        if (values[j].length > 0) {\n                            ascii = values[j].charCodeAt(0);\n                            // + - . 0 1 2 3 4 5 6 7 8 9\n                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n                                lastDif = null;\n                                currentY = parseFloat(values[j]);\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n                            if ((ascii > 63) && (ascii < 74)) {\n                                lastDif = null;\n                                currentY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n                            if ((ascii > 96) && (ascii < 106)) {\n                                lastDif = null;\n                                currentY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n\n\n\n                            // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n                            if (((ascii > 82) && (ascii < 91)) || (ascii === 115)) {\n                                var dup = parseFloat(String.fromCharCode(ascii - 34) + values[j].substring(1)) - 1;\n                                if (ascii === 115) {\n                                    dup = parseFloat('9' + values[j].substring(1)) - 1;\n                                }\n                                for (var l = 0; l < dup; l++) {\n                                    if (lastDif) {\n                                        currentY = currentY + lastDif;\n                                    }\n                                    currentData.push(currentX, currentY * spectrum.yFactor);;\n                                    currentX += spectrum.deltaX;\n                                }\n                            } else\n                            // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n                            if (ascii === 37) {\n                                lastDif = parseFloat('0' + values[j].substring(1));\n                                currentY += lastDif;\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else if ((ascii > 73) && (ascii < 83)) {\n                                lastDif = parseFloat(String.fromCharCode(ascii - 25) + values[j].substring(1));\n                                currentY += lastDif;\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n                            // negative DIF digits j k l m n o p q r (ascii 106-114)\n                            if ((ascii > 105) && (ascii < 115)) {\n                                lastDif = -parseFloat(String.fromCharCode(ascii - 57) + values[j].substring(1));\n                                currentY += lastDif;\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    function convertTo3DZ(spectra) {\n        var noise = 0;\n        var minZ = spectra[0].data[0][0];\n        var maxZ = minZ;\n        var ySize = spectra.length;\n        var xSize = spectra[0].data[0].length / 2;\n        var z = new Array(ySize);\n        for (var i = 0; i < ySize; i++) {\n            z[i] = new Array(xSize);\n            for (var j = 0; j < xSize; j++) {\n                z[i][j] = spectra[i].data[0][j * 2 + 1];\n                if (z[i][j] < minZ) minZ = spectra[i].data[0][j * 2 + 1];\n                if (z[i][j] > maxZ) maxZ = spectra[i].data[0][j * 2 + 1];\n                if (i !== 0 && j !== 0) {\n                    noise += Math.abs(z[i][j] - z[i][j - 1]) + Math.abs(z[i][j] - z[i - 1][j]);\n                }\n            }\n        }\n        return {\n            z: z,\n            minX: spectra[0].data[0][0],\n            maxX: spectra[0].data[0][spectra[0].data[0].length - 2],\n            minY: spectra[0].pageValue,\n            maxY: spectra[ySize - 1].pageValue,\n            minZ: minZ,\n            maxZ: maxZ,\n            noise: noise / ((ySize - 1) * (xSize - 1) * 2)\n        };\n\n    }\n\n    function add2D(result) {\n        var zData = convertTo3DZ(result.spectra);\n        result.contourLines = generateContourLines(zData);\n        delete zData.z;\n        result.minMax = zData;\n    }\n\n\n    function generateContourLines(zData, options) {\n        //console.time('generateContourLines');\n        var noise = zData.noise;\n        var z = zData.z;\n        var contourLevels = [];\n        var nbLevels = 7;\n        var povarHeight = new Float32Array(4);\n        var isOver = [];\n        var nbSubSpectra = z.length;\n        var nbPovars = z[0].length;\n        var pAx, pAy, pBx, pBy;\n\n        var x0 = zData.minX;\n        var xN = zData.maxX;\n        var dx = (xN - x0) / (nbPovars - 1);\n        var y0 = zData.minY;\n        var yN = zData.maxY;\n        var dy = (yN - y0) / (nbSubSpectra - 1);\n        var minZ = zData.minZ;\n        var maxZ = zData.maxZ;\n\n        //System.out.prvarln('y0 '+y0+' yN '+yN);\n        // -------------------------\n        // Povars attribution\n        //\n        // 0----1\n        // |  / |\n        // | /  |\n        // 2----3\n        //\n        // ---------------------d------\n\n        var lineZValue;\n        for (var level = 0; level < nbLevels * 2; level++) { // multiply by 2 for positif and negatif\n            var contourLevel = {};\n            contourLevels.push(contourLevel);\n            var side = level % 2;\n            if (side === 0) {\n                lineZValue = (maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) + 5 * noise;\n            } else {\n                lineZValue = -(maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) - 5 * noise;\n            }\n            var lines = [];\n            contourLevel.zValue = lineZValue;\n            contourLevel.lines = lines;\n\n            if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\n            for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n                for (var povar = 0; povar < nbPovars - 1; povar++) {\n                    povarHeight[0] = z[iSubSpectra][povar];\n                    povarHeight[1] = z[iSubSpectra][povar + 1];\n                    povarHeight[2] = z[(iSubSpectra + 1)][povar];\n                    povarHeight[3] = z[(iSubSpectra + 1)][(povar + 1)];\n\n                    for (var i = 0; i < 4; i++) {\n                        isOver[i] = (povarHeight[i] > lineZValue);\n                    }\n\n                    // Example povar0 is over the plane and povar1 and\n                    // povar2 are below, we find the varersections and add\n                    // the segment\n                    if (isOver[0] !== isOver[1] && isOver[0] !== isOver[2]) {\n                        pAx = povar + (lineZValue - povarHeight[0]) / (povarHeight[1] - povarHeight[0]);\n                        pAy = iSubSpectra;\n                        pBx = povar;\n                        pBy = iSubSpectra + (lineZValue - povarHeight[0]) / (povarHeight[2] - povarHeight[0]);\n                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                    }\n                    if (isOver[3] !== isOver[1] && isOver[3] !== isOver[2]) {\n                        pAx = povar + 1;\n                        pAy = iSubSpectra + 1 - (lineZValue - povarHeight[3]) / (povarHeight[1] - povarHeight[3]);\n                        pBx = povar + 1 - (lineZValue - povarHeight[3]) / (povarHeight[2] - povarHeight[3]);\n                        pBy = iSubSpectra + 1;\n                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                    }\n                    // test around the diagonal\n                    if (isOver[1] !== isOver[2]) {\n                        pAx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n                        pAy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n                        if (isOver[1] !== isOver[0]) {\n                            pBx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[0] - povarHeight[1]);\n                            pBy = iSubSpectra;\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                        if (isOver[2] !== isOver[0]) {\n                            pBx = povar;\n                            pBy = iSubSpectra + 1 - (lineZValue - povarHeight[2]) / (povarHeight[0] - povarHeight[2]);\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                        if (isOver[1] !== isOver[3]) {\n                            pBx = povar + 1;\n                            pBy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[3] - povarHeight[1]);\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                        if (isOver[2] !== isOver[3]) {\n                            pBx = povar + (lineZValue - povarHeight[2]) / (povarHeight[3] - povarHeight[2]);\n                            pBy = iSubSpectra + 1;\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                    }\n                }\n            }\n        }\n        // console.timeEnd('generateContourLines');\n        return {\n            minX: zData.minX,\n            maxX: zData.maxX,\n            minY: zData.minY,\n            maxY: zData.maxY,\n            segments: contourLevels\n        };\n        //return contourLevels;\n    }\n\n\n    function addLowRes(spectra, options) {\n        var spectrum;\n        var averageX, averageY;\n        var targetNbPoints = options.lowRes;\n        var highResData;\n        for (var i = 0; i < spectra.length; i++) {\n            spectrum = spectra[i];\n            // we need to find the current higher resolution\n            if (spectrum.data.length > 0) {\n                highResData = spectrum.data[0];\n                for (var j = 1; j < spectrum.data.length; j++) {\n                    if (spectrum.data[j].length > highResData.length) {\n                        highResData = spectrum.data[j];\n                    }\n                }\n\n                if (targetNbPoints > (highResData.length / 2)) return;\n                var i, ii;\n                var lowResData = [];\n                var modulo = Math.ceil(highResData.length / (targetNbPoints * 2));\n                for (i = 0, ii = highResData.length; i < ii; i = i + 2) {\n                    if (i % modulo === 0) {\n                        lowResData.push(highResData[i], highResData[i + 1])\n                    }\n                }\n                spectrum.data.push(lowResData);\n            }\n        }\n    }\n\n    return convert;\n\n}\n\nvar convert = getConverter();\n\nfunction JcampConverter(input, options, useWorker) {\n    if (typeof options === 'boolean') {\n        useWorker = options;\n        options = {};\n    }\n    if (useWorker) {\n        return postToWorker(input, options);\n    } else {\n        return convert(input, options);\n    }\n}\n\nvar stamps = {},\n    worker;\n\nfunction postToWorker(input, options) {\n    if (!worker) {\n        createWorker();\n    }\n    return new Promise(function (resolve) {\n        var stamp = Date.now() + '' + Math.random();\n        stamps[stamp] = resolve;\n        worker.postMessage({stamp: stamp, input: input, options: options});\n    });\n}\n\nfunction createWorker() {\n    var workerURL = URL.createObjectURL(new Blob([\n        'var getConverter =' + getConverter.toString() + ';var convert = getConverter(); onmessage = function (event) { postMessage({stamp: event.data.stamp, output: convert(event.data.input, event.data.options)}); };'\n    ], {type: 'application/javascript'}));\n    worker = new Worker(workerURL);\n    URL.revokeObjectURL(workerURL);\n    worker.addEventListener('message', function (event) {\n        var stamp = event.data.stamp;\n        if (stamps[stamp]) {\n            stamps[stamp](event.data.output);\n        }\n    });\n}\n\nmodule.exports = {\n    convert: JcampConverter\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/jcampconverter/src/index.js\n ** module id = 3\n ** module chunks = 0\n **/","var SD = require('./SD');\nvar PeakPicking = require('./PeakPicking');\nvar JcampConverter=require(\"jcampconverter\");\n\nfunction NMR(sd) {\n    SD.call(this, sd); // Héritage\n}\n\nNMR.prototype = Object.create(SD.prototype);\nNMR.prototype.constructor = NMR;\n\nNMR.fromJcamp = function(jcamp,options) {\n    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new NMR(spectrum);\n}\n\n/**\n* Return the observed nucleus \n*/\nNMR.prototype.getNucleus=function(dim){\n    if(!dim||dim==0||dim==1)\n        return this.sd.xType;\n    else{\n        return \"\";\n    }\n}\n\n/**\n* Returns the solvent name\n*/\nNMR.prototype.getSolventName=function(){\n    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]||\"\").replace(\"<\",\"\").replace(\">\",\"\");\n}\n\n//Returns the observe frequency in the direct dimension\nNMR.prototype.observeFrequencyX=function(){\n    return this.sd.spectra[0].observeFrequency;\n}\n\n/**\n* Returns the noise factor depending on the nucleus.\n*/\nNMR.prototype.getNMRPeakThreshold=function(nucleus) {\n    if (nucleus == \"1H\")\n        return 3.0;\n    if (nucleus ==\"13C\")\n        return 5.0;\n    return 1.0;\n}\n\n\n    \n/**\n * @function addNoise(SNR)\n * This function adds white noise to the the given spectraData. The intensity of the noise is \n * calculated from the given signal to noise ratio.\n * @param SNR Signal to noise ratio\n */\n NMR.prototype.addNoise=function(SNR) {\n     //@TODO Implement addNoise filter\n}\n\n\n/**\n * @function addSpectraDatas(spec2,factor1,factor2,autoscale )   \n *  This filter performs a linear combination of two spectraDatas.\n * A=spec1\n * B=spec2\n * After to apply this filter you will get:\n *      A=A*factor1+B*factor2\n * if autoscale is set to 'true' then you will obtain:\n *  A=A*factor1+B*k*factor2\n * Where the k is a factor such that the maximum peak in A is equal to the maximum peak in spectraData2 \n * @param spec2 spectraData2\n * @param factor1 linear factor for spec1\n * @param factor2 linear factor for spec2\n * @param autoscale Auto-adjust scales before combine the spectraDatas\n * @example spec1 = addSpectraDatas(spec1,spec2,1,-1, false) This subtract spec2 from spec1\n*/\nNMR.prototype.addSpectraDatas=function(spec2,factor1,factor2,autoscale ) {\n    //@TODO Implement addSpectraDatas filter\n}\n\n/**\n * @function autoBaseline()\n * Automatically corrects the base line of a given spectraData. After this process the spectraData\n * should have meaningful integrals.\n */\nNMR.prototype.autoBaseline=function( ) {\n    //@TODO Implement autoBaseline filter\n}\n\n/**\n * @function fourierTransform()\n * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n */\nNMR.prototype.fourierTransform=function( ) {\n    //@TODO Implement fourierTransform filter\n}\n\n/**\n * @function postFourierTransform(ph1corr)\n * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained \n * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra \n * filter could not find the correct number of points to perform a circular shift.\n * The actual problem is that not all of the spectra has the necessary parameters for use only one method for \n * correcting the problem of the Bruker digital filters.\n * @param spectraData A fourier transformed spectraData.\n * @param ph1corr Phase 1 correction value in radians.\n */\nNMR.prototype.postFourierTransform=function(ph1corr) {\n    //@TODO Implement postFourierTransform filter\n}\n\n/**\n * @function zeroFilling(nPointsX [,nPointsY])\n * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one \n * could increase artificially the spectral resolution.\n * @param nPointsX Number of new zero points in the direct dimension\n * @param nPointsY Number of new zero points in the indirect dimension\n */\nNMR.prototype.zeroFilling=function(nPointsX, nPointsY) {\n    //@TODO Implement zeroFilling filter\n}\n\n/**\n * @function  haarWhittakerBaselineCorrection(waveletScale,whittakerLambda)\n * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n * The needed parameters are the wavelet scale and the lambda used in the whittaker smoother.\n * @param waveletScale To be described\n * @param whittakerLambda To be described\n */\nNMR.prototype.haarWhittakerBaselineCorrection=function(waveletScale,whittakerLambda) {\n    //@TODO Implement haarWhittakerBaselineCorrection filter\n}\n\n/**\n * @function whittakerBaselineCorrection(whittakerLambda,ranges)\n * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n * The needed parameters are the Wavelet scale and the lambda used in the Whittaker smoother.\n * @param waveletScale To be described\n * @param whittakerLambda To be described\n * @param ranges A string containing the ranges of no signal.\n */\nNMR.prototype.whittakerBaselineCorrection=function(whittakerLambda,ranges) {\n    //@TODO Implement whittakerBaselineCorrection filter\n}\n\n/**\n * @function brukerSpectra(options)\n * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that \n * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the \n * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n * @option DECIM: Acquisition parameter\n * @option DSPFVS: Acquisition parameter\n */\nNMR.prototype.brukerSpectra=function(options) {\n    //@TODO Implement brukerSpectra filter\n}\n\n/**\n * @function apodization(functionName, lineBroadening)\n * Apodization of a spectraData object.\n * @param spectraData An spectraData of type NMR_FID\n * @param functionName Valid values for functionsName are\n *  Exponential, exp\n *  Hamming, hamming\n *  Gaussian, gauss\n *  TRAF, traf\n *  Sine Bell, sb\n *  Sine Bell Squared, sb2\n * @param lineBroadening The parameter LB should either be a line broadening factor in Hz \n * or alternatively an angle given by degrees for sine bell functions and the like.\n * @example SD.apodization(, lineBroadening)\n */\nNMR.prototype.apodization=function(functionName, lineBroadening) {\n    //@TODO Implement apodization filter\n}\n\n/**\n * @function echoAntiechoFilter();\n * That decodes an Echo-Antiecho 2D spectrum.\n */\nNMR.prototype.echoAntiechoFilter=function() {\n    //@TODO Implement echoAntiechoFilter filter\n}\n\n/**\n * @function SNVFilter()\n * This function apply a Standard Normal Variate Transformation over the given spectraData. Mainly used for IR spectra.\n */\nNMR.prototype.SNVFilter=function() {\n    //@TODO Implement SNVFilter\n}\n\n/**\n * @function powerFilter(power)\n * This function applies a power to all the Y values.<br>If the power is less than 1 and the spectrum has negative values, it will be shifted so that the lowest value is zero \n * @param   power   The power to apply\n */\nNMR.prototype.powerFilter=function(power) {\n    var minY=this.getMinY();\n    if(power<1 && minY<0){\n        this.YShift(-1*minY);\n        console.warn(\"SD.powerFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n    }\n    //@TODO Implement powerFilter\n}\n\n/**\n * @function logarithmFilter(base)\n * This function applies a log to all the Y values.<br>If the spectrum has negative or zero values, it will be shifted so that the lowest value is 1 \n * @param   base    The base to use\n */\nNMR.prototype.logarithmFilter=function(base) {\n    var minY=this.getMinY();\n    if(minY<=0){\n        this.YShift((-1*minY)+1);\n        console.warn(\"SD.logarithmFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n    }\n   //@TODO Implement logarithmFilter filter\n}\n\n\n/**\n * @function correlationFilter(func) \n * This function correlates the given spectraData with the given vector func. The correlation\n * operation (*) is defined as:\n * \n *                    __ inf\n *  c(x)=f(x)(*)g(x)= \\        f(x)*g(x+i)\n *                   ./    \n *                    -- i=-inf\n * @param func A double array containing the function to correlates the spectraData\n * @example var smoothedSP = SD.correlationFilter(spectraData,[1,1]) returns a smoothed version of the\n * given spectraData. \n */\nNMR.prototype.correlationFilter=function(func) {\n    //@TODO Implement correlationFilter filter\n}\n\n/**\n * @function  phaseCorrection(phi0, phi1)\n * Applies the phase correction (phi0,phi1) to a Fourier transformed spectraData. The angles must be given in radians.\n * @param phi0 Zero order phase correction\n * @param phi1 One order phase correction\n*/\nNMR.prototype.phaseCorrection=function(phi0, phi1) {\n    //@TODO Implement phaseCorrection filter\n}\n\n/**\n * @function automaticPhase() \n * This function determines automatically the correct parameters phi0 and phi1 for a phaseCorrection\n * function and applies it.\n */ \nNMR.prototype.automaticPhase=function() {\n    //@TODO Implement automaticPhase filter\n}\n\n/**\n *  @function useBrukerPhase()\n *  This function extract the parameters of the phaseCorrection from the jcamp-dx parameters\n *  if the spectrum was acquired in Bruker spectrometers . Basically it will look for the parameters\n *  $PHC0 and $PHC1, and will use it to call the phaseCorrection function.\n */\nNMR.prototype.useBrukerPhase=function() {\n   //@TODO Implement useBrukerPhase filter\n}\n\n/**\n * @function nmrPeakDetection(parameters);\n * This function process the given spectraData and tries to determine the NMR signals. Returns an NMRSignal1D array containing all the detected 1D-NMR Signals\n * @param parameters A JSONObject containing the optional parameters:\n * @option fromX:   Lower limit.\n * @option toX:     Upper limit.\n * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n */\nNMR.prototype.nmrPeakDetection=function(parameters) {\n    return PeakPicking.peakPicking(this, parameters);\n}\n\n/**\n * @function toJcamp(options)\n * This function creates a String that represents the given spectraData in the format JCAM-DX 5.0\n * The X,Y data can be compressed using one of the methods described in: \n * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\", \n *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n * @option encode: ['FIX','SQZ','DIF','DIFDUP','CVS','PAC'] (Default: 'FIX')\n * @option yfactor: The YFACTOR. It allows to compress the data by removing digits from the ordinate. (Default: 1)\n * @option type: [\"NTUPLES\", \"SIMPLE\"] (Default: \"SIMPLE\")\n * @option keep: A set of user defined parameters of the given SpectraData to be stored in the jcamp.\n * @example SD.toJcamp(spectraData,{encode:'DIFDUP',yfactor:0.01,type:\"SIMPLE\",keep:['#batchID','#url']});\n */ \nNMR.prototype.toJcamp=function(options) {\n     //@TODO Implement toJcamp filter\n     return \"NOT ImplementED\"\n}\n\n\nmodule.exports = NMR;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/NMR.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * Implementation of the peak pickig method described by Cobas in:\n * A new approach to improving automated analysis of proton NMR spectra\n * through Global Spectral Deconvolution (GSD)\n * http://www.spectroscopyeurope.com/images/stories/ColumnPDFs/TD_23_1.pdf\n */\nvar JAnalyzer = require('./JAnalyzer');\n/*var LM = require('ml-curve-fitting');\nvar Matrix = LM.Matrix;\nvar math = Matrix.algebra;*/\nvar GSD = require(\"ml-gsd\");\nvar extend = require(\"extend\");\n\nvar PeakPicking={\n    impurities:[],\n    maxJ:20,\n    defaultOptions:{nH:10,\n        clean:true,\n        realTop:false,\n        thresholdFactor:1,\n        compile:true,\n        integralFn:0,\n        optimize:true,\n        id:\"\"\n    },\n\n    peakPicking:function(spectrum, optionsEx){\n        var options = extend({}, this.defaultOptions, optionsEx);\n\n        var i, j, nHi, sum;\n\n        var noiseLevel = Math.abs(spectrum.getNoiseLevel())*(options.thresholdFactor);\n\n        //console.log(\"noiseLevel \"+noiseLevel);\n        var gsdOptions = extend({},\n            {noiseLevel: noiseLevel,\n                minMaxRatio:0.01,\n                broadRatio:0.0025,\n                smoothY:true,\n                nL:4,\n                sgOptions:{windowSize: 9, polynomial: 3}\n            },\n            options.gsdOptions);\n\n        var data = spectrum.getXYData();\n        var peakList = GSD.gsd(data[0],data[1], gsdOptions);\n        var peakList = GSD.post.joinBroadPeaks(peakList,{width:0.25});\n        if(options.optimize)\n            peakList = GSD.post.optimizePeaks(peakList,data[0],data[1],gsdOptions.nL,\"lorentzian\");\n\n        peakList = this.clearList(peakList, noiseLevel);\n        var signals = this.detectSignals(peakList, spectrum, options.nH, options.integralFn);\n        //console.log(JSON.stringify(signals));\n        //Remove all the signals with small integral\n        if(options.clean||false){\n            for(var i=signals.length-1;i>=0;i--){\n                if(signals[i].integralData.value<0.5) {\n                    signals.splice(i, 1);\n                }\n            }\n        }\n        if(options.compile||false){\n            for(i=0;i<signals.length;i++){\n                //console.log(\"Sum \"+signals[i].integralData.value);\n                JAnalyzer.compilePattern(signals[i]);\n                //console.log(signals[i])\n                if(signals[i].maskPattern&&signals[i].multiplicity!=\"m\"\n                    && signals[i].multiplicity!=\"\"){\n                    //Create a new signal with the removed peaks\n                    nHi = 0;\n                    sum=0;\n                    var peaksO = [];\n                    for(j=signals[i].maskPattern.length-1;j>=0;j--){\n                        sum+=this.area(signals[i].peaks[j]);\n\n                        if(signals[i].maskPattern[j]===false) {\n                            var peakR = signals[i].peaks.splice(j,1)[0];\n                            peaksO.push({x:peakR.x, y:peakR.intensity, width:peakR.width});\n                            //peaksO.push(peakR);\n                            signals[i].mask.splice(j,1);\n                            signals[i].mask2.splice(j,1);\n                            signals[i].maskPattern.splice(j,1);\n                            signals[i].nbPeaks--;\n                            nHi+=this.area(peakR);\n                        }\n                    }\n                    if(peaksO.length>0){\n                        nHi=nHi*signals[i].integralData.value/sum;\n                        signals[i].integralData.value-=nHi;\n                        var peaks1 = [];\n                        for(var j=peaksO.length-1;j>=0;j--)\n                            peaks1.push(peaksO[j]);\n                        var newSignals = this.detectSignals(peaks1, spectrum, nHi, options.integralFn);\n\n                        for(j=0;j<newSignals.length;j++)\n                            signals.push(newSignals[j]);\n                    }\n                }\n            }\n            //console.log(signals);\n            this.updateIntegrals(signals, options.nH);\n        }\n        signals.sort(function(a,b){\n            return b.delta1- a.delta1\n        });\n        //Remove all the signals with small integral\n        if(options.clean||false){\n            for(var i=signals.length-1;i>=0;i--){\n                //console.log(signals[i]);\n                if(signals[i].integralData.value<0.5) {\n                    signals.splice(i, 1);\n                }\n            }\n        }\n\n        for(var i=0;i<signals.length;i++){\n            signals[i].signalID = options.id+\"_\"+(i+1);\n            signals[i]._highlight=[signals[i].signalID];\n        }\n\n        return signals;\n\n        /*var frequency = spectrum.observeFrequencyX();//getParamDouble(\"$BF1\",400);\n        var imp = this.labelPeaks(peakList, solvent, frequency);\n        return [peakList,imp];\n        */\n        //return createSignals(peakList,nH);\n    },\n\n    clearList:function(peakList, threshold){\n        for(var i=peakList.length-1;i>=0;i--){\n            if(Math.abs(peakList[i].y)<threshold){\n                peakList.splice(i,1);\n            }\n        }\n        return peakList;\n    },\n\n\n    /**\n     * This method implements a non linear sampling of the spectrum. The point close to\n     * the critic points are more sampled than the other ones.\n     * @param spectrum\n     * @param peaks\n     * @param rowWise\n     */\n    sampling: function(spectrum, peaks, rowWise){\n        var i0, ie, ic,i, j,nbPoints;\n        var xy = []\n        if(i0>ie){\n            var tmp = i0;\n            i0 = ie;\n            ie = tmp;\n        }\n        //Non linear sampling for each peak.\n        for(i=0;i<peaks.length;i++){\n            var more = true;\n            var nL = 4;\n            while(more) {\n                i0 = spectrum.unitsToArrayPoint(peaks[i][0] - peaks[i][2] * nL);\n                ie = spectrum.unitsToArrayPoint(peaks[i][0] + peaks[i][2] * nL);\n                ic = spectrum.unitsToArrayPoint(peaks[i][0]);\n                if (i0 > ie) {\n                    tmp = i0;\n                    i0 = ie;\n                    ie = tmp;\n                }\n                i0 = i0 < 0 ? 0 : i0;\n                ie = ie >= spectrum.getNbPoints() ? spectrum.getNbPoints() - 1 : ie;\n\n                if (ie - i0 < 10) {\n                    for (j = i0; j <= ie; j++) {\n                        xy.push([spectrum.getX(j), spectrum.getY(j)]);\n                    }\n                    more = false;\n                }\n                else {\n                    xy.push([spectrum.getX(i0), spectrum.getY(i0)]);\n                    xy.push([spectrum.getX(ie), spectrum.getY(ie)]);\n                    if (nL > 0.5) {\n                        nL -= 0.5;\n                    }\n                    else {\n                        nL /= 2;\n                    }\n                }\n            }\n        }\n        //console.log(xy);\n        xy.sort(function(a,b){\n            return a[0]-b[0];\n        });\n        //console.log(\"XX \"+xy.length);\n        var x=[],y=[];\n        var index =0;\n        if(rowWise){\n            x=[xy[0][0]],y=[xy[0][1]];\n            for(i=1;i<xy.length;i++){\n                if(x[index]!=xy[i][0]){\n                    x.push(xy[i][0]);\n                    y.push(xy[i][1]);\n                    index++;\n                }\n            }\n        }\n        else{\n            x=[[xy[0][0]]],y=[[xy[0][1]]];\n            for(i=1;i<xy.length;i++){\n                if(x[index][0]!=xy[i][0]){\n                    x.push([xy[i][0]]);\n                    y.push([xy[i][1]]);\n                    index++;\n                }\n            }\n        }\n        return [x,y];\n\n    },\n\n    getVector: function(spectrum, from, to, rowWise){\n        var i0 = spectrum.unitsToArrayPoint(from);\n        var ie = spectrum.unitsToArrayPoint(to);\n        var x = [];\n        var y = [];\n        if(i0>ie){\n            var tmp = i0;\n            i0 = ie;\n            ie = tmp;\n        }\n        i0=i0<0?0:i0;\n        ie=ie>=spectrum.getNbPoints()?spectrum.getNbPoints()-1:ie;\n        for(var i=i0;i<ie;i+=10){\n            if(rowWise){\n                y.push(spectrum.getY(i));\n                x.push(spectrum.getX(i));\n            }\n            else{\n                y.push([spectrum.getY(i)]);\n                x.push([spectrum.getX(i)]);\n            }\n        }\n        return [x,y];\n    },\n\n\n\n    updateLimits : function(signal){\n        if(signal.multiplicity!=\"m\" && signal.multiplicity!=\"\"){\n            //Remove the integral of the removed peaks\n            var peaksO = signal.peaks;\n            var nbPeaks0 = peaksO.length, index = 0, factor = 0, toRemove = 0;\n\n            for(var i=0;i<nbPeaks0;i++){\n                if(signal.maskPattern[i]===false)\n                    toRemove+=this.area(peaksO[i]);\n                factor+= this.area(peaksO[i]);\n            }\n            factor=signal.integralData.value/factor;\n            signal.integralData.value-=toRemove*factor;\n        }\n        return signal.integralData.value;\n    },\n\n    updateIntegrals : function(signals, nH){\n        var sumIntegral = 0,i,sumObserved=0;\n        for(i=0;i<signals.length;i++){\n            sumObserved+=Math.round(signals[i].integralData.value);\n        }\n        if(sumObserved!=nH){\n\n            sumIntegral=nH/sumObserved;\n            for(i=0;i<signals.length;i++){\n                signals[i].integralData.value*=sumIntegral;\n            }\n        }\n    },\n\n    /*\n     {\n     \"nbPeaks\":1,\"multiplicity\":\"\",\"units\":\"PPM\",\"startX\":3.43505,\"assignment\":\"\",\n     \"pattern\":\"s\",\"stopX\":3.42282,\"observe\":400.08,\"asymmetric\":false,\n     \"delta1\":3.42752,\n     \"integralData\":{\"to\":3.43505,\"value\":590586504,\"from\":3.42282},\n     \"nucleus\":\"1H\",\n     \"peaks\":[{\"intensity\":60066147,\"x\":3.42752}]\n     }\n     */\n    detectSignals: function(peakList, spectrum, nH, integralType){\n\n        var frequency = spectrum.observeFrequencyX();\n        var signals = [];\n        var signal1D = {};\n        var prevPeak = {x:100000,y:0,width:0},peaks=null;\n        var rangeX = 16/frequency;//Peaks withing this range are considered to belongs to the same signal1D\n        var spectrumIntegral = 0,cs,sum, i,j;\n        //console.log(\"RangeX \"+rangeX);\n        for(i=0;i<peakList.length;i++){\n            //console.log(peakList[i]);\n            if(Math.abs(peakList[i].x-prevPeak.x)>rangeX){\n                //console.log(typeof peakList[i].x+\" \"+typeof peakList[i].width);\n                signal1D = {\"nbPeaks\":1,\"units\":\"PPM\",\n                    \"startX\":peakList[i].x+peakList[i].width,\n                    \"stopX\":peakList[i].x-peakList[i].width,\n                    \"multiplicity\":\"\",\"pattern\":\"\",\n                    \"observe\":frequency,\"nucleus\":\"1H\",\n                    \"integralData\":{\"from\":peakList[i].x-peakList[i].width*3,\n                                    \"to\":peakList[i].x+peakList[i].width*3\n                                    //\"value\":this.area(peakList[i])\n                    },\n                    \"peaks\":[]};\n                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n                signals.push(signal1D);\n                //spectrumIntegral+=this.area(peakList[i]);\n            }\n            else{\n                var tmp = peakList[i].x-peakList[i].width;\n                signal1D.stopX = Math.min(signal1D.stopX,tmp);\n                tmp = peakList[i].x+peakList[i].width;\n                signal1D.stopX = Math.max(signal1D.stopX,tmp);\n                signal1D.nbPeaks++;\n                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n                //signal1D.integralData.value+=this.area(peakList[i]);\n                signal1D.integralData.from = Math.min(signal1D.integralData.from, peakList[i].x-peakList[i].width*3);\n                signal1D.integralData.to = Math.max(signal1D.integralData.to,peakList[i].x+peakList[i].width*3);\n                //spectrumIntegral+=this.area(peakList[i]);\n            }\n            prevPeak = peakList[i];\n        }\n        //Normalize the integral to the normalization parameter and calculate cs\n        for(i=0;i<signals.length;i++){\n            peaks = signals[i].peaks;\n            var integral = signals[i].integralData;\n            cs = 0;\n            sum = 0;\n\n            for(var j=0;j<peaks.length;j++){\n                cs+=peaks[j].x*this.area(peaks[j]);//.intensity;\n                sum+=this.area(peaks[j]);\n            }\n            signals[i].delta1 = cs/sum;\n\n            if(integralType==0)\n                integral.value = sum;\n            else {\n                integral.value=spectrum.getArea(integral.from,integral.to);//*nH/spectrumIntegral;\n            }\n            spectrumIntegral+=integral.value;\n\n        }\n        for(var i=0;i<signals.length;i++){\n            //console.log(integral.value);\n            var integral = signals[i].integralData;\n            integral.value*=nH/spectrumIntegral;\n        }\n\n        return signals;\n    },\n\n    area: function(peak){\n        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n    },\n    /**\n     This function tries to determine which peaks belongs to common laboratory solvents\n     as trace impurities from DOI:10.1021/jo971176v. The only parameter of the table is\n     the solvent name.\n     */\n    labelPeaks:function(peakList, solvent, frequency){\n        var column = 0;\n        //console.log(this.impurities[0]);\n        for(column=4;column<this.impurities.length;column++){\n            //console.log(\"sss\".contains);\n            if(this.impurities[0][column].indexOf(solvent)>=0){\n                break;\n            }\n        }\n        //console.log(\"labelPeaks \"+column);\n        var nImpurities = this.impurities.length-1;\n        var nPeaks = peakList.length;\n        //Scores matrix\n        //console.log(nImpurities);\n        var scores = new Array(nImpurities);\n        var max = 0, diff=0, score=0;\n        var gamma = 0.2;//ppm\n        var impurityID=-1;\n        var prevImp = \"\";\n        var maxIntensity = 0,i;\n        for(var j=nPeaks-1;j>=0;j--){\n            if(peakList[j][1]>maxIntensity)\n                maxIntensity = peakList[j][1];\n        }\n\n        for(i=nImpurities-1;i>=0;i--){\n            if(this.impurities[i+1][0]!=prevImp){\n                impurityID++;\n                prevImp=this.impurities[i+1][0];\n            }\n\n            //impID, max, maxIndex, average\n            scores[i]=[impurityID,this.impurities[i+1][2],\n                this.impurities[i+1][3],0,[],0];\n            max = 0;\n            for(var j=nPeaks-1;j>=0;j--){\n                diff = 10000;//Big numnber\n                if(this.impurities[i+1][column]>0)\n                    diff = Math.abs(peakList[j][0]-this.impurities[i+1][column]);\n                if(diff<gamma*3){\n                    score=this.score(diff,gamma);\n                    if(score>max){\n                        max=score;\n                        scores[i][3]=max;\n                        scores[i][4]=[j];\n                    }\n                }\n            }\n        }\n        //Calculate the average score for each impurity set of signals\n        var prevIndex = -1, sum=0, count = 0;\n        var candidates=[];\n        var impuritiesPeaks = [];\n        var i=nImpurities-1;\n        while(i>=-1){\n            if(i==-1||scores[i][0]!=prevIndex&&prevIndex!=-1){\n                if(prevIndex!=-1){\n                    scores[i+1][5]=sum/count;\n                    //Now, lets chech the multiplicities\n                    if(scores[i+1][5]>0.9){\n                        //console.log(scores[i+1][0]+\" SS \");\n                        score=this.updateScore(candidates, peakList, maxIntensity, frequency);\n                        if(score>0.9){\n                            //console.log(candidates);\n                            //TODO: Remove peaks and add it do impuritiesPeaks\n                            for(var j=0;j<candidates.length;j++){\n                                for(var k=candidates[j][4].length-1;k>=0;k--){\n                                    impuritiesPeaks.push(peakList[candidates[j][4][k]]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if(i>=0){\n                    prevIndex=scores[i][0];\n                    sum=scores[i][3];\n                    count=1;\n                    candidates=[scores[i]];\n                }\n\n            }else{\n                prevIndex=scores[i][0];\n                candidates.push(scores[i]);\n                sum+=scores[i][3];\n                count++;\n            }\n            i--;\n        }\n        //console.log(impuritiesPeaks.length);\n\n        return impuritiesPeaks;\n    },\n    /**\n     Updates the score that a given impurity is present in the current spectrum. In this part I would expect\n     to have into account the multiplicity of the signal. Also the relative intensity of the signals.\n     THIS IS the KEY part of the algorithm!!!!!!!!!\n     */\n    updateScore:function(candidates, peakList, maxIntensity, frequency){\n        //You may do it to avoid this part.\n        //return 1;\n\n        //Check the multiplicity\n        var mul = \"\";\n        var j = 0,index, k, maxJppm=this.maxJ/frequency;\n        var min=0, indexMin=0, score=0;\n        for(var i=candidates.length-1;i>=0;i--){\n            mul = candidates[i][1];\n            j = candidates[i][2];\n            //console.log(candidates[i][4]);\n            index = candidates[i][4][0];\n            //console.log(peakList[index][0]+\" \"+mul+\" \"+j+\" \"+index);\n            //I guess we should try to identify the pattern in the nearby.\n            if(mul.indexOf(\"sep\")>=0){\n                if(peakList[index][1]>maxIntensity*0.33){\n                    candidates.splice(i,1);//Not a candidate anymore.\n                }\n            }else{\n                if(mul.indexOf(\"s\")>=0||mul.indexOf(\"X\")>=0){\n                    k=index-1;\n                    min=peakList[index][1];\n                    indexMin=index;\n                    while(k>=0&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n                        if(peakList[k][1]<min){\n                            min=peakList[k][1];\n                            indexMin=k;\n                        }\n                        k--;\n                    }\n                    k=index+1;\n                    while(k<peakList.length&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n                        if(peakList[k][1]<min){\n                            min=peakList[k][1];\n                            indexMin=k;\n                        }\n                        k++;\n                    }\n                    candidates[i][4][0]=indexMin;\n                    score+=1;\n                }\n            }\n            if(mul.indexOf(\"d\")>=0){\n                if(index>0&&index<peakList.length-1){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index-1][0])*frequency-j);\n                    if(thisJ1<2||thisJ2<2||thisJ3<2){\n                        if(thisJ1<thisJ2){\n                            if(thisJ1<thisJ3){\n                                candidates[i][4]=[index-1,index];\n                                score+=1;\n                            }\n                            else{\n                                candidates[i][4]=[index-1,index+1];\n                                score+=1;\n                            }\n                        }\n                        else{\n                            if(thisJ2<thisJ3){\n                                candidates[i][4]=[index,index+1];\n                                score+=1;\n                            }\n                            else{\n                                candidates[i][4]=[index-1,index+1];\n                                score+=1;\n                            }\n                        }\n                    }\n                }\n            }\n            if(mul.indexOf(\"t\")>=0){\n                //console.log(\"here\");\n                if(index>0&&index<peakList.length-1){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ4 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index+2][0])*frequency-j);\n                    //console.log(\"XX \"+thisJ1+\" \"+thisJ2);\n                    if(thisJ1<2){\n                        candidates[i][4]=[index-1, index];\n                        score+=0.5;\n                    }\n                    if(thisJ2<2){\n                        candidates[i][4].push(index+1);\n                        score+=0.5;\n                    }\n                    if(thisJ3<2){\n                        candidates[i][4].push(index+2);\n                        score+=0.5;\n                    }\n\n                }\n            }\n            if(mul.indexOf(\"q\")>=0){\n                if(index>1&&index<peakList.length-2){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-2][0]-peakList[index-1][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ4= Math.abs(Math.abs(peakList[index+2][0]-peakList[index+1][0])*frequency-j);\n                    if(thisJ1<2){\n                        candidates[i][4].push(index-2);\n                        score+=0.25;\n                    }\n                    if(thisJ2<2){\n                        candidates[i][4].push(index-1);\n                        score+=0.25;\n                    }\n                    if(thisJ3<2){\n                        candidates[i][4].push(index+1);\n                        score+=0.25;\n                    }\n                    if(thisJ4<2){\n                        candidates[i][4].push(index+2);\n                        score+=0.25;\n                    }\n                }\n            }\n\n\n        }\n\n        //console.log(score/candidates.length+ \" -> \"+candidates);\n        //Lets remove the candidates to be impurities.\n        //It would be equivalent to mark the peaks as valid again\n        if(score/candidates.length < 0.5){\n            for(var i=candidates.length-1;i>=0;i--){\n                candidates.splice(i,1);\n            }\n            return 0;\n        }\n        //Check the relative intensity\n        return 1;\n    },\n\n    score:function(value, gamma){\n        return Math.exp(-Math.pow(value/gamma,2)/2.0);\n    },\n    /**\n     This function joint all the nearby peaks into single signals. We may try to\n     determine the J-couplings and the multiplicity here.\n     */\n    createSignals:function(){\n\n    }\n\n}\n\nmodule.exports = PeakPicking;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakPicking.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * This library implements the J analyser described by Cobas et al in the paper:\n * A two-stage approach to automatic determination of 1H NMR coupling constants\n * Created by acastillo on 4/5/15.\n */\nvar JAnalyzer = {\n    pascalTriangle : [[0],[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]],\n    patterns: [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"],\n    symRatio : 1.5,\n    maxErrorIter1 : 2.5,//Hz\n    maxErrorIter2 : 1,//Hz\n    DEBUG : false,\n\n    /**\n     * The compilation process implements at the first stage a normalization procedure described by Golotvin et al.\n     * embedding in peak-component-counting method described by Hoyes et al.\n     * @param signal\n     */\n    compilePattern : function(signal){\n        if(this.DEBUG)console.log(\"Debugin...\");\n\n        signal.multiplicity=\"m\";//By default the multiplicity is massive\n        // 1.1 symmetrize\n        // It will add a set of peaks(signal.peaksComp) to the signal that will be used during\n        // the compilation process. The unit of those peaks will be in Hz\n        signal.symRank = this.symmetrizeChoiseBest(signal,this.maxErrorIter1,1);\n        signal.asymmetric = true;\n       // console.log(signal.delta1+\" \"+signal.symRank);\n        //Is the signal symmetric?\n        if(signal.symRank>=0.95&&signal.peaksComp.length<32){\n            if(this.DEBUG)console.log(signal.delta1+ \" nbPeaks \"+signal.peaksComp.length);\n            signal.asymmetric = false;\n            var i,j,min,max,k=1,P1,Jc=[],n2,maxFlagged;\n            //Loop over the possible number of coupling contributing to the multiplet\n            for(var n=0;n<9;n++){\n                if(this.DEBUG)console.log(\"Trying \"+n+\" couplings\");\n                //1.2 Normalize. It makes a deep copy of the peaks before to modify them.\n                peaks = this.normalize(signal,n);\n                //signal.peaksCompX = peaks;\n                var validPattern = false;//It will change to true, when we find the good patter\n                //Lets check if the signal could be a singulet.\n                if(peaks.length == 1 && n === 0){\n                    validPattern=true;\n                }\n                else{\n                    if(peaks.length <= 1){\n                        continue;\n                    }\n                }\n                // 1.3 Establish a range for the Heights Hi [peaks.intensity*0.85,peaks.intensity*1.15];\n                var ranges = this.getRanges(peaks);\n                n2 = Math.pow(2,n);\n\n                if(this.DEBUG){\n                    console.log(\"ranges: \"+JSON.stringify(ranges));\n                    console.log(\"Target sum: \"+n2);\n                }\n\n                // 1.4 Find a combination of integer heights Hi, one from each Si, that sums to 2^n.\n                var heights = null;\n                while(!validPattern&&(heights = this.getNextCombination(ranges, n2))!==null){\n\n                    if(this.DEBUG){\n                        console.log(\"Possible pattern found with \"+n+\" couplings!!!\");\n                        console.log(heights);\n                    }\n                    // 2.1 Number the components of the multiplet consecutively from 1 to 2n,\n                    //starting at peak 1\n                    var numbering = new Array(heights.length);\n                    k=1;\n                    for(i=0;i<heights.length;i++){\n                        numbering[i]=new Array(heights[i]);\n                        for(j=0;j<heights[i];j++){\n                            numbering[i][j]=k++;\n                        }\n                    }\n                    if(this.DEBUG){\n                        console.log(\"Numbering: \"+JSON.stringify(numbering));\n                    }\n                    Jc = []; //The array to store the detected j-coupling\n                    // 2.2 Set j = 1; J1 = P2 - P1. Flag components 1 and 2 as accounted for.\n                    j=1;\n                    Jc.push(peaks[1].x-peaks[0].x);\n                    P1 = peaks[0].x;\n                    numbering[0].splice(0,1);//Flagged\n                    numbering[1].splice(0,1);//Flagged\n                    k=1;\n                    var nFlagged = 2;\n                    maxFlagged = Math.pow(2,n)-1;\n                    while(Jc.length<n&&nFlagged<maxFlagged&&k<peaks.length){\n                        if(this.DEBUG){\n                            console.log(\"New Jc\"+JSON.stringify(Jc));\n                            console.log(\"Aval. numbering \"+JSON.stringify(numbering));\n                        }\n                        // 4.1. Increment j. Set k to the number of the first unflagged component.\n                        j++;\n                        while(k<peaks.length&&numbering[k].length===0){\n                            k++;\n                        }\n                        if(k<peaks.length){\n                            // 4.2 Jj = Pk - P1.\n                            Jc.push(peaks[k].x-peaks[0].x);\n                            //Flag component k and, for each sum of the...\n                            numbering[k].splice(0,1);//Flageed\n                            nFlagged++;\n                            //Flag the other components of the multiplet\n                            for(var u=2;u<=j;u++){\n                                //TODO improve those loops\n                                var jSum = 0;\n                                for(i=0;i<u;i++){\n                                    jSum+=Jc[i];\n                                }\n                                for(i=1;i<numbering.length;i++){\n                                    //Maybe 0.25 Hz is too much?\n                                    if(Math.abs(peaks[i].x-(P1+jSum))<0.25){\n                                        numbering[i].splice(0,1);//Flageed\n                                        nFlagged++;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    //Calculate the ideal patter by using the extracted j-couplings\n                    var pattern = this.idealPattern(Jc);\n                    //Compare the ideal pattern with the proposed intensities.\n                    // All the intensities have to match to accept the multiplet\n                    validPattern = true;\n                    for(i=0;i<pattern.length;i++){\n                        if(pattern[i].intensity != heights[i])\n                            validPattern = false;\n                    }\n                    //More verbosity of the process\n                    if(this.DEBUG){\n                        console.log(\"Jc \"+JSON.stringify(Jc));\n                        console.log(\"Heights \"+JSON.stringify(heights));\n                        console.log(\"pattern \"+JSON.stringify(pattern));\n                        console.log(\"Valid? \"+validPattern);\n                    }\n                }\n                //If we found a valid pattern we should inform about the pattern.\n                if(validPattern){\n                    this.updateSignal(signal,Jc);\n                }\n            }\n        }\n\n        //Before to return, change the units of peaksComp from Hz to PPM again\n        for(i=0;i<signal.peaksComp.length;i++){\n            signal.peaksComp[i].x/=signal.observe;\n        }\n    },\n\n    updateSignal : function(signal, Jc){\n        //Update the limits of the signal\n        var peaks = signal.peaksComp;//Always in Hz\n        var nbPeaks = peaks.length;\n        signal.startX=peaks[0].x/signal.observe+peaks[0].width;\n        signal.stopX=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width;\n        signal.integralData.to=peaks[0].x/signal.observe+peaks[0].width*3;\n        signal.integralData.from=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width*3;\n\n        //Compile the pattern and format the constant couplings\n        signal.maskPattern = signal.mask2;\n        signal.multiplicity = this.abstractPattern(signal,Jc);\n        signal.pattern=signal.multiplicity;//Our library depends on this parameter, but it is old\n        //console.log(signal);\n        if(this.DEBUG)\n            console.log(\"Final j-couplings: \"+JSON.stringify(Jc));\n    },\n\n    /**\n     * Returns the multiplet in the compact format\n     */\n    abstractPattern : function(signal,Jc){\n        var tol = 0.05,i, pattern = \"\", cont = 1;\n        var newNmrJs = [];\n        if(Jc&&Jc.length>0){\n            Jc.sort(function(a,b){\n                return a-b;\n            });\n            for(i=0;i<Jc.length-1;i++){\n                if(Math.abs(Jc[i]-Jc[i+1])<tol){\n                    cont++;\n                }\n                else{\n                    newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n                    pattern+=this.patterns[cont];\n                    cont=1;\n                }\n            }\n            newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n            pattern+=this.patterns[cont];\n            signal.nmrJs =  newNmrJs;\n        }\n        else{\n            pattern=\"s\";\n            if(Math.abs(signal.startX-signal.stopX)*signal.observe>16){\n                pattern=\"bs\"\n            }\n        }\n        return pattern;\n    },\n\n    /**\n     *This function creates an ideal pattern from the given J-couplings\n     */\n    idealPattern : function(Jc){\n        var hsum = Math.pow(2,Jc.length),i,j;\n        var pattern = [{x:0,intensity:hsum}];\n        //To split the initial height\n        for(i=0;i<Jc.length;i++){\n            for(j=pattern.length-1;j>=0;j--){\n                pattern.push({x:pattern[j].x+Jc[i]/2,\n                    intensity:pattern[j].intensity/2});\n                pattern[j].x = pattern[j].x-Jc[i]/2;\n                pattern[j].intensity = pattern[j].intensity/2;\n            }\n        }\n        //To sum the heights in the same positions\n        pattern.sort(function compare(a,b) { return a.x-b.x});\n        for(j=pattern.length-2;j>=0;j--){\n            if(Math.abs(pattern[j].x-pattern[j+1].x)<0.1){\n                pattern[j].intensity+= pattern[j+1].intensity\n                pattern.splice(j+1,1);\n            }\n        }\n        return pattern;\n    },\n\n    /**\n     * Find a combination of integer heights Hi, one from each Si, that sums to 2n.\n     */\n    getNextCombination : function(ranges, value){\n        var half = Math.ceil(ranges.values.length/2), lng = ranges.values.length;\n        var sum = 0,i;\n        while(sum!=value){\n            //Update the indexes to point at the next possible combination\n            ok = false;\n            var leftIndex = 0;\n            while(!ok){\n                ok = true;\n                ranges.currentIndex[ranges.active]++;\n                if(ranges.currentIndex[ranges.active]>=ranges.values[ranges.active].length){\n                    //In this case, there is no more possible combinations\n                    if(ranges.active+1==half){\n                        return null;\n                    }\n                    else{\n                        //If this happens we need to try the next active peak\n                        ranges.currentIndex[ranges.active]=0;\n                        ok=false;\n                        ranges.active++;\n                    }\n                }\n                else{\n                    ranges.active=0;\n                }\n            }\n            // Sum the heights for this combination\n            sum=0;\n            for(i=0;i<half;i++){\n                sum+= ranges.values[i][ranges.currentIndex[i]]*2;\n            }\n            if(ranges.values.length%2!==0){\n                sum-= ranges.values[half-1][ranges.currentIndex[half-1]];\n            }\n            if(this.DEBUG){\n                console.log(ranges.currentIndex);\n                console.log(sum+\" \"+value);\n            }\n        }\n        //If the sum is equal to the expected value, fill the array to return\n        if(sum==value){\n            var heights = new Array(lng);\n            for(i=0;i<half;i++){\n                heights[i] = ranges.values[i][ranges.currentIndex[i]];\n                heights[lng-i-1] = ranges.values[i][ranges.currentIndex[i]];\n            }\n            return heights;\n        }\n        return null;\n    },\n\n    /**\n     * This function generates the possible values that each peak can contribute\n     * to the multiplet.\n     * @param peaks\n     * @returns {{values: Array, currentIndex: Array, active: number}}\n     */\n    getRanges : function(peaks){\n        var ranges = new Array(peaks.length);\n        var currentIndex = new Array(peaks.length);\n        var min,max;\n        ranges[0] = [1];\n        ranges[peaks.length-1] = [1];\n        currentIndex[0]=-1;\n        currentIndex[peaks.length-1] = 0;\n        for(var i=1;i<peaks.length-1;i++){\n            min = Math.round(peaks[i].intensity*0.85);\n            max = Math.round(peaks[i].intensity*1.15);\n            ranges[i] =[];\n            for(var j=min;j<=max;j++){\n                ranges[i].push(j);\n            }\n            currentIndex[i]=0;\n        }\n        return {values:ranges, currentIndex:currentIndex, active:0};\n    },\n    /**\n     * Performs a symmetrization of the signal by using different aproximations to the center.\n     * It will return the result of the symmetrization that removes less peaks from the signal\n     * @param signal\n     * @param maxError\n     * @param iteration\n     * @returns {*}\n     */\n    symmetrizeChoiseBest : function(signal,maxError,iteration){\n        var symRank1 = this.symmetrize(signal,maxError,iteration);\n        var tmpPeaks = signal.peaksComp;\n        var tmpMask = signal.mask;\n        var cs = signal.delta1;\n        signal.delta1 = (signal.peaks[0].x+signal.peaks[signal.peaks.length-1].x)/2;\n        var symRank2 = this.symmetrize(signal,maxError,iteration);\n        if(signal.peaksComp.length>tmpPeaks.length)\n            return symRank2;\n        else{\n            signal.delta1 = cs;\n            signal.peaksComp = tmpPeaks;\n            signal.mask = tmpMask;\n            return symRank1;\n        }\n\n    },\n    /**\n     * This function will return a set of symmetric peaks that will\n     * be the enter point for the patter compilation process.\n     */\n    symmetrize : function(signal, maxError, iteration){\n        //Before to symmetrize we need to keep only the peaks that possibly conforms the multiplete\n        var max, min, avg, ratio, avgWidth;\n        var peaks = new Array(signal.peaks.length);\n        //Make a deep copy of the peaks and convert PPM ot HZ\n        for(j=0;j<peaks.length;j++){\n            peaks[j]= {x:signal.peaks[j].x*signal.observe,\n                intensity:signal.peaks[j].intensity,\n                width:signal.peaks[j].width};\n        }\n        //Join the peaks that are closer than 0.25 Hz\n        for(j=peaks.length-2;j>=0;j--){\n            if(Math.abs(peaks[j].x-peaks[j+1].x)<0.25){\n                peaks[j].x = (peaks[j].x*peaks[j].intensity+peaks[j+1].x*peaks[j+1].intensity);\n                peaks[j].intensity = peaks[j].intensity+peaks[j+1].intensity;\n                peaks[j].x/=peaks[j].intensity;\n                peaks[j].intensity/=2;\n                peaks[j].width+=peaks[j+1].width;\n                peaks.splice(j+1,1);\n            }\n        }\n        signal.peaksComp = peaks;\n        var nbPeaks = peaks.length;\n        var mask = new Array(nbPeaks);\n        signal.mask = mask;\n        var left=0, right=peaks.length-1, cs = signal.delta1*signal.observe, middle = [(peaks[0].x+peaks[nbPeaks-1].x)/2,1];\n        maxError = this.error(Math.abs(cs-middle[0]));\n        var heightSum = 0;\n        //We try to symmetrize the extreme peaks. We consider as candidates for symmetricing those which have\n        //ratio smaller than 3\n        for(var i=0;i<nbPeaks;i++){\n            mask[i]= true;\n            heightSum+=signal.peaks[i].intensity;\n        }\n\n        while(left<=right){\n            mask[left] = true;\n            mask[right] = true;\n            if(left==right){\n                if(nbPeaks>2&&Math.abs(peaks[left].x-cs)>maxError){\n                    mask[left] = false;\n                }\n            }\n            else{\n                max = Math.max(peaks[left].intensity,peaks[right].intensity);\n                min = Math.min(peaks[left].intensity,peaks[right].intensity);\n                ratio = max/min;\n                if(ratio>this.symRatio){\n                    if(peaks[left].intensity==min){\n                        mask[left] = false;\n                        right++;\n                    }\n                    else{\n                        mask[right] = false;\n                        left--;\n                    }\n                }\n                else{\n                    var diffL = Math.abs(peaks[left].x-cs);\n                    var diffR = Math.abs(peaks[right].x-cs);\n\n                    if(Math.abs(diffL-diffR)<maxError){\n                        //avg = (peaks[left].intensity+peaks[right].intensity)/2;\n                        avg = Math.min(peaks[left].intensity,peaks[right].intensity);\n                        avgWidth = Math.min(peaks[left].width,peaks[right].width);\n                        peaks[left].intensity=peaks[right].intensity=avg;\n                        peaks[left].width=peaks[right].width=avgWidth;\n                        middle=[middle[0]+((peaks[right].x+peaks[left].x)/2), middle[1]+1];\n                    }\n                    else{\n                        if(Math.max(diffL,diffR)==diffR){\n                            mask[right] = false;\n                            left--;\n                        }\n                        else{\n                            mask[left] = false;\n                            right++;\n                        }\n                    }\n                    if(this.DEBUG){\n                        console.log(\"MaxError: \"+maxError+\" \"+middle[0]+\" \"+middle[1]);\n                        console.log(iteration+\" CS: \"+cs+\" Hz \"+cs/signal.observe+\" PPM\");\n                        console.log(\"Middle: \"+(middle[0]/middle[1])+\" Hz \"+(middle[0]/middle[1])/signal.observe+\" PPM\");\n                        console.log(diffL+ \" \"+diffR);\n                        console.log(Math.abs(diffL-diffR));\n                        console.log(JSON.stringify(peaks));\n                        console.log(JSON.stringify(mask));\n                    }\n                }\n            }\n            left++;\n            right--;\n            //Only alter cs if it is the first iteration of the sym process.\n            if(iteration==1){\n                cs = this.chemicalShift(peaks, mask);\n                //There is not more available peaks\n                if(isNaN(cs)){ return 0;}\n            }\n            maxError = this.error(Math.abs(cs-middle[0]/middle[1]));\n        }\n        //To remove the weak peaks and recalculate the cs\n        for(i=nbPeaks-1;i>=0;i--){\n            if(mask[i]===false){\n                peaks.splice(i,1);\n            }\n        }\n        cs = this.chemicalShift(peaks);\n        if(isNaN(cs)){ return 0;}\n        signal.delta1 = cs/signal.observe;\n        //Now, the peak should be symmetric in heights, but we need to know if it is symmetric in x\n        var symFactor = 0,weight = 0;\n        if(peaks.length>1){\n            for(i=Math.ceil(peaks.length/2)-1;i>=0;i--){\n                symFactor+=(3+Math.min(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))\n                /(3+Math.max(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))*peaks[i].intensity;\n                weight+=peaks[i].intensity;\n            }\n            symFactor/=weight;\n        }\n        else{\n            if(peaks.length==1)\n                symFactor=1;\n        }\n        var newSumHeights = 0;\n        for(i=0;i<peaks.length;i++){\n            newSumHeights+=peaks[i].intensity;\n        }\n        symFactor-=(heightSum-newSumHeights)/heightSum*0.12; //Removed peaks penalty\n        if(this.DEBUG){\n            console.log(\"Penalty \"+(heightSum-newSumHeights)/heightSum*0.12);\n            console.log(\"cs: \"+(cs/signal.observe)+\" symFactor: \"+symFactor);\n        }\n        //Sometimes we need a second opinion after the first symmetrization.\n        if(symFactor>0.8&&symFactor<0.97&&iteration<2){\n            return this.symmetrize(signal, this.maxErrorIter2, 2);\n        }{\n            //Center the given pattern at cs and symmetrize x\n            if(peaks.length>1) {\n                var weight = 0, dxi;\n                for (i = Math.ceil(peaks.length / 2) - 1; i >= 0; i--) {\n                    dxi = (peaks[i].x - peaks[peaks.length - 1 - i].x)/2.0;\n                    peaks[i].x =cs+dxi;\n                    peaks[peaks.length - 1 - i].x=cs-dxi;\n                }\n            }\n        }\n        return symFactor;\n    },\n\n    error : function(value){\n        var maxError = value*2.5;\n        if(maxError<0.75)\n            maxError = 0.75;\n        if(maxError > 3)\n            maxError = 3;\n        return maxError;\n    },\n    /**\n     * 2 stages normalizarion of the peaks heights to Math.pow(2,n).\n     * Creates a new mask with the peaks that could contribute to the multiplete\n     * @param signal\n     * @param n\n     * @returns {*}\n     */\n    normalize : function(signal, n){\n        //Perhaps this is slow\n        var peaks = JSON.parse(JSON.stringify(signal.peaksComp));\n        var norm = 0,norm2=0,i;//Math.pow(2,n);\n        for(i=0;i<peaks.length;i++){\n            norm+= peaks[i].intensity;\n        }\n        norm=Math.pow(2,n)/norm;\n        signal.mask2 = JSON.parse(JSON.stringify(signal.mask));\n        //console.log(\"Mask0 \"+JSON.stringify(signal.mask2));\n        var index=signal.mask2.length-1;\n        for(i=peaks.length-1;i>=0;i--){\n            peaks[i].intensity*= norm;\n            while(index>=0&&signal.mask2[index]===false)\n                index--;\n            if(peaks[i].intensity<0.75){\n                if(this.DEBUG)\n                    console.log(\"Peak \"+i+\" does not seem to belong to this multiplet \"+peaks[i].intensity);\n                peaks.splice(i,1);\n                signal.mask2[index]=false;\n            }\n            else{\n                norm2+= peaks[i].intensity;\n            }\n            index--;\n        }\n        norm2=Math.pow(2,n)/norm2;\n        for(i=peaks.length-1;i>=0;i--){\n            peaks[i].intensity*= norm2;\n        }\n        //console.log(\"Mask1 \"+JSON.stringify(signal.mask2));\n        if(this.DEBUG) console.log(JSON.stringify(peaks));\n        return peaks;\n    },\n\n    /**\n     * Calculates the chemical shift as the weighted sum of the peaks\n     * @param peaks\n     * @param mask\n     * @returns {number}\n     */\n    chemicalShift : function(peaks, mask){\n        var sum=0,cs= 0, i, area;\n        if(mask){\n            for(i=0;i<peaks.length;i++){\n                //console.log(mask[i]);\n                if(mask[i]===true){\n                    area = this.area(peaks[i]);\n                    sum+=area;\n                    cs+=area*peaks[i].x;\n                }\n            }\n        }\n        else{\n            for(i=0;i<peaks.length;i++){\n                area = this.area(peaks[i]);\n                sum+=area;\n                cs+=area*peaks[i].x;\n            }\n        }\n        return cs/sum;\n    },\n\n    area: function(peak){\n        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n    }\n}\n\nmodule.exports = JAnalyzer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JAnalyzer.js\n ** module id = 6\n ** module chunks = 0\n **/","\nmodule.exports.post = require(\"../src/optimize\");\nmodule.exports.gsd = require(\"../src/gsd\");\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 9/6/15.\n */\nvar Opt = require(\"ml-optimize-lorentzian\");\n\nfunction sampleFunction(from, to, x, y, lastIndex){\n    var nbPoints = x.length;\n    var sampleX = [];\n    var sampleY = [];\n    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n    if(direction==-1){\n        lastIndex[0]= x.length-1;\n    }\n\n    var delta = Math.abs(to-from)/2;\n    var mid = (from+to)/2;\n    var stop = false;\n    var index = lastIndex[0];\n    while(!stop&&index<nbPoints&&index>=0){\n        if(Math.abs(x[index]-mid)<=delta){\n            sampleX.push(x[index]);\n            sampleY.push(y[index]);\n            index+=direction;\n        }\n        //It is outside the range.\n        else{\n\n            if(Math.sign(mid-x[index])==1){\n                //We'll reach the mid going in the current direction\n                index+=direction;\n            }\n            else{\n                //There is not more peaks in the current range\n                stop=true;\n            }\n        }\n        //console.log(sampleX);\n    }\n    lastIndex[0]=index;\n    return [sampleX, sampleY];\n}\n\nfunction optimizePeaks(peakList,x,y,n, fnType){\n    var i, j, lastIndex=[0];\n    var groups = groupPeaks(peakList,n);\n    var result = [];\n    var factor = 1;\n    if(fnType==\"gaussian\")\n        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n    for(i=0;i<groups.length;i++){\n        var peaks = groups[i].group;\n        if(peaks.length>1){\n            //Multiple peaks\n            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n            //console.log(\"here1\");\n            //console.log(groups[i].limits);\n            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n            //console.log(sampling);\n            if(sampling[0].length>5){\n                var error = peaks[0].width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                var optPeaks = [];\n                if(fnType==\"gaussian\")\n                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n                    }\n                }\n                //console.log(optPeak);\n                for(j=0;j<optPeaks.length;j++){\n                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n                }\n            }\n        }\n        else{\n            //Single peak\n            peaks = peaks[0];\n            var sampling = sampleFunction(peaks.x-n*peaks.width,\n                peaks.x+n*peaks.width,x,y,lastIndex);\n            //console.log(\"here2\");\n            //console.log(groups[i].limits);\n            if(sampling[0].length>5){\n                var error = peaks.width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n                var optPeak = [];\n                if(fnType==\"gaussian\")\n                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n                    }\n                }\n                //console.log(optPeak);\n                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n            }\n        }\n\n    }\n    return result;\n}\n\nfunction groupPeaks(peakList,nL){\n    var group = [];\n    var groups = [];\n    var i, j;\n    var limits = [peakList[0].x,nL*peakList[0].width];\n    var upperLimit, lowerLimit;\n    //Merge forward\n    for(i=0;i<peakList.length;i++){\n        //If the 2 things overlaps\n        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n            //Add the peak to the group\n            group.push(peakList[i]);\n            //Update the group limits\n            upperLimit = limits[0]+limits[1];\n            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n                upperLimit = peakList[i].x+nL*peakList[i].width;\n            }\n            lowerLimit = limits[0]-limits[1];\n            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n                lowerLimit = peakList[i].x-nL*peakList[i].width;\n            }\n            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n        }\n        else{\n            groups.push({limits:limits,group:group});\n            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n            group=[peakList[i]];\n            limits = [peakList[i].x,nL*peakList[i].width];\n        }\n    }\n    groups.push({limits:limits,group:group});\n    //Merge backward\n    for(i =groups.length-2;i>=0;i--){\n        //The groups overlaps\n        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n            for(j=0;j<groups[i+1].group.length;j++){\n                groups[i].group.push(groups[i+1].group[j]);\n            }\n            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n            }\n            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n            }\n            //console.log(limits);\n            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n            groups.splice(i+1,1);\n        }\n    }\n    return groups;\n}\n/**\n * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n * @param peakList\n * @param options\n */\nfunction joinBroadPeaks(peakList, options){\n    var width = options.width;\n    var broadLines=[];\n    //Optimize the possible broad lines\n    var max=0, maxI=0,count=1;\n    var isPartOf = false;\n    for(var i=peakList.length-1;i>=0;i--){\n        if(peakList[i].soft){\n            broadLines.push(peakList.splice(i,1)[0]);\n        }\n    }\n    //Push a feak peak\n    broadLines.push({x:Number.MAX_VALUE});\n\n    var candidates = [[broadLines[0].x,\n                        broadLines[0].y]];\n    var indexes = [0];\n\n    for(var i=1;i<broadLines.length;i++){\n        //console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n        if(Math.abs(broadLines[i-1].x-broadLines[i].x)<width){\n            candidates.push([broadLines[i].x,broadLines[i].y]);\n            if(broadLines[i].y>max){\n                max = broadLines[i].y;\n                maxI = i;\n            }\n            indexes.push(i);\n            count++;\n        }\n        else{\n            if(count>2){\n                var fitted =  Opt.optimizeSingleLorentzian(candidates,\n                    {x: broadLines[maxI].x, y:max, width: Math.abs(candidates[0][0]-candidates[candidates.length-1][0])});\n                //console.log(fitted)\n                peakList.push({x:fitted[0][0],y:fitted[1][0],width:fitted[2][0],soft:false});\n\n            }\n            else{\n                //Put back the candidates to the signals list\n                indexes.map(function(index){peakList.push(broadLines[index])});\n            }\n            candidates = [[broadLines[i].x,broadLines[i].y]];\n            indexes = [i];\n            max = broadLines[i].y;\n            maxI = i;\n            count = 1;\n        }\n    }\n\n    peakList.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n    return peakList;\n\n}\n\n/*if(options.broadRatio>0){\n var broadLines=[[Number.MAX_VALUE,0,0]];\n //Optimize the possible broad lines\n var max=0, maxI=0,count=0;\n var candidates = [],broadLinesS=[];\n var isPartOf = false;\n\n for(var i=broadLines.length-1;i>0;i--){\n //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\n candidates.push(broadLines[i]);\n if(broadLines[i][1]>max){\n max = broadLines[i][1];\n maxI = i;\n }\n count++;\n }\n else{\n isPartOf = true;\n if(count>30){ // TODO, an options ?\n isPartOf = false;\n //for(var j=0;j<signals.length;j++){\n //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n //       isPartOf = true;\n //    }\n //console.log(\"Was part of \"+isPartOf);\n }\n if(isPartOf){\n for(var j=0;j<candidates.length;j++){\n signals.push([candidates[j][0], candidates[j][1], dx]);\n }\n }\n else{\n var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n []);\n //console.log(fitted);\n signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n }\n candidates = [];\n max = 0;\n maxI = 0;\n count = 0;\n }\n }\n }*/\n\nmodule.exports={optimizePeaks:optimizePeaks,joinBroadPeaks:joinBroadPeaks};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/optimize.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else{\n            t = new Matrix(nbPoints,1);\n            y_data = new Matrix(nbPoints,1);\n            x = xy[0];\n            y = xy[1];\n            if(typeof x[0] === \"number\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i][0]=x[i];\n                    y_data[i][0]=y[i];\n                    if(y[i]>maxY)\n                        maxY = y[i];\n                }\n            }\n            else{\n                //It is a colum matrix\n                if(typeof x[0] === \"object\"){\n                    for(i=0;i<nbPoints;i++){\n                        t[i][0]=x[i][0];\n                        y_data[i][0]=y[i][0];\n                        if(y[i][0]>maxY)\n                            maxY = y[i][0];\n                    }\n                }\n\n            }\n\n        }\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else {\n            t = new Matrix(nbPoints, 1);\n            y_data = new Matrix(nbPoints, 1);\n            for (i = 0; i < nbPoints; i++) {\n                t[i][0] = xy[i][0];\n                y_data[i][0] = xy[i][1];\n                if(y_data[i][0]>maxY)\n                    maxY = y_data[i][0];\n            }\n        }\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i][0]/=maxY;\n    }\n    return [t,y_data,maxY];\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/src/index.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/index.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/LM.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/index.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/matrix.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/decompositions.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/svd.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/util.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/evd.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/lu.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/qr.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/cholesky.js\n ** module id = 20\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/algebra.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/index.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/matrix.js\n ** module id = 23\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/decompositions.js\n ** module id = 24\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/svd.js\n ** module id = 25\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/util.js\n ** module id = 26\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/evd.js\n ** module id = 27\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/lu.js\n ** module id = 28\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/qr.js\n ** module id = 29\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/cholesky.js\n ** module id = 30\n ** module chunks = 0\n **/","var Opt = require(\"ml-optimize-lorentzian\");\nvar stats = require(\"ml-stat\");\nvar extend = require('extend');\nvar SG = require('ml-savitzky-golay-generalized');\n\nvar sgDefOptions = {\n    windowSize: 5,\n    polynomial: 3\n};\n\n\nfunction gsd(x, y, options){\n    //options = extend({}, defaultOptions, options);\n    var options=Object.create(options || {});\n    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n    if (options.broadRatio===undefined) options.broadRatio=0.00;\n    if (options.noiseLevel===undefined) options.noiseLevel=0;\n    if (options.maxCriteria===undefined) options.maxCriteria=true;\n    if (options.smoothY===undefined) options.smoothY=true;\n    if (options.realTopDetection===undefined) options.realTopDetection=false;\n\n    var sgOptions = extend({}, sgDefOptions, options.sgOptions);\n\n    //Transform y to use the standard algorithm.\n    var yCorrection = {m:1, b:0};\n    if(!options.maxCriteria||options.noiseLevel>0){\n        y=[].concat(y);\n        if(!options.maxCriteria){\n            yCorrection = {m:-1, b:stats.array.max(y)};\n            for (var i=0; i<y.length; i++){\n                y[i]=-y[i]+yCorrection.b;\n            }\n            options.noiseLevel=-options.noiseLevel+yCorrection.b;\n        }\n        if (options.noiseLevel>0) {\n            for (var i=0; i<y.length; i++){\n                if(Math.abs(y[i])<options.noiseLevel) {\n                    y[i]=0;\n                }\n            }\n        }\n    }\n\n    //We have to know if x is equally spaced\n    var maxDx=0, minDx=Number.MAX_VALUE,tmp;\n    for(var i=0;i< x.length-1;i++){\n        var tmp = Math.abs(x[i+1]-x[i]);\n        if(tmp<minDx){\n            minDx = tmp;\n        }\n        if(tmp>maxDx){\n            maxDx = tmp;\n        }\n    }\n    //If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n    if((maxDx-minDx)/maxDx<0.05){\n        var Y = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n        var dY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n        var ddY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n    }\n    else{\n        var Y = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n        var dY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n        var ddY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n    }\n    \n    var X = x;\n    var dx = x[1]-x[0];\n    var maxDdy=0;\n    var maxY = 0;\n    //console.log(Y.length);\n    for (var i = 0; i < Y.length ; i++){\n        if(Math.abs(ddY[i])>maxDdy){\n            maxDdy = Math.abs(ddY[i]);\n        }\n        if(Math.abs(Y[i])>maxY){\n            maxY = Math.abs(Y[i]);\n        }\n    }\n    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n\n    var minddY = [];\n    var intervalL = [];\n    var intervalR = [];\n    var lastMax = null;\n    var lastMin = null;\n    var broadMask = new Array();\n    //console.log(dx);\n    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n    for (var i = 1; i < Y.length -1 ; i++){\n        //console.log(dY[i]);\n        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n            lastMin = X[i];\n            //console.log(\"min \"+lastMin);\n            if(dx>0&&lastMax!=null){\n                intervalL.push(lastMax);\n                intervalR.push(lastMin);\n\n            }\n        }\n\n        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n            lastMax = X[i];\n            //console.log(\"max \"+lastMax);\n            if(dx<0&&lastMin!=null){\n                intervalL.push(lastMax);\n                intervalR.push(lastMin);\n            }\n        }\n        if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n            minddY.push(i);//( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n            if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n                broadMask.push(false);\n            }\n            else{\n                broadMask.push(true);\n            }\n        }\n    }\n    if(options.realTopDetection){\n        realTopDetection(minddY,X,Y);\n    }\n    //\n    //console.log(intervalL.length+\" \"+minddY.length+\" \"+broadMask.length);\n    var signals = [];\n    var lastK = 0,possible, k, f,frequency, distanceJ, minDistance, gettingCloser;\n    for (var j = 0; j < minddY.length; j++){\n        frequency = X[minddY[j]];//minddY[j][0];\n        possible = -1;\n        k=lastK+1;\n        minDistance = Number.MAX_VALUE;\n        distanceJ = 0;\n        gettingCloser=true;\n        while(possible==-1&&k<intervalL.length&&gettingCloser){\n            distanceJ = Math.abs(frequency-(intervalL[k]+intervalR[k])/2);\n            //Still getting closer?\n            if(distanceJ<minDistance){\n                minDistance = distanceJ;\n            }\n            else{\n                gettingCloser = false;\n            }\n            if( distanceJ <Math.abs(intervalL[k]-intervalR[k])/2){\n                possible=k;\n                lastK = k;\n            }\n            k++;\n        }\n        //console.log(lastK+\" \"+intervalL.length+\" possible \"+k);\n        if (possible!=-1){\n            //console.log(height);\n            if (Math.abs(Y[minddY[j]]) > options.minMaxRatio*maxY) {\n                signals.push({\n                    x: frequency,\n                    y: (Y[minddY[j]]-yCorrection.b)/yCorrection.m,\n                    width:Math.abs(intervalR[possible] - intervalL[possible]),//widthCorrection\n                    soft:broadMask[j]\n                })\n            }\n        }\n    }\n\n    signals.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n    return signals;\n\n}\n\nfunction realTopDetection(peakList, x, y){\n    var listP = [];\n    var alpha, beta, gamma, p,currentPoint;\n    for(var j=0;j<peakList.length;j++){\n        currentPoint = peakList[j];//peakList[j][2];\n        //The detected peak could be moved 1 or 2 unit to left or right.\n        if(y[currentPoint-1]>=y[currentPoint-2]\n            &&y[currentPoint-1]>=y[currentPoint]) {\n            currentPoint--;\n        }\n        else{\n            if(y[currentPoint+1]>=y[currentPoint]\n                &&y[currentPoint+1]>=y[currentPoint+2]) {\n                currentPoint++;\n            }\n            else{\n                if(y[currentPoint-2]>=y[currentPoint-3]\n                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n                    currentPoint-=2;\n                }\n                else{\n                    if(y[currentPoint+2]>=y[currentPoint+1]\n                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n                        currentPoint+=2;\n                    }\n                }\n            }\n        }\n        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n            &&y[currentPoint]>=y[currentPoint-1]\n            &&y[currentPoint]>=y[currentPoint+1]) {\n            alpha = 20 * Math.log10(y[currentPoint - 1]);\n            beta = 20 * Math.log10(y[currentPoint]);\n            gamma = 20 * Math.log10(y[currentPoint + 1]);\n            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n\n            x[peakList[j]] = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n            y[peakList[j]] = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n                - [currentPoint + 1]) * p;//signal.peaks[j].intensity);\n        }\n    }\n}\n\nmodule.exports=gsd;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/gsd.js\n ** module id = 31\n ** module chunks = 0\n **/","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/~/ml-stat/index.js\n ** module id = 32\n ** module chunks = 0\n **/","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/~/ml-stat/array.js\n ** module id = 33\n ** module chunks = 0\n **/","'use strict';\nvar arrayStat = require('./array');\n\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction entropy(matrix, eps) {\n    if (typeof(eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n}\n\nfunction mean(matrix, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n}\n\nfunction standardDeviation(matrix, means, unbiased) {\n    var vari = variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n}\n\nfunction variance(matrix, means, unbiased) {\n    if (typeof(unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n}\n\nfunction median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort();\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n}\n\nfunction mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n}\n\nfunction skewness(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n}\n\nfunction kurtosis(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n}\n\nfunction standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n}\n\nfunction covariance(matrix, dimension) {\n    return scatter(matrix, undefined, dimension);\n}\n\nfunction scatter(matrix, divisor, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof(divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = mean(matrix, dimension),\n        rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nfunction correlation(matrix) {\n    var means = mean(matrix),\n        standardDeviations = standardDeviation(matrix, true, means),\n        scores = zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n}\n\nfunction zScores(matrix, means, standardDeviations) {\n    means = means || mean(matrix);\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n    return standardize(center(matrix, means, false), standardDeviations, true);\n}\n\nfunction center(matrix, means, inPlace) {\n    means = means || mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n}\n\nfunction standardize(matrix, standardDeviations, inPlace) {\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction weightedVariance(matrix, weights) {\n    var means = mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n}\n\nfunction weightedMean(matrix, weights, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n}\n\nfunction weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return weightedScatter(matrix, weights, means, factor, dimension);\n}\n\nfunction weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    if (typeof(factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nmodule.exports = {\n    entropy: entropy,\n    mean: mean,\n    standardDeviation: standardDeviation,\n    variance: variance,\n    median: median,\n    mode: mode,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    standardError: standardError,\n    covariance: covariance,\n    scatter: scatter,\n    correlation: correlation,\n    zScores: zScores,\n    center: center,\n    standardize: standardize,\n    weightedVariance: weightedVariance,\n    weightedMean: weightedMean,\n    weightedCovariance: weightedCovariance,\n    weightedScatter: weightedScatter\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/~/ml-stat/matrix.js\n ** module id = 34\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 35\n ** module chunks = 0\n **/","//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\nvar extend = require('extend');\nvar stat = require('ml-stat');\n\nvar defaultOptions = {\n    windowSize: 11,\n    derivative: 0,\n    polynomial: 2,\n};\n\n\nfunction SavitzkyGolay(data, h, options) {\n    options = extend({}, defaultOptions, options);\n\n    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\n\n    if (options.windowSize>data.length)\n        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n        throw new RangeError('Derivative should be a positive integer');\n    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n        throw new RangeError('Polynomial should be a positive integer');\n    if (options.polynomial >= 6)\n        console.warn('You should not use polynomial grade higher than 5 if you are' +\n            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\n    var windowSize = options.windowSize;\n\n    var half = Math.floor(windowSize/2);\n    var np = data.length;\n    var ans = new Array(np);\n    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n    var hs = 0;\n    var constantH = true;\n    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n        constantH = false;\n    }\n    else{\n        hs = Math.pow(h, options.derivative);\n    }\n    //console.log(\"Constant h: \"+constantH);\n    //For the borders\n    for(var i=0;i<half;i++){\n        var wg1=weights[half-i-1];\n        var wg2=weights[half+i+1];\n        var d1 = 0,d2=0;\n        for (var l = 0; l < windowSize; l++){\n            d1 += wg1[l] * data[l];\n            d2 += wg2[l] * data[np-windowSize+l-1];\n        }\n        if(constantH){\n            ans[half-i-1] = d1/hs;\n            ans[np-half+i] = d2/hs;\n        }\n        else{\n            hs = getHs(h,half-i-1,half, options.derivative);\n            ans[half-i-1] = d1/hs;\n            hs = getHs(h,np-half+i,half, options.derivative);\n            ans[np-half+i] = d2/hs;\n        }\n    }\n    //For the internal points\n    var wg = weights[half];\n    for(var i=windowSize;i<np+1;i++){\n        var d = 0;\n        for (var l = 0; l < windowSize; l++)\n            d += wg[l] * data[l+i-windowSize];\n        if(!constantH)\n            hs = getHs(h,i-half-1,half, options.derivative);\n        ans[i-half-1] = d/hs;\n    }\n    return ans;\n}\n\nfunction getHs(h,center,half,derivative){\n    var hs = 0;\n    var count = 0;\n    for(var i=center-half;i<center+half;i++){\n        if(i>=0 && i < h.length-1){\n            hs+= (h[i+1]-h[i]);\n            count++;\n        }\n    }\n    return Math.pow(hs/count,derivative);\n}\n\nfunction GramPoly(i,m,k,s){\n    var Grampoly = 0;\n    if(k>0){\n        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n    }\n    else{\n        if(k==0&&s==0){\n            Grampoly=1;\n        }\n        else{\n            Grampoly=0;\n        }\n    }\n    //console.log(Grampoly);\n    return Grampoly;\n}\n\nfunction GenFact(a,b){\n    var gf=1;\n    if(a>=b){\n        for(var j=a-b+1;j<=a;j++){\n            gf*=j;\n        }\n    }\n    return gf;\n}\n\nfunction Weight(i,t,m,n,s){\n    var sum=0;\n    for(var k=0;k<=n;k++){\n        //console.log(k);\n        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n    }\n    return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m,n,s){\n    var weights = new Array(m);\n    var np = Math.floor(m/2);\n    for(var t=-np;t<=np;t++){\n        weights[t+np] = new Array(m);\n        for(var j=-np;j<=np;j++){\n            weights[t+np][j+np]=Weight(j,t,np,n,s);\n        }\n    }\n    return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\nmodule.exports = SavitzkyGolay;\n \n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay-generalized/src/index.js\n ** module id = 36\n ** module chunks = 0\n **/","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay-generalized/~/ml-stat/index.js\n ** module id = 37\n ** module chunks = 0\n **/","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay-generalized/~/ml-stat/array.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\nvar arrayStat = require('./array');\n\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction entropy(matrix, eps) {\n    if (typeof(eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n}\n\nfunction mean(matrix, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n}\n\nfunction standardDeviation(matrix, means, unbiased) {\n    var vari = variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n}\n\nfunction variance(matrix, means, unbiased) {\n    if (typeof(unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n}\n\nfunction median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort();\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n}\n\nfunction mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n}\n\nfunction skewness(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n}\n\nfunction kurtosis(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n}\n\nfunction standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n}\n\nfunction covariance(matrix, dimension) {\n    return scatter(matrix, undefined, dimension);\n}\n\nfunction scatter(matrix, divisor, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof(divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = mean(matrix, dimension),\n        rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nfunction correlation(matrix) {\n    var means = mean(matrix),\n        standardDeviations = standardDeviation(matrix, true, means),\n        scores = zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n}\n\nfunction zScores(matrix, means, standardDeviations) {\n    means = means || mean(matrix);\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n    return standardize(center(matrix, means, false), standardDeviations, true);\n}\n\nfunction center(matrix, means, inPlace) {\n    means = means || mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n}\n\nfunction standardize(matrix, standardDeviations, inPlace) {\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction weightedVariance(matrix, weights) {\n    var means = mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n}\n\nfunction weightedMean(matrix, weights, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n}\n\nfunction weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return weightedScatter(matrix, weights, means, factor, dimension);\n}\n\nfunction weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    if (typeof(factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nmodule.exports = {\n    entropy: entropy,\n    mean: mean,\n    standardDeviation: standardDeviation,\n    variance: variance,\n    median: median,\n    mode: mode,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    standardError: standardError,\n    covariance: covariance,\n    scatter: scatter,\n    correlation: correlation,\n    zScores: zScores,\n    center: center,\n    standardize: standardize,\n    weightedVariance: weightedVariance,\n    weightedMean: weightedMean,\n    weightedCovariance: weightedCovariance,\n    weightedScatter: weightedScatter\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay-generalized/~/ml-stat/matrix.js\n ** module id = 39\n ** module chunks = 0\n **/","var SD = require('./SD');\nvar PeakPicking2D = require('./PeakPicking2D');\nvar PeakOptimizer = require(\"./PeakOptimizer\");\nvar JcampConverter=require(\"jcampconverter\");\n\nfunction NMR2D(sd) {\n    SD.call(this, sd); // Héritage\n}\n\nNMR2D.prototype = Object.create(SD.prototype);\nNMR2D.prototype.constructor = NMR2D;\n\nNMR2D.fromJcamp = function(jcamp,options) {\n    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new NMR2D(spectrum);\n}\n\nNMR2D.prototype.isHomoNuclear=function(){\n    return this.sd.xType==this.sd.yType;\n}\n\n//Returns the observe frequency in the direct dimension\nNMR2D.prototype.observeFrequencyX=function(){\n    return this.sd.spectra[0].observeFrequency;\n}\n\n//Returns the observe frequency in the indirect dimension\nNMR2D.prototype.observeFrequencyY=function(){\n    return this.sd.indirectFrequency;\n}\n\n/**\n * Returns the solvent name\n */\nNMR2D.prototype.getSolventName=function(){\n    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]).replace(\"<\",\"\").replace(\">\",\"\");\n}\n\n/**\n * This function returns the units of the direct dimension. It overrides the SD getXUnits function\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getXUnits = function(){\n    return this.sd.ntuples[1].units;\n}\n/**\n * This function returns the units of the indirect dimension. It overrides the SD getYUnits function\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getYUnits = function(){\n    return this.sd.ntuples[0].units;\n}\n/**\n * Returns the units of the dependent variable\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getZUnits = function(){\n    return this.sd.ntuples[2].units;\n}\n/**\n * Overwrite this function. Now, the Y axe refers to the indirect dimension\n * @returns {sd.minMax.maxY}\n */\nNMR2D.prototype.getLastY = function(){\n    return this.sd.minMax.maxY;\n}\n/**\n * * Overwrite this function. Now, the Y axe refers to the indirect dimension\n * @returns {sd.minMax.minY}\n */\nNMR2D.prototype.getFirstY = function(){\n    return this.sd.minMax.minY;\n}\n\n//Returns the separation between 2 consecutive points in the indirect domain\nNMR2D.prototype.getDeltaY=function(){\n    return ( this.getLastY()-this.getFirstY()) / (this.getNbSubSpectra()-1);\n}\n\n/**\n * @function nmrPeakDetection2D(options)\n * This function process the given spectraData and tries to determine the NMR signals. \n + Returns an NMRSignal2D array containing all the detected 2D-NMR Signals\n * @param\toptions:+Object\t\t\tObject containing the options\n * @option\tthresholdFactor:number\tA factor to scale the automatically determined noise threshold.\n * @returns\t+Object\tset of NMRSignal2D\n */\nNMR2D.prototype.nmrPeakDetection2D=function(options){\n    options = options||{};\n    if(!options.thresholdFactor)\n        options.thresholdFactor=1;\n    var id = Math.round(Math.random()*255);\n    if(!options.id){\n        id=options.id;\n    }\n    var peakList = PeakPicking2D.findPeaks2D(this, options.thresholdFactor);\n\n    //lets add an unique ID for each peak.\n    for(var i=0;i<peakList.length;i++){\n        peakList[i]._highlight=[id+\"_\"+i];\n    }\n    if(options.references)\n        PeakOptimizer.alignDimensions(peakList,options.references);\n\n    return peakList;\n}\n\n/**\n* Returns the noise factor depending on the nucleus.\n*/\nNMR2D.prototype.getNMRPeakThreshold=function(nucleus) {\n    if (nucleus == \"1H\")\n        return 3.0;\n    if (nucleus ==\"13C\")\n        return 5.0;\n    return 1.0;\n}\n\n/**\n* Returns the nucleus in the specified dimension\n*/\nNMR2D.prototype.getNucleus=function(dim){\n    if(dim==1)\n        return this.sd.xType;\n    if(dim==2)\n        return this.sd.yType;\n    return this.sd.xType;\n}\n\nmodule.exports = NMR2D;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/NMR2D.js\n ** module id = 40\n ** module chunks = 0\n **/","var lib = require(\"ml-fft\");\nvar PeakOptimizer = require(\"./PeakOptimizer\");\nvar SimpleClustering =  require(\"./SimpleClustering\");\nvar StatArray = require('ml-stat/array');\nvar FFTUtils = lib.FFTUtils;\n\nvar PeakPicking2D= {\n    DEBUG : false,\n    smallFilter : [\n        [0, 0, 1, 2, 2, 2, 1, 0, 0],\n        [0, 1, 4, 7, 7, 7, 4, 1, 0],\n        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n        [2, 7, 0, -23, -40, -23, 0, 7, 2],\n        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n        [0, 1, 3, 7, 7, 7, 3, 1, 0],\n        [0, 0, 1, 2, 2, 2, 1, 0, 0]],\n\n\n    //How noisy is the spectrum depending on the kind of experiment.\n    getLoGnStdDevNMR : function(spectraData) {\n    if (spectraData.isHomoNuclear())\n        return 1.5\n    else\n        return 3;\n    },\n\n    findPeaks2D : function(spectraData, thresholdFactor){\n        if(thresholdFactor==0)\n            thresholdFactor=1;\n        if(thresholdFactor<0)\n            thresholdFactor=-thresholdFactor;\n        var nbPoints = spectraData.getNbPoints();\n        var nbSubSpectra = spectraData.getNbSubSpectra();\n\n        var data = new Array(nbPoints * nbSubSpectra);\n        //var data = new Array(nbPoints * nbSubSpectra/2);\n\n        var isHomonuclear = spectraData.isHomoNuclear();\n\n        //var sum = new Array(nbPoints);\n\n        for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra; iSubSpectra++) {\n            var spectrum = spectraData.getYData(iSubSpectra);\n            for (var iCol = 0; iCol < nbPoints; iCol++) {\n                if(isHomonuclear){\n                    data[iSubSpectra * nbPoints + iCol] =(spectrum[iCol]>0?spectrum[iCol]:0);\n                }\n                else{\n                    data[iSubSpectra * nbPoints + iCol] =Math.abs(spectrum[iCol]);\n                }\n            }\n        }\n\n        var nStdDev = this.getLoGnStdDevNMR(spectraData);\n        if(isHomonuclear){\n            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);//)1.5);\n            var peaksMax1 = this.findPeaks2DMax(data, convolutedSpectrum, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);//2.0);\n            for(var i=0;i<peaksMC1.length;i++)\n                peaksMax1.push(peaksMC1[i]);\n            //console.log(peaksMax1);\n            return PeakOptimizer.enhanceSymmetry(this.createSignals2D(peaksMax1,spectraData,24));\n\n        }\n        else{\n            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);\n            //Peak2D[] peaksMC1 = PeakPicking2D.findPeaks2DMax(data, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);\n            //Remove peaks with less than 3% of the intensity of the highest peak\n            return this.createSignals2D(PeakOptimizer.clean(peaksMC1, 0.05), spectraData,24);\n        }\n\n    },\n    /**\n     Calculates the 1st derivative of the 2D matrix, using the LoG kernel approximation\n     */\n    convoluteWithLoG : function(inputSpectrum, nRows, nCols){\n        var ftSpectrum = new Array(nCols * nRows);\n        for (var i = nRows * nCols-1; i >=0; i--){\n            ftSpectrum[i] = inputSpectrum[i];\n        }\n\n        ftSpectrum = FFTUtils.fft2DArray(ftSpectrum, nRows, nCols);\n\n        var dim = this.smallFilter.length;\n        var ftFilterData = new Array(nCols * nRows);\n        for(var i=nCols * nRows-1;i>=0;i--){\n            ftFilterData[i]=0;\n        }\n\n        var iRow, iCol;\n        var shift = (dim - 1) / 2;\n        //console.log(dim);\n        for (var ir = 0; ir < dim; ir++) {\n            iRow = (ir - shift + nRows) % nRows;\n            for (var ic = 0; ic < dim; ic++) {\n                iCol = (ic - shift + nCols) % nCols;\n                ftFilterData[iRow * nCols + iCol] = this.smallFilter[ir][ic];\n            }\n        }\n\n        ftFilterData = FFTUtils.fft2DArray(ftFilterData, nRows, nCols);\n\n        var ftRows = nRows * 2;\n        var ftCols = nCols / 2 + 1;\n        FFTUtils.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\n        return  FFTUtils.ifft2DArray(ftSpectrum, ftRows, ftCols);\n    },\n    /**\n     Detects all the 2D-peaks in the given spectrum based on center of mass logic.\n     */\n    findPeaks2DLoG : function(inputSpectrum, convolutedSpectrum, nRows, nCols, nStdDev) {\n        var threshold = 0;\n        for(var i=nCols*nRows-2;i>=0;i--)\n            threshold+=Math.pow(convolutedSpectrum[i]-convolutedSpectrum[i+1],2);\n        threshold=-Math.sqrt(threshold);\n        threshold*=nStdDev/nRows;\n\n        var bitmask = new Array(nCols * nRows);\n        for(var i=nCols * nRows-1;i>=0;i--){\n            bitmask[i]=0;\n        }\n        var nbDetectedPoints = 0;\n        var lasti=-1;\n        for (var i = convolutedSpectrum.length-1; i >=0 ; i--) {\n            if (convolutedSpectrum[i] < threshold) {\n                bitmask[i] = 1;\n                nbDetectedPoints++;\n            }\n        }\n        var iStart = 0;\n        //int ranges = 0;\n        var peakList = [];\n\n        while (nbDetectedPoints != 0) {\n            for (iStart; iStart < bitmask.length && bitmask[iStart]==0; iStart++){};\n            //\n            if (iStart == bitmask.length)\n                break;\n\n            nbDetectedPoints -= this.extractArea(inputSpectrum, convolutedSpectrum,\n                bitmask, iStart, nRows, nCols, peakList, threshold);\n        }\n\n        if (peakList.length > 0&&this.DEBUG) {\n            console.log(\"No peak found\");\n        }\n        return peakList;\n    },\n    /**\n     Detects all the 2D-peaks in the given spectrum based on the Max logic.\n     */\n    findPeaks2DMax : function(inputSpectrum, cs, nRows, nCols, nStdDev) {\n        var threshold = 0;\n        for(var i=nCols*nRows-2;i>=0;i--)\n            threshold+=Math.pow(cs[i]-cs[i+1],2);\n        threshold=-Math.sqrt(threshold);\n        threshold*=nStdDev/nRows;\n\n        var rowI,colI;\n        var peakListMax = [];\n        var tmpIndex = 0;\n        for (var i = 0; i < cs.length; i++) {\n            if (cs[i] < threshold) {\n                //It is a peak?\n                rowI=Math.floor(i/nCols);\n                colI=i%nCols;\n                //Verifies if this point is a peak;\n                if(rowI>0&&rowI+1<nRows&&colI+1<nCols&&colI>0){\n                    //It is the minimum in the same row\n                    if(cs[i]<cs[i+1]&&cs[i]<cs[i-1]){\n                        //It is the minimum in the previous row\n                        tmpIndex=(rowI-1)*nCols+colI;\n                        if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n                            //It is the minimum in the next row\n                            tmpIndex=(rowI+1)*nCols+colI;\n                            if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n                                peakListMax.push({x:colI,y:rowI,z:inputSpectrum[i]});\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return peakListMax;\n    },\n    /*\n     This function detects the peaks\n     */\n    extractArea : function(spectrum, convolutedSpectrum, bitmask, iStart,\n                                                   nRows, nCols, peakList, threshold) {\n        var iRow = Math.floor(iStart / nCols);\n        var iCol = iStart % nCols;\n        var peakPoints =[];\n        //console.log(iStart+\" \"+iRow+\" \"+iCol);\n        // scanBitmask(bitmask, convolutedSpectrum, nRows, nCols, iRow, iCol,\n        // peakPoints);\n        this.scanBitmask(bitmask, nRows, nCols, iRow, iCol, peakPoints);\n        //console.log(\"extractArea.lng \"+peakPoints.length);\n        var x = new Array(peakPoints.length);\n        var y = new Array(peakPoints.length);\n        var z = new Array(peakPoints.length);\n        var nValues = peakPoints.length;\n        var xAverage = 0.0;\n        var yAverage = 0.0;\n        var zSum = 0.0;\n        if (nValues >= 9) {\n            if (this.DEBUG)\n                console.log(\"nValues=\" + nValues);\n            var maxValue = Number.NEGATIVE_INFINITY;\n            var maxIndex = -1;\n            for (var i = 0; i < nValues; i++) {\n                var pt = (peakPoints.splice(0,1))[0];\n                x[i] = pt[0];\n                y[i] = pt[1];\n                z[i] = spectrum[pt[1] * nCols + pt[0]];\n                xAverage += x[i] * z[i];\n                yAverage += y[i] * z[i];\n                zSum += z[i];\n                if (z[i] > maxValue) {\n                    maxValue = z[i];\n                    maxIndex = i;\n                }\n            }\n            if (maxIndex != -1) {\n                xAverage /= zSum;\n                yAverage /= zSum;\n                var newPeak = {x:xAverage, y:yAverage, z:zSum};\n                var minmax;\n                minmax =StatArray.minMax(x);\n                newPeak.minX=minmax.min;\n                newPeak.maxX=minmax.max;\n                minmax = StatArray.minMax(y);\n                newPeak.minY=minmax.min;\n                newPeak.maxY=minmax.max;\n                peakList.push(newPeak);\n            }\n        }\n        return nValues;\n    },\n    /*\n     Return all the peaks(x,y points) that composes a signal.\n     */\n    scanBitmask : function(bitmask, nRows, nCols, iRow, iCol, peakPoints) {\n        //console.log(nRows+\" \"+iRow+\" \"+nCols+\" \"+iCol);\n        if (iRow < 0 || iCol < 0 || iCol == nCols || iRow == nRows)\n            return;\n        if (bitmask[iRow * nCols + iCol]) {\n            bitmask[iRow * nCols + iCol] = 0;\n            peakPoints.push([iCol, iRow]);\n            this.scanBitmask(bitmask, nRows, nCols, iRow + 1, iCol, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow - 1, iCol, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol + 1, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol - 1, peakPoints);\n        }\n    },\n    /**\n     This function converts a set of 2D-peaks in 2D-signals. Each signal could be composed\n     of many 2D-peaks, and it has some additional information related to the NMR spectrum.\n     */\n    createSignals2D : function(peaks, spectraData, tolerance){\n        //console.log(peaks.length);\n        var signals=[];\n        var nbSubSpectra = spectraData.getNbSubSpectra();\n\n        var bf1=spectraData.observeFrequencyX();\n        var bf2=spectraData.observeFrequencyY();\n\n        var firstY = spectraData.getFirstY();\n        var lastY = spectraData.getLastY();\n        var dy = spectraData.getDeltaY();\n\n        //console.log(firstY+\" \"+lastY+\" \"+dy+\" \"+nbSubSpectra);\n        //spectraData.setActiveElement(0);\n        var noValid=0;\n        for (var i = peaks.length-1; i >=0 ; i--) {\n            //console.log(peaks[i].x+\" \"+spectraData.arrayPointToUnits(peaks[i].x));\n            //console.log(peaks[i].y+\" \"+(firstY + dy * (peaks[i].y)));\n            peaks[i].x=(spectraData.arrayPointToUnits(peaks[i].x));\n            peaks[i].y=(firstY + dy * (peaks[i].y));\n\n            //console.log(peaks[i])\n            //Still having problems to correctly detect peaks on those areas. So I'm removing everything there.\n            if(peaks[i].y<-1||peaks[i].y>=210){\n                peaks.splice(i,1);\n            }\n        }\n        //console.log(peaks);\n        //The connectivity matrix is an square and symmetric matrix, so we'll only store the upper diagonal in an\n        //array like form\n        var connectivity = [];\n        var tmp=0;\n        tolerance*=tolerance;\n        //console.log(tolerance);\n        for (var i = 0; i < peaks.length; i++) {\n            for (var j = i; j < peaks.length; j++) {\n                tmp=Math.pow((peaks[i].x-peaks[j].x)*bf1,2)+Math.pow((peaks[i].y-peaks[j].y)*bf2,2);\n                //Console.log(peaks[i].getX()+\" \"+peaks[j].getX()+\" \"+tmp);\n                if(tmp<tolerance){//30*30Hz We cannot distinguish peaks with less than 20 Hz of separation\n                    connectivity.push(1);\n                }\n                else{\n                    connectivity.push(0);\n                }\n            }\n        }\n\n        //console.log(connectivity);\n\n        var clusters = SimpleClustering.fullClusterGenerator(connectivity);\n\n        //console.log(clusters)\n\n        var signals = [];\n        if (peaks != null) {\n            var xValue, yValue;\n            for (var iCluster = 0; iCluster < clusters.length; iCluster++) {\n                var signal={nucleusX:spectraData.getNucleus(1),nucleusY:spectraData.getNucleus(2)};\n                signal.resolutionX=( spectraData.getLastX()-spectraData.getFirstX()) / spectraData.getNbPoints();\n                signal.resolutionY=dy;\n                var peaks2D = [];\n                signal.shiftX = 0;\n                signal.shiftY = 0;\n                var sumZ = 0;\n                for(var jPeak = clusters[iCluster].length-1;jPeak>=0;jPeak--){\n                    if(clusters[iCluster][jPeak]==1){\n                        peaks2D.push(peaks[jPeak]);\n                        signal.shiftX+=peaks[jPeak].x*peaks[jPeak].z;\n                        signal.shiftY+=peaks[jPeak].y*peaks[jPeak].z;\n                        sumZ+=peaks[jPeak].z;\n                    }\n                }\n                signal.shiftX/=sumZ;\n                signal.shiftY/=sumZ;\n                signal.peaks = peaks2D;\n                signals.push(signal);\n            }\n        }\n        //console.log(signals);\n        return signals;\n    }\n}\n\nmodule.exports = PeakPicking2D;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakPicking2D.js\n ** module id = 41\n ** module chunks = 0\n **/","'use strict';\n\nexports.FFTUtils = require(\"./FFTUtils\");\nexports.FFT = require('./fftlib');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/index.js\n ** module id = 42\n ** module chunks = 0\n **/","var FFT = require('./fftlib');\n\nvar FFTUtils= {\n    DEBUG : false,\n\n    /**\n     * Calculates the inverse of a 2D Fourier transform\n     *\n     * @param ft\n     * @param ftRows\n     * @param ftCols\n     * @return\n     */\n    ifft2DArray : function(ft, ftRows, ftCols){\n        var tempTransform = new Array(ftRows * ftCols);\n        var nRows = ftRows / 2;\n        var nCols = (ftCols - 1) * 2;\n        // reverse transform columns\n        FFT.init(nRows);\n        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n        for (var iCol = 0; iCol < ftCols; iCol++) {\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tmpCols.re[iRow] = ft[(iRow * 2) * ftCols + iCol];\n                tmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];\n            }\n            //Unnormalized inverse transform\n            FFT.bt(tmpCols.re, tmpCols.im);\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tempTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n                tempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n            }\n        }\n\n        // reverse row transform\n        var finalTransform = new Array(nRows * nCols);\n        FFT.init(nCols);\n        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n        var scale = nCols * nRows;\n        for (var iRow = 0; iRow < ftRows; iRow += 2) {\n            tmpRows.re[0] = tempTransform[iRow * ftCols];\n            tmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];\n            for (var iCol = 1; iCol < ftCols; iCol++) {\n                tmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];\n                tmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];\n                tmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];\n                tmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];\n            }\n            //Unnormalized inverse transform\n            FFT.bt(tmpRows.re, tmpRows.im);\n\n            var indexB = (iRow / 2) * nCols;\n            for (var iCol = nCols - 1; iCol >= 0; iCol--) {\n                finalTransform[indexB + iCol] = tmpRows.re[iCol] / scale;\n            }\n        }\n        return finalTransform;\n    },\n    /**\n     * Calculates the fourier transform of a matrix of size (nRows,nCols) It is\n     * assumed that both nRows and nCols are a power of two\n     *\n     * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the\n     * even rows contain the real part and the odd rows the imaginary part of the\n     * transform\n     * @param data\n     * @param nRows\n     * @param nCols\n     * @return\n     */\n    fft2DArray:function(data, nRows, nCols) {\n        var ftCols = (nCols / 2 + 1);\n        var ftRows = nRows * 2;\n        var tempTransform = new Array(ftRows * ftCols);\n        FFT.init(nCols);\n        // transform rows\n        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n        var row1 = {re: new Array(nCols), im: new Array(nCols)}\n        var row2 = {re: new Array(nCols), im: new Array(nCols)}\n        var index, iRow0, iRow1, iRow2, iRow3;\n        for (var iRow = 0; iRow < nRows / 2; iRow++) {\n            index = (iRow * 2) * nCols;\n            tmpRows.re = data.slice(index, index + nCols);\n\n            index = (iRow * 2 + 1) * nCols;\n            tmpRows.im = data.slice(index, index + nCols);\n\n            FFT.fft1d(tmpRows.re, tmpRows.im);\n\n            this.reconstructTwoRealFFT(tmpRows, row1, row2);\n            //Now lets put back the result into the output array\n            iRow0 = (iRow * 4) * ftCols;\n            iRow1 = (iRow * 4 + 1) * ftCols;\n            iRow2 = (iRow * 4 + 2) * ftCols;\n            iRow3 = (iRow * 4 + 3) * ftCols;\n            for (var k = ftCols - 1; k >= 0; k--) {\n                tempTransform[iRow0 + k] = row1.re[k];\n                tempTransform[iRow1 + k] = row1.im[k];\n                tempTransform[iRow2 + k] = row2.re[k];\n                tempTransform[iRow3 + k] = row2.im[k];\n            }\n        }\n\n        //console.log(tempTransform);\n        row1 = null;\n        row2 = null;\n        // transform columns\n        var finalTransform = new Array(ftRows * ftCols);\n        FFT.init(nRows);\n        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n        for (var iCol = ftCols - 1; iCol >= 0; iCol--) {\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tmpCols.re[iRow] = tempTransform[(iRow * 2) * ftCols + iCol];\n                tmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];\n            }\n            FFT.fft1d(tmpCols.re, tmpCols.im);\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                finalTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n                finalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n            }\n        }\n\n        //console.log(finalTransform);\n        return finalTransform;\n\n    },\n    /**\n     *\n     * @param fourierTransform\n     * @param realTransform1\n     * @param realTransform2\n     *\n     * Reconstructs the individual Fourier transforms of two simultaneously\n     * transformed series. Based on the Symmetry relationships (the asterisk\n     * denotes the complex conjugate)\n     *\n     * F_{N-n} = F_n^{*} for a purely real f transformed to F\n     *\n     * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G\n     *\n     */\n    reconstructTwoRealFFT:function(fourierTransform, realTransform1, realTransform2) {\n        var length = fourierTransform.re.length;\n\n        // the components n=0 are trivial\n        realTransform1.re[0] = fourierTransform.re[0];\n        realTransform1.im[0] = 0.0;\n        realTransform2.re[0] = fourierTransform.im[0];\n        realTransform2.im[0] = 0.0;\n        var rm, rp, im, ip, j;\n        for (var i = length / 2; i > 0; i--) {\n            j = length - i;\n            rm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);\n            rp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);\n            im = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);\n            ip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);\n            realTransform1.re[i] = rp;\n            realTransform1.im[i] = im;\n            realTransform1.re[j] = rp;\n            realTransform1.im[j] = -im;\n            realTransform2.re[i] = ip;\n            realTransform2.im[i] = -rm;\n            realTransform2.re[j] = ip;\n            realTransform2.im[j] = rm;\n        }\n    },\n\n    /**\n     * In place version of convolute 2D\n     *\n     * @param ftSignal\n     * @param ftFilter\n     * @param ftRows\n     * @param ftCols\n     * @return\n     */\n    convolute2DI:function(ftSignal, ftFilter, ftRows, ftCols) {\n        var re, im;\n        for (var iRow = 0; iRow < ftRows / 2; iRow++) {\n            for (var iCol = 0; iCol < ftCols; iCol++) {\n                //\n                re = ftSignal[(iRow * 2) * ftCols + iCol]\n                * ftFilter[(iRow * 2) * ftCols + iCol]\n                - ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n                * ftFilter[(iRow * 2 + 1) * ftCols + iCol];\n                im = ftSignal[(iRow * 2) * ftCols + iCol]\n                * ftFilter[(iRow * 2 + 1) * ftCols + iCol]\n                + ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n                * ftFilter[(iRow * 2) * ftCols + iCol];\n                //\n                ftSignal[(iRow * 2) * ftCols + iCol] = re;\n                ftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;\n            }\n        }\n    },\n    /**\n     *\n     * @param data\n     * @param kernel\n     * @param nRows\n     * @param nCols\n     * @returns {*}\n     */\n    convolute:function(data, kernel, nRows, nCols){\n        var ftSpectrum = new Array(nCols * nRows);\n        for (var i = 0; i<nRows * nCols; i++){\n            ftSpectrum[i] = data[i];\n        }\n\n        ftSpectrum = this.fft2DArray(ftSpectrum, nRows, nCols);\n\n        var dim = kernel.length;\n        var ftFilterData = new Array(nCols * nRows);\n        for(var i=0;i<nCols * nRows;i++){\n            ftFilterData[i]=0;\n        }\n\n        var iRow, iCol;\n        var shift = (dim - 1) / 2;\n        //console.log(dim);\n        for (var ir = 0; ir < dim; ir++) {\n            iRow = (ir - shift + nRows) % nRows;\n            for (var ic = 0; ic < dim; ic++) {\n                iCol = (ic - shift + nCols) % nCols;\n                ftFilterData[iRow * nCols + iCol] = kernel[ir][ic];\n            }\n        }\n\n        ftFilterData = this.fft2DArray(ftFilterData, nRows, nCols);\n\n        var ftRows = nRows * 2;\n        var ftCols = nCols / 2 + 1;\n        this.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\n        return  this.ifft2DArray(ftSpectrum, ftRows, ftCols);\n    }\n}\n\nmodule.exports = FFTUtils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/FFTUtils.js\n ** module id = 43\n ** module chunks = 0\n **/","/**\n * Fast Fourier Transform module\n * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n */\nvar FFT = (function(){\n  var FFT;  \n  \n  if(typeof exports !== 'undefined') {\n    FFT = exports;   // for CommonJS\n  } else {\n    FFT = {};\n  }\n  \n  var version = {\n    release: '0.3.0',\n    date: '2013-03'\n  };\n  FFT.toString = function() {\n    return \"version \" + version.release + \", released \" + version.date;\n  };\n\n  // core operations\n  var _n = 0,          // order\n      _bitrev = null,  // bit reversal table\n      _cstb = null;    // sin/cos table\n\n  var core = {\n    init : function(n) {\n      if(n !== 0 && (n & (n - 1)) === 0) {\n        _n = n;\n        core._initArray();\n        core._makeBitReversalTable();\n        core._makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    },\n    // 1D-FFT\n    fft1d : function(re, im) {\n      core.fft(re, im, 1);\n    },\n    // 1D-IFFT\n    ifft1d : function(re, im) {\n      var n = 1/_n;\n      core.fft(re, im, -1);\n      for(var i=0; i<_n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    },\n     // 1D-IFFT\n    bt1d : function(re, im) {\n      core.fft(re, im, -1);\n    },\n    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n    fft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.fft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.fft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // 2D-IFFT\n    ifft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.ifft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.ifft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // core operation of FFT\n    fft : function(re, im, inv) {\n      var d, h, ik, m, tmp, wr, wi, xr, xi,\n          n4 = _n >> 2;\n      // bit reversal\n      for(var l=0; l<_n; l++) {\n        m = _bitrev[l];\n        if(l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      }\n      // butterfly operation\n      for(var k=1; k<_n; k<<=1) {\n        h = 0;\n        d = _n/(k << 1);\n        for(var j=0; j<k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv*_cstb[h];\n          for(var i=j; i<_n; i+=(k<<1)) {\n            ik = i + k;\n            xr = wr*re[ik] + wi*im[ik];\n            xi = wr*im[ik] - wi*re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    },\n    // initialize the array (supports TypedArray)\n    _initArray : function() {\n      if(typeof Uint32Array !== 'undefined') {\n        _bitrev = new Uint32Array(_n);\n      } else {\n        _bitrev = [];\n      }\n      if(typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n*1.25);\n      } else {\n        _cstb = [];\n      }\n    },\n    // zero padding\n    _paddingZero : function() {\n      // TODO\n    },\n    // makes bit reversal table\n    _makeBitReversalTable : function() {\n      var i = 0,\n          j = 0,\n          k = 0;\n      _bitrev[0] = 0;\n      while(++i < _n) {\n        k = _n >> 1;\n        while(k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n        j += k;\n        _bitrev[i] = j;\n      }\n    },\n    // makes trigonometiric function table\n    _makeCosSinTable : function() {\n      var n2 = _n >> 1,\n          n4 = _n >> 2,\n          n8 = _n >> 3,\n          n2p4 = n2 + n4,\n          t = Math.sin(Math.PI/_n),\n          dc = 2*t*t,\n          ds = Math.sqrt(dc*(2 - dc)),\n          c = _cstb[n4] = 1,\n          s = _cstb[0] = 0;\n      t = 2*dc;\n      for(var i=1; i<n8; i++) {\n        c -= dc;\n        dc += t*c;\n        s += ds;\n        ds -= t*s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n      if(n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n      for(var j=0; j<n4; j++) {\n        _cstb[n2 - j]  = _cstb[j];\n      }\n      for(var k=0; k<n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  };\n  // aliases (public APIs)\n  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n  for(var i=0; i<apis.length; i++) {\n    FFT[apis[i]] = core[apis[i]];\n  }\n  FFT.bt = core.bt1d;\n  FFT.fft = core.fft1d;\n  FFT.ifft = core.ifft1d;\n  \n  return FFT;\n}).call(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/fftlib.js\n ** module id = 44\n ** module chunks = 0\n **/","var PeakOptimizer={\n\tdiagonalError:0.05,\n\ttolerance:0.05,\n\tDEBUG:false,\n    toleranceX : 0.025,\n    toleranceY : 0.5,\n\n    clean: function(peaks, threshold){\n        var max = Number.NEGATIVE_INFINITY;\n        var i,peak;\n        //double min = Double.MAX_VALUE;\n        for(i=peaks.length-1;i>=0;i--){\n            if(Math.abs(peaks[i].z)>max)\n                max=Math.abs(peaks[i].z);\n        }\n        max*=threshold;\n        for(i=peaks.length-1;i>=0;i--){\n            if(Math.abs(peaks[i].z)<max)\n                peaks.splice(i,1);\n        }\n        return peaks;\n    },\n\t\n\tenhanceSymmetry: function(signals){\n\t\t\n\t\tvar properties = this.initializeProperties(signals);\n\t\tvar output = signals;\n\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"Before optimization size: \"+output.size());\n\t\t\n\t\t//First step of the optimization: Symmetry validation\n\t\tvar i,hits,index;\n\t\tvar signal;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(signal.peaks.length>1)\n\t\t\t\tproperties[i][1]++;\n\t\t\tif(properties[i][0]==1){\n\t\t\t\tindex = this.exist(output, properties, signal,-1,true);\n\t\t\t\tif(index>=0){\n\t\t\t\t\tproperties[i][1]+=2;\n\t\t\t\t\tproperties[index][1]+=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Second step of the optimization: Diagonal image existence\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(properties[i][0]==0){\n\t\t\t\thits = this.checkCrossPeaks(output, properties, signal, true);\n\t\t\t\tproperties[i][1]+=hits;\n\t\t\t\t//checkCrossPeaks(output, properties, signal, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Now, each peak have a score between 0 and 4, we can complete the patterns which\n\t\t//contains peaks with high scores, and finally, we can remove peaks with scores 0 and 1\n\t\tvar count = 0;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!==0&&properties[i][1]>2){\n\t\t\t\tcount++;\n\t\t\t\tcount+=this.completeMissingIfNeeded(output,properties,output[i],properties[i]);\n\t\t\t}\n\t\t\tif(properties[i][1]>=2&&properties[i][0]===0)\n\t\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"After optimization size: \"+count);\n\t\tvar  toReturn = new Array(count);\n\t\tcount--;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!==0&&properties[i][1]>2\n\t\t\t\t\t||properties[i][0]===0&&properties[i][1]>1){\n\t\t\t\ttoReturn[count--]=output[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"Removed \"+i+\" \"+output[i].peaks.length);\n\t\t\t}\n\t\t\t//if(properties.get(i)[1]>=2)\n\t\t\t//\ttoReturn[count--]=output.get(i);\n\t\t}\n\t\treturn toReturn;\n\t},\n\t\n\tcompleteMissingIfNeeded: function(output, properties, thisSignal, thisProp) {\n\t\t//Check for symmetry\n\t\tvar index = this.exist(output, properties, thisSignal,-thisProp[0],true);\n\t\tvar addedPeaks=0;\n\t\tvar newSignal = null, tmpProp=null;\n\t\tif(index<0){//If this signal have no a symmetry image, we have to include it\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [-thisProp[0],thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\t//Check for diagonal peaks\n\t\tvar j=0;\n\t\tvar diagX=false, diagY=false;\n\t\tvar signal;\n\t\tfor(j=output.length-1;j>=0;j--){\n\t\t\tsignal = output[j];\n\t\t\tif(properties[j][0]===0){\n\t\t\t\tif(Math.abs(signal.shiftX-thisSignal.shiftX)<this.diagonalError)\n\t\t\t\t\tdiagX=true;\n\t\t\t\tif(Math.abs(signal.shiftY-thisSignal.shiftY)<this.diagonalError)\n\t\t\t\t\tdiagY=true;\n\t\t\t}\n\t\t}\n\t\tif(diagX===false){\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftX;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftX,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\tif(diagY===false){\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftY;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftY,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\treturn addedPeaks;\n\t\t\n\t},\n\t\n\t//Check for any diagonal peak that match this cross peak\n\tcheckCrossPeaks: function(output, properties, signal, updateProperties) {\n\t\tvar hits = 0, i=0, shift=signal.shiftX*4;\n\t\tvar crossPeaksX = [],crossPeaksY = [];\n\t\tvar cross;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tcross = output[i];\n\t\t\tif(properties[i][0]!==0){\n\t\t\t\tif(Math.abs(cross.shiftX-signal.shiftX)<this.diagonalError){\n\t\t\t\t\thits++;\n\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\tcrossPeaksX.push(i);\n\t\t\t\t\tshift+=cross.shiftX;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(Math.abs(cross.shiftY-signal.shiftY)<this.diagonalError){\n\t\t\t\t\t\thits++;\n\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\tcrossPeaksY.push(i);\n\t\t\t\t\t\tshift+=cross.shiftY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Update found crossPeaks and diagonal peak\n\t\tshift/=(crossPeaksX.length+crossPeaksY.length+4);\n\t\tif(crossPeaksX.length>0){\n\t\t\tfor( i=crossPeaksX.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksX[i]].shiftX=shift;\n\t\t\t}\n\t\t}\n\t\tif(crossPeaksY.length>0){\n\t\t\tfor( i=crossPeaksY.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksY[i]].shiftY=shift;\n\t\t\t}\n\t\t}\n\t\tsignal.shiftX=shift;\n\t\tsignal.shiftY=shift;\n\t\treturn hits;\n\t},\n\n\texist: function(output, properties, signal, type, symmetricSearch) {\n\t\tfor(var i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]==type){\n\t\t\t\tif(this.distanceTo(signal, output[i], symmetricSearch)<this.tolerance){\n\t\t\t\t\tif(!symmetricSearch){\n\t\t\t\t\t\tvar shiftX=(output[i].shiftX+signal.shiftX)/2.0;\n\t\t\t\t\t\tvar shiftY=(output[i].shiftY+signal.shiftY)/2.0;\n\t\t\t\t\t\toutput[i].shiftX=shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftY;\n\t\t\t\t\t\tsignal.shiftX=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tvar shiftX=signal.shiftX;\n\t\t\t\t\t\tvar shiftY=output[i].shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\t/**\n\t * We try to determine the position of each signal within the spectrum matrix.\n\t * Peaks could be of 3 types: upper diagonal, diagonal or under diagonal 1,0,-1\n\t * respectively.\n\t * @param Signals\n\t * @return A matrix containing the properties of each signal\n\t */\n\tinitializeProperties: function(signals){\n\t\tvar signalsProperties = new Array(signals.length);\n\t\tfor(var i=signals.length-1;i>=0;i--){\n\t\t\tsignalsProperties[i]=[0,0];\n\t\t\t//We check if it is a diagonal peak\n\t\t\tif(Math.abs(signals[i].shiftX-signals[i].shiftY)<=this.diagonalError){\n\t\t\t\tsignalsProperties[i][1]=1;\n\t\t\t\t//We adjust the x and y value to be symmetric.\n\t\t\t\t//In general chemical shift in the direct dimension is better than in the other one,\n\t\t\t\t//so, we believe more to the shiftX than to the shiftY.\n\t\t\t\tvar shift = (signals[i].shiftX*2+signals[i].shiftY)/3.0;\n\t\t\t\tsignals[i].shiftX=shift;\n\t\t\t\tsignals[i].shiftY=shift;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(signals[i].shiftX-signals[i].shiftY>0)\n\t\t\t\t\tsignalsProperties[i][0]=1;\n\t\t\t\telse\n\t\t\t\t\tsignalsProperties[i][0]=-1;\n\t\t\t}\n\t\t}\n\t\treturn signalsProperties;\n\t},\n\t\n\t/**\n\t * This function calculates the distance between 2 nmr signals . If toImage is true, \n\t * it will interchange x by y in the distance calculation for the second signal.\n\t */\n\tdistanceTo: function(a, b, toImage){\n\t\tif(!toImage){\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftX, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftY, 2));\n\t\t}\n\t\telse{\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftY, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftX, 2));\n\t\t}\n\t},\n\n\t/**\n\t * This function maps the corresponding 2D signals to the given set of 1D signals\n\t */\n\talignDimensions:function(signals2D,references){\n\t\t//For each reference dimension\n\t\tfor(var i=0;i<references.length;i++){\n\t\t\tvar ref = references[i];\n\t\t\t_alignSingleDimension(signals2D,ref);\n\t\t}\n\t},\n\n\t_alignSingleDimension: function(signals2D, references){\n\t\t//For each 2D signal\n\t\tvar center = 0, width = 0, i, j;\n\t\tfor(i=0;i<signals2D.length;i++){\n\t\t\tvar signal2D = signals2D[i];\n\t\t\t//For each reference 1D signal\n\t\t\tfor(j=0;j<references.length;j++){\n\t\t\t\tcenter = (references[j].startX+references[j].stopX)/2;\n\t\t\t\twidth = Math.abs(references[j].startX-references[j].stopX)/2;\n\t\t\t\tif(signal2D.nucleusX==references[j].nucleus){\n\t\t\t\t\t//The 2D peak overlaps with the 1D signal\n\t\t\t\t\tif(Math.abs(signal2D.shiftX-center)<=width){\n\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif(signal2D.nucleusY==references[j].nucleus){\n\t\t\t\t\tif(Math.abs(signal2D.shiftY-center)<=width){\n\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n};\n\nmodule.exports = PeakOptimizer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakOptimizer.js\n ** module id = 45\n ** module chunks = 0\n **/","var SimpleClustering={\n\n\t/*This function returns the cluster list for a given connectivity matrix.\n\t*To improve the performance, the connectivity(square and symmetric) matrix \n\t*is given as a single vector containing  the upper diagonal of the matrix\n\t*Note: This algorithm is O(n*n) complexity. I wonder if there is something better. \n\t*acastillo\n\t*/\n\tfullClusterGenerator:function(conn){\n\t\tvar nRows = Math.sqrt(conn.length*2+0.25)-0.5;\n\t\t//console.log(\"nRows: \"+nRows+\" - \"+conn.length);\n\t\tvar clusterList = [];\n\t\tvar available = new Array(nRows);\n\t\tvar remaining = nRows, i=0;\n\t\tvar cluster = [];\n\t\t//Mark all the elements as available\n\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\tavailable[i]=1;\n\t\t}\n\t\tvar nextAv=-1;\n\t\tvar toInclude = [];\n\t\twhile(remaining>0){\n\t\t\tif(toInclude.length===0){\n\t\t\t\t//If there is no more elements to include. Start a new cluster\n\t\t\t\tcluster = new Array(nRows);\n\t\t\t\tfor(i=nRows-1;i>=0;i--)\n\t\t\t\t\tcluster[i]=0;\n\t\t\t\tclusterList.push(cluster);\n\t\t    \tfor(nextAv = nRows-1;available[nextAv]==0;nextAv--){};\n\t\t    }\n\t\t    else{\n\t\t    \tnextAv=toInclude.splice(0,1);\n\t\t    }\n\t\t    //console.log(\"row: \"+nextAv);\n\t\t    cluster[nextAv]=1;\n\t\t    available[nextAv]=0;\n\t\t    remaining--;\n\t\t    //Copy the next available row\n\t\t    var row = new Array(nRows);\n\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\tvar c=Math.max(nextAv,i);\n\t\t\t\tvar r=Math.min(nextAv,i);\n\t\t\t\t//The element in the conn matrix\n\t\t\t\t//console.log(\"index: \"+r*(2*nRows-r-1)/2+c)\n\t\t\t\trow[i]=conn[r*(2*nRows-r-1)/2+c];\n\t\t\t\t//console.log(\"col: \"+i+\":\"+row[i]);\n\t\t\t\t//There is new elements to include in this row?\n\t\t\t\t//Then, include it to the current cluster\n\t\t\t\tif(row[i]==1&&available[i]==1&&cluster[i]==0){\n\t\t\t\t\ttoInclude.push(i);\n\t\t\t\t\tcluster[i]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn clusterList;\n\t}\n}\n\nmodule.exports = SimpleClustering;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/SimpleClustering.js\n ** module id = 46\n ** module chunks = 0\n **/","/**\n * This library formats a set of nmr1D signals to the ACS format.\n * Created by acastillo on 3/11/15. p\n */\nvar ACS=ACS || {};\nACS.formater =(function() {\n    var acsString=\"\";\n    var parenthesis=\"\";\n    var spectro=\"\";\n    rangeForMultiplet=false;\n\n    function fromNMRSignal1D2ACS(spectrum, options){\n        acsString=\"\";\n        parenthesis=\"\";\n        spectro=\"\";\n        var solvent = null;\n        if(options&&options.solvent)\n            solvent = options.solvent;\n        //options.rangeForMultiplet=false;\n        if(options&&options.rangeForMultiplet!=undefined)\n            rangeForMultiplet = options.rangeForMultiplet;\n\n        if(options&&options.ascending){\n            spectrum.sort(function(a,b){\n                return b.delta1- a.delta1\n            });\n        }\n        else{\n            spectrum.sort(function(a,b){\n                return a.delta1- b.delta1\n            });\n        }\n\n        //console.log(\"Range1: \"+options.rangeForMultiplet);\n\n        spectrum.type=\"NMR SPEC\";\n        if (spectrum[0][\"nucleus\"]==\"1H\") {\n            formatAcs_default(spectrum, false, 2, 1, solvent);\n        } else if (spectrum[0][\"nucleus\"]==\"13C\") {\n            formatAcs_default(spectrum, false, 1, 0, solvent);\n        }\n\n        if (acsString.length>0) acsString+=\".\";\n\n        return acsString;\n    }\n\n    /*function formatAcs_default_IR(spectra, ascending, decimalValue, smw) {\n     appendSeparator();\n     appendSpectroInformation(spectra);\n     if (spectra[\"peakLabels\"]) {\n     var numberPeakLabels=spectra[\"peakLabels\"].length;\n     var minIntensity= 9999999;\n     var maxIntensity=-9999999;\n     for (var i=0; i<numberPeakLabels; i++) {\n     if (spectra[\"peakLabels\"][i].intensity<minIntensity) minIntensity=spectra[\"peakLabels\"][i].intensity;\n     if (spectra[\"peakLabels\"][i].intensity>maxIntensity) maxIntensity=spectra[\"peakLabels\"][i].intensity;\n     }\n     for (var i=0; i<numberPeakLabels; i++) {\n     if (ascending) {\n     var peakLabel=spectra[\"peakLabels\"][i];\n     } else {\n     var peakLabel=spectra[\"peakLabels\"][numberPeakLabels-i-1];\n     }\n     if (peakLabel) {\n     appendSeparator();\n     appendValue(peakLabel,decimalValue);\n     if (smw) { // we need to add small / medium / strong\n     if (peakLabel.intensity<((maxIntensity-minIntensity)/3+minIntensity)) acsString+=\" (s)\";\n     else if (peakLabel.intensity>(maxIntensity-(maxIntensity-minIntensity)/3)) acsString+=\" (w)\";\n     else acsString+=\" (m)\";\n     }\n     }\n     }\n     }\n     }*/\n\n    function formatAcs_default(spectra, ascending, decimalValue, decimalJ, solvent) {\n        appendSeparator();\n        appendSpectroInformation(spectra, solvent);\n        var numberSmartPeakLabels=spectra.length;\n        //console.log(\"SP \"+spectra);\n        //console.log(\"# \"+numberSmartPeakLabels);\n        for (var i=0; i<numberSmartPeakLabels; i++) {\n            if (ascending) {\n                var signal=spectra[i];\n            } else {\n                var signal=spectra[numberSmartPeakLabels-i-1];\n            }\n            if (signal) {\n                //console.log(\"X2X\"+i+JSON.stringify(signal));\n                appendSeparator();\n                appendDelta(signal,decimalValue);\n                appendParenthesis(signal,decimalJ);\n                //console.log(\"S2S\"+i);\n            }\n        }\n    }\n\n    function appendSpectroInformation(spectrum, solvent) {\n        if (spectrum.type==\"NMR SPEC\") {\n            if (spectrum[0].nucleus) {\n                acsString+=formatNucleus(spectrum[0].nucleus);\n            }\n            acsString+=\" NMR\";\n            if ((solvent) || (spectrum[0].observe)) {\n                acsString+=\" (\";\n                if (spectrum[0].observe) {\n                    acsString+=(spectrum[0].observe*1).toFixed(0)+\" MHz\";\n                    if (solvent) acsString+=\", \";\n                }\n                if (solvent) {\n                    acsString+=formatMF(solvent);\n                }\n                acsString+=\")\";\n            }\n            acsString+=\" δ \";\n        } else if (spectrum.type==\"IR\") {\n            acsString+=\" IR \";\n        } else if (spectrum.type==\"MASS\") {\n            acsString+=\" MASS \";\n        }\n    }\n\n    function appendDelta(line, nbDecimal) {\n        //console.log(\"appendDelta1\");\n        var startX = 0,stopX=0,delta1=0;\n        if(line.startX){\n            if((typeof line.startX)==\"string\"){\n                startX=parseFloat(line.startX);\n            }\n            else\n                startX=line.startX;\n        }\n        if(line.stopX){\n            if((typeof line.stopX)==\"string\"){\n                stopX=parseFloat(line.stopX);\n            }\n            else\n                stopX=line.stopX;\n        }\n        if(line.delta1){\n            if((typeof line.delta1)==\"string\"){\n                delta1=parseFloat(line.delta1);\n            }\n            else\n                delta1=line.delta1;\n\n        }\n        //console.log(\"Range2: \"+rangeForMultiplet+\" \"+line.multiplicity);\n        if (line.asymmetric===true||(line.multiplicity==\"m\"&&rangeForMultiplet===true)) {//Is it massive??\n            if (line.startX&&line.stopX) {\n                if (startX<stopX) {\n                    acsString+=startX.toFixed(nbDecimal)+\"-\"+stopX.toFixed(nbDecimal);\n                } else {\n                    acsString+=stopX.toFixed(nbDecimal)+\"-\"+startX.toFixed(nbDecimal);\n                }\n            } else {\n                if(line.delta1)\n                    acsString+=delta1.toFixed(nbDecimal);\n            }\n        }\n        else{\n            if(line.delta1)\n                acsString+=delta1.toFixed(nbDecimal);\n            else{\n                if(line.startX&&line.stopX){\n                    acsString+=((startX+stopX)/2).toFixed(nbDecimal);\n                }\n            }\n        }\n    }\n\n    function appendValue(line, nbDecimal) {\n        if (line.xPosition) {\n            acsString+=line.xPosition.toFixed(nbDecimal);\n        }\n    }\n\n    function appendParenthesis(line, nbDecimal) {\n        //console.log(\"appendParenthesis1\");\n        // need to add assignment - coupling - integration\n        parenthesis=\"\";\n        appendMultiplicity(line);\n        appendIntegration(line);\n        appendCoupling(line,nbDecimal);\n        appendAssignment(line);\n\n\n        if (parenthesis.length>0) {\n            acsString+=\" (\"+parenthesis+\")\";\n        }\n        //console.log(\"appendParenthesis2\");\n    }\n\n    function appendIntegration(line) {\n        if (line.pubIntegration) {\n            appendParenthesisSeparator();\n            parenthesis+=line.pubIntegration;\n        } else if (line.integralData) {\n            appendParenthesisSeparator();\n            parenthesis+=line.integralData.value.toFixed(0)+\" H\";\n        }\n    }\n\n    function appendAssignment(line) {\n        if (line.pubAssignment) {\n            appendParenthesisSeparator();\n            parenthesis+=formatAssignment(line.pubAssignment);\n        }\n        else{\n            if (line.assignment) {\n                appendParenthesisSeparator();\n                parenthesis+=formatAssignment(line.assignment);\n            }\n        }\n    }\n\n    function appendMultiplicity(line) {\n        if (line.pubMultiplicity) {\n            appendParenthesisSeparator();\n            parenthesis+=line.pubMultiplicity;\n        } else if (line.multiplicity) {\n            appendParenthesisSeparator();\n            parenthesis+=line.multiplicity;\n        }\n    }\n\n    function appendCoupling(line, nbDecimal) {\n        if (line.nmrJs) {\n            var j=\"<i>J</i> = \";\n            for (var i=0; i<line.nmrJs.length; i++) {\n                var coupling=line.nmrJs[i].coupling;\n                if (j.length>11) j+=\", \";\n                j+=coupling.toFixed(nbDecimal);\n            }\n            appendParenthesisSeparator();\n            parenthesis+=j+\" Hz\";\n        }\n\n    }\n\n    function formatAssignment(assignment) {\n        assignment=assignment.replace(/([0-9])/g,\"<sub>$1</sub>\");\n        assignment=assignment.replace(/\\\"([^\\\"]*)\\\"/g,\"<i>$1</i>\");\n        return assignment;\n    }\n\n    function formatMF(mf) {\n        mf=mf.replace(/([0-9])/g,\"<sub>$1</sub>\");\n        return mf;\n    }\n\n    function formatNucleus(nucleus) {\n        nucleus=nucleus.replace(/([0-9])/g,\"<sup>$1</sup>\");\n        return nucleus;\n    }\n\n    function appendSeparator() {\n        if ((acsString.length>0) && (! acsString.match(/ $/))) {\n            acsString+=\", \";\n        }\n    }\n\n    function appendParenthesisSeparator() {\n        if ((parenthesis.length>0) && (! parenthesis.match(\", $\"))) parenthesis+=\", \";\n    }\n\n    function fromACS2NMRSignal1D(acsString){\n        return JSON.parse(SDAPI.AcsParserAsJSONString(acsString));\n    }\n\n    return {\n        toACS:fromNMRSignal1D2ACS,\n        toNMRSignal:fromACS2NMRSignal1D\n    }\n})();\n\nmodule.exports=ACS;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/AcsParser.js\n ** module id = 47\n ** module chunks = 0\n **/"],"sourceRoot":""}