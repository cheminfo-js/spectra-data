{"version":3,"sources":["webpack:///spectra-data/webpack/universalModuleDefinition","webpack:///spectra-data/spectra-data.min.js","webpack:///spectra-data/webpack/bootstrap 780d5e0cc7d1cd8631a3","webpack:///spectra-data/./src/index.js","webpack:///spectra-data/./src/SD.js","webpack:///spectra-data/./~/ml-stat/array.js","webpack:///spectra-data/./~/jcampconverter/src/index.js","webpack:///spectra-data/./~/jcampconverter/src/parseXYData.js","webpack:///spectra-data/./src/JcampCreator.js","webpack:///spectra-data/./src/VectorEncoder.js","webpack:///spectra-data/./~/extend/index.js","webpack:///spectra-data/./src/NMR.js","webpack:///spectra-data/./src/PeakPicking.js","webpack:///spectra-data/./src/JAnalyzer.js","webpack:///spectra-data/./~/ml-gsd/src/index.js","webpack:///spectra-data/./~/ml-gsd/src/optimize.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/src/index.js","webpack:///spectra-data/./~/ml-curve-fitting/src/index.js","webpack:///spectra-data/./~/ml-curve-fitting/src/LM.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/index.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/matrix.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/decompositions.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/svd.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/util.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/evd.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/lu.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/qr.js","webpack:///spectra-data/./~/ml-curve-fitting/~/ml-matrix/src/dc/cholesky.js","webpack:///spectra-data/./~/ml-curve-fitting/src/algebra.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/index.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/matrix.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/decompositions.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/svd.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/util.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/evd.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/lu.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/qr.js","webpack:///spectra-data/./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/cholesky.js","webpack:///spectra-data/./~/ml-gsd/src/gsd.js","webpack:///spectra-data/./~/ml-stat/index.js","webpack:///spectra-data/./~/ml-stat/matrix.js","webpack:///spectra-data/./~/ml-savitzky-golay-generalized/src/index.js","webpack:///spectra-data/./src/ImpurityRemover.js","webpack:///spectra-data/./~/ml-fft/src/index.js","webpack:///spectra-data/./~/ml-fft/src/FFTUtils.js","webpack:///spectra-data/./~/ml-fft/src/fftlib.js","webpack:///spectra-data/./src/filters/Filters.js","webpack:///spectra-data/./src/filters/fourierTransform.js","webpack:///spectra-data/./src/filters/zeroFilling.js","webpack:///spectra-data/./src/filters/apodization.js","webpack:///spectra-data/./src/filters/phaseCorrection.js","webpack:///spectra-data/./src/filters/digitalFilter.js","webpack:///spectra-data/./src/filters/rotate.js","webpack:///spectra-data/./src/NMR2D.js","webpack:///spectra-data/./src/PeakPicking2D.js","webpack:///spectra-data/./src/PeakOptimizer.js","webpack:///spectra-data/./src/SimpleClustering.js","webpack:///spectra-data/./src/AcsParser.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","SD","NMR","NMR2D","ACS","JAnalyzer","sd","DATACLASS_XY","DATACLASS_PEAK","activeElement","StatArray","JcampConverter","JcampCreator","extend","fromJcamp","jcamp","options","xy","keepSpectra","keepRecordsRegExp","spectrum","convert","prototype","setActiveElement","nactiveSpectrum","getActiveElement","getXUnits","getSpectrum","xUnit","setXUnits","units","getYUnits","yUnit","getSpectraVariable","dim","ntuples","getNbPoints","i","getSpectrumData","y","length","getFirstX","spectra","firstX","setFirstX","x","getLastX","lastX","setLastX","getFirstY","firstY","setFirstY","getLastY","lastY","setLastY","setDataClass","dataClass","isPeaktable","isXYdata","isDataClassPeak","isDataClassXY","setDataType","dataType","getDataType","data","getNbSubSpectra","getXData","getYData","getX","getY","getXYData","getTitle","title","setTitle","newTitle","getMinY","min","getMaxY","max","getMinMaxY","minMax","getNoiseLevel","mean","stddev","averageDeviations","Array","Math","abs","sort","getNMRPeakThreshold","getNucleus","arrayPointToUnits","doublePoint","unitsToArrayPoint","inValue","round","getDeltaX","midPoint","currentArrayPoint","upperLimit","lowerLimit","floor","setMinMax","factor","setMin","currentMin","setMax","YShift","value","shift","globalShift","fillWith","from","to","tmp","start","end","suppressZone","splice","simplePeakPicking","parameters","getMaxPeak","getSpectraDataY","index","getParamDouble","name","defvalue","info","getParamString","getParamInt","getParam","containsParam","getSpectraDataX","resetMinMax","putParam","getArea","i0","ie","area","getVector","nPoints","direction","reversed","winPoints","xwin","ywin","di","k","is2D","twoD","toJcamp","defaultOptions","encode","yFactor","type","keep","compareNumbers","a","b","sum","values","Infinity","l","arithmeticMean","geometricMean","mul","pow","logMean","lnsum","log","grandMean","means","samples","n","truncatedMean","percent","alreadySorted","undefined","slice","harmonicMean","RangeError","contraHarmonicMean","r1","r2","median","half","variance","unbiased","theMean","theVariance","standardDeviation","sqrt","standardError","quartiles","quart","q1","ceil","q2","q3","pooledStandardDeviation","pooledVariance","vari","mode","itemCount","itemArray","count","indexOf","maxValue","maxIndex","covariance","vector1","vector2","mean1","mean2","cov","skewness","s2","s3","dev","m2","m3","g","kurtosis","s4","m4","v","entropy","eps","weightedMean","weights","weightedStandardDeviation","weightedVariance","z","w","center","inPlace","result","standardize","standardDev","cumulativeSum","array","getConverter","convertToFloatArray","stringArray","floatArray","parseFloat","Spectrum","ldr","dataLabel","dataValue","ldrs","ii","position","endLine","infos","Date","now","profiling","logs","push","action","time","split","replace","substring","trim","toUpperCase","xIndex","yIndex","firstVariable","secondVariable","symbol","first","last","vardim","nbPoints","xFactor","datatable","deltaX","observeFrequency","xType","indirectFrequency","shiftOffsetNum","shiftOffsetVal","varname","ntuplesSeparator","vartype","varform","yType","page","pageValue","pageSymbol","pageSymbolIndex","unit","prepareSpectrum","match","fastParse","parseXYDataRegExp","fastParseXYData","parsePeakTable","isMSField","convertMSFieldToLabel","Object","keys","newNtuples","key","j","add2D","isGCMS","newGCMS","newData","addNewGCMS","addGCMS","toLowerCase","GC_MS_FIELDS","gcms","times","series","dimension","existingGCMSFields","label","gc","ms","convertTo3DZ","noise","minZ","maxZ","ySize","xSize","xVector","minX","maxX","minY","maxY","zData","contourLines","generateContourLines","povarHeight0","povarHeight1","povarHeight2","povarHeight3","isOver0","isOver1","isOver2","isOver3","pAx","pAy","pBx","pBy","lineZValue","contourLevels","nbLevels","nbContourLevels","noiseMultiplier","nbSubSpectra","nbPovars","x0","xN","dx","y0","yN","dy","level","contourLevel","side","exp","lines","zValue","iSubSpectra","subSpectra","subSpectraAfter","povar","segments","currentData","currentPosition","currentX","currentY","ascii","charCodeAt","newLine","isDifference","isLastDifference","lastDifference","isDuplicate","inComment","currentValue","isNegative","skipFirstValue","decimalPosition","duplicate","ascii2","removeCommentRegExp","peakTableSplitRegExp","jj","input","useWorker","postToWorker","worker","createWorker","Promise","resolve","stamp","random","stamps","postMessage","JSON","stringify","workerURL","URL","createObjectURL","Blob","toString","Worker","revokeObjectURL","addEventListener","event","parse","output","xyDataSplitRegExp","DEBUG","lastDif","firstPoint","expectedCurrentX","String","fromCharCode","dup","Encoder","Integer","MAX_VALUE","MIN_VALUE","CRLF","version","spectraData","encodeFormat","factorY","userDefinedParams","outString","scale","scaleX","ntuplesHead","simpleHead","variableX","variableY","variableZ","sub","nTuplesName","abscVar","mostCommon","defaultSub","isComplex","isNMR","getSolventName","freq1","freq2","observeFrequencyX","yUnits","point","tempString","pseudoDigits","SQZ_P","SQZ_N","DIF_P","DIF_N","DUP","MaxLinelength","intervalX","encoding","FIXencod","SQZencod","DIFencod","DIFDUPencod","CSVencod","PACencod","separator","outputData","TD","SQZDigit","mult","charCount","encodData","encodNumber","temp","diffData","numDiff","DIFDigit","DUPDigit","num","SQZdigit","charAt","Number","DIFFdigit","DUPdigit","hasOwn","hasOwnProperty","toStr","isArray","arr","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","src","copy","copyIsArray","clone","target","arguments","deep","PeakPicking","Filters","create","nucleus","addNoise","SNR","addSpectraDatas","spec2","factor1","factor2","autoscale","autoBaseline","fourierTransform","postFourierTransform","ph1corr","phaseCorrection","zeroFilling","nPointsX","nPointsY","haarWhittakerBaselineCorrection","waveletScale","whittakerLambda","whittakerBaselineCorrection","ranges","brukerFilter","digitalFilter","apodization","functionName","lineBroadening","echoAntiechoFilter","SNVFilter","powerFilter","power","console","warn","logarithmFilter","base","correlationFilter","func","phi0","phi1","automaticPhase","nmrPeakDetection","peakPicking","GSD","removeImpurities","impurities","maxJ","nH","clean","realTop","thresholdFactor","compile","integralFn","optimize","idPrefix","format","optionsEx","nHi","noiseLevel","gsdOptions","minMaxRatio","broadRatio","smoothY","nL","sgOptions","windowSize","polynomial","peakList","gsd","post","joinBroadPeaks","width","optimizePeaks","clearList","signals","detectSignals","integralData","compilePattern","maskPattern","multiplicity","peaksO","peaks","peakR","intensity","mask","mask2","nbPeaks","peaks1","newSignals","updateIntegrals","delta1","signalID","_highlight","signal","integral","delta","nbAtoms","diaID","peak","kind","remark","nmrJs","threshold","sampling","rowWise","ic","more","updateLimits","nbPeaks0","toRemove","sumIntegral","sumObserved","integralType","cs","frequency","signal1D","prevPeak","rangeX","spectrumIntegral","startX","stopX","pattern","observe","updateScore","candidates","maxIntensity","indexMin","score","thisJ1","thisJ2","thisJ3","thisJ4","gamma","pascalTriangle","patterns","symRatio","maxErrorIter1","maxErrorIter2","symRank","symmetrizeChoiseBest","asymmetric","peaksComp","P1","n2","maxFlagged","Jc","normalize","validPattern","getRanges","heights","getNextCombination","numbering","nFlagged","u","jSum","idealPattern","updateSignal","abstractPattern","tol","cont","newNmrJs","coupling","hsum","ok","lng","currentIndex","active","maxError","iteration","symRank1","symmetrize","tmpPeaks","tmpMask","symRank2","avg","ratio","avgWidth","left","right","middle","error","heightSum","diffL","diffR","chemicalShift","isNaN","symFactor","weight","newSumHeights","dxi","norm","norm2","sampleFunction","lastIndex","sampleX","sampleY","sign","mid","stop","fnType","groups","groupPeaks","group","limits","opts","optPeaks","Opt","optimizeGaussianSum","optimizeLorentzianSum","optPeak","optimizeSingleGaussian","optimizeSingleLorentzian","broadLines","maxI","soft","indexes","fitted","map","sumOfLorentzians","t","p2","cols","rows","Matrix","zeros","singleLorentzian","columns","singleGaussian","xy2","parseData","y_data","dot","consts","dt","p_init","p_min","p_max","p_fit","LM","math","nbSeries","SizeException","algebra","y_dat","dp","tensor_parameter","Npar","Npnt","p_old","y_old","X2","X2_old","J","length_t","length_y_dat","multiply","transpose","prnt","MaxIter","epsilon_1","epsilon_4","lambda_0","lambda_UP_fac","lambda_DN_fac","Update_Type","dp_array","idx","Nfit","weight_sq","ones","dotMultiply","lm_matx","JtWJ","JtWdy","Chi_sq","y_hat","lambda","diag","nu","h","solve","add","eye","hidx","p_try","delta_y","subtract","X2_try","JtWdy_th","alpha","inv","mat","rho","dX2","apply","lm_FD_J","ps","del","y1","column","dotDivide","lm_Broyden_J","h_t","div","Jt","Decompositions","DC","nRows","nColumns","matrix","newInstance","TypeError","defineProperty","writable","__proto__","Asplice","Aconcat","concat","from1DArray","newRows","newColumns","rowVector","columnVector","vector","empty","fill","rand","indices","stack","arg1","isMatrix","r","current","setRow","expand","expansion","checkMatrix","klass","get","checkRowIndex","checkColumnIndex","checkDimensions","otherMatrix","callback","to2DArray","to1DArray","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","set","rowIndex","columnIndex","neg","mulS","addS","addM","subS","subM","mulM","divS","divM","getRow","getRowVector","removeRow","addRow","swapRows","row1","row2","getColumn","getColumnVector","setColumn","removeColumn","addColumn","swapColumns","column1","column2","row","checkRowVector","checkColumnVector","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","size","prod","other","mmul","Bcolj","Arowi","s","sortRows","compareFunction","sortColumns","subMatrix","startRow","endRow","startColumn","endColumn","newMatrix","subMatrixRow","X","subMatrixColumn","trace","inverse","leftHandSide","rightHandSide","LuDecomposition","QrDecomposition","SingularValueDecomposition","EigenvalueDecomposition","CholeskyDecomposition","SVD","EVD","LU","QR","CHO","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","swapped","aux","ks","f","sn","kase","sp","spm1","epm1","sk","ek","U","V","e","work","nct","nrt","hypotenuse","pp","iter","condition","rank","diagonal","leftSingularVectors","rightSingularVectors","diagonalMatrix","Y","scols","Ls","VL","vrows","urows","VLU","solveForDiagonal","vcols","ucols","Error","d","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c2","c3","el1","tst1","low","high","nn","ra","sa","vr","vi","notlast","cdivres","exshift","q","cdiv","xr","xi","yr","yi","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","LUrowi","LUcolj","kmax","lu","pivotVector","pivotSign","isSingular","col","determinant","lowerTriangularFactor","upperTriangularFactor","pivotPermutationVector","qr","rdiag","nrm","Rdiag","isFullRank","orthogonalFactor","positiveDefinite","Lrowj","Lrowk","L","leftTriangularFactor","B","A","dotPow","noiseFactor","maxCriteria","realTopDetection","sgDefOptions","maxDx","minDx","yCorrection","SG","derivative","dY","ddY","maxDdy","minddY","intervalL","intervalR","lastMax","lastMin","broadMask","possible","distanceJ","minDistance","gettingCloser","lastK","beta","currentPoint","log10","l1","l2","N","sum1","sum2","medians","modes","skew","kurt","standardDeviations","standardErrors","sqrtN","scatter","divisor","correlation","scores","zScores","cor","resultRow","sourceRow","weightSum","arrayStat","weightedCovariance","s1","weightedScatter","SavitzkyGolay","isInteger","np","ans","fullWeights","hs","constantH","wg1","wg2","d1","d2","getHs","wg","GramPoly","Grampoly","GenFact","gf","Weight","checkImpurity","impurity","found","solvent","impuritiesList","shifts","proton","look4","FFTUtils","FFT","ifft2DArray","ft","ftRows","ftCols","tempTransform","nCols","init","tmpCols","re","im","iCol","iRow","bt","finalTransform","tmpRows","indexB","fft2DArray","iRow0","iRow1","iRow2","iRow3","fft1d","reconstructTwoRealFFT","realTransform1","realTransform2","rm","rp","ip","convolute2DI","ftSignal","ftFilter","convolute","kernel","ftSpectrum","ftFilterData","ir","release","date","_n","_bitrev","_cstb","core","_initArray","_makeBitReversalTable","_makeCosSinTable","fft","ifft1d","bt1d","fft2d","tre","tim","x1","x2","y2","ifft2d","ik","wr","wi","n4","Uint32Array","Float64Array","_paddingZero","n8","n2p4","sin","PI","dc","ds","apis","ifft","nSubSpectra","spectraType","fcor","updateSpectra","baseFrequency","NaN","spectralFrequency","spectralWidth","xMiddle","zeroFillingX","zeroFillingY","nbXPoints","cosThetaNew","sinThetaNew","reTmp","imTmp","reData","imData","cosTheta","cos","sinTheta","rotate","rotateX","next","nextIndex","toMove","lastFirstIndex","putInRange","PeakPicking2D","PeakOptimizer","isHomoNuclear","observeFrequencyY","getZUnits","getDeltaY","nmrPeakDetection2D","findPeaks2D","references","alignDimensions","fromTo","shiftX","shiftY","lib","SimpleClustering","smallFilter","getLoGnStdDevNMR","isHomonuclear","nStdDev","convolutedSpectrum","convoluteWithLoG","peaksMC1","findPeaks2DLoG","peaksMax1","findPeaks2DMax","enhanceSymmetry","createSignals2D","inputSpectrum","bitmask","nbDetectedPoints","iStart","extractArea","rowI","colI","peakListMax","tmpIndex","peakPoints","scanBitmask","nValues","xAverage","yAverage","zSum","NEGATIVE_INFINITY","pt","minmax","newPeak","tolerance","bf1","bf2","connectivity","clusters","fullClusterGenerator","iCluster","nucleusX","nucleusY","resolutionX","resolutionY","peaks2D","minMax1","minMax2","sumZ","jPeak","diagonalError","toleranceX","toleranceY","properties","initializeProperties","hits","exist","checkCrossPeaks","completeMissingIfNeeded","toReturn","thisSignal","thisProp","addedPeaks","newSignal","tmpProp","diagX","diagY","updateProperties","cross","crossPeaksX","crossPeaksY","symmetricSearch","distanceTo","signalsProperties","toImage","signals2D","ref","_alignSingleDimension","signal2D","conn","clusterList","available","remaining","cluster","nextAv","toInclude","formater","fromNMRSignal1D2ACS","acsString","parenthesis","spectro","rangeForMultiplet","ascending","formatAcs_default","decimalValue","decimalJ","appendSeparator","appendSpectroInformation","numberSmartPeakLabels","appendDelta","appendParenthesis","formatNucleus","toFixed","formatMF","line","nbDecimal","appendMultiplicity","appendIntegration","appendCoupling","appendAssignment","pubIntegration","appendParenthesisSeparator","pubAssignment","formatAssignment","assignment","pubMultiplicity","mf","fromACS2NMRSignal1D","SDAPI","AcsParserAsJSONString","toACS","toNMRSignal"],"mappings":"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","file":"spectra-data.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectraData\"] = factory();\n\telse\n\t\troot[\"spectraData\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectraData\"] = factory();\n\telse\n\t\troot[\"spectraData\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\texports.SD = __webpack_require__(1);\n\texports.NMR = __webpack_require__(8);\n\texports.NMR2D = __webpack_require__(50);\n\texports.ACS = __webpack_require__(54);\n\texports.JAnalyzer = __webpack_require__(10);\n\t//exports.SD2 = require('/SD2');\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// small note on the best way to define array\n\t// http://jsperf.com/lp-array-and-loops/2\n\t\n\tvar StatArray = __webpack_require__(2);\n\tvar JcampConverter = __webpack_require__(3);\n\tvar JcampCreator = __webpack_require__(5);\n\tvar extend = __webpack_require__(7);\n\t\n\t/**\n\t * Construct the object from the given sd object(output of the jcampconverter or brukerconverter filter)\n\t * @param sd\n\t * @constructor\n\t */\n\tfunction SD(sd) {\n\t    this.DATACLASS_XY=1;\n\t    this.DATACLASS_PEAK=2;\n\t\n\t    this.sd=sd;\n\t    this.activeElement=0;\n\t}\n\t\n\t/**\n\t * @function fromJcamp(jcamp,options)\n\t * Construct the object from the given jcamp.\n\t * @param jcamp\n\t * @param options\n\t * @option xy\n\t * @option keepSpectra\n\t * @option keepRecordsRegExp\n\t * @returns {SD}\n\t */\n\tSD.fromJcamp = function(jcamp, options) {\n\t    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new SD(spectrum);\n\t}\n\t\n\t\n\t/**\n\t * @function setActiveElement(nactiveSpectrum);\n\t * This function sets the nactiveSpectrum sub-spectrum as active\n\t * @param index of the sub-spectrum to set as active\n\t */\n\tSD.prototype.setActiveElement = function(nactiveSpectrum){\n\t    this.activeElement=nactiveSpectrum;\n\t}\n\t\n\t/**\n\t * @function getActiveElement();\n\t * This function returns the index of the active sub-spectrum.\n\t * @returns {number|*}\n\t */\n\tSD.prototype.getActiveElement = function(){\n\t    return this.activeElement;\n\t}\n\t\n\t/**\n\t * @function getXUnits()\n\t * This function returns the units of the independent dimension.\n\t * @returns {xUnit|*|M.xUnit}\n\t */\n\tSD.prototype.getXUnits = function(){\n\t    return this.getSpectrum().xUnit;\n\t}\n\t\n\t/**\n\t * @function setXUnits()\n\t * This function returns the units of the independent dimension.\n\t * @returns {xUnit|*|M.xUnit}\n\t */\n\tSD.prototype.setXUnits = function(units){\n\t    this.getSpectrum().xUnit=units;\n\t}\n\t\n\t/**\n\t * @function getYUnits()\n\t * * This function returns the units of the dependent variable.\n\t * @returns {yUnit|*|M.yUnit}\n\t */\n\tSD.prototype.getYUnits = function(){\n\t    return this.getSpectrum().yUnit;\n\t}\n\t\n\t/**\n\t * @function getSpectraVariable()\n\t * This function returns the information about the dimensions\n\t * @returns {*}\n\t */\n\tSD.prototype.getSpectraVariable = function(dim){\n\t    return this.sd.ntuples[dim];\n\t}\n\t\n\t/**\n\t * @function getNbPoints()\n\t * Return the number of points in the current spectrum\n\t * @param i sub-spectrum\n\t * @returns {*}\n\t */\n\tSD.prototype.getNbPoints=function(i){\n\t    return this.getSpectrumData(i).y.length;\n\t}\n\t\n\t/**\n\t * @function getFirstX()\n\t * Return the first value of the direct dimension\n\t * @param i sub-spectrum\n\t * @returns {number}\n\t */\n\tSD.prototype.getFirstX=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].firstX;\n\t}\n\t\n\t/**\n\t * @function setFirstX()\n\t * Set the firstX for this spectrum. You have to force and update of the xAxis after!!!\n\t * @param x\n\t * @param i sub-spectrum\n\t */\n\tSD.prototype.setFirstX=function(x, i) {\n\t    i=i||this.activeElement;\n\t    this.sd.spectra[i].firstX=x;\n\t}\n\t\n\t/**\n\t * @function getLastX()\n\t * Return the last value of the direct dimension\n\t * @param i sub-spectrum\n\t * @returns {number}\n\t */\n\tSD.prototype.getLastX=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].lastX;\n\t}\n\t\n\t/**\n\t * @function setLastX()\n\t * Set the last value of the direct dimension. You have to force and update of the xAxis after!!!\n\t * @param x\n\t * @param i sub-spectrum\n\t */\n\tSD.prototype.setLastX=function(x, i) {\n\t    i=i||this.activeElement;\n\t    this.sd.spectra[i].lastX=x;\n\t}\n\t\n\t/**\n\t */\n\t/**\n\t * Return the first value of the direct dimension\n\t * @param i sub-spectrum\n\t * @returns {number}\n\t */\n\tSD.prototype.getFirstY=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].firstY;\n\t}\n\t\n\t/**\n\t * @function setFirstY()\n\t * Set the first value of the indirect dimension. Only valid for 2D spectra.\n\t * @param y\n\t * @param i sub-spectrum\n\t */\n\tSD.prototype.setFirstY=function(y, i) {\n\t    i=i||this.activeElement;\n\t    this.sd.spectra[i].firstY = y;\n\t}\n\t\n\t/**\n\t * @function getLastY\n\t * Return the first value of the indirect dimension. Only valid for 2D spectra.\n\t * @returns {number}\n\t */\n\tSD.prototype.getLastY = function(i){\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].lastY;\n\t}\n\t\n\t/**\n\t * @function setLastY()\n\t * Return the first value of the indirect dimension\n\t * @param y\n\t * @param i sub-spectrum\n\t */\n\tSD.prototype.setLastY = function(y, i){\n\t    i=i||this.activeElement;\n\t    this.sd.spectra[i].lastY = y;\n\t}\n\t\n\t/**\n\t * @function setDataClass()\n\t * Set the spectrum data_class. It could be DATACLASS_PEAK=1 or DATACLASS_XY=2\n\t * @param dataClass\n\t */\n\tSD.prototype.setDataClass = function(dataClass){\n\t    if(dataClass==this.DATACLASS_PEAK) {\n\t        this.getSpectrum().isPeaktable = true;\n\t        this.getSpectrum().isXYdata = false;\n\t    }\n\t    if(dataClass==this.DATACLASS_XY){\n\t        this.getSpectrum().isXYdata = true;\n\t        this.getSpectrum().isPeaktable = false;\n\t    }\n\t}\n\t\n\t/**\n\t * @function isDataClassPeak();\n\t * Is this a PEAKTABLE spectrum?\n\t * @returns {*}\n\t */\n\tSD.prototype.isDataClassPeak = function(){\n\t    if(this.getSpectrum().isPeaktable)\n\t        return  this.getSpectrum().isPeaktable;\n\t    return false;\n\t}\n\t\n\t/**\n\t * @function isDataClassXY();\n\t * Is this a XY spectrum?\n\t * @returns {*}\n\t */\n\tSD.prototype.isDataClassXY = function(){\n\t    if(this.getSpectrum().isXYdata)\n\t        return  this.getSpectrum().isXYdata;\n\t    return false\n\t}\n\t\n\t/**\n\t * @function setDataType()\n\t * Set the data type for this spectrum. It could be one of the following:\n\t [\"INFRARED\"||\"IR\",\"IV\",\"NDNMRSPEC\",\"NDNMRFID\",\"NMRSPEC\",\"NMRFID\",\"HPLC\",\"MASS\"\n\t * \"UV\", \"RAMAN\" \"GC\"|| \"GASCHROMATOGRAPH\",\"CD\"|| \"DICHRO\",\"XY\",\"DEC\"]\n\t * @param dataType\n\t */\n\tSD.prototype.setDataType = function(dataType){\n\t    this.getSpectrum().dataType=dataType;\n\t}\n\t\n\t/**\n\t * @function getDataType()\n\t * Return the dataType(see: setDataType )\n\t * @returns {string|string|*|string}\n\t */\n\tSD.prototype.getDataType = function(){\n\t    return this.getSpectrum().dataType;\n\t}\n\t\n\t/**\n\t * @function getSpectrumData()\n\t * Return the i-th sub-spectrum data in the current spectrum\n\t * @param i\n\t * @returns {this.sd.spectra[i].data[0]}\n\t */\n\tSD.prototype.getSpectrumData=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].data[0];\n\t}\n\t\n\t/**\n\t * @function getSpectrum()\n\t * Return the i-th sub-spectra in the current spectrum\n\t * @param i\n\t * @returns {this.sd.spectra[i]}\n\t */\n\tSD.prototype.getSpectrum=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i];\n\t}\n\t\n\t/**\n\t * @function getNbSubSpectra()\n\t * Return the amount of sub-spectra in this object\n\t * @returns {*}\n\t */\n\tSD.prototype.getNbSubSpectra=function(){\n\t    return this.sd.spectra.length;\n\t}\n\t\n\t/**\n\t * @function getXData()\n\t *  Returns an array containing the x values of the spectrum\n\t * @param i sub-spectrum Default:activeSpectrum\n\t * @returns {Array}\n\t */\n\tSD.prototype.getXData=function(i){\n\t    return this.getSpectrumData(i).x;\n\t}\n\t\n\t/**\n\t * @function getYData()\n\t * This function returns a double array containing the values with the intensities for the current sub-spectrum.\n\t * @param i sub-spectrum Default:activeSpectrum\n\t * @returns {Array}\n\t */\n\tSD.prototype.getYData=function(i){\n\t    return this.getSpectrumData(i).y;\n\t}\n\t\n\t/**\n\t * @function getX()\n\t * Returns the x value at the specified index for the active sub-spectrum.\n\t * @param i array index between 0 and spectrum.getNbPoints()-1\n\t * @returns {number}\n\t */\n\tSD.prototype.getX=function(i){\n\t    return this.getXData()[i];\n\t}\n\t\n\t/**\n\t * @function getY()\n\t * Returns the y value at the specified index for the active sub-spectrum.\n\t * @param i array index between 0 and spectrum.getNbPoints()-1\n\t * @returns {number}\n\t */\n\tSD.prototype.getY=function(i){\n\t    return this.getYData()[i];\n\t}\n\t\n\t/**\n\t * @function getXYData();\n\t * Returns a double[2][nbPoints] where the first row contains the x values and the second row the y values.\n\t * @param i sub-spectrum Default:activeSpectrum\n\t * @returns {*[]}\n\t */\n\tSD.prototype.getXYData=function(i){\n\t    return [this.getXData(i),this.getYData(i)];\n\t}\n\t\n\t/**\n\t * @function getTitle\n\t * Return the title of the current spectrum.\n\t * @param i sub-spectrum Default:activeSpectrum\n\t * @returns {*}\n\t */\n\tSD.prototype.getTitle=function(i) {\n\t    return this.getSpectrum(i).title;\n\t}\n\t\n\t/**\n\t * @function setTitle(newTitle);\n\t * Set the title of this spectrum.\n\t * @param newTitle The new title\n\t * @param i sub-spectrum Default:activeSpectrum\n\t */\n\tSD.prototype.setTitle=function(newTitle,i) {\n\t    this.getSpectrum(i).title=newTitle;\n\t}\n\t\n\t/**\n\t * @function getMinY(i)\n\t * This function returns the minimal value of Y\n\t * @param i sub-spectrum Default:activeSpectrum\n\t * @returns {number}\n\t */\n\tSD.prototype.getMinY=function(i) {\n\t    return  StatArray.min(this.getYData(i));\n\t}\n\t\n\t/**\n\t * @function getMaxY(i)\n\t * This function returns the maximal value of Y\n\t * @param i sub-spectrum Default:activeSpectrum\n\t * @returns {number}\n\t */\n\tSD.prototype.getMaxY=function(i) {\n\t    return  StatArray.max(this.getYData(i));\n\t}\n\t\n\t/**\n\t * @function getMinMax(i)\n\t * Return the min and max value of Y\n\t * @param i sub-spectrum Default:activeSpectrum\n\t * @returns {{min, max}|*}\n\t */\n\tSD.prototype.getMinMaxY=function(i) {\n\t    return  StatArray.minMax(this.getYData(i));\n\t}\n\t\n\t\n\t/**\n\t * @function getNoiseLevel()\n\t * Get the noise threshold level of the current spectrum. It uses median instead of the mean\n\t * @returns {number}\n\t */\n\tSD.prototype.getNoiseLevel=function(){\n\t    var mean = 0,stddev=0;\n\t    var y = this.getYData();\n\t    var length = this.getNbPoints(),i=0;\n\t    for(i = 0; i < length; i++){\n\t        mean+=y[i];\n\t    }\n\t    mean/=this.getNbPoints();\n\t    var averageDeviations = new Array(length);\n\t    for (i = 0; i < length; i++)\n\t        averageDeviations[i] = Math.abs(y[i] - mean);\n\t    averageDeviations.sort();\n\t    if (length % 2 == 1) {\n\t        stddev = averageDeviations[(length-1)/2] / 0.6745;\n\t    } else {\n\t        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n\t    }\n\t\n\t    return stddev*this.getNMRPeakThreshold(this.getNucleus(1));\n\t}\n\t\n\t/**\n\t * @function arrayPointToUnits(doublePoint)\n\t * Return the xValue for the given index.\n\t * @param doublePoint\n\t * @returns {number}\n\t */\n\tSD.prototype.arrayPointToUnits=function(doublePoint){\n\t    return (this.getFirstX() - (doublePoint* (this.getFirstX() - this.getLastX()) / (this.getNbPoints()-1)));\n\t}\n\t\n\t/**\n\t * @function unitsToArrayPoint(inValue)\n\t * Returns the index-value for the data array corresponding to a X-value in\n\t * units for the element of spectraData to which it is linked (spectraNb).\n\t * This method makes use of spectraData.getFirstX(), spectraData.getLastX()\n\t * and spectraData.getNbPoints() to derive the return value if it of data class XY\n\t * It performs a binary search if the spectrum is a peak table\n\t * @param inValue\n\t *            (value in Units to be converted)\n\t * @return {number} An integer representing the index value of the inValue\n\t */\n\tSD.prototype.unitsToArrayPoint=function(inValue){\n\t    if (this.isDataClassXY()) {\n\t        return Math.round((this.getFirstX() - inValue) * (-1.0 / this.getDeltaX()));\n\t    } else if (this.isDataClassPeak())\n\t    {\n\t        var currentArrayPoint = 0,upperLimit=this.getNbPoints()-1, lowerLimit=0, midPoint;\n\t        //If inverted scale\n\t        if(this.getFirstX()>this.getLastX()){\n\t            upperLimit=0;\n\t            lowerLimit=this.getNbPoints()-1;\n\t\n\t            if(inValue>this.getFirstX())\n\t                return this.getNbPoints();\n\t            if(inValue<this.getLastX())\n\t                return -1;\n\t        }\n\t        else{\n\t            if(inValue<this.getFirstX())\n\t                return -1;\n\t            if(inValue>this.getLastX())\n\t                return this.getNbPoints();\n\t        }\n\t\n\t        while (Math.abs(upperLimit-lowerLimit) > 1)\n\t        {\n\t            midPoint=Math.round(Math.floor((upperLimit+lowerLimit)/2));\n\t            //x=this.getX(midPoint);\n\t            if(this.getX(midPoint)==inValue)\n\t                return midPoint;\n\t            if(this.getX(midPoint)>inValue)\n\t                upperLimit=midPoint;\n\t            else\n\t                lowerLimit=midPoint;\n\t        }\n\t        currentArrayPoint=lowerLimit;\n\t        if(Math.abs(this.getX(lowerLimit)-inValue)>Math.abs(this.getX(upperLimit)-inValue))\n\t            currentArrayPoint=upperLimit;\n\t        return currentArrayPoint;\n\t    } else {\n\t        return 0;\n\t    }\n\t}\n\t\n\t/**\n\t * @function getDeltaX()\n\t * Returns the separation between 2 consecutive points in the spectrum domain\n\t * @returns {number}\n\t */\n\tSD.prototype.getDeltaX=function(){\n\t    return (this.getLastX()-this.getFirstX()) / (this.getNbPoints()-1);\n\t}\n\t\n\t/**\n\t * @function setMinMax(min,max)\n\t * This function scales the values of Y between the min and max parameters\n\t * @param min   Minimum desired value for Y\n\t * @param max   Maximum desired value for Y\n\t */\n\tSD.prototype.setMinMax=function(min,max) {\n\t    var y = this.getYData();\n\t    var minMax = StatArray.minMax(y);\n\t    var factor = (max - min)/(minMax.max-minMax.min);\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]=(y[i]-minMax.min)*factor+min;\n\t    }\n\t}\n\t\n\t/**\n\t * @function setMin(min)\n\t * This function scales the values of Y to fit the min parameter\n\t * @param min   Minimum desired value for Y\n\t */\n\tSD.prototype.setMin=function(min) {\n\t    var y = this.getYData();\n\t    var currentMin = StatArray.min(y);\n\t    var factor = min/currentMin;\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]*=factor;\n\t    }\n\t}\n\t\n\t/**\n\t * @function setMax(max)\n\t * This function scales the values of Y to fit the max parameter\n\t * @param max   Maximum desired value for Y\n\t */\n\tSD.prototype.setMax=function(max) {\n\t    var y = this.getYData();\n\t    var currentMin = StatArray.max(y);\n\t    var factor = max/currentMin;\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]*=factor;\n\t    }\n\t}\n\t\n\t/**\n\t * @function YShift(value)\n\t * This function shifts the values of Y\n\t * @param value Distance of the shift\n\t */\n\tSD.prototype.YShift=function(value) {\n\t    var y = this.getSpectrumData().y;\n\t    var length = this.getNbPoints(),i=0;\n\t    for(i=0;i<length;i++){\n\t        y[i]+=value;\n\t    }\n\t    this.getSpectrum().firstY+=value;\n\t    this.getSpectrum().lastY+=value;\n\t}\n\t\n\t/**\n\t * @function shift(globalShift)\n\t * This function shift the given spectraData. After this function is applied, all the peaks in the\n\t * spectraData will be found at xi+globalShift\n\t * @param globalShift\n\t */\n\tSD.prototype.shift=function(globalShift) {\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        var x = this.getSpectrumData().x;\n\t        var length = this.getNbPoints(),i=0;\n\t        for(i=0;i<length;i++){\n\t            x[i]+=globalShift;\n\t        }\n\t\n\t        this.getSpectrum().firstX+=globalShift;\n\t        this.getSpectrum().lastX+=globalShift;\n\t    }\n\t\n\t}\n\t\n\t/**\n\t * @function fillWith(from, to, value)\n\t * This function fills a zone of the spectrum with the given value.\n\t * @param from\n\t * @param to\n\t * @param fillWith\n\t */\n\tSD.prototype.fillWith=function(from, to, value) {\n\t    var tmp, start, end, x, y;\n\t    if(from > to) {\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t    }\n\t\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        x = this.getXData();\n\t        y = this.getYData();\n\t        start = this.unitsToArrayPoint(from);\n\t        end = this.unitsToArrayPoint(to);\n\t        if(start > end){\n\t            tmp = start;\n\t            start = end;\n\t            end = tmp;\n\t        }\n\t        if(start<0)\n\t            start=0;\n\t        if(end>=this.getNbPoints)\n\t            end=this.getNbPoints-1;\n\t        for(i=start;i<=end;i++){\n\t                y[i]=value;\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * @function suppressZone(from, to)\n\t * This function suppress a zone from the given spectraData within the given x range.\n\t * Returns a spectraData of type PEAKDATA without peaks in the given region\n\t * @param from\n\t * @param to\n\t */\n\tSD.prototype.suppressZone=function(from, to) {\n\t    var tmp, start, end, x, y;\n\t    if(from > to) {\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t    }\n\t\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        x = this.getXData();\n\t        y = this.getYData();\n\t        start = this.unitsToArrayPoint(from);\n\t        end = this.unitsToArrayPoint(to);\n\t        if(start > end){\n\t            tmp = start;\n\t            start = end;\n\t            end = tmp;\n\t        }\n\t        if(start<0)\n\t            start=0;\n\t        if(end>=this.getNbPoints)\n\t            end=this.getNbPoints-1;\n\t        for(i=end;i>=start;i--){\n\t            y.splice(i,1);\n\t            x.splice(i,1);\n\t        }\n\t    }\n\t    this.setDataClass(this.DATACLASS_PEAK);\n\t}\n\t\n\t\n\t/**\n\t * @function peakPicking(parameters)\n\t * This function performs a simple peak detection in a spectraData. The parameters that can be specified are:\n\t * Returns a two dimensional array of double specifying [x,y] of the detected peaks.\n\t * @option from:    Lower limit.\n\t * @option to:      Upper limit.\n\t * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak.\n\t * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n\t * @option resolution: The maximum resolution of the spectrum for considering peaks.\n\t * @option yInverted: Is it a Y inverted spectrum?(like an IR spectrum)\n\t * @option smooth: A function for smoothing the spectraData before the detection. If your are dealing with\n\t * experimental spectra, smoothing will make the algorithm less prune to false positives.\n\t */\n\tSD.prototype.simplePeakPicking=function(parameters) {\n\t    //@TODO implements this filter\n\t}\n\t\n\t/**\n\t * @function getMaxPeak()\n\t * Get the maximum peak\n\t * @returns {[x, y]}\n\t */\n\tSD.prototype.getMaxPeak = function(){\n\t    var y = this.getSpectraDataY();\n\t    var max=y[0], index=0;\n\t    for(var i=0;i< y.length;i++){\n\t        if(max<y[i]){\n\t            max = y[i];\n\t            index=i;\n\t        }\n\t    }\n\t    return [this.getX(index),max];\n\t}\n\t\n\t/**\n\t * @function getParamDouble(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t * @returns {number}\n\t */\n\tSD.prototype.getParamDouble = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value;\n\t}\n\t\n\t/**\n\t * @function getParamString(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t * @returns {string}\n\t */\n\tSD.prototype.getParamString = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value+\"\";\n\t}\n\t\n\t/**\n\t * @function getParamInt(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t * @returns {number}\n\t */\n\tSD.prototype.getParamInt = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value;\n\t}\n\t\n\t/**\n\t * @function getParam(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t * @returns {*}\n\t */\n\tSD.prototype.getParam = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value;\n\t}\n\t\n\t/**\n\t * @function containsParam(name)\n\t *True if the spectrum.info contains the given parameter\n\t * @param name\n\t * @returns {boolean}\n\t */\n\tSD.prototype.containsParam = function(name){\n\t    if(this.sd.info[name]){\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * @function getSpectraDataY()\n\t * Return the y elements of the current spectrum. Same as getYData. Kept for backward compatibility.\n\t * @returns {Array}\n\t */\n\tSD.prototype.getSpectraDataY = function(){\n\t    return this.getYData();\n\t}\n\t\n\t/**\n\t * @function getSpectraDataX()\n\t * Return the x elements of the current spectrum. Same as getXData. Kept for backward compatibility.\n\t * @returns {Array}\n\t */\n\tSD.prototype.getSpectraDataX = function(){\n\t    return this.getXData();\n\t}\n\t\n\t/**\n\t * @function resetMinMax()\n\t * Update min max values of X and Yaxis.\n\t */\n\tSD.prototype.resetMinMax = function(){\n\t    //TODO Impelement this function\n\t}\n\t\n\t/**\n\t * @function putParam(name, value)\n\t * Set a new parameter to this spectrum\n\t * @param name\n\t * @param value\n\t */\n\tSD.prototype.putParam = function(name, value){\n\t    this.sd.info[name]=value;\n\t}\n\t\n\t/**\n\t * @function getArea(from, to)\n\t * This function returns the area under the spectrum in the given window\n\t * @param from in spectrum units\n\t * @param to in spectrum units\n\t * @returns {number}\n\t */\n\tSD.prototype.getArea = function(from, to){\n\t    var i0 = this.unitsToArrayPoint(from);\n\t    var ie = this.unitsToArrayPoint(to);\n\t    var area = 0;\n\t    if(i0>ie){\n\t        var tmp = i0;\n\t        i0 = ie;\n\t        ie = tmp;\n\t    }\n\t    i0=i0<0?0:i0;\n\t    ie=ie>=this.getNbPoints()?this.getNbPoints()-1:ie;\n\t    for(var i=i0;i<ie;i++){\n\t        area+= this.getY(i);\n\t    }\n\t    return area*Math.abs(this.getDeltaX());\n\t},\n\t\n\t/**\n\t * @function getVector(from, to, nPoints)\n\t * Returns a equally spaced vector within the given window.\n\t * @param from in spectrum units\n\t * @param to in spectrum units\n\t * @param nPoints number of points to return(!!!sometimes it is not possible to return exactly the required nbPoints)\n\t * @returns [x,y]\n\t */\n\tSD.prototype.getVector = function(from, to, nPoints){\n\t    var x = this.getSpectraDataX();\n\t    var y = this.getSpectraDataY();\n\t    var result = [];\n\t    var start = 0, end = x.length- 1,direction=1;\n\t    var reversed = false;\n\t\n\t    if(x[0]>x[1]){\n\t        direction = -1;\n\t        start= x.length-1;\n\t        end = 0;\n\t    }\n\t\n\t    if(from > to){\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t        reversed = true;\n\t    }\n\t    //console.log(x[end]+\" \"+from+\" \"+x[start]+\" \"+to);\n\t    if(x[start]>to||x[end]<from){\n\t        //console.log(\"ssss\");\n\t        return [];\n\t    }\n\t\n\t    while(x[start]<from){start+=direction;}\n\t    while(x[end]>to){end-=direction;}\n\t\n\t    var winPoints = Math.abs(end-start)+1;\n\t    if(!nPoints){\n\t        nPoints = winPoints;\n\t    }\n\t    var xwin = new Array(nPoints);\n\t    var ywin = new Array(nPoints);\n\t    var index = 0;\n\t\n\t    if(direction==-1)\n\t        index=nPoints-1;\n\t\n\t    var di = winPoints/nPoints;\n\t    var i=start-direction;\n\t    for(var k=0;k<nPoints;k++) {\n\t        i += Math.round(di * direction);\n\t        //console.log(i+\" \"+y[i]);\n\t        xwin[index] = x[i];\n\t        ywin[index] = y[i];\n\t        index += direction;\n\t    }\n\t    return [xwin,ywin];\n\t}\n\t\n\t/**\n\t * @function is2D()\n\t * Is it a 2D spectrum?\n\t * @returns {boolean}\n\t */\n\tSD.prototype.is2D = function(){\n\t    if(typeof this.sd.twoD == \"undefined\")\n\t        return false;\n\t    return this.sd.twoD;\n\t}\n\t\n\t/**\n\t * @function toJcamp(options)\n\t * This function creates a String that represents the given spectraData in the format JCAM-DX 5.0\n\t * The X,Y data can be compressed using one of the methods described in:\n\t * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\",\n\t *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n\t * @option encode: ['FIX','SQZ','DIF','DIFDUP','CVS','PAC'] (Default: 'DIFDUP')\n\t * @option yfactor: The YFACTOR. It allows to compress the data by removing digits from the ordinate. (Default: 1)\n\t * @option type: [\"NTUPLES\", \"SIMPLE\"] (Default: \"SIMPLE\")\n\t * @option keep: A set of user defined parameters of the given SpectraData to be stored in the jcamp.\n\t * @returns a string containing the jcamp-DX file\n\t * @example SD.toJcamp(spectraData,{encode:'DIFDUP',yfactor:0.01,type:\"SIMPLE\",keep:['#batchID','#url']});\n\t */\n\tSD.prototype.toJcamp=function(options) {\n\t    var defaultOptions = {\"encode\":\"DIFDUP\",\"yFactor\":1,\"type\":\"SIMPLE\",\"keep\":[]};\n\t    options = extend({}, defaultOptions, options);\n\t    return JcampCreator.convert(this, options.encode, options.yFactor, options.type, options.keep);\n\t}\n\t\n\t\n\tmodule.exports = SD;\n\t\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction compareNumbers(a, b) {\n\t    return a - b;\n\t}\n\t\n\t/**\n\t * Computes the sum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.sum = function sum(values) {\n\t    var sum = 0;\n\t    for (var i = 0; i < values.length; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum;\n\t};\n\t\n\t/**\n\t * Computes the maximum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.max = function max(values) {\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return max;\n\t};\n\t\n\t/**\n\t * Computes the minimum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.min = function min(values) {\n\t    var min = Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t    }\n\t    return min;\n\t};\n\t\n\t/**\n\t * Computes the min and max of the given values\n\t * @param {Array} values\n\t * @returns {{min: number, max: number}}\n\t */\n\texports.minMax = function minMax(values) {\n\t    var min = Infinity;\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return {\n\t        min: min,\n\t        max: max\n\t    };\n\t};\n\t\n\t/**\n\t * Computes the arithmetic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.arithmeticMean = function arithmeticMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / l;\n\t};\n\t\n\t/**\n\t * {@link arithmeticMean}\n\t */\n\texports.mean = exports.arithmeticMean;\n\t\n\t/**\n\t * Computes the geometric mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.geometricMean = function geometricMean(values) {\n\t    var mul = 1;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        mul *= values[i];\n\t    }\n\t    return Math.pow(mul, 1 / l);\n\t};\n\t\n\t/**\n\t * Computes the mean of the log of the given values\n\t * If the return value is exponentiated, it gives the same result as the\n\t * geometric mean.\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.logMean = function logMean(values) {\n\t    var lnsum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        lnsum += Math.log(values[i]);\n\t    }\n\t    return lnsum / l;\n\t};\n\t\n\t/**\n\t * Computes the weighted grand mean for a list of means and sample sizes\n\t * @param {Array} means - Mean values for each set of samples\n\t * @param {Array} samples - Number of original values for each set of samples\n\t * @returns {number}\n\t */\n\texports.grandMean = function grandMean(means, samples) {\n\t    var sum = 0;\n\t    var n = 0;\n\t    var l = means.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += samples[i] * means[i];\n\t        n += samples[i];\n\t    }\n\t    return sum / n;\n\t};\n\t\n\t/**\n\t * Computes the truncated mean of the given values using a given percentage\n\t * @param {Array} values\n\t * @param {number} percent - The percentage of values to keep (range: [0,1])\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var k = Math.floor(l * percent);\n\t    var sum = 0;\n\t    for (var i = k; i < (l - k); i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / (l - 2 * k);\n\t};\n\t\n\t/**\n\t * Computes the harmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.harmonicMean = function harmonicMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] === 0) {\n\t            throw new RangeError('value at index ' + i + 'is zero');\n\t        }\n\t        sum += 1 / values[i];\n\t    }\n\t    return l / sum;\n\t};\n\t\n\t/**\n\t * Computes the contraharmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.contraHarmonicMean = function contraHarmonicMean(values) {\n\t    var r1 = 0;\n\t    var r2 = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        r1 += values[i] * values[i];\n\t        r2 += values[i];\n\t    }\n\t    if (r2 < 0) {\n\t        throw new RangeError('sum of values is negative');\n\t    }\n\t    return r1 / r2;\n\t};\n\t\n\t/**\n\t * Computes the median of the given values\n\t * @param {Array} values\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.median = function median(values, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var half = Math.floor(l / 2);\n\t    if (l % 2 === 0) {\n\t        return (values[half - 1] + values[half]) * 0.5;\n\t    } else {\n\t        return values[half];\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the variance of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.variance = function variance(values, unbiased) {\n\t    if (unbiased === undefined) unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var theVariance = 0;\n\t    var l = values.length;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var x = values[i] - theMean;\n\t        theVariance += x * x;\n\t    }\n\t\n\t    if (unbiased) {\n\t        return theVariance / (l - 1);\n\t    } else {\n\t        return theVariance / l;\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the standard deviation of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.standardDeviation = function standardDeviation(values, unbiased) {\n\t    return Math.sqrt(exports.variance(values, unbiased));\n\t};\n\t\n\texports.standardError = function standardError(values) {\n\t    return exports.standardDeviation(values) / Math.sqrt(values.length);\n\t};\n\t\n\texports.quartiles = function quartiles(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort(compareNumbers);\n\t    }\n\t\n\t    var quart = values.length / 4;\n\t    var q1 = values[Math.ceil(quart) - 1];\n\t    var q2 = exports.median(values, true);\n\t    var q3 = values[Math.ceil(quart * 3) - 1];\n\t\n\t    return {q1: q1, q2: q2, q3: q3};\n\t};\n\t\n\texports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n\t    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n\t};\n\t\n\texports.pooledVariance = function pooledVariance(samples, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var sum = 0;\n\t    var length = 0, l = samples.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var values = samples[i];\n\t        var vari = exports.variance(values);\n\t\n\t        sum += (values.length - 1) * vari;\n\t\n\t        if (unbiased)\n\t            length += values.length - 1;\n\t        else\n\t            length += values.length;\n\t    }\n\t    return sum / length;\n\t};\n\t\n\texports.mode = function mode(values) {\n\t    var l = values.length,\n\t        itemCount = new Array(l),\n\t        i;\n\t    for (i = 0; i < l; i++) {\n\t        itemCount[i] = 0;\n\t    }\n\t    var itemArray = new Array(l);\n\t    var count = 0;\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var index = itemArray.indexOf(values[i]);\n\t        if (index >= 0)\n\t            itemCount[index]++;\n\t        else {\n\t            itemArray[count] = values[i];\n\t            itemCount[count] = 1;\n\t            count++;\n\t        }\n\t    }\n\t\n\t    var maxValue = 0, maxIndex = 0;\n\t    for (i = 0; i < count; i++) {\n\t        if (itemCount[i] > maxValue) {\n\t            maxValue = itemCount[i];\n\t            maxIndex = i;\n\t        }\n\t    }\n\t\n\t    return itemArray[maxIndex];\n\t};\n\t\n\texports.covariance = function covariance(vector1, vector2, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var mean1 = exports.mean(vector1);\n\t    var mean2 = exports.mean(vector2);\n\t\n\t    if (vector1.length !== vector2.length)\n\t        throw \"Vectors do not have the same dimensions\";\n\t\n\t    var cov = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var x = vector1[i] - mean1;\n\t        var y = vector2[i] - mean2;\n\t        cov += x * y;\n\t    }\n\t\n\t    if (unbiased)\n\t        return cov / (l - 1);\n\t    else\n\t        return cov / l;\n\t};\n\t\n\texports.skewness = function skewness(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t\n\t    var s2 = 0, s3 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s3 += dev * dev * dev;\n\t    }\n\t    var m2 = s2 / l;\n\t    var m3 = s3 / l;\n\t\n\t    var g = m3 / (Math.pow(m2, 3 / 2.0));\n\t    if (unbiased) {\n\t        var a = Math.sqrt(l * (l - 1));\n\t        var b = l - 2;\n\t        return (a / b) * g;\n\t    }\n\t    else {\n\t        return g;\n\t    }\n\t};\n\t\n\texports.kurtosis = function kurtosis(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var n = values.length, s2 = 0, s4 = 0;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s4 += dev * dev * dev * dev;\n\t    }\n\t    var m2 = s2 / n;\n\t    var m4 = s4 / n;\n\t\n\t    if (unbiased) {\n\t        var v = s2 / (n - 1);\n\t        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t        var b = s4 / (v * v);\n\t        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t\n\t        return a * b - 3 * c;\n\t    }\n\t    else {\n\t        return m4 / (m2 * m2) - 3;\n\t    }\n\t};\n\t\n\texports.entropy = function entropy(values, eps) {\n\t    if (typeof(eps) === 'undefined') eps = 0;\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * Math.log(values[i] + eps);\n\t    return -sum;\n\t};\n\t\n\texports.weightedMean = function weightedMean(values, weights) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * weights[i];\n\t    return sum;\n\t};\n\t\n\texports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n\t    return Math.sqrt(exports.weightedVariance(values, weights));\n\t};\n\t\n\texports.weightedVariance = function weightedVariance(values, weights) {\n\t    var theMean = exports.weightedMean(values, weights);\n\t    var vari = 0, l = values.length;\n\t    var a = 0, b = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var z = values[i] - theMean;\n\t        var w = weights[i];\n\t\n\t        vari += w * (z * z);\n\t        b += w;\n\t        a += w * w;\n\t    }\n\t\n\t    return vari * (b / (b * b - a));\n\t};\n\t\n\texports.center = function center(values, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    var result = values;\n\t    if (!inPlace)\n\t        result = values.slice();\n\t\n\t    var theMean = exports.mean(result), l = result.length;\n\t    for (var i = 0; i < l; i++)\n\t        result[i] -= theMean;\n\t};\n\t\n\texports.standardize = function standardize(values, standardDev, inPlace) {\n\t    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t    var l = values.length;\n\t    var result = inPlace ? values : new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        result[i] = values[i] / standardDev;\n\t    return result;\n\t};\n\t\n\texports.cumulativeSum = function cumulativeSum(array) {\n\t    var l = array.length;\n\t    var result = new Array(l);\n\t    result[0] = array[0];\n\t    for (var i = 1; i < l; i++)\n\t        result[i] = result[i - 1] + array[i];\n\t    return result;\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar parseXYDataRegExp = __webpack_require__(4);\n\t\n\t\n\tfunction getConverter() {\n\t\n\t    // the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\n\t    var ntuplesSeparator = /[, \\t]{1,}/;\n\t\n\t    var GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\t\n\t    function convertToFloatArray(stringArray) {\n\t        var l = stringArray.length;\n\t        var floatArray = new Array(l);\n\t        for (var i = 0; i < l; i++) {\n\t            floatArray[i] = parseFloat(stringArray[i]);\n\t        }\n\t        return floatArray;\n\t    }\n\t    \n\t    function Spectrum() {\n\t        \n\t    }\n\t\n\t    /*\n\t     options.keepSpectra: keep the original spectra for a 2D\n\t     options.xy: true // create x / y array instead of a 1D array\n\t     options.keepRecordsRegExp: which fields do we keep\n\t     */\n\t\n\t    function convert(jcamp, options) {\n\t        options = options || {};\n\t\n\t        var keepRecordsRegExp = /^$/;\n\t        if (options.keepRecordsRegExp) keepRecordsRegExp = options.keepRecordsRegExp;\n\t\n\t        var start = Date.now();\n\t\n\t        var ntuples = {},\n\t            ldr,\n\t            dataLabel,\n\t            dataValue,\n\t            ldrs,\n\t            i, ii, position, endLine, infos;\n\t\n\t        var result = {};\n\t        result.profiling = [];\n\t        result.logs = [];\n\t        var spectra = [];\n\t        result.spectra = spectra;\n\t        result.info = {};\n\t        var spectrum = new Spectrum();\n\t\n\t        if (!(typeof jcamp === 'string')) return result;\n\t        // console.time('start');\n\t\n\t        if (result.profiling) result.profiling.push({\n\t            action: 'Before split to LDRS',\n\t            time: Date.now() - start\n\t        });\n\t\n\t        ldrs = jcamp.split(/[\\r\\n]+##/);\n\t\n\t        if (result.profiling) result.profiling.push({\n\t            action: 'Split to LDRS',\n\t            time: Date.now() - start\n\t        });\n\t\n\t        if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\t\n\t        for (i = 0, ii = ldrs.length; i < ii; i++) {\n\t            ldr = ldrs[i];\n\t            // This is a new LDR\n\t            position = ldr.indexOf('=');\n\t            if (position > 0) {\n\t                dataLabel = ldr.substring(0, position);\n\t                dataValue = ldr.substring(position + 1).trim();\n\t            } else {\n\t                dataLabel = ldr;\n\t                dataValue = '';\n\t            }\n\t            dataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\t\n\t            if (dataLabel === 'DATATABLE') {\n\t                endLine = dataValue.indexOf('\\n');\n\t                if (endLine === -1) endLine = dataValue.indexOf('\\r');\n\t                if (endLine > 0) {\n\t                    var xIndex = -1;\n\t                    var yIndex = -1;\n\t                    // ##DATA TABLE= (X++(I..I)), XYDATA\n\t                    // We need to find the variables\n\t\n\t                    infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n\t                    if (infos[0].indexOf('++') > 0) {\n\t                        var firstVariable = infos[0].replace(/.*\\(([a-zA-Z0-9]+)\\+\\+.*/, '$1');\n\t                        var secondVariable = infos[0].replace(/.*\\.\\.([a-zA-Z0-9]+).*/, '$1');\n\t                        xIndex = ntuples.symbol.indexOf(firstVariable);\n\t                        yIndex = ntuples.symbol.indexOf(secondVariable);\n\t                    }\n\t\n\t                    if (xIndex === -1) xIndex = 0;\n\t                    if (yIndex === -1) yIndex = 0;\n\t\n\t                    if (ntuples.first) {\n\t                        if (ntuples.first.length > xIndex) spectrum.firstX = ntuples.first[xIndex];\n\t                        if (ntuples.first.length > yIndex) spectrum.firstY = ntuples.first[yIndex];\n\t                    }\n\t                    if (ntuples.last) {\n\t                        if (ntuples.last.length > xIndex) spectrum.lastX = ntuples.last[xIndex];\n\t                        if (ntuples.last.length > yIndex) spectrum.lastY = ntuples.last[yIndex];\n\t                    }\n\t                    if (ntuples.vardim && ntuples.vardim.length > xIndex) {\n\t                        spectrum.nbPoints = ntuples.vardim[xIndex];\n\t                    }\n\t                    if (ntuples.factor) {\n\t                        if (ntuples.factor.length > xIndex) spectrum.xFactor = ntuples.factor[xIndex];\n\t                        if (ntuples.factor.length > yIndex) spectrum.yFactor = ntuples.factor[yIndex];\n\t                    }\n\t                    if (ntuples.units) {\n\t                        if (ntuples.units.length > xIndex) spectrum.xUnit = ntuples.units[xIndex];\n\t                        if (ntuples.units.length > yIndex) spectrum.yUnit = ntuples.units[yIndex];\n\t                    }\n\t                    spectrum.datatable = infos[0];\n\t                    if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n\t                        dataLabel = 'PEAKTABLE';\n\t                    } else if (infos[1] && (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)) {\n\t                        dataLabel = 'XYDATA';\n\t                        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n\t                    }\n\t                }\n\t            }\n\t\n\t\n\t            if (dataLabel === 'TITLE') {\n\t                spectrum.title = dataValue;\n\t            } else if (dataLabel === 'DATATYPE') {\n\t                spectrum.dataType = dataValue;\n\t                if (dataValue.indexOf('nD') > -1) {\n\t                    result.twoD = true;\n\t                }\n\t            } else if (dataLabel === 'NTUPLES') {\n\t                if (dataValue.indexOf('nD') > -1) {\n\t                    result.twoD = true;\n\t                }\n\t            } else if (dataLabel === 'XUNITS') {\n\t                spectrum.xUnit = dataValue;\n\t            } else if (dataLabel === 'YUNITS') {\n\t                spectrum.yUnit = dataValue;\n\t            } else if (dataLabel === 'FIRSTX') {\n\t                spectrum.firstX = parseFloat(dataValue);\n\t            } else if (dataLabel === 'LASTX') {\n\t                spectrum.lastX = parseFloat(dataValue);\n\t            } else if (dataLabel === 'FIRSTY') {\n\t                spectrum.firstY = parseFloat(dataValue);\n\t            } else if (dataLabel === 'LASTY') {\n\t                spectrum.lastY = parseFloat(dataValue);\n\t            } else if (dataLabel === 'NPOINTS') {\n\t                spectrum.nbPoints = parseFloat(dataValue);\n\t            } else if (dataLabel === 'XFACTOR') {\n\t                spectrum.xFactor = parseFloat(dataValue);\n\t            } else if (dataLabel === 'YFACTOR') {\n\t                spectrum.yFactor = parseFloat(dataValue);\n\t            } else if (dataLabel === 'DELTAX') {\n\t                spectrum.deltaX = parseFloat(dataValue);\n\t            } else if (dataLabel === '.OBSERVEFREQUENCY' || dataLabel === '$SFO1') {\n\t                if (!spectrum.observeFrequency) spectrum.observeFrequency = parseFloat(dataValue);\n\t            } else if (dataLabel === '.OBSERVENUCLEUS') {\n\t                if (!spectrum.xType) result.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n\t            } else if (dataLabel === '$SFO2') {\n\t                if (!result.indirectFrequency) result.indirectFrequency = parseFloat(dataValue);\n\t\n\t            } else if (dataLabel === '$OFFSET') {   // OFFSET for Bruker spectra\n\t                result.shiftOffsetNum = 0;\n\t                if (!result.shiftOffsetVal)  result.shiftOffsetVal = parseFloat(dataValue);\n\t            } else if (dataLabel === '$REFERENCEPOINT') {   // OFFSET for Varian spectra\n\t\n\t\n\t                // if we activate this part it does not work for ACD specmanager\n\t                //         } else if (dataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n\t                //                 var parts = dataValue.split(/ *, */);\n\t                //                 result.shiftOffsetNum = parseInt(parts[2].trim());\n\t                //                 result.shiftOffsetVal = parseFloat(parts[3].trim());\n\t            } else if (dataLabel === 'VARNAME') {\n\t                ntuples.varname = dataValue.split(ntuplesSeparator);\n\t            } else if (dataLabel === 'SYMBOL') {\n\t                ntuples.symbol = dataValue.split(ntuplesSeparator);\n\t            } else if (dataLabel === 'VARTYPE') {\n\t                ntuples.vartype = dataValue.split(ntuplesSeparator);\n\t            } else if (dataLabel === 'VARFORM') {\n\t                ntuples.varform = dataValue.split(ntuplesSeparator);\n\t            } else if (dataLabel === 'VARDIM') {\n\t                ntuples.vardim = convertToFloatArray(dataValue.split(ntuplesSeparator));\n\t            } else if (dataLabel === 'UNITS') {\n\t                ntuples.units = dataValue.split(ntuplesSeparator);\n\t            } else if (dataLabel === 'FACTOR') {\n\t                ntuples.factor = convertToFloatArray(dataValue.split(ntuplesSeparator));\n\t            } else if (dataLabel === 'FIRST') {\n\t                ntuples.first = convertToFloatArray(dataValue.split(ntuplesSeparator));\n\t            } else if (dataLabel === 'LAST') {\n\t                ntuples.last = convertToFloatArray(dataValue.split(ntuplesSeparator));\n\t            } else if (dataLabel === 'MIN') {\n\t                ntuples.min = convertToFloatArray(dataValue.split(ntuplesSeparator));\n\t            } else if (dataLabel === 'MAX') {\n\t                ntuples.max = convertToFloatArray(dataValue.split(ntuplesSeparator));\n\t            } else if (dataLabel === '.NUCLEUS') {\n\t                if (result.twoD) {\n\t                    result.yType = dataValue.split(ntuplesSeparator)[0];\n\t                }\n\t            } else if (dataLabel === 'PAGE') {\n\t                spectrum.page = dataValue.trim();\n\t                spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n\t                spectrum.pageSymbol = spectrum.page.replace(/=.*/, '');\n\t                var pageSymbolIndex = ntuples.symbol.indexOf(spectrum.pageSymbol);\n\t                var unit = '';\n\t                if (ntuples.units && ntuples.units[pageSymbolIndex]) {\n\t                    unit = ntuples.units[pageSymbolIndex];\n\t                }\n\t                if (result.indirectFrequency && unit !== 'PPM') {\n\t                    spectrum.pageValue /= result.indirectFrequency;\n\t                }\n\t            } else if (dataLabel === 'RETENTIONTIME') {\n\t                spectrum.pageValue = parseFloat(dataValue);\n\t            } else if (dataLabel === 'XYDATA') {\n\t                prepareSpectrum(result, spectrum);\n\t                // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n\t                if (dataValue.match(/.*\\+\\+.*/)) {\n\t                    if (options.fastParse === false) {\n\t                        parseXYDataRegExp(spectrum, dataValue, result);\n\t                    } else {\n\t                        if (!spectrum.deltaX) {\n\t                            spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n\t                        }\n\t                        fastParseXYData(spectrum, dataValue, result);\n\t                    }\n\t                } else {\n\t                    parsePeakTable(spectrum, dataValue, result);\n\t                }\n\t                spectra.push(spectrum);\n\t                spectrum = new Spectrum();\n\t            } else if (dataLabel === 'PEAKTABLE') {\n\t                prepareSpectrum(result, spectrum);\n\t                parsePeakTable(spectrum, dataValue, result);\n\t                spectra.push(spectrum);\n\t                spectrum = new Spectrum();\n\t            } else if (isMSField(dataLabel)) {\n\t                spectrum[convertMSFieldToLabel(dataLabel)] = dataValue;\n\t            }\n\t            if (dataLabel.match(keepRecordsRegExp)) {\n\t                result.info[dataLabel] = dataValue.trim();\n\t            }\n\t        }\n\t\n\t        if (result.profiling) result.profiling.push({\n\t            action: 'Finished parsing',\n\t            time: Date.now() - start\n\t        });\n\t\n\t        if (Object.keys(ntuples).length > 0) {\n\t            var newNtuples = [];\n\t            var keys = Object.keys(ntuples);\n\t            for (var i = 0; i < keys.length; i++) {\n\t                var key = keys[i];\n\t                var values = ntuples[key];\n\t                for (var j = 0; j < values.length; j++) {\n\t                    if (!newNtuples[j]) newNtuples[j] = {};\n\t                    newNtuples[j][key] = values[j];\n\t                }\n\t            }\n\t            result.ntuples = newNtuples;\n\t        }\n\t\n\t        if (result.twoD) {\n\t            add2D(result, options);\n\t            if (result.profiling) result.profiling.push({\n\t                action: 'Finished countour plot calculation',\n\t                time: Date.now() - start\n\t            });\n\t            if (!options.keepSpectra) {\n\t                delete result.spectra;\n\t            }\n\t        }\n\t\n\t        var isGCMS = (spectra.length > 1 && (!spectra[0].dataType || spectra[0].dataType.match(/.*mass.*/i)));\n\t        if (isGCMS && options.newGCMS) {\n\t            options.xy = true;\n\t        }\n\t\n\t        if (options.xy) { // the spectraData should not be a oneD array but an object with x and y\n\t            if (spectra.length > 0) {\n\t                for (var i = 0; i < spectra.length; i++) {\n\t                    var spectrum = spectra[i];\n\t                    if (spectrum.data.length > 0) {\n\t                        for (var j = 0; j < spectrum.data.length; j++) {\n\t                            var data = spectrum.data[j];\n\t                            var newData = {\n\t                                x: new Array(data.length / 2),\n\t                                y: new Array(data.length / 2)\n\t                            };\n\t                            for (var k = 0; k < data.length; k = k + 2) {\n\t                                newData.x[k / 2] = data[k];\n\t                                newData.y[k / 2] = data[k + 1];\n\t                            }\n\t                            spectrum.data[j] = newData;\n\t                        }\n\t\n\t                    }\n\t\n\t                }\n\t            }\n\t        }\n\t\n\t        // maybe it is a GC (HPLC) / MS. In this case we add a new format\n\t        if (isGCMS) {\n\t            if (options.newGCMS) {\n\t                addNewGCMS(result);\n\t            } else {\n\t                addGCMS(result);\n\t            }\n\t            if (result.profiling) result.profiling.push({\n\t                action: 'Finished GCMS calculation',\n\t                time: Date.now() - start\n\t            });\n\t        }\n\t\n\t        if (result.profiling) {\n\t            result.profiling.push({\n\t                action: 'Total time',\n\t                time: Date.now() - start\n\t            });\n\t        }\n\t\n\t        return result;\n\t    }\n\t\n\t\n\t    function convertMSFieldToLabel(value) {\n\t        return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n\t    }\n\t\n\t    function isMSField(dataLabel) {\n\t        return GC_MS_FIELDS.indexOf(dataLabel) !== -1;\n\t    }\n\t\n\t    function addNewGCMS(result) {\n\t        var spectra = result.spectra;\n\t        var length = spectra.length;\n\t        var gcms = {\n\t            times: new Array(length),\n\t            series: [{\n\t                name: 'ms',\n\t                dimension: 2,\n\t                data: new Array(length)\n\t            }]\n\t        };\n\t\n\t        var i;\n\t        var existingGCMSFields = [];\n\t        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n\t            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n\t            if (spectra[0][label]) {\n\t                existingGCMSFields.push(label);\n\t                gcms.series.push({\n\t                    name: label,\n\t                    dimension: 1,\n\t                    data: new Array(length)\n\t                });\n\t            }\n\t        }\n\t\n\t        for (i = 0; i < length; i++) {\n\t            var spectrum = spectra[i];\n\t            gcms.times[i] = spectrum.pageValue;\n\t            for (var j = 0; j < existingGCMSFields.length; j++) {\n\t                gcms.series[j + 1].data[i] = parseFloat(spectrum[existingGCMSFields[j]]);\n\t            }\n\t            if (spectrum.data) {\n\t                gcms.series[0].data[i] = [spectrum.data[0].x, spectrum.data[0].y];\n\t            }\n\t\n\t        }\n\t        result.gcms = gcms;\n\t    }\n\t\n\t    function addGCMS(result) {\n\t        var spectra = result.spectra;\n\t        var existingGCMSFields = [];\n\t        var i;\n\t        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n\t            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n\t            if (spectra[0][label]) {\n\t                existingGCMSFields.push(label);\n\t            }\n\t        }\n\t        if (existingGCMSFields.length === 0) return;\n\t        var gcms = {};\n\t        gcms.gc = {};\n\t        gcms.ms = [];\n\t        for (i = 0; i < existingGCMSFields.length; i++) {\n\t            gcms.gc[existingGCMSFields[i]] = [];\n\t        }\n\t        for (i = 0; i < spectra.length; i++) {\n\t            var spectrum = spectra[i];\n\t            for (var j = 0; j < existingGCMSFields.length; j++) {\n\t                gcms.gc[existingGCMSFields[j]].push(spectrum.pageValue);\n\t                gcms.gc[existingGCMSFields[j]].push(parseFloat(spectrum[existingGCMSFields[j]]));\n\t            }\n\t            if (spectrum.data) gcms.ms[i] = spectrum.data[0];\n\t\n\t        }\n\t        result.gcms = gcms;\n\t    }\n\t\n\t    function prepareSpectrum(result, spectrum) {\n\t        if (!spectrum.xFactor) spectrum.xFactor = 1;\n\t        if (!spectrum.yFactor) spectrum.yFactor = 1;\n\t        if (spectrum.observeFrequency) {\n\t            if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n\t                spectrum.xUnit = 'PPM';\n\t                spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n\t                spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n\t                spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n\t                spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n\t            }\n\t        }\n\t        if (result.shiftOffsetVal) {\n\t            var shift = spectrum.firstX - result.shiftOffsetVal;\n\t            spectrum.firstX = spectrum.firstX - shift;\n\t            spectrum.lastX = spectrum.lastX - shift;\n\t        }\n\t    }\n\t\n\t\n\t    function convertTo3DZ(spectra) {\n\t        var noise = 0;\n\t        var minZ = spectra[0].data[0][0];\n\t        var maxZ = minZ;\n\t        var ySize = spectra.length;\n\t        var xSize = spectra[0].data[0].length / 2;\n\t        var z = new Array(ySize);\n\t        for (var i = 0; i < ySize; i++) {\n\t            z[i] = new Array(xSize);\n\t            var xVector = spectra[i].data[0];\n\t            for (var j = 0; j < xSize; j++) {\n\t                var value = xVector[j * 2 + 1];\n\t                z[i][j] = value;\n\t                if (value < minZ) minZ = value;\n\t                if (value > maxZ) maxZ = value;\n\t                if (i !== 0 && j !== 0) {\n\t                    noise += Math.abs(value - z[i][j - 1]) + Math.abs(value - z[i - 1][j]);\n\t                }\n\t            }\n\t        }\n\t        return {\n\t            z: z,\n\t            minX: spectra[0].data[0][0],\n\t            maxX: spectra[0].data[0][spectra[0].data[0].length - 2], // has to be -2 because it is a 1D array [x,y,x,y,...]\n\t            minY: spectra[0].pageValue,\n\t            maxY: spectra[ySize - 1].pageValue,\n\t            minZ: minZ,\n\t            maxZ: maxZ,\n\t            noise: noise / ((ySize - 1) * (xSize - 1) * 2)\n\t        };\n\t\n\t    }\n\t\n\t    function add2D(result, options) {\n\t        var zData = convertTo3DZ(result.spectra);\n\t        result.contourLines = generateContourLines(zData, options);\n\t        delete zData.z;\n\t        result.minMax = zData;\n\t    }\n\t\n\t\n\t    function generateContourLines(zData, options) {\n\t        var noise = zData.noise;\n\t        var z = zData.z;\n\t        var contourLevels = [];\n\t        var nbLevels = options.nbContourLevels || 7;\n\t        var noiseMultiplier = options.noiseMultiplier === undefined ? 5 : options.noiseMultiplier;\n\t        var povarHeight0, povarHeight1, povarHeight2, povarHeight3;\n\t        var isOver0, isOver1, isOver2, isOver3;\n\t        var nbSubSpectra = z.length;\n\t        var nbPovars = z[0].length;\n\t        var pAx, pAy, pBx, pBy;\n\t\n\t        var x0 = zData.minX;\n\t        var xN = zData.maxX;\n\t        var dx = (xN - x0) / (nbPovars - 1);\n\t        var y0 = zData.minY;\n\t        var yN = zData.maxY;\n\t        var dy = (yN - y0) / (nbSubSpectra - 1);\n\t        var minZ = zData.minZ;\n\t        var maxZ = zData.maxZ;\n\t\n\t        //System.out.prvarln('y0 '+y0+' yN '+yN);\n\t        // -------------------------\n\t        // Povars attribution\n\t        //\n\t        // 0----1\n\t        // |  / |\n\t        // | /  |\n\t        // 2----3\n\t        //\n\t        // ---------------------d------\n\t\n\t        var lineZValue;\n\t        for (var level = 0; level < nbLevels * 2; level++) { // multiply by 2 for positif and negatif\n\t            var contourLevel = {};\n\t            contourLevels[level] = contourLevel;\n\t            var side = level % 2;\n\t            var factor = (maxZ - noiseMultiplier * noise) * Math.exp((level >> 1) - nbLevels);\n\t            if (side === 0) {\n\t                lineZValue = factor + noiseMultiplier * noise;\n\t            } else {\n\t                lineZValue = -factor - noiseMultiplier * noise;\n\t            }\n\t            var lines = [];\n\t            contourLevel.zValue = lineZValue;\n\t            contourLevel.lines = lines;\n\t\n\t            if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\t\n\t            for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n\t                var subSpectra = z[iSubSpectra];\n\t                var subSpectraAfter = z[iSubSpectra + 1];\n\t                for (var povar = 0; povar < nbPovars - 1; povar++) {\n\t                    povarHeight0 = subSpectra[povar];\n\t                    povarHeight1 = subSpectra[povar + 1];\n\t                    povarHeight2 = subSpectraAfter[povar];\n\t                    povarHeight3 = subSpectraAfter[povar + 1];\n\t\n\t                    isOver0 = (povarHeight0 > lineZValue);\n\t                    isOver1 = (povarHeight1 > lineZValue);\n\t                    isOver2 = (povarHeight2 > lineZValue);\n\t                    isOver3 = (povarHeight3 > lineZValue);\n\t\n\t                    // Example povar0 is over the plane and povar1 and\n\t                    // povar2 are below, we find the varersections and add\n\t                    // the segment\n\t                    if (isOver0 !== isOver1 && isOver0 !== isOver2) {\n\t                        pAx = povar + (lineZValue - povarHeight0) / (povarHeight1 - povarHeight0);\n\t                        pAy = iSubSpectra;\n\t                        pBx = povar;\n\t                        pBy = iSubSpectra + (lineZValue - povarHeight0) / (povarHeight2 - povarHeight0);\n\t                        lines.push(pAx * dx + x0);\n\t                        lines.push(pAy * dy + y0);\n\t                        lines.push(pBx * dx + x0);\n\t                        lines.push(pBy * dy + y0);\n\t                    }\n\t                    // remove push does not help !!!!\n\t                    if (isOver3 !== isOver1 && isOver3 !== isOver2) {\n\t                        pAx = povar + 1;\n\t                        pAy = iSubSpectra + 1 - (lineZValue - povarHeight3) / (povarHeight1 - povarHeight3);\n\t                        pBx = povar + 1 - (lineZValue - povarHeight3) / (povarHeight2 - povarHeight3);\n\t                        pBy = iSubSpectra + 1;\n\t                        lines.push(pAx * dx + x0);\n\t                        lines.push(pAy * dy + y0);\n\t                        lines.push(pBx * dx + x0);\n\t                        lines.push(pBy * dy + y0);\n\t                    }\n\t                    // test around the diagonal\n\t                    if (isOver1 !== isOver2) {\n\t                        pAx = (povar + 1 - (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) * dx + x0;\n\t                        pAy = (iSubSpectra + (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) * dy + y0;\n\t                        if (isOver1 !== isOver0) {\n\t                            pBx = povar + 1 - (lineZValue - povarHeight1) / (povarHeight0 - povarHeight1);\n\t                            pBy = iSubSpectra;\n\t                            lines.push(pAx);\n\t                            lines.push(pAy);\n\t                            lines.push(pBx * dx + x0);\n\t                            lines.push(pBy * dy + y0);\n\t                        }\n\t                        if (isOver2 !== isOver0) {\n\t                            pBx = povar;\n\t                            pBy = iSubSpectra + 1 - (lineZValue - povarHeight2) / (povarHeight0 - povarHeight2);\n\t                            lines.push(pAx);\n\t                            lines.push(pAy);\n\t                            lines.push(pBx * dx + x0);\n\t                            lines.push(pBy * dy + y0);\n\t                        }\n\t                        if (isOver1 !== isOver3) {\n\t                            pBx = povar + 1;\n\t                            pBy = iSubSpectra + (lineZValue - povarHeight1) / (povarHeight3 - povarHeight1);\n\t                            lines.push(pAx);\n\t                            lines.push(pAy);\n\t                            lines.push(pBx * dx + x0);\n\t                            lines.push(pBy * dy + y0);\n\t                        }\n\t                        if (isOver2 !== isOver3) {\n\t                            pBx = povar + (lineZValue - povarHeight2) / (povarHeight3 - povarHeight2);\n\t                            pBy = iSubSpectra + 1;\n\t                            lines.push(pAx);\n\t                            lines.push(pAy);\n\t                            lines.push(pBx * dx + x0);\n\t                            lines.push(pBy * dy + y0);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        return {\n\t            minX: zData.minX,\n\t            maxX: zData.maxX,\n\t            minY: zData.minY,\n\t            maxY: zData.maxY,\n\t            segments: contourLevels\n\t        };\n\t    }\n\t\n\t    function fastParseXYData(spectrum, value) {\n\t        // TODO need to deal with result\n\t        //  console.log(value);\n\t        // we check if deltaX is defined otherwise we calculate it\n\t\n\t        var yFactor = spectrum.yFactor;\n\t        var deltaX = spectrum.deltaX;\n\t\n\t\n\t        spectrum.isXYdata = true;\n\t        // TODO to be improved using 2 array {x:[], y:[]}\n\t        var currentData = [];\n\t        var currentPosition = 0;\n\t        spectrum.data = [currentData];\n\t\n\t\n\t        var currentX = spectrum.firstX;\n\t        var currentY = spectrum.firstY;\n\t\n\t        // we skip the first line\n\t        //\n\t        var endLine = false;\n\t        for (var i = 0; i < value.length; i++) {\n\t            var ascii = value.charCodeAt(i);\n\t            if (ascii === 13 || ascii === 10) {\n\t                endLine = true;\n\t            } else {\n\t                if (endLine) break;\n\t            }\n\t        }\n\t\n\t        // we proceed taking the i after the first line\n\t        var newLine = true;\n\t        var isDifference = false;\n\t        var isLastDifference = false;\n\t        var lastDifference = 0;\n\t        var isDuplicate = false;\n\t        var inComment = false;\n\t        var currentValue = 0;\n\t        var isNegative = false;\n\t        var inValue = false;\n\t        var skipFirstValue = false;\n\t        var decimalPosition = 0;\n\t        var ascii;\n\t        for (; i <= value.length; i++) {\n\t            if (i === value.length) ascii = 13;\n\t            else ascii = value.charCodeAt(i);\n\t            if (inComment) {\n\t                // we should ignore the text if we are after $$\n\t                if (ascii === 13 || ascii === 10) {\n\t                    newLine = true;\n\t                    inComment = false;\n\t                }\n\t            } else {\n\t                // when is it a new value ?\n\t                // when it is not a digit, . or comma\n\t                // it is a number that is either new or we continue\n\t                if (ascii <= 57 && ascii >= 48) { // a number\n\t                    inValue = true;\n\t                    if (decimalPosition > 0) {\n\t                        currentValue += (ascii - 48) / Math.pow(10, decimalPosition++);\n\t                    } else {\n\t                        currentValue *= 10;\n\t                        currentValue += ascii - 48;\n\t                    }\n\t                } else if (ascii === 44 || ascii === 46) { // a \",\" or \".\"\n\t                    inValue = true;\n\t                    decimalPosition++;\n\t                } else {\n\t                    if (inValue) {\n\t                        // need to process the previous value\n\t                        if (newLine) {\n\t                            newLine = false; // we don't check the X value\n\t                            // console.log(\"NEW LINE\",isDifference, lastDifference);\n\t                            // if new line and lastDifference, the first value is just a check !\n\t                            // that we don't check ...\n\t                            if (isLastDifference) skipFirstValue = true;\n\t                        } else {\n\t                            // need to deal with duplicate and differences\n\t                            if (skipFirstValue) {\n\t                                skipFirstValue = false;\n\t                            } else {\n\t                                if (isDifference) {\n\t                                    if (currentValue === 0) lastDifference = 0;\n\t                                    else lastDifference = isNegative ? -currentValue : currentValue;\n\t                                    isLastDifference = true;\n\t                                    isDifference = false;\n\t                                }\n\t                                var duplicate = isDuplicate ? currentValue - 1 : 1;\n\t                                for (var j = 0; j < duplicate; j++) {\n\t                                    if (isLastDifference) {\n\t                                        currentY += lastDifference;\n\t                                    } else {\n\t                                        if (currentValue === 0) currentY = 0;\n\t                                        else currentY = isNegative ? -currentValue : currentValue;\n\t                                    }\n\t\n\t                                    //  console.log(\"Separator\",isNegative ?\n\t                                    //          -currentValue : currentValue,\n\t                                    //      \"isDiff\", isDifference, \"isDup\", isDuplicate,\n\t                                    //      \"lastDif\", lastDifference, \"dup:\", duplicate, \"y\", currentY);\n\t\n\t                                    // push is slightly slower ... (we loose 10%)\n\t                                    currentData[currentPosition++] = currentX;\n\t                                    currentData[currentPosition++] = currentY * yFactor;\n\t                                    currentX += deltaX;\n\t                                }\n\t                            }\n\t                        }\n\t                        isNegative = false;\n\t                        currentValue = 0;\n\t                        decimalPosition = 0;\n\t                        inValue = false;\n\t                        isDuplicate = false;\n\t                    }\n\t\n\t                    // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n\t                    if ((ascii < 74) && (ascii > 63)) {\n\t                        inValue = true;\n\t                        isLastDifference = false;\n\t                        currentValue = ascii - 64;\n\t                    } else\n\t                    // negative SQZ digits a b c d e f g h i (ascii 97-105)\n\t                    if ((ascii > 96) && (ascii < 106)) {\n\t                        inValue = true;\n\t                        isLastDifference = false;\n\t                        currentValue = ascii - 96;\n\t                        isNegative = true;\n\t                    } else\n\t                    // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n\t                    if (ascii === 115) {\n\t                        inValue = true;\n\t                        isDuplicate = true;\n\t                        currentValue = 9;\n\t                    } else if ((ascii > 82) && (ascii < 91)) {\n\t                        inValue = true;\n\t                        isDuplicate = true;\n\t                        currentValue = ascii - 82;\n\t                    } else\n\t                    // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n\t                    if ((ascii > 73) && (ascii < 83)) {\n\t                        inValue = true;\n\t                        isDifference = true;\n\t                        currentValue = ascii - 73;\n\t                    } else\n\t                    // negative DIF digits j k l m n o p q r (ascii 106-114)\n\t                    if ((ascii > 105) && (ascii < 115)) {\n\t                        inValue = true;\n\t                        isDifference = true;\n\t                        currentValue = ascii - 105;\n\t                        isNegative = true;\n\t                    } else\n\t                    // $ sign, we need to check the next one\n\t                    if (ascii === 36 && value.charCodeAt(i + 1) === 36) {\n\t                        inValue = true;\n\t                        inComment = true;\n\t                    } else\n\t                    // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n\t                    if (ascii === 37) {\n\t                        inValue = true;\n\t                        isDifference = true;\n\t                        currentValue = 0;\n\t                        isNegative = false;\n\t                    } else if (ascii === 45) { // a \"-\"\n\t                        // check if after there is a number, decimal or comma\n\t                        var ascii2 = value.charCodeAt(i + 1);\n\t                        if ((ascii2 >= 48 && ascii2 <= 57) || ascii2 === 44 || ascii2 === 46) {\n\t                            inValue = true;\n\t                            isLastDifference = false;\n\t                            isNegative = true;\n\t                        }\n\t                    } else if (ascii === 13 || ascii === 10) {\n\t                        newLine = true;\n\t                        inComment = false;\n\t                    }\n\t                    // and now analyse the details ... space or tabulation\n\t                    // if \"+\" we just don't care\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function parsePeakTable(spectrum, value, result) {\n\t        var removeCommentRegExp = /\\$\\$.*/;\n\t        var peakTableSplitRegExp = /[,\\t ]+/;\n\t\n\t        spectrum.isPeaktable = true;\n\t        var i, ii, j, jj, values;\n\t        var currentData = [];\n\t        spectrum.data = [currentData];\n\t\n\t        // counts for around 20% of the time\n\t        var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\t\n\t        var k = 0;\n\t        for (i = 1, ii = lines.length; i < ii; i++) {\n\t            values = lines[i].trim().replace(removeCommentRegExp, '').split(peakTableSplitRegExp);\n\t            if (values.length % 2 === 0) {\n\t                for (j = 0, jj = values.length; j < jj; j = j + 2) {\n\t                    // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n\t                    currentData[k++] = (parseFloat(values[j]) * spectrum.xFactor);\n\t                    currentData[k++] = (parseFloat(values[j + 1]) * spectrum.yFactor);\n\t                }\n\t            } else {\n\t                result.logs.push('Format error: ' + values);\n\t            }\n\t        }\n\t    }\n\t\n\t\n\t    return convert;\n\t\n\t}\n\t\n\tvar convert = getConverter();\n\t\n\tfunction JcampConverter(input, options, useWorker) {\n\t    if (typeof options === 'boolean') {\n\t        useWorker = options;\n\t        options = {};\n\t    }\n\t    if (useWorker) {\n\t        return postToWorker(input, options);\n\t    } else {\n\t        return convert(input, options);\n\t    }\n\t}\n\t\n\tvar stamps = {},\n\t    worker;\n\t\n\tfunction postToWorker(input, options) {\n\t    if (!worker) {\n\t        createWorker();\n\t    }\n\t    return new Promise(function (resolve) {\n\t        var stamp = Date.now() + '' + Math.random();\n\t        stamps[stamp] = resolve;\n\t        worker.postMessage(JSON.stringify({\n\t            stamp: stamp,\n\t            input: input,\n\t            options: options\n\t        }));\n\t    });\n\t}\n\t\n\tfunction createWorker() {\n\t    var workerURL = URL.createObjectURL(new Blob([\n\t        'var getConverter =' + getConverter.toString() + ';var convert = getConverter(); onmessage = function (event) { var data = JSON.parse(event.data); postMessage(JSON.stringify({stamp: data.stamp, output: convert(data.input, data.options)})); };'\n\t    ], {type: 'application/javascript'}));\n\t    worker = new Worker(workerURL);\n\t    URL.revokeObjectURL(workerURL);\n\t    worker.addEventListener('message', function (event) {\n\t        var data = JSON.parse(event.data);\n\t        var stamp = data.stamp;\n\t        if (stamps[stamp]) {\n\t            stamps[stamp](data.output);\n\t        }\n\t    });\n\t}\n\t\n\tmodule.exports = {\n\t    convert: JcampConverter\n\t};\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t\n\tvar xyDataSplitRegExp = /[,\\t \\+-]*(?=[^\\d,\\t \\.])|[ \\t]+(?=[\\d+\\.-])/;\n\tvar removeCommentRegExp = /\\$\\$.*/;\n\tvar DEBUG=false;\n\t\n\tmodule.exports=function(spectrum, value, result) {\n\t    // we check if deltaX is defined otherwise we calculate it\n\t    if (!spectrum.deltaX) {\n\t        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n\t    }\n\t\n\t    spectrum.isXYdata=true;\n\t\n\t    var currentData = [];\n\t    var currentPosition=0;\n\t    spectrum.data = [currentData];\n\t\n\t    var currentX = spectrum.firstX;\n\t    var currentY = spectrum.firstY;\n\t    var lines = value.split(/[\\r\\n]+/);\n\t    var lastDif, values, ascii, expectedY;\n\t    values = [];\n\t    for (var i = 1, ii = lines.length; i < ii; i++) {\n\t        //var previousValues=JSON.parse(JSON.stringify(values));\n\t        values = lines[i].trim().replace(removeCommentRegExp, '').split(xyDataSplitRegExp);\n\t        if (values.length > 0) {\n\t            if (DEBUG) {\n\t                if (!spectrum.firstPoint) {\n\t                    spectrum.firstPoint = +values[0];\n\t                }\n\t                var expectedCurrentX = (values[0] - spectrum.firstPoint) * spectrum.xFactor + spectrum.firstX;\n\t                if ((lastDif || lastDif === 0)) {\n\t                    expectedCurrentX += spectrum.deltaX;\n\t                }\n\t                result.logs.push('Checking X value: currentX: ' + currentX + ' - expectedCurrentX: ' + expectedCurrentX);\n\t            }\n\t            for (var j = 1, jj = values.length; j < jj; j++) {\n\t                if (j === 1 && (lastDif || lastDif === 0)) {\n\t                    lastDif = null; // at the beginning of each line there should be the full value X / Y so the diff is always undefined\n\t                    // we could check if we have the expected Y value\n\t                    ascii = values[j].charCodeAt(0);\n\t\n\t                    if (false) { // this code is just to check the jcamp DIFDUP and the next line repeat of Y value\n\t                        // + - . 0 1 2 3 4 5 6 7 8 9\n\t                        if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n\t                            expectedY = +values[j];\n\t                        } else\n\t                        // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n\t                        if ((ascii > 63) && (ascii < 74)) {\n\t                            expectedY = +(String.fromCharCode(ascii - 16) + values[j].substring(1));\n\t                        } else\n\t                        // negative SQZ digits a b c d e f g h i (ascii 97-105)\n\t                        if ((ascii > 96) && (ascii < 106)) {\n\t                            expectedY = -(String.fromCharCode(ascii - 48) + values[j].substring(1));\n\t                        }\n\t                        if (expectedY !== currentY) {\n\t                            result.logs.push('Y value check error: Found: ' + expectedY + ' - Current: ' + currentY);\n\t                            result.logs.push('Previous values: ' + previousValues.length);\n\t                            result.logs.push(previousValues);\n\t                        }\n\t                    }\n\t                } else {\n\t                    if (values[j].length > 0) {\n\t                        ascii = values[j].charCodeAt(0);\n\t                        // + - . 0 1 2 3 4 5 6 7 8 9\n\t                        if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n\t                            lastDif = null;\n\t                            currentY = +values[j];\n\t                            // currentData.push(currentX, currentY * spectrum.yFactor);\n\t                            currentData[currentPosition++]=currentX;\n\t                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n\t                            currentX += spectrum.deltaX;\n\t                        } else\n\t                        // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n\t                        if ((ascii > 63) && (ascii < 74)) {\n\t                            lastDif = null;\n\t                            currentY = +(String.fromCharCode(ascii - 16) + values[j].substring(1));\n\t                            // currentData.push(currentX, currentY * spectrum.yFactor);\n\t                            currentData[currentPosition++] = currentX;\n\t                            currentData[currentPosition++] = currentY * spectrum.yFactor;\n\t                            currentX += spectrum.deltaX;\n\t                        } else\n\t                        // negative SQZ digits a b c d e f g h i (ascii 97-105)\n\t                        if ((ascii > 96) && (ascii < 106)) {\n\t                            lastDif = null;\n\t                            // we can multiply the string by 1 because if may not contain decimal (is this correct ????)\n\t                            currentY = -(String.fromCharCode(ascii - 48) + values[j].substring(1))*1;\n\t                            //currentData.push(currentX, currentY * spectrum.yFactor);\n\t                            currentData[currentPosition++]=currentX;\n\t                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n\t                            currentX += spectrum.deltaX;\n\t                        } else\n\t\n\t\n\t\n\t                        // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n\t                        if (((ascii > 82) && (ascii < 91)) || (ascii === 115)) {\n\t                            var dup = (String.fromCharCode(ascii - 34) + values[j].substring(1)) - 1;\n\t                            if (ascii === 115) {\n\t                                dup = ('9' + values[j].substring(1)) - 1;\n\t                            }\n\t                            for (var l = 0; l < dup; l++) {\n\t                                if (lastDif) {\n\t                                    currentY = currentY + lastDif;\n\t                                }\n\t                                // currentData.push(currentX, currentY * spectrum.yFactor);\n\t                                currentData[currentPosition++]=currentX;\n\t                                currentData[currentPosition++]=currentY * spectrum.yFactor;\n\t                                currentX += spectrum.deltaX;\n\t                            }\n\t                        } else\n\t                        // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n\t                        if (ascii === 37) {\n\t                            lastDif = +('0' + values[j].substring(1));\n\t                            currentY += lastDif;\n\t                            // currentData.push(currentX, currentY * spectrum.yFactor);\n\t                            currentData[currentPosition++]=currentX;\n\t                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n\t                            currentX += spectrum.deltaX;\n\t                        } else if ((ascii > 73) && (ascii < 83)) {\n\t                            lastDif = (String.fromCharCode(ascii - 25) + values[j].substring(1))*1;\n\t                            currentY += lastDif;\n\t                            // currentData.push(currentX, currentY * spectrum.yFactor);\n\t                            currentData[currentPosition++]=currentX;\n\t                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n\t                            currentX += spectrum.deltaX;\n\t                        } else\n\t                        // negative DIF digits j k l m n o p q r (ascii 106-114)\n\t                        if ((ascii > 105) && (ascii < 115)) {\n\t                            lastDif = -(String.fromCharCode(ascii - 57) + values[j].substring(1))*1;\n\t                            currentY += lastDif;\n\t                            // currentData.push(currentX, currentY * spectrum.yFactor);\n\t                            currentData[currentPosition++]=currentX;\n\t                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n\t                            currentX += spectrum.deltaX;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Created by acastillo on 3/2/16.\n\t */\n\t/**\n\t * This class converts a SpectraData object into a String that can be stored as a jcamp file.\n\t * The string reflects the current state of the object and not the raw data from where this\n\t * spectrum was initially loaded.\n\t * @author acastillo\n\t *\n\t */\n\t\n\tvar Encoder = __webpack_require__(6);\n\t\n\tvar JcampCreator = (function(){\n\t\n\t    const Integer = {MAX_VALUE:2e31-1,MIN_VALUE:-2e31};\n\t    const CRLF = \"\\r\\n\";\n\t    const version = \"Cheminfo tools, March 2016\"\n\t\n\t    /**\n\t     * This function creates a String that represents the given spectraData, in the format JCAM-DX 5.0\n\t     * The X,Y data can be compressed using one of the methods described in:\n\t     * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\",\n\t     *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n\t     * @param spectraData\n\t     * @param encodeFormat: ('FIX','SQZ','DIF','DIFDUP','CVS','PAC')\n\t     * @return\n\t     */\n\t    var convert = function(spectraData, encodeFormat, factorY, type, userDefinedParams){\n\t        encodeFormat = encodeFormat.toUpperCase().trim();\n\t\n\t        if(type===null||type.length==0)\n\t            type=\"SIMPLE\";\n\t\n\t        var outString = \"\";\n\t        spectraData.setActiveElement(0);\n\t\n\t        var scale=factorY/spectraData.getParamDouble(\"YFACTOR\", 1);\n\t        if(spectraData.getMaxY()*scale>=Integer.MAX_VALUE/2){\n\t            scale=Integer.MAX_VALUE/(spectraData.getMaxY()*2);\n\t        }\n\t        if(Math.abs(spectraData.getMaxY()-spectraData.getMinY())*scale<16)\n\t            scale=16/(Math.abs(spectraData.getMaxY()-spectraData.getMinY()));\n\t\n\t        var scaleX=Math.abs(1.0/spectraData.getDeltaX());\n\t\n\t        outString+=(\"##TITLE= \" + spectraData.getTitle() + CRLF);\n\t        outString+=(\"##JCAMP-DX= 5.00\\t$$\"+version+ CRLF);\n\t        outString+=(\"##OWNER= \" + spectraData.getParamString(\"##OWNER=\", \"\")+ CRLF);\n\t        outString+=(\"##DATA TYPE= \" +spectraData.getDataType()+ CRLF);\n\t\n\t        if(type==\"NTUPLES\") {\n\t            outString+=ntuplesHead(spectraData, scale, scaleX, encodeFormat, userDefinedParams);\n\t        }\n\t\n\t        if(type==\"SIMPLE\"){\n\t            outString+=simpleHead(spectraData, scale, scaleX, encodeFormat, userDefinedParams);\n\t        }\n\t        return outString;\n\t    }\n\t\n\t    var ntuplesHead = function(spectraData, scale, scaleX, encodeFormat, userDefinedParams){\n\t        var outString=\"\";\n\t        var variableX = spectraData.getSpectraVariable(0);\n\t        var variableY = spectraData.getSpectraVariable(1);\n\t        var variableZ = spectraData.getSpectraVariable(2);\n\t\n\t        outString+=\"##DATA CLASS= NTUPLES\" + CRLF;\n\t        outString+=\"##NUM DIM= 2\" + CRLF;\n\t        var nTuplesName=spectraData.getDataType().trim();\n\t        // we set the VarName parameter to the most common ones.\n\t        // These tables contain the number of occurences of each one\n\t        var abscVar = {};\n\t        var sub;\n\t        for ( sub = 0; sub < spectraData.getNbSubSpectra(); sub++) {\n\t            spectraData.setActiveElement(sub);\n\t            if (abscVar[spectraData.getXUnits()]) {\n\t                abscVar[spectraData.getXUnits()].value++;\n\t            } else {\n\t                abscVar[spectraData.getXUnits()]={value:1, index:sub};\n\t            }\n\t        }\n\t\n\t        var keys = Object.keys(abscVar);\n\t        var mostCommon =keys[0], defaultSub = 0;\n\t\n\t        for(sub=1;sub<keys.length;sub++){\n\t            if(abscVar[keys[sub]].value>abscVar[mostCommon].value){\n\t                mostCommon = keys[sub];\n\t                defaultSub=abscVar[keys[sub]].index;\n\t            }\n\t        }\n\t        var isComplex=false;\n\t        spectraData.setActiveElement(defaultSub);\n\t        var isNMR = spectraData.getDataType().indexOf(\"NMR\")>=0;\n\t        //If it is a NMR spectrum\n\t        if(isNMR){\n\t            outString+=(\"##.OBSERVE FREQUENCY= \" + spectraData.getParamDouble(\"observefrequency\", 0) + CRLF);\n\t            outString+=(\"##.OBSERVE NUCLEUS= ^\" + spectraData.getNucleus()+ CRLF);\n\t            outString+=(\"##$DECIM= \" + (spectraData.getParamDouble(\"$DECIM\",0))+ CRLF);\n\t            outString+=(\"##$DSPFVS= \" + (spectraData.getParamDouble(\"$DSPFVS\",0))+ CRLF);\n\t            outString+=(\"##$FCOR= \" + (Math.floor(spectraData.getParamDouble(\"$FCOR\",0)))+ CRLF);\n\t            if(spectraData.containsParam(\"$SW_h\"))\n\t                outString+=(\"##$SW_h= \" + (spectraData.getParamDouble(\"$SW_h\",0))+ CRLF);\n\t            else\n\t            if(spectraData.containsParam(\"$SW_p\"))\n\t                outString+=(\"##$SW_p= \" + (spectraData.getParamDouble(\"$SW_p\",0))+ CRLF);\n\t            outString+=(\"##$SW= \" + (spectraData.getParamDouble(\"$SW\",0))+ CRLF);\n\t            outString+=(\"##$TD= \" + (Math.floor(spectraData.getParamDouble(\"$TD\",0)))+ CRLF);\n\t            outString+=(\"##$BF1= \" + (spectraData.getParamDouble(\"$BF1\",0))+ CRLF);\n\t            outString+=(\"##$GRPDLY= \" + (spectraData.getParamDouble(\"$GRPDLY\",0))+ CRLF);\n\t            outString+=(\"##.DIGITISER RES= \" + (spectraData.getParamInt(\".DIGITISER RES\",0))+ CRLF);\n\t            outString+=(\"##.PULSE SEQUENCE= \" + (spectraData.getParamString(\".PULSE SEQUENCE\", \"\"))+ CRLF);\n\t            outString+=(\"##.SOLVENT NAME= \" + (spectraData.getSolventName())+ CRLF);\n\t            outString+=(\"##$NUC1= <\" +spectraData.getNucleus()+\">\"+ CRLF);\n\t            if(spectraData.containsParam(\"2D_X_FREQUENCY\"))\n\t                outString+=(\"##$SFO1= \" + (spectraData.getParamDouble(\"2D_X_FREQUENCY\",0))+ CRLF);\n\t            else\n\t                outString+=(\"##$SFO1= \" + (spectraData.getParamDouble(\"$SFO1\",0))+ CRLF);\n\t\n\t            if(spectraData.containsParam(\"2D_X_OFFSET\"))\n\t                outString+=(\"##$OFFSET= \" +spectraData.getParamDouble(\"2D_X_OFFSET\", 0)+ CRLF);\n\t\n\t            if(spectraData.is2D()){\n\t                outString+=(\"$$Parameters for 2D NMR Spectrum\"+ CRLF);\n\t                outString+=(\"##$NUC1= <\" +spectraData.getNucleus(2)+\">\"+ CRLF);\n\t                if(spectraData.containsParam(\"2D_Y_FREQUENCY\")){\n\t                    outString+=(\"##$SFO1= \" + spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0)+ CRLF);\n\t                    outString+=(\"##$SFO2= \" + spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0)+ CRLF);\n\t                    outString+=(\"##$BF2= \" +spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0)+ CRLF);\n\t                }\n\t                if(spectraData.containsParam(\"2D_Y_OFFSET\"))\n\t                    outString+=(\"##$OFFSET= \" +spectraData.getParamDouble(\"2D_Y_OFFSET\", 0)+ CRLF);\n\t\n\t                outString+=(\"$$End of Parameters for 2D NMR Spectrum\"+ CRLF);\n\t            }\n\t        }\n\t        outString+=(\"##NTUPLES=\\t\" + nTuplesName + CRLF);\n\t        var freq1 = 1,freq2=1;//spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0);\n\t        if(!spectraData.is2D()&&spectraData.getNbSubSpectra()>1&& isNMR)\n\t            isComplex=true;\n\t        if(isComplex){\n\t            outString+=(\"##VAR_NAME=\\t\" + spectraData.getXUnits() + \",\\t\"+ nTuplesName.substring(4) +\"/REAL,\\t\"+ nTuplesName.substring(4) +\"/IMAG\"+CRLF);\n\t            outString+=(\"##SYMBOL=\\tX,\\tR,\\tI\" + CRLF);\n\t            outString+=(\"##VAR_TYPE=\\tINDEPENDENT,\\tDEPENDENT,\\tDEPENDENT\" + CRLF);\n\t            if(encodeFormat!=\"CSV\"||encodeFormat!=\"PAC\")\n\t                outString+=(\"##VAR_FORM=\\tAFFN,\\tASDF,\\tASDF\" + CRLF);\n\t            else\n\t                outString+=(\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tAFFN\" + CRLF);\n\t            outString+=(\"##VAR_DIM=\\t\" + spectraData.getNbPoints() + \",\\t\" + spectraData.getNbPoints()+\",\\t\" + spectraData.getNbPoints()+CRLF);\n\t            outString+=(\"##UNITS=\\tHZ\"+ \",\\t\"+ spectraData.getYUnits() +\",\\t\"+ variableZ.units + CRLF);\n\t            outString+=(\"##FACTOR=\\t\" + 1.0/scaleX + \",\\t\"+1.0/scale+\",\\t\"+1.0/scale+ CRLF);\n\t\n\t            if(spectraData.getXUnits()==\"PPM\")\n\t                freq1 = spectraData.observeFrequencyX();\n\t\n\t            outString+=(\"##FIRST=\\t\" + spectraData.getFirstX()*freq1 + \",\\t\"+spectraData.getY(0)+\",\\t0\" + CRLF);\n\t            outString+=(\"##LAST=\\t\" + spectraData.getLastX()*freq1 + \",\\t\"+spectraData.getLastY()+\",\\t0\" + CRLF);\n\t        }\n\t        else{\n\t            freq1 = 1;\n\t            if(spectraData.is2D()) {\n\t                outString += (\"##VAR_NAME=\\tFREQUENCY1,\\tFREQUENCY2,\\tSPECTRUM\" + CRLF);\n\t                outString += (\"##SYMBOL=\\tF1,\\tF2,\\tY\" + CRLF);\n\t                outString += (\"##.NUCLEUS=\\t\" + spectraData.getNucleus(2) + \",\\t\" + spectraData.getNucleus(1) + CRLF);\n\t                outString += (\"##VAR_TYPE=\\tINDEPENDENT,\\tINDEPENDENT,\\tDEPENDENT\" + CRLF);\n\t                if (encodeFormat != \"CSV\" || encodeFormat != \"PAC\")\n\t                    outString += (\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tASDF\" + CRLF);\n\t                else\n\t                    outString+=(\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tASDF\" + CRLF);\n\t                outString+=(\"##VAR_DIM=\\t\" + spectraData.getNbSubSpectra() + \",\\t\" + spectraData.getNbPoints()+ \",\\t\" + spectraData.getNbPoints() + CRLF);\n\t                //We had to change this, for Mestre compatibility\n\t                //outString+=(\"##UNITS=\\tHZ,\\t\"+ spectraData.getXUnits() + \",\\t\" + spectraData.getYUnits()+CRLF);\n\t                outString+=(\"##UNITS=\\tHZ,\\tHZ,\\t\" + spectraData.getYUnits()+CRLF);\n\t                if(spectraData.getXUnits()==\"PPM\")\n\t                    freq1 = spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 1);\n\t                if(spectraData.getYUnits()==\"PPM\"){\n\t                    freq2 = spectraData.getParamDouble(\"2D_X_FREQUENCY\", 1);\n\t                }\n\t                outString+=(\"##FACTOR=\\t1,\\t\"+freq2/scaleX + \",\\t\"+1.0/scale+ CRLF);\n\t                outString+=(\"##FIRST=\\t\"+spectraData.getParamDouble(\"firstY\", 0)*freq1+\",\\t\"+ spectraData.getFirstX()*freq2 + \",\\t\"+spectraData.getY(0) + CRLF);\n\t                outString+=(\"##LAST=\\t\" +spectraData.getParamDouble(\"lastY\", 0)*freq1+\",\\t\"+ spectraData.getLastX() *freq2\n\t                + \",\\t\"+ spectraData.getY(spectraData.getNbPoints()-1)+ CRLF);\n\t            }else{\n\t                outString+=(\"##VAR_NAME=\\t\" + variableX.varname + \",\\t\"+ variableY.varname + \",\\t\"+ variableX.varname + CRLF);\n\t                outString+=(\"##SYMBOL=\\t\" + variableX.symbol + \",\\t\"+ variableY.symbol + \",\\t\"+ variableZ.symbol + CRLF);\n\t                outString+=(\"##VAR_TYPE=\\t\" + variableX.vartype + \",\\t\"+ variableY.vartype + \",\\t\"+ variableZ.vartype + CRLF);\n\t                if(encodeFormat!=\"CSV\"||encodeFormat!=\"PAC\")\n\t                    outString+=(\"##VAR_FORM=\\tAFFN,\\tASDF,\\tASDF\" + CRLF);\n\t                else\n\t                    outString+=(\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tAFFN\" + CRLF);\n\t                outString+=(\"##VAR_DIM=\\t\" + variableX.vardim + \",\\t\"+ variableY.vardim + \",\\t\"+ variableZ.vardim + CRLF);\n\t                outString+=(\"##UNITS=\\tHZ\" + \",\\t\"+ spectraData.getYUnits() + \",\\t\"+ variableZ.units + CRLF);\n\t                if(spectraData.getXUnits()==\"PPM\")\n\t                    freq1 = spectraData.observeFrequencyX();\n\t                outString+=(\"##FACTOR=\\t\" + 1.0/scaleX + \",\\t\"+1.0/scale + CRLF);\n\t                outString+=(\"##FIRST=\\t\" + variableX.first*freq1 + \",\\t\"+ variableY.first + \",\\t\"+ variableZ.first + CRLF);\n\t                outString+=(\"##LAST=\\t\" + variableX.last*freq1 + \",\\t\"+ variableY.last + \",\\t\"+ variableZ.last + CRLF);\n\t\n\t            }\n\t        }\n\t\n\t        //Set the user defined parameters\n\t        if(userDefinedParams!=null){\n\t            for(var i=userDefinedParams.length-1;i>=0;i--){\n\t                if(spectraData.containsParam(userDefinedParams[i])){\n\t                    outString+=(\"##\"+userDefinedParams[i]+\"= \"\n\t                    + spectraData.getParam(userDefinedParams[i], \"\")+ CRLF);\n\t                }\n\t            }\n\t        }\n\t        //Ordinate of the second dimension in case of 2D NMR spectra\n\t        var yUnits = 0, lastY = 0, dy = 0;\n\t\n\t        if(spectraData.is2D()&& isNMR){\n\t            yUnits = spectraData.getParamDouble(\"firstY\", 0)*freq1;\n\t            lastY = spectraData.getParamDouble(\"lastY\", 0)*freq1;\n\t            dy = (lastY-yUnits)/(spectraData.getNbSubSpectra()-1);\n\t        }\n\t\n\t        for ( sub = 0; sub < spectraData.getNbSubSpectra(); sub++) {\n\t            spectraData.setActiveElement(sub);\n\t            outString+=(\"##PAGE= \" + spectraData.page + CRLF);\n\t            yUnits+=dy;\n\t\n\t            if(spectraData.is2D()&&isNMR)\n\t                outString+=(\"##FIRST=\\t\"+spectraData.getParamDouble(\"firstY\", 0)*freq1+\",\\t\"\n\t                + spectraData.getFirstX()*freq2 + \",\\t\"+spectraData.getY(0) + CRLF);\n\t\n\t\n\t            outString+=(\"##DATA TABLE= \");\n\t            if (spectraData.isDataClassPeak()) {\n\t                outString+=(\"(XY..XY), PEAKS\" + CRLF);\n\t                for (var point = 0; point < spectraData.getNbPoints(); point++)\n\t                    outString+=(spectraData.getX(point) + \", \" + spectraData.getY(point)+ CRLF);\n\t\n\t            } else if (spectraData.isDataClassXY()) {\n\t                if(isNMR){\n\t                    if(spectraData.is2D()){\n\t                        outString+=(\"(F2++(Y..Y)), PROFILE\" + CRLF);\n\t                    }\n\t                    else{\n\t                        if(sub%2==0)\n\t                            outString+=(\"(X++(R..R)), XYDATA\" + CRLF);\n\t                        else\n\t                            outString+=(\"(X++(I..I)), XYDATA\" + CRLF);\n\t                    }\n\t                }\n\t                else\n\t                    outString+=(\"(X++(Y..Y)), XYDATA\" + CRLF);\n\t\n\t                var tempString = \"\";\n\t                var data = new Array(spectraData.getNbPoints());\n\t                for (var point = data.length-1; point >=0; point--) {\n\t                    data[point]=Math.round((spectraData.getY(point)*scale));\n\t                }\n\t\n\t                tempString+=Encoder.encode(data,\n\t                    spectraData.getFirstX()*scaleX,spectraData.getDeltaX()*scaleX,encodeFormat);\n\t\n\t                outString+=(tempString+CRLF);\n\t            }\n\t        }\n\t        outString+=(\"##END NTUPLES= \" + nTuplesName + CRLF);\n\t        outString+=(\"##END= \");\n\t\n\t        spectraData.setActiveElement(0);\n\t\n\t        return outString;\n\t    }\n\t\n\t    var simpleHead = function(spectraData, scale, scaleX, encodeFormat, userDefinedParams){\n\t        var variableX = spectraData.getSpectraVariable(0);\n\t        var variableY = spectraData.getSpectraVariable(1);\n\t        var outString=\"\";\n\t        if(spectraData.isDataClassPeak())\n\t            outString+=(\"##DATA CLASS= PEAK TABLE\"+ CRLF);\n\t        if(spectraData.isDataClassXY())\n\t            outString+=(\"##DATA CLASS= XYDATA\"+ CRLF);\n\t\n\t        spectraData.setActiveElement(0);\n\t        //If it is a NMR spectrum\n\t        if(spectraData.getDataType().indexOf(\"NMR\")>=0){\n\t            outString+=(\"##.OBSERVE FREQUENCY= \" + spectraData.getParamDouble(\"observefrequency\", 0) + CRLF);\n\t            outString+=(\"##.OBSERVE NUCLEUS= ^\" + spectraData.getNucleus()+ CRLF);\n\t            outString+=(\"##$DECIM= \" + (Math.round(spectraData.getParamDouble(\"$DECIM\",0)))+ CRLF);\n\t            outString+=(\"##$DSPFVS= \" + (Math.round(spectraData.getParamDouble(\"$DSPFVS\",0)))+ CRLF);\n\t            outString+=(\"##$FCOR= \" + (Math.round(spectraData.getParamDouble(\"$FCOR\",0)))+ CRLF);\n\t            outString+=(\"##$SW_h= \" + (spectraData.getParamDouble(\"$SW_h\",0))+ CRLF);\n\t            outString+=(\"##$SW= \" + (spectraData.getParamDouble(\"$SW\",0))+ CRLF);\n\t            outString+=(\"##$TD= \" + (Math.round(spectraData.getParamDouble(\"$TD\",0)))+ CRLF);\n\t            outString+=(\"##$GRPDLY= \" + (spectraData.getParamDouble(\"$GRPDLY\",0))+ CRLF);\n\t            outString+=(\"##$BF1= \" + (spectraData.getParamDouble(\"$BF1\",0))+ CRLF);\n\t            outString+=(\"##$SFO1= \" + (spectraData.getParamDouble(\"$SFO1\",0))+ CRLF);\n\t            outString+=(\"##$NUC1= <\" +spectraData.getNucleus()+\">\"+ CRLF);\n\t            outString+=(\"##.SOLVENT NAME= \" + (spectraData.getSolventName())+ CRLF);\n\t\n\t        }\n\t        outString+=(\"##XUNITS=\\t\" + spectraData.getXUnits() + CRLF);\n\t        outString+=(\"##YUNITS=\\t\" + spectraData.getYUnits() + CRLF);\n\t        outString+=(\"##NPOINTS=\\t\" + spectraData.getNbPoints() + CRLF);\n\t        outString+=(\"##FIRSTX=\\t\" + spectraData.getFirstX() + CRLF);\n\t        outString+=(\"##LASTX=\\t\" + spectraData.getLastX() + CRLF);\n\t        outString+=(\"##FIRSTY=\\t\" + spectraData.getFirstY() + CRLF);\n\t        outString+=(\"##LASTY=\\t\" + spectraData.getLastY() + CRLF);\n\t        if (spectraData.isDataClassPeak()) {\n\t            outString+=(\"##XFACTOR=1\"+ CRLF);\n\t            outString+=(\"##YFACTOR=1\"+ CRLF);\n\t        } else if (spectraData.isDataClassXY()) {\n\t            outString+=(\"##XFACTOR= \"+ 1.0/scaleX+ CRLF);\n\t            outString+=(\"##YFACTOR= \"+1.0/scale + CRLF);\n\t        }\n\t        outString+=(\"##MAXY= \"+ spectraData.getMaxY()+ CRLF);\n\t        outString+=(\"##MINY= \"+ spectraData.getMinY()+ CRLF);\n\t\n\t        //Set the user defined parameters\n\t        if(userDefinedParams!=null){\n\t            for(var i=userDefinedParams.length-1;i>=0;i--){\n\t                if(spectraData.containsParam(userDefinedParams[i])){\n\t                    outString+=(\"##\"+userDefinedParams[i]+\"= \"\n\t                    + spectraData.getParam(userDefinedParams[i], \"\")+ CRLF);\n\t                }\n\t            }\n\t        }\n\t\n\t\n\t        if (spectraData.isDataClassPeak()) {\n\t            outString+=(\"##PEAK TABLE= (XY..XY)\" + CRLF);\n\t            for (var point = 0; point < spectraData.getNbPoints(); point++)\n\t                outString+=(spectraData.getX(point) + \", \" + spectraData.getY(point)+ CRLF);\n\t            outString+=(\"##END \");\n\t\n\t        } else if (spectraData.isDataClassXY()) {\n\t            outString+=(\"##DELTAX= \"+spectraData.getDeltaX()+CRLF);\n\t            outString+=(\"##XYDATA=(X++(Y..Y))\" + CRLF);\n\t            var tempString = \"\";\n\t            var data = new Array(spectraData.getNbPoints());\n\t            for (var point = data.length-1; point >=0; point--) {\n\t                data[point]=Math.round(spectraData.getY(point)*scale);\n\t            }\n\t\n\t            tempString+=Encoder.encode(data, spectraData.getFirstX()*scaleX,spectraData.getDeltaX()*scaleX, encodeFormat);\n\t\n\t            outString+=(tempString+CRLF);\n\t            outString+=(\"##END= \");\n\t        }\n\t\n\t        spectraData.setActiveElement(0);\n\t        return outString;\n\t    }\n\t\n\t    return {\"convert\":convert};\n\t})();\n\t\n\tmodule.exports = JcampCreator;\n\t\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * class encodes a integer vector as a String in order to store it in a text file.\n\t * The algorithms used to encode the data are describe in:\n\t *            http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n\t * Created by acastillo on 3/2/16.\n\t */\n\tvar Encoder = (function(){\n\t    var newLine=\"\\r\\n\";\n\t\n\t    var pseudoDigits=[['0','1','2','3','4','5','6','7','8','9'],\n\t                  ['@','A','B','C','D','E','F','G','H','I'],\n\t                  ['@','a','b','c','d','e','f','g','h','i'],\n\t                  ['%','J','K','L','M','N','O','P','Q','R'],\n\t                  ['%','j','k','l','m','n','o','p','q','r'],\n\t                  [' ','S','T','U','V','W','X','Y','Z','s']];\n\t\n\t    var SQZ_P= 1, SQZ_N= 2, DIF_P=3, DIF_N=4, DUP=5, MaxLinelength=100;\n\t\n\t    /**\n\t     * This function encodes the given vector. The encoding format is specified by the\n\t     * encoding option\n\t     * @param data\n\t     * @param firstX\n\t     * @param intervalX\n\t     * @param encoding: ('FIX','SQZ','DIF','DIFDUP','CVS','PAC') Default 'DIFDUP'\n\t     * @returns {String}\n\t     */\n\t    var encode = function(data, firstX, intervalX, encoding){\n\t        if(encoding==(\"FIX\"))\n\t            return FIXencod(data, firstX,intervalX);\n\t        if(encoding==(\"SQZ\"))\n\t            return SQZencod(data, firstX,intervalX);\n\t        if(encoding==(\"DIF\"))\n\t            return DIFencod(data, firstX,intervalX);\n\t        if(encoding==(\"DIFDUP\"))\n\t            return DIFDUPencod(data, firstX,intervalX);\n\t        if(encoding==(\"CSV\"))\n\t            return CSVencod(data, firstX,intervalX);\n\t        if(encoding==(\"PAC\"))\n\t            return PACencod(data, firstX,intervalX);\n\t        //Default\n\t        return DIFencod(data, firstX,intervalX);\n\t    }\n\t\n\t    /**\n\t     * No data compression used. The data is separated by a comma(',').\n\t     * @param data\n\t     * @return\n\t     */\n\t    var CSVencod =  function(data, firstX, intervalX){\n\t        return FIXencod(data, firstX, intervalX, \",\");\n\t    };\n\t\n\t    /**\n\t     * No data compression used. The data is separated by the specified separator.\n\t     * @param data\n\t     * @param separator, The separator character\n\t     * @return\n\t     */\n\t    var FIXencod =  function(data, firstX, intervalX, separator){\n\t        if(!separator)\n\t            separator = \" \";\n\t        var outputData = \"\";\n\t        var j=0, TD = data.length, i;\n\t        while(j<TD-7){\n\t            outputData+=Math.ceil(firstX+j*intervalX);\n\t            for(i = 0;i<8;i++)\n\t                outputData+=separator+data[j++];\n\t            outputData+=newLine;\n\t        }\n\t        if(j<TD){\n\t            //We add last numbers\n\t            outputData+=Math.ceil(firstX+j*intervalX);\n\t            for(i=j;i<TD;i++)\n\t                outputData+=separator + data[i];\n\t        }\n\t        return outputData;\n\t    };\n\t    /**\n\t     * No data compression used. The data is separated by the sign of the number.\n\t     * @param data\n\t     * @return\n\t     */\n\t    var PACencod = function(data, firstX, intervalX){\n\t        var outputData = \"\";\n\t        var j=0, TD = data.length, i;\n\t\n\t        while(j<TD-7){\n\t            outputData+=Math.ceil(firstX+j*intervalX);\n\t            for(i = 0;i<8;i++){\n\t                if(data[j]<0)\n\t                    outputData+=\"-\"+data[j++];\n\t                else\n\t                    outputData+=\"+\"+data[j++];\n\t            }\n\t            outputData+=newLine;\n\t        }\n\t        if(j<TD){\n\t            //We add last numbers\n\t            outputData+=Math.ceil(firstX+j*intervalX);\n\t            for(i=j;i<TD;i++){\n\t                if(data[i]<0)\n\t                    outputData+=\"-\"+data[i];\n\t                else\n\t                    outputData+=\"+\"+data[i];\n\t            }\n\t        }\n\t        return outputData;\n\t    };\n\t    /**\n\t     * Data compression is possible using the squeezed form (SQZ) in which the delimiter, the leading digit,\n\t     * and sign are replaced by a pseudo-digit from Table 1. For example, the Y-values 30, 32 would be\n\t     * represented as C0C2.\n\t     * @param data\n\t     * @return String\n\t     */\n\t    var SQZencod = function(data, firstX, intervalX){\n\t        var outputData = \"\";\n\t        //String outputData = new String();\n\t        var j=0, TD = data.length, i;\n\t\n\t        while(j<TD-10){\n\t            outputData+=Math.ceil(firstX+j*intervalX);\n\t            for(i = 0;i<10;i++)\n\t                outputData+=SQZDigit(data[j++].toString());\n\t            outputData+=newLine;\n\t        }\n\t        if(j<TD){\n\t            //We add last numbers\n\t            outputData+=Math.ceil(firstX+j*intervalX);\n\t            for(i = j;i<TD;i++)\n\t                outputData+=SQZDigit(data[i].toString());\n\t        }\n\t\n\t        return outputData;\n\t    };\n\t\n\t    /**\n\t     * Duplicate suppression encoding\n\t     * @param data\n\t     * @return\n\t     */\n\t    var DIFDUPencod = function(data, firstX, intervalX){\n\t        var mult=0, index=0, charCount= 0, i;\n\t        //We built a string where we store the encoded data.\n\t        var encodData = \"\",encodNumber = \"\",temp = \"\";\n\t\n\t        //We calculate the differences vector\n\t        var diffData = new Array(data.length-1);\n\t        for(i=0;i<diffData.length;i++){\n\t            diffData[i]= data[i+1]-data[i];\n\t        }\n\t\n\t        //We simulate a line carry\n\t        var numDiff = diffData.length;\n\t        while(index<numDiff){\n\t            if(charCount==0){//Start line\n\t                encodNumber = Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+DIFDigit(diffData[index].toString());\n\t                encodData+=encodNumber;\n\t                charCount+=encodNumber.length;\n\t            }\n\t            else{\n\t                //Try to insert next difference\n\t                if(diffData[index-1]==diffData[index]){\n\t                    mult++;\n\t                }\n\t                else{\n\t                    if(mult>0){//Now we know that it can be in line\n\t                        mult++;\n\t                        encodNumber=DUPDigit(mult.toString());\n\t                        encodData+=encodNumber;\n\t                        charCount+=encodNumber.length;\n\t                        mult=0;\n\t                        index--;\n\t                    }\n\t                    else{\n\t                        //Mirar si cabe, en caso contrario iniciar una nueva linea\n\t                        encodNumber=DIFDigit(diffData[index].toString());\n\t                        if(encodNumber.length+charCount<MaxLinelength){\n\t                            encodData+=encodNumber;\n\t                            charCount+=encodNumber.length;\n\t                        }\n\t                        else{//Iniciar nueva linea\n\t                            encodData+=newLine;\n\t                            temp=Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+encodNumber;\n\t                            encodData+=temp;//Each line start with first index number.\n\t                            charCount=temp.length;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            index++;\n\t        }\n\t        if(mult>0)\n\t            encodData+=DUPDigit((mult+1).toString());\n\t        //We insert the last data from fid. It is done to control of data\n\t        //The last line start with the number of datas in the fid.\n\t        encodData+=newLine+Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString());\n\t\n\t        return encodData;\n\t    };\n\t\n\t    /**\n\t     * Differential encoding\n\t     * @param data\n\t     * @return\n\t     */\n\t    var DIFencod = function(data, firstX, intervalX){\n\t        var index=0, charCount= 0,i;\n\t\n\t        var encodData = \"\";\n\t        //String encodData = new String();\n\t        var encodNumber = \"\", temp = \"\";\n\t\n\t        //We calculate the differences vector\n\t        var diffData = new Array(data.length-1);\n\t        for(i=0;i<diffData.length;i++){\n\t            diffData[i]= data[i+1]-data[i];\n\t        }\n\t\n\t        index=0;\n\t        var numDiff = diffData.length;\n\t        while(index<numDiff){\n\t            if(charCount==0){//Iniciar linea\n\t                //We convert the first number.\n\t                encodNumber = Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+DIFDigit(diffData[index].toString());\n\t                encodData+=encodNumber;\n\t                charCount+=encodNumber.length;\n\t            }\n\t            else{\n\t                //Mirar si cabe, en caso contrario iniciar una nueva linea\n\t                encodNumber=DIFDigit(diffData[index].toString());\n\t                if(encodNumber.length+charCount<MaxLinelength){\n\t                    encodData+=encodNumber;\n\t                    charCount+=encodNumber.length;\n\t                }\n\t                else{//Iniciar nueva linea\n\t                    encodData+=newLine;\n\t                    temp=Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+encodNumber;\n\t                    encodData+=temp;//Each line start with first index number.\n\t                    charCount=temp.length;\n\t                }\n\t            }\n\t            index++;\n\t        }\n\t        //We insert the last number from data. It is done to control of data\n\t        encodData+=newLine+Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString());\n\t\n\t        return encodData;\n\t    };\n\t\n\t    /**\n\t     * Convert number to the ZQZ format, using pseudo digits.\n\t     * @param num\n\t     * @return\n\t     */\n\t    var SQZDigit = function(num){\n\t        //console.log(num+\" \"+num.length);\n\t        var SQZdigit = \"\";\n\t        if(num.charAt(0)=='-'){\n\t            SQZdigit+=pseudoDigits[SQZ_N][Number(num.charAt(1))];\n\t            if(num.length>2)\n\t                SQZdigit+=num.substring(2);\n\t        }\n\t        else{\n\t            SQZdigit+=pseudoDigits[SQZ_P][Number(num.charAt(0))];\n\t            if(num.length>1)\n\t                SQZdigit+=num.substring(1);\n\t        }\n\t\n\t        return SQZdigit;\n\t    };\n\t    /**\n\t     * Convert number to the DIF format, using pseudo digits.\n\t     * @param num\n\t     * @return\n\t     */\n\t    var DIFDigit = function(num){\n\t        var DIFFdigit = \"\";\n\t\n\t        if(num.charAt(0)=='-'){\n\t            DIFFdigit+=pseudoDigits[DIF_N][Number(num.charAt(1))];\n\t            if(num.length>2)\n\t                DIFFdigit+=num.substring(2);\n\t\n\t        }\n\t        else{\n\t            DIFFdigit+=pseudoDigits[DIF_P][Number(num.charAt(0))];\n\t            if(num.length>1)\n\t                DIFFdigit+=num.substring(1);\n\t\n\t        }\n\t\n\t        return DIFFdigit;\n\t    };\n\t    /**\n\t     * Convert number to the DUP format, using pseudo digits.\n\t     * @param num\n\t     * @return\n\t     */\n\t    var DUPDigit = function(num){\n\t        var DUPdigit = \"\";\n\t        DUPdigit+=pseudoDigits[DUP][Number(num.charAt(0))];\n\t        if(num.length>1)\n\t            DUPdigit+=num.substring(1);\n\t\n\t        return DUPdigit;\n\t    }\n\t\n\t    return {\n\t        encode:encode,\n\t        FIXencod:FIXencod,\n\t        CSVencod:CSVencod,\n\t        PACencod:PACencod,\n\t        SQZencod:SQZencod,\n\t        DIFDUPencod:DIFDUPencod,\n\t        DIFencod:DIFDUPencod\n\t    };\n\t\n\t})();\n\t\n\tmodule.exports = Encoder;\n\t\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar SD = __webpack_require__(1);\n\tvar PeakPicking = __webpack_require__(9);\n\tvar JcampConverter=__webpack_require__(3);\n\tvar fft = __webpack_require__(40);\n\tvar Filters = __webpack_require__(43);\n\t\n\t/**\n\t * Construct the object from the given sd object(output of the jcampconverter or brukerconverter filter)\n\t * @param sd\n\t * @constructor\n\t */\n\tfunction NMR(sd) {\n\t    SD.call(this, sd); // Héritage\n\t}\n\t\n\tNMR.prototype = Object.create(SD.prototype);\n\tNMR.prototype.constructor = NMR;\n\t\n\t/**\n\t * @function fromJcamp(jcamp,options)\n\t * Construct the object from the given jcamp.\n\t * @param jcamp\n\t * @param options\n\t * @option xy\n\t * @option keepSpectra\n\t * @option keepRecordsRegExp\n\t * @returns {NMR}\n\t */\n\tNMR.fromJcamp = function(jcamp,options) {\n\t    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new NMR(spectrum);\n\t}\n\t\n\t/**\n\t * @function getNucleus(dim)\n\t * Returns the observed nucleus. A dimension parameter is accepted for compatibility with 2DNMR\n\t * @param dim\n\t * @returns {*}\n\t */\n\tNMR.prototype.getNucleus=function(dim){\n\t    if(!dim||dim==0||dim==1)\n\t        return this.sd.xType;\n\t    else{\n\t        return \"\";\n\t    }\n\t}\n\t\n\t/**\n\t * @function getSolventName()\n\t * Returns the solvent name.\n\t * @returns {string|XML}\n\t */\n\tNMR.prototype.getSolventName=function(){\n\t    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]||\"\").replace(\"<\",\"\").replace(\">\",\"\");\n\t}\n\t\n\t/**\n\t * @function observeFrequencyX()\n\t * Returns the observe frequency in the direct dimension\n\t * @returns {number}\n\t */\n\tNMR.prototype.observeFrequencyX=function(){\n\t    return this.sd.spectra[0].observeFrequency;\n\t}\n\t\n\t/**\n\t * @function getNMRPeakThreshold(nucleus)\n\t * Returns the noise factor depending on the nucleus.\n\t * @param nucleus\n\t * @returns {number}\n\t */\n\tNMR.prototype.getNMRPeakThreshold=function(nucleus) {\n\t    if (nucleus == \"1H\")\n\t        return 3.0;\n\t    if (nucleus ==\"13C\")\n\t        return 5.0;\n\t    return 1.0;\n\t}\n\t\n\t\n\t    \n\t/**\n\t * @function addNoise(SNR)\n\t * This function adds white noise to the the given spectraData. The intensity of the noise is \n\t * calculated from the given signal to noise ratio.\n\t * @param SNR Signal to noise ratio\n\t * @returns this object\n\t */\n\t NMR.prototype.addNoise=function(SNR) {\n\t     //@TODO Implement addNoise filter\n\t}\n\t\n\t\n\t/**\n\t * @function addSpectraDatas(spec2,factor1,factor2,autoscale )   \n\t *  This filter performs a linear combination of two spectraDatas.\n\t * A=spec1\n\t * B=spec2\n\t * After to apply this filter you will get:\n\t *      A=A*factor1+B*factor2\n\t * if autoscale is set to 'true' then you will obtain:\n\t *  A=A*factor1+B*k*factor2\n\t * Where the k is a factor such that the maximum peak in A is equal to the maximum peak in spectraData2 \n\t * @param spec2 spectraData2\n\t * @param factor1 linear factor for spec1\n\t * @param factor2 linear factor for spec2\n\t * @param autoscale Auto-adjust scales before combine the spectraDatas\n\t * @returns this object\n\t * @example spec1 = addSpectraDatas(spec1,spec2,1,-1, false) This subtract spec2 from spec1\n\t*/\n\tNMR.prototype.addSpectraDatas=function(spec2,factor1,factor2,autoscale ) {\n\t    //@TODO Implement addSpectraDatas filter\n\t\n\t}\n\t\n\t/**\n\t * @function autoBaseline()\n\t * Automatically corrects the base line of a given spectraData. After this process the spectraData\n\t * should have meaningful integrals.\n\t * @returns this object\n\t */\n\tNMR.prototype.autoBaseline=function( ) {\n\t    //@TODO Implement autoBaseline filter\n\t}\n\t\n\t/**\n\t * @function fourierTransform()\n\t * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n\t * @returns this object\n\t */\n\tNMR.prototype.fourierTransform=function( ) {\n\t    return Filters.fourierTransform(this);\n\t}\n\t\n\t/**\n\t * @function postFourierTransform(ph1corr)\n\t * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained \n\t * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra \n\t * filter could not find the correct number of points to perform a circular shift.\n\t * The actual problem is that not all of the spectra has the necessary parameters for use only one method for \n\t * correcting the problem of the Bruker digital filters.\n\t * @param spectraData A fourier transformed spectraData.\n\t * @param ph1corr Phase 1 correction value in radians.\n\t * @returns this object\n\t */\n\tNMR.prototype.postFourierTransform=function(ph1corr) {\n\t    return Filters.phaseCorrection(0,ph1corr);\n\t}\n\t\n\t/**\n\t * @function zeroFilling(nPointsX [,nPointsY])\n\t * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one \n\t * could increase artificially the spectral resolution.\n\t * @param nPointsX Number of new zero points in the direct dimension\n\t * @param nPointsY Number of new zero points in the indirect dimension\n\t * @returns this object\n\t */\n\tNMR.prototype.zeroFilling=function(nPointsX, nPointsY) {\n\t    return Filters.zeroFilling(this,nPointsX, nPointsY);\n\t}\n\t\n\t/**\n\t * @function  haarWhittakerBaselineCorrection(waveletScale,whittakerLambda)\n\t * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n\t * The needed parameters are the wavelet scale and the lambda used in the whittaker smoother.\n\t * @param waveletScale To be described\n\t * @param whittakerLambda To be described\n\t * @returns this object\n\t */\n\tNMR.prototype.haarWhittakerBaselineCorrection=function(waveletScale,whittakerLambda) {\n\t    //@TODO Implement haarWhittakerBaselineCorrection filter\n\t}\n\t\n\t/**\n\t * @function whittakerBaselineCorrection(whittakerLambda,ranges)\n\t * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n\t * The needed parameters are the Wavelet scale and the lambda used in the Whittaker smoother.\n\t * @param waveletScale To be described\n\t * @param whittakerLambda To be described\n\t * @param ranges A string containing the ranges of no signal.\n\t * @returns this object\n\t */\n\tNMR.prototype.whittakerBaselineCorrection=function(whittakerLambda,ranges) {\n\t    //@TODO Implement whittakerBaselineCorrection filter\n\t}\n\t\n\t/**\n\t * @function brukerFilter()\n\t * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that \n\t * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the \n\t * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n\t * @returns this object\n\t */\n\tNMR.prototype.brukerFilter=function() {\n\t    return Filters.digitalFilter(this, {\"brukerFilter\":true});\n\t}\n\t\n\t/**\n\t * @function digitalFilter(options)\n\t * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that\n\t * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the\n\t * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n\t * @option nbPoints: The number of points to shift. Positive values will shift the values to the rigth\n\t * and negative values will do to the left.\n\t * @option brukerSpectra\n\t * @returns this object\n\t */\n\tNMR.prototype.digitalFilter=function(options) {\n\t    return Filters.digitalFilter(this, options);\n\t}\n\t\n\t/**\n\t * @function apodization(functionName, lineBroadening)\n\t * Apodization of a spectraData object.\n\t * @param spectraData An spectraData of type NMR_FID\n\t * @param functionName Valid values for functionsName are\n\t *  Exponential, exp\n\t *  Hamming, hamming\n\t *  Gaussian, gauss\n\t *  TRAF, traf\n\t *  Sine Bell, sb\n\t *  Sine Bell Squared, sb2\n\t * @param lineBroadening The parameter LB should either be a line broadening factor in Hz \n\t * or alternatively an angle given by degrees for sine bell functions and the like.\n\t * @returns this object\n\t * @example SD.apodization(\"exp\", lineBroadening)\n\t */\n\tNMR.prototype.apodization=function(functionName, lineBroadening) {\n\t    return Filters.apodization(this,{\"functionName\":functionName,\n\t                            \"lineBroadening\":lineBroadening});\n\t\n\t}\n\t\n\t/**\n\t * @function echoAntiechoFilter();\n\t * That decodes an Echo-Antiecho 2D spectrum.\n\t * @returns this object\n\t */\n\tNMR.prototype.echoAntiechoFilter=function() {\n\t    //@TODO Implement echoAntiechoFilter filter\n\t}\n\t\n\t/**\n\t * @function SNVFilter()\n\t * This function apply a Standard Normal Variate Transformation over the given spectraData. Mainly used for IR spectra.\n\t * @returns this object\n\t */\n\tNMR.prototype.SNVFilter=function() {\n\t    //@TODO Implement SNVFilter\n\t}\n\t\n\t/**\n\t * @function powerFilter(power)\n\t * This function applies a power to all the Y values.<br>If the power is less than 1 and the spectrum has negative values, it will be shifted so that the lowest value is zero \n\t * @param   power   The power to apply\n\t * @returns this object\n\t */\n\tNMR.prototype.powerFilter=function(power) {\n\t    var minY=this.getMinY();\n\t    if(power<1 && minY<0){\n\t        this.YShift(-1*minY);\n\t        console.warn(\"SD.powerFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n\t    }\n\t    //@TODO Implement powerFilter\n\t}\n\t\n\t/**\n\t * @function logarithmFilter(base)\n\t * This function applies a log to all the Y values.<br>If the spectrum has negative or zero values, it will be shifted so that the lowest value is 1 \n\t * @param   base    The base to use\n\t * @returns this object\n\t */\n\tNMR.prototype.logarithmFilter=function(base) {\n\t    var minY=this.getMinY();\n\t    if(minY<=0){\n\t        this.YShift((-1*minY)+1);\n\t        console.warn(\"SD.logarithmFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n\t    }\n\t   //@TODO Implement logarithmFilter filter\n\t}\n\t\n\t\n\t/**\n\t * @function correlationFilter(func) \n\t * This function correlates the given spectraData with the given vector func. The correlation\n\t * operation (*) is defined as:\n\t * \n\t *                    __ inf\n\t *  c(x)=f(x)(*)g(x)= \\        f(x)*g(x+i)\n\t *                   ./    \n\t *                    -- i=-inf\n\t * @param func A double array containing the function to correlates the spectraData\n\t * @returns this object\n\t * @example var smoothedSP = SD.correlationFilter(spectraData,[1,1]) returns a smoothed version of the\n\t * given spectraData. \n\t */\n\tNMR.prototype.correlationFilter=function(func) {\n\t    //@TODO Implement correlationFilter filter\n\t}\n\t\n\t/**\n\t * @function  phaseCorrection(phi0, phi1)\n\t * Applies the phase correction (phi0,phi1) to a Fourier transformed spectraData. The angles must be given in radians.\n\t * @param phi0 Zero order phase correction\n\t * @param phi1 One order phase correction\n\t * @returns this object\n\t*/\n\tNMR.prototype.phaseCorrection=function(phi0, phi1) {\n\t    return Filters.phaseCorrection(this, phi0, phi1);\n\t}\n\t\n\t/**\n\t * @function automaticPhase() \n\t * This function determines automatically the correct parameters phi0 and phi1 for a phaseCorrection\n\t * function and applies it.\n\t * @returns this object\n\t */ \n\tNMR.prototype.automaticPhase=function() {\n\t    //@TODO Implement automaticPhase filter\n\t}\n\t\n\t\n\t/**\n\t * @function nmrPeakDetection(parameters);\n\t * This function process the given spectraData and tries to determine the NMR signals. Returns an NMRSignal1D array containing all the detected 1D-NMR Signals\n\t * @param parameters A JSONObject containing the optional parameters:\n\t * @option fromX:   Lower limit.\n\t * @option toX:     Upper limit.\n\t * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n\t * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n\t * @returns {*}\n\t */\n\tNMR.prototype.nmrPeakDetection=function(parameters) {\n\t    return PeakPicking.peakPicking(this, parameters);\n\t}\n\t\n\t\n\t\n\tmodule.exports = NMR;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Implementation of the peak pickig method described by Cobas in:\n\t * A new approach to improving automated analysis of proton NMR spectra\n\t * through Global Spectral Deconvolution (GSD)\n\t * http://www.spectroscopyeurope.com/images/stories/ColumnPDFs/TD_23_1.pdf\n\t */\n\tvar JAnalyzer = __webpack_require__(10);\n\t/*var LM = require('ml-curve-fitting');\n\tvar Matrix = LM.Matrix;\n\tvar math = Matrix.algebra;*/\n\tvar GSD = __webpack_require__(11);\n\tvar extend = __webpack_require__(7);\n\tvar removeImpurities = __webpack_require__(39);\n\t\n\tvar PeakPicking={\n\t    impurities:[],\n\t    maxJ:20,\n\t    defaultOptions:{nH:99,\n\t        clean:true,\n\t        realTop:false,\n\t        thresholdFactor:1,\n\t        compile:true,\n\t        integralFn:0,\n\t        optimize:true,\n\t        idPrefix:\"\",\n\t        format:\"old\"\n\t    },\n\t\n\t    peakPicking:function(spectrum, optionsEx){\n\t        var options = extend({}, this.defaultOptions, optionsEx);\n\t        var i, j, nHi, sum;\n\t\n\t        var noiseLevel = Math.abs(spectrum.getNoiseLevel())*(options.thresholdFactor);\n\t\n\t        //console.log(\"noiseLevel \"+noiseLevel);\n\t        var gsdOptions = extend({},\n\t            {noiseLevel: noiseLevel,\n\t                minMaxRatio:0.01,\n\t                broadRatio:0.0025,\n\t                smoothY:true,\n\t                nL:4,\n\t                sgOptions:{windowSize: 9, polynomial: 3}\n\t            },\n\t            options.gsdOptions);\n\t\n\t        var data = spectrum.getXYData();\n\t        var peakList = GSD.gsd(data[0],data[1], gsdOptions);\n\t        var peakList = GSD.post.joinBroadPeaks(peakList,{width:0.25});\n\t        if(options.optimize)\n\t            peakList = GSD.post.optimizePeaks(peakList,data[0],data[1],gsdOptions.nL,\"lorentzian\");\n\t\n\t        peakList = this.clearList(peakList, noiseLevel);\n\t        var signals = this.detectSignals(peakList, spectrum, options.nH, options.integralFn);\n\t        //console.log(JSON.stringify(signals));\n\t        //Remove all the signals with small integral\n\t        if(options.clean||false){\n\t            for(var i=signals.length-1;i>=0;i--){\n\t                if(signals[i].integralData.value<0.5) {\n\t                    signals.splice(i, 1);\n\t                }\n\t            }\n\t        }\n\t        if(options.compile||false){\n\t            for(i=0;i<signals.length;i++){\n\t                //console.log(\"Sum \"+signals[i].integralData.value);\n\t                JAnalyzer.compilePattern(signals[i]);\n\t                //console.log(signals[i])\n\t                if(signals[i].maskPattern&&signals[i].multiplicity!=\"m\"\n\t                    && signals[i].multiplicity!=\"\"){\n\t                    //Create a new signal with the removed peaks\n\t                    nHi = 0;\n\t                    sum=0;\n\t                    var peaksO = [];\n\t                    for(j=signals[i].maskPattern.length-1;j>=0;j--){\n\t                        sum+=this.area(signals[i].peaks[j]);\n\t\n\t                        if(signals[i].maskPattern[j]===false) {\n\t                            var peakR = signals[i].peaks.splice(j,1)[0];\n\t                            peaksO.push({x:peakR.x, y:peakR.intensity, width:peakR.width});\n\t                            //peaksO.push(peakR);\n\t                            signals[i].mask.splice(j,1);\n\t                            signals[i].mask2.splice(j,1);\n\t                            signals[i].maskPattern.splice(j,1);\n\t                            signals[i].nbPeaks--;\n\t                            nHi+=this.area(peakR);\n\t                        }\n\t                    }\n\t                    if(peaksO.length>0){\n\t                        nHi=nHi*signals[i].integralData.value/sum;\n\t                        signals[i].integralData.value-=nHi;\n\t                        var peaks1 = [];\n\t                        for(var j=peaksO.length-1;j>=0;j--)\n\t                            peaks1.push(peaksO[j]);\n\t                        var newSignals = this.detectSignals(peaks1, spectrum, nHi, options.integralFn);\n\t\n\t                        for(j=0;j<newSignals.length;j++)\n\t                            signals.push(newSignals[j]);\n\t                    }\n\t                }\n\t            }\n\t            //console.log(signals);\n\t            this.updateIntegrals(signals, options.nH);\n\t        }\n\t        signals.sort(function(a,b){\n\t            return b.delta1- a.delta1\n\t        });\n\t        //Remove all the signals with small integral\n\t        if(options.clean||false){\n\t            for(var i=signals.length-1;i>=0;i--){\n\t                //console.log(signals[i]);\n\t                if(signals[i].integralData.value<0.5) {\n\t                    signals.splice(i, 1);\n\t                }\n\t            }\n\t        }\n\t\n\t        for(var i=0;i<signals.length;i++){\n\t            if(options.idPrefix&&options.idPrefix.length>0)\n\t                signals[i].signalID = options.idPrefix+\"_\"+(i+1);\n\t            else\n\t                signals[i].signalID = (i+1)+\"\";\n\t            signals[i]._highlight=[signals[i].signalID];\n\t        }\n\t\n\t        removeImpurities(signals, spectrum.getSolventName(),options.nH);\n\t\n\t        if(options.format===\"new\"){\n\t            var newSignals = new Array(signals.length);\n\t            for(var i=0;i<signals.length;i++){\n\t                var signal = signals[i];\n\t                newSignals[i] = {\n\t                    from : signal.integralData.from,\n\t                    to : signal.integralData.to,\n\t                    integral : signal.integralData.value,\n\t                    signal:[{\n\t                        delta:signal.delta1,\n\t                        nbAtoms:0,\n\t                        diaID:[],\n\t                        multiplicity:signal.multiplicity,\n\t                        peak:signal.peaks,\n\t                        kind:\"\",\n\t                        remark:\"\"\n\t                    }],\n\t                    signalID:signal.signalID,\n\t                    _highlight:signal._highlight\n\t\n\t                };\n\t                if(signal.nmrJs){\n\t                    newSignals[i].signal[0].j = signal.nmrJs;\n\t                }\n\t            }\n\t            signals = newSignals;\n\t        }\n\t\n\t        return signals;\n\t\n\t\n\t        /*var frequency = spectrum.observeFrequencyX();//getParamDouble(\"$BF1\",400);\n\t        var imp = this.labelPeaks(peakList, solvent, frequency);\n\t        return [peakList,imp];\n\t        */\n\t        //return createSignals(peakList,nH);\n\t    },\n\t\n\t    clearList:function(peakList, threshold){\n\t        for(var i=peakList.length-1;i>=0;i--){\n\t            if(Math.abs(peakList[i].y)<threshold){\n\t                peakList.splice(i,1);\n\t            }\n\t        }\n\t        return peakList;\n\t    },\n\t\n\t\n\t    /**\n\t     * This method implements a non linear sampling of the spectrum. The point close to\n\t     * the critic points are more sampled than the other ones.\n\t     * @param spectrum\n\t     * @param peaks\n\t     * @param rowWise\n\t     */\n\t    sampling: function(spectrum, peaks, rowWise){\n\t        var i0, ie, ic,i, j,nbPoints;\n\t        var xy = []\n\t        if(i0>ie){\n\t            var tmp = i0;\n\t            i0 = ie;\n\t            ie = tmp;\n\t        }\n\t        //Non linear sampling for each peak.\n\t        for(i=0;i<peaks.length;i++){\n\t            var more = true;\n\t            var nL = 4;\n\t            while(more) {\n\t                i0 = spectrum.unitsToArrayPoint(peaks[i][0] - peaks[i][2] * nL);\n\t                ie = spectrum.unitsToArrayPoint(peaks[i][0] + peaks[i][2] * nL);\n\t                ic = spectrum.unitsToArrayPoint(peaks[i][0]);\n\t                if (i0 > ie) {\n\t                    tmp = i0;\n\t                    i0 = ie;\n\t                    ie = tmp;\n\t                }\n\t                i0 = i0 < 0 ? 0 : i0;\n\t                ie = ie >= spectrum.getNbPoints() ? spectrum.getNbPoints() - 1 : ie;\n\t\n\t                if (ie - i0 < 10) {\n\t                    for (j = i0; j <= ie; j++) {\n\t                        xy.push([spectrum.getX(j), spectrum.getY(j)]);\n\t                    }\n\t                    more = false;\n\t                }\n\t                else {\n\t                    xy.push([spectrum.getX(i0), spectrum.getY(i0)]);\n\t                    xy.push([spectrum.getX(ie), spectrum.getY(ie)]);\n\t                    if (nL > 0.5) {\n\t                        nL -= 0.5;\n\t                    }\n\t                    else {\n\t                        nL /= 2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        //console.log(xy);\n\t        xy.sort(function(a,b){\n\t            return a[0]-b[0];\n\t        });\n\t        //console.log(\"XX \"+xy.length);\n\t        var x=[],y=[];\n\t        var index =0;\n\t        if(rowWise){\n\t            x=[xy[0][0]],y=[xy[0][1]];\n\t            for(i=1;i<xy.length;i++){\n\t                if(x[index]!=xy[i][0]){\n\t                    x.push(xy[i][0]);\n\t                    y.push(xy[i][1]);\n\t                    index++;\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            x=[[xy[0][0]]],y=[[xy[0][1]]];\n\t            for(i=1;i<xy.length;i++){\n\t                if(x[index][0]!=xy[i][0]){\n\t                    x.push([xy[i][0]]);\n\t                    y.push([xy[i][1]]);\n\t                    index++;\n\t                }\n\t            }\n\t        }\n\t        return [x,y];\n\t\n\t    },\n\t\n\t    getVector: function(spectrum, from, to, rowWise){\n\t        var i0 = spectrum.unitsToArrayPoint(from);\n\t        var ie = spectrum.unitsToArrayPoint(to);\n\t        var x = [];\n\t        var y = [];\n\t        if(i0>ie){\n\t            var tmp = i0;\n\t            i0 = ie;\n\t            ie = tmp;\n\t        }\n\t        i0=i0<0?0:i0;\n\t        ie=ie>=spectrum.getNbPoints()?spectrum.getNbPoints()-1:ie;\n\t        for(var i=i0;i<ie;i+=10){\n\t            if(rowWise){\n\t                y.push(spectrum.getY(i));\n\t                x.push(spectrum.getX(i));\n\t            }\n\t            else{\n\t                y.push([spectrum.getY(i)]);\n\t                x.push([spectrum.getX(i)]);\n\t            }\n\t        }\n\t        return [x,y];\n\t    },\n\t\n\t\n\t\n\t    updateLimits : function(signal){\n\t        if(signal.multiplicity!=\"m\" && signal.multiplicity!=\"\"){\n\t            //Remove the integral of the removed peaks\n\t            var peaksO = signal.peaks;\n\t            var nbPeaks0 = peaksO.length, index = 0, factor = 0, toRemove = 0;\n\t\n\t            for(var i=0;i<nbPeaks0;i++){\n\t                if(signal.maskPattern[i]===false)\n\t                    toRemove+=this.area(peaksO[i]);\n\t                factor+= this.area(peaksO[i]);\n\t            }\n\t            factor=signal.integralData.value/factor;\n\t            signal.integralData.value-=toRemove*factor;\n\t        }\n\t        return signal.integralData.value;\n\t    },\n\t\n\t    updateIntegrals : function(signals, nH){\n\t        var sumIntegral = 0,i,sumObserved=0;\n\t        for(i=0;i<signals.length;i++){\n\t            sumObserved+=Math.round(signals[i].integralData.value);\n\t        }\n\t        if(sumObserved!=nH){\n\t\n\t            sumIntegral=nH/sumObserved;\n\t            for(i=0;i<signals.length;i++){\n\t                signals[i].integralData.value*=sumIntegral;\n\t            }\n\t        }\n\t    },\n\t\n\t    /*\n\t     {\n\t     \"nbPeaks\":1,\"multiplicity\":\"\",\"units\":\"PPM\",\"startX\":3.43505,\"assignment\":\"\",\n\t     \"pattern\":\"s\",\"stopX\":3.42282,\"observe\":400.08,\"asymmetric\":false,\n\t     \"delta1\":3.42752,\n\t     \"integralData\":{\"to\":3.43505,\"value\":590586504,\"from\":3.42282},\n\t     \"nucleus\":\"1H\",\n\t     \"peaks\":[{\"intensity\":60066147,\"x\":3.42752}]\n\t     }\n\t     */\n\t    detectSignals: function(peakList, spectrum, nH, integralType){\n\t\n\t        var frequency = spectrum.observeFrequencyX();\n\t        var signals = [];\n\t        var signal1D = {};\n\t        var prevPeak = {x:100000,y:0,width:0},peaks=null;\n\t        var rangeX = 16/frequency;//Peaks withing this range are considered to belongs to the same signal1D\n\t        var spectrumIntegral = 0,cs,sum, i,j;\n\t        //console.log(\"RangeX \"+rangeX);\n\t        for(i=0;i<peakList.length;i++){\n\t            //console.log(peakList[i]);\n\t            if(Math.abs(peakList[i].x-prevPeak.x)>rangeX){\n\t                //console.log(typeof peakList[i].x+\" \"+typeof peakList[i].width);\n\t                signal1D = {\"nbPeaks\":1,\"units\":\"PPM\",\n\t                    \"startX\":peakList[i].x+peakList[i].width,\n\t                    \"stopX\":peakList[i].x-peakList[i].width,\n\t                    \"multiplicity\":\"\",\"pattern\":\"\",\n\t                    \"observe\":frequency,\"nucleus\":\"1H\",\n\t                    \"integralData\":{\"from\":peakList[i].x-peakList[i].width*3,\n\t                                    \"to\":peakList[i].x+peakList[i].width*3\n\t                                    //\"value\":this.area(peakList[i])\n\t                    },\n\t                    \"peaks\":[]};\n\t                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n\t                signals.push(signal1D);\n\t                //spectrumIntegral+=this.area(peakList[i]);\n\t            }\n\t            else{\n\t                var tmp = peakList[i].x-peakList[i].width;\n\t                signal1D.stopX = Math.min(signal1D.stopX,tmp);\n\t                tmp = peakList[i].x+peakList[i].width;\n\t                signal1D.stopX = Math.max(signal1D.stopX,tmp);\n\t                signal1D.nbPeaks++;\n\t                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n\t                //signal1D.integralData.value+=this.area(peakList[i]);\n\t                signal1D.integralData.from = Math.min(signal1D.integralData.from, peakList[i].x-peakList[i].width*3);\n\t                signal1D.integralData.to = Math.max(signal1D.integralData.to,peakList[i].x+peakList[i].width*3);\n\t                //spectrumIntegral+=this.area(peakList[i]);\n\t            }\n\t            prevPeak = peakList[i];\n\t        }\n\t        //Normalize the integral to the normalization parameter and calculate cs\n\t        for(i=0;i<signals.length;i++){\n\t            peaks = signals[i].peaks;\n\t            var integral = signals[i].integralData;\n\t            cs = 0;\n\t            sum = 0;\n\t\n\t            for(var j=0;j<peaks.length;j++){\n\t                cs+=peaks[j].x*this.area(peaks[j]);//.intensity;\n\t                sum+=this.area(peaks[j]);\n\t            }\n\t            signals[i].delta1 = cs/sum;\n\t\n\t            if(integralType==0)\n\t                integral.value = sum;\n\t            else {\n\t                integral.value=spectrum.getArea(integral.from,integral.to);//*nH/spectrumIntegral;\n\t            }\n\t            spectrumIntegral+=integral.value;\n\t\n\t        }\n\t        for(var i=0;i<signals.length;i++){\n\t            //console.log(integral.value);\n\t            var integral = signals[i].integralData;\n\t            integral.value*=nH/spectrumIntegral;\n\t        }\n\t\n\t        return signals;\n\t    },\n\t\n\t    area: function(peak){\n\t        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n\t    },\n\t\n\t    /**\n\t     Updates the score that a given impurity is present in the current spectrum. In this part I would expect\n\t     to have into account the multiplicity of the signal. Also the relative intensity of the signals.\n\t     THIS IS the KEY part of the algorithm!!!!!!!!!\n\t     */\n\t    updateScore:function(candidates, peakList, maxIntensity, frequency){\n\t        //You may do it to avoid this part.\n\t        //return 1;\n\t\n\t        //Check the multiplicity\n\t        var mul = \"\";\n\t        var j = 0,index, k, maxJppm=this.maxJ/frequency;\n\t        var min=0, indexMin=0, score=0;\n\t        for(var i=candidates.length-1;i>=0;i--){\n\t            mul = candidates[i][1];\n\t            j = candidates[i][2];\n\t            //console.log(candidates[i][4]);\n\t            index = candidates[i][4][0];\n\t            //console.log(peakList[index][0]+\" \"+mul+\" \"+j+\" \"+index);\n\t            //I guess we should try to identify the pattern in the nearby.\n\t            if(mul.indexOf(\"sep\")>=0){\n\t                if(peakList[index][1]>maxIntensity*0.33){\n\t                    candidates.splice(i,1);//Not a candidate anymore.\n\t                }\n\t            }else{\n\t                if(mul.indexOf(\"s\")>=0||mul.indexOf(\"X\")>=0){\n\t                    k=index-1;\n\t                    min=peakList[index][1];\n\t                    indexMin=index;\n\t                    while(k>=0&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n\t                        if(peakList[k][1]<min){\n\t                            min=peakList[k][1];\n\t                            indexMin=k;\n\t                        }\n\t                        k--;\n\t                    }\n\t                    k=index+1;\n\t                    while(k<peakList.length&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n\t                        if(peakList[k][1]<min){\n\t                            min=peakList[k][1];\n\t                            indexMin=k;\n\t                        }\n\t                        k++;\n\t                    }\n\t                    candidates[i][4][0]=indexMin;\n\t                    score+=1;\n\t                }\n\t            }\n\t            if(mul.indexOf(\"d\")>=0){\n\t                if(index>0&&index<peakList.length-1){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index-1][0])*frequency-j);\n\t                    if(thisJ1<2||thisJ2<2||thisJ3<2){\n\t                        if(thisJ1<thisJ2){\n\t                            if(thisJ1<thisJ3){\n\t                                candidates[i][4]=[index-1,index];\n\t                                score+=1;\n\t                            }\n\t                            else{\n\t                                candidates[i][4]=[index-1,index+1];\n\t                                score+=1;\n\t                            }\n\t                        }\n\t                        else{\n\t                            if(thisJ2<thisJ3){\n\t                                candidates[i][4]=[index,index+1];\n\t                                score+=1;\n\t                            }\n\t                            else{\n\t                                candidates[i][4]=[index-1,index+1];\n\t                                score+=1;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            if(mul.indexOf(\"t\")>=0){\n\t                //console.log(\"here\");\n\t                if(index>0&&index<peakList.length-1){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ4 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index+2][0])*frequency-j);\n\t                    //console.log(\"XX \"+thisJ1+\" \"+thisJ2);\n\t                    if(thisJ1<2){\n\t                        candidates[i][4]=[index-1, index];\n\t                        score+=0.5;\n\t                    }\n\t                    if(thisJ2<2){\n\t                        candidates[i][4].push(index+1);\n\t                        score+=0.5;\n\t                    }\n\t                    if(thisJ3<2){\n\t                        candidates[i][4].push(index+2);\n\t                        score+=0.5;\n\t                    }\n\t\n\t                }\n\t            }\n\t            if(mul.indexOf(\"q\")>=0){\n\t                if(index>1&&index<peakList.length-2){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-2][0]-peakList[index-1][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ4= Math.abs(Math.abs(peakList[index+2][0]-peakList[index+1][0])*frequency-j);\n\t                    if(thisJ1<2){\n\t                        candidates[i][4].push(index-2);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ2<2){\n\t                        candidates[i][4].push(index-1);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ3<2){\n\t                        candidates[i][4].push(index+1);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ4<2){\n\t                        candidates[i][4].push(index+2);\n\t                        score+=0.25;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        //console.log(score/candidates.length+ \" -> \"+candidates);\n\t        //Lets remove the candidates to be impurities.\n\t        //It would be equivalent to mark the peaks as valid again\n\t        if(score/candidates.length < 0.5){\n\t            for(var i=candidates.length-1;i>=0;i--){\n\t                candidates.splice(i,1);\n\t            }\n\t            return 0;\n\t        }\n\t        //Check the relative intensity\n\t        return 1;\n\t    },\n\t\n\t    score:function(value, gamma){\n\t        return Math.exp(-Math.pow(value/gamma,2)/2.0);\n\t    }\n\t\n\t}\n\t\n\tmodule.exports = PeakPicking;\n\t\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * This library implements the J analyser described by Cobas et al in the paper:\n\t * A two-stage approach to automatic determination of 1H NMR coupling constants\n\t * Created by acastillo on 4/5/15.\n\t */\n\tvar JAnalyzer = {\n\t    pascalTriangle : [[0],[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]],\n\t    patterns: [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"],\n\t    symRatio : 1.5,\n\t    maxErrorIter1 : 2.5,//Hz\n\t    maxErrorIter2 : 1,//Hz\n\t    DEBUG : false,\n\t\n\t    /**\n\t     * The compilation process implements at the first stage a normalization procedure described by Golotvin et al.\n\t     * embedding in peak-component-counting method described by Hoyes et al.\n\t     * @param signal\n\t     */\n\t    compilePattern : function(signal){\n\t        if(this.DEBUG)console.log(\"Debugin...\");\n\t\n\t        signal.multiplicity=\"m\";//By default the multiplicity is massive\n\t        // 1.1 symmetrize\n\t        // It will add a set of peaks(signal.peaksComp) to the signal that will be used during\n\t        // the compilation process. The unit of those peaks will be in Hz\n\t        signal.symRank = this.symmetrizeChoiseBest(signal,this.maxErrorIter1,1);\n\t        signal.asymmetric = true;\n\t       // console.log(signal.delta1+\" \"+signal.symRank);\n\t        //Is the signal symmetric?\n\t        if(signal.symRank>=0.95&&signal.peaksComp.length<32){\n\t            if(this.DEBUG)console.log(signal.delta1+ \" nbPeaks \"+signal.peaksComp.length);\n\t            signal.asymmetric = false;\n\t            var i,j,n,k=1,P1,Jc=[],n2,maxFlagged;\n\t            //Loop over the possible number of coupling contributing to the multiplet\n\t            for(n=0;n<9;n++){\n\t                if(this.DEBUG)console.log(\"Trying \"+n+\" couplings\");\n\t                //1.2 Normalize. It makes a deep copy of the peaks before to modify them.\n\t                var peaks = this.normalize(signal,n);\n\t                //signal.peaksCompX = peaks;\n\t                var validPattern = false;//It will change to true, when we find the good patter\n\t                //Lets check if the signal could be a singulet.\n\t                if(peaks.length == 1 && n === 0){\n\t                    validPattern=true;\n\t                }\n\t                else{\n\t                    if(peaks.length <= 1){\n\t                        continue;\n\t                    }\n\t                }\n\t                // 1.3 Establish a range for the Heights Hi [peaks.intensity*0.85,peaks.intensity*1.15];\n\t                var ranges = this.getRanges(peaks);\n\t                n2 = Math.pow(2,n);\n\t\n\t                if(this.DEBUG){\n\t                    console.log(\"ranges: \"+JSON.stringify(ranges));\n\t                    console.log(\"Target sum: \"+n2);\n\t                }\n\t\n\t                // 1.4 Find a combination of integer heights Hi, one from each Si, that sums to 2^n.\n\t                var heights = null;\n\t                while(!validPattern&&(heights = this.getNextCombination(ranges, n2))!==null){\n\t\n\t                    if(this.DEBUG){\n\t                        console.log(\"Possible pattern found with \"+n+\" couplings!!!\");\n\t                        console.log(heights);\n\t                    }\n\t                    // 2.1 Number the components of the multiplet consecutively from 1 to 2n,\n\t                    //starting at peak 1\n\t                    var numbering = new Array(heights.length);\n\t                    k=1;\n\t                    for(i=0;i<heights.length;i++){\n\t                        numbering[i]=new Array(heights[i]);\n\t                        for(j=0;j<heights[i];j++){\n\t                            numbering[i][j]=k++;\n\t                        }\n\t                    }\n\t                    if(this.DEBUG){\n\t                        console.log(\"Numbering: \"+JSON.stringify(numbering));\n\t                    }\n\t                    Jc = []; //The array to store the detected j-coupling\n\t                    // 2.2 Set j = 1; J1 = P2 - P1. Flag components 1 and 2 as accounted for.\n\t                    j=1;\n\t                    Jc.push(peaks[1].x-peaks[0].x);\n\t                    P1 = peaks[0].x;\n\t                    numbering[0].splice(0,1);//Flagged\n\t                    numbering[1].splice(0,1);//Flagged\n\t                    k=1;\n\t                    var nFlagged = 2;\n\t                    maxFlagged = Math.pow(2,n)-1;\n\t                    while(Jc.length<n&&nFlagged<maxFlagged&&k<peaks.length){\n\t                        if(this.DEBUG){\n\t                            console.log(\"New Jc\"+JSON.stringify(Jc));\n\t                            console.log(\"Aval. numbering \"+JSON.stringify(numbering));\n\t                        }\n\t                        // 4.1. Increment j. Set k to the number of the first unflagged component.\n\t                        j++;\n\t                        while(k<peaks.length&&numbering[k].length===0){\n\t                            k++;\n\t                        }\n\t                        if(k<peaks.length){\n\t                            // 4.2 Jj = Pk - P1.\n\t                            Jc.push(peaks[k].x-peaks[0].x);\n\t                            //Flag component k and, for each sum of the...\n\t                            numbering[k].splice(0,1);//Flageed\n\t                            nFlagged++;\n\t                            //Flag the other components of the multiplet\n\t                            for(var u=2;u<=j;u++){\n\t                                //TODO improve those loops\n\t                                var jSum = 0;\n\t                                for(i=0;i<u;i++){\n\t                                    jSum+=Jc[i];\n\t                                }\n\t                                for(i=1;i<numbering.length;i++){\n\t                                    //Maybe 0.25 Hz is too much?\n\t                                    if(Math.abs(peaks[i].x-(P1+jSum))<0.25){\n\t                                        numbering[i].splice(0,1);//Flageed\n\t                                        nFlagged++;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                    //Calculate the ideal patter by using the extracted j-couplings\n\t                    var pattern = this.idealPattern(Jc);\n\t                    //Compare the ideal pattern with the proposed intensities.\n\t                    // All the intensities have to match to accept the multiplet\n\t                    validPattern = true;\n\t                    for(i=0;i<pattern.length;i++){\n\t                        if(pattern[i].intensity != heights[i])\n\t                            validPattern = false;\n\t                    }\n\t                    //More verbosity of the process\n\t                    if(this.DEBUG){\n\t                        console.log(\"Jc \"+JSON.stringify(Jc));\n\t                        console.log(\"Heights \"+JSON.stringify(heights));\n\t                        console.log(\"pattern \"+JSON.stringify(pattern));\n\t                        console.log(\"Valid? \"+validPattern);\n\t                    }\n\t                }\n\t                //If we found a valid pattern we should inform about the pattern.\n\t                if(validPattern){\n\t                    this.updateSignal(signal,Jc);\n\t                }\n\t            }\n\t        }\n\t\n\t        //Before to return, change the units of peaksComp from Hz to PPM again\n\t        for(i=0;i<signal.peaksComp.length;i++){\n\t            signal.peaksComp[i].x/=signal.observe;\n\t        }\n\t    },\n\t\n\t    updateSignal : function(signal, Jc){\n\t        //Update the limits of the signal\n\t        var peaks = signal.peaksComp;//Always in Hz\n\t        var nbPeaks = peaks.length;\n\t        signal.startX=peaks[0].x/signal.observe+peaks[0].width;\n\t        signal.stopX=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width;\n\t        signal.integralData.to=peaks[0].x/signal.observe+peaks[0].width*3;\n\t        signal.integralData.from=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width*3;\n\t\n\t        //Compile the pattern and format the constant couplings\n\t        signal.maskPattern = signal.mask2;\n\t        signal.multiplicity = this.abstractPattern(signal,Jc);\n\t        signal.pattern=signal.multiplicity;//Our library depends on this parameter, but it is old\n\t        //console.log(signal);\n\t        if(this.DEBUG)\n\t            console.log(\"Final j-couplings: \"+JSON.stringify(Jc));\n\t    },\n\t\n\t    /**\n\t     * Returns the multiplet in the compact format\n\t     */\n\t    abstractPattern : function(signal,Jc){\n\t        var tol = 0.05,i, pattern = \"\", cont = 1;\n\t        var newNmrJs = [];\n\t        if(Jc&&Jc.length>0){\n\t            Jc.sort(function(a,b){\n\t                return a-b;\n\t            });\n\t            for(i=0;i<Jc.length-1;i++){\n\t                if(Math.abs(Jc[i]-Jc[i+1])<tol){\n\t                    cont++;\n\t                }\n\t                else{\n\t                    newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n\t                    pattern+=this.patterns[cont];\n\t                    cont=1;\n\t                }\n\t            }\n\t            newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n\t            pattern+=this.patterns[cont];\n\t            signal.nmrJs =  newNmrJs;\n\t        }\n\t        else{\n\t            pattern=\"s\";\n\t            if(Math.abs(signal.startX-signal.stopX)*signal.observe>16){\n\t                pattern=\"br s\"\n\t            }\n\t        }\n\t        return pattern;\n\t    },\n\t\n\t    /**\n\t     *This function creates an ideal pattern from the given J-couplings\n\t     */\n\t    idealPattern : function(Jc){\n\t        var hsum = Math.pow(2,Jc.length),i,j;\n\t        var pattern = [{x:0,intensity:hsum}];\n\t        //To split the initial height\n\t        for(i=0;i<Jc.length;i++){\n\t            for(j=pattern.length-1;j>=0;j--){\n\t                pattern.push({x:pattern[j].x+Jc[i]/2,\n\t                    intensity:pattern[j].intensity/2});\n\t                pattern[j].x = pattern[j].x-Jc[i]/2;\n\t                pattern[j].intensity = pattern[j].intensity/2;\n\t            }\n\t        }\n\t        //To sum the heights in the same positions\n\t        pattern.sort(function compare(a,b) { return a.x-b.x});\n\t        for(j=pattern.length-2;j>=0;j--){\n\t            if(Math.abs(pattern[j].x-pattern[j+1].x)<0.1){\n\t                pattern[j].intensity+= pattern[j+1].intensity\n\t                pattern.splice(j+1,1);\n\t            }\n\t        }\n\t        return pattern;\n\t    },\n\t\n\t    /**\n\t     * Find a combination of integer heights Hi, one from each Si, that sums to 2n.\n\t     */\n\t    getNextCombination : function(ranges, value){\n\t        var half = Math.ceil(ranges.values.length/2), lng = ranges.values.length;\n\t        var sum = 0,i,ok;\n\t        while(sum!=value){\n\t            //Update the indexes to point at the next possible combination\n\t            ok = false;\n\t            var leftIndex = 0;\n\t            while(!ok){\n\t                ok = true;\n\t                ranges.currentIndex[ranges.active]++;\n\t                if(ranges.currentIndex[ranges.active]>=ranges.values[ranges.active].length){\n\t                    //In this case, there is no more possible combinations\n\t                    if(ranges.active+1==half){\n\t                        return null;\n\t                    }\n\t                    else{\n\t                        //If this happens we need to try the next active peak\n\t                        ranges.currentIndex[ranges.active]=0;\n\t                        ok=false;\n\t                        ranges.active++;\n\t                    }\n\t                }\n\t                else{\n\t                    ranges.active=0;\n\t                }\n\t            }\n\t            // Sum the heights for this combination\n\t            sum=0;\n\t            for(i=0;i<half;i++){\n\t                sum+= ranges.values[i][ranges.currentIndex[i]]*2;\n\t            }\n\t            if(ranges.values.length%2!==0){\n\t                sum-= ranges.values[half-1][ranges.currentIndex[half-1]];\n\t            }\n\t            if(this.DEBUG){\n\t                console.log(ranges.currentIndex);\n\t                console.log(sum+\" \"+value);\n\t            }\n\t        }\n\t        //If the sum is equal to the expected value, fill the array to return\n\t        if(sum==value){\n\t            var heights = new Array(lng);\n\t            for(i=0;i<half;i++){\n\t                heights[i] = ranges.values[i][ranges.currentIndex[i]];\n\t                heights[lng-i-1] = ranges.values[i][ranges.currentIndex[i]];\n\t            }\n\t            return heights;\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /**\n\t     * This function generates the possible values that each peak can contribute\n\t     * to the multiplet.\n\t     * @param peaks\n\t     * @returns {{values: Array, currentIndex: Array, active: number}}\n\t     */\n\t    getRanges : function(peaks){\n\t        var ranges = new Array(peaks.length);\n\t        var currentIndex = new Array(peaks.length);\n\t        var min,max;\n\t        ranges[0] = [1];\n\t        ranges[peaks.length-1] = [1];\n\t        currentIndex[0]=-1;\n\t        currentIndex[peaks.length-1] = 0;\n\t        for(var i=1;i<peaks.length-1;i++){\n\t            min = Math.round(peaks[i].intensity*0.85);\n\t            max = Math.round(peaks[i].intensity*1.15);\n\t            ranges[i] =[];\n\t            for(var j=min;j<=max;j++){\n\t                ranges[i].push(j);\n\t            }\n\t            currentIndex[i]=0;\n\t        }\n\t        return {values:ranges, currentIndex:currentIndex, active:0};\n\t    },\n\t    /**\n\t     * Performs a symmetrization of the signal by using different aproximations to the center.\n\t     * It will return the result of the symmetrization that removes less peaks from the signal\n\t     * @param signal\n\t     * @param maxError\n\t     * @param iteration\n\t     * @returns {*}\n\t     */\n\t    symmetrizeChoiseBest : function(signal,maxError,iteration){\n\t        var symRank1 = this.symmetrize(signal,maxError,iteration);\n\t        var tmpPeaks = signal.peaksComp;\n\t        var tmpMask = signal.mask;\n\t        var cs = signal.delta1;\n\t        signal.delta1 = (signal.peaks[0].x+signal.peaks[signal.peaks.length-1].x)/2;\n\t        var symRank2 = this.symmetrize(signal,maxError,iteration);\n\t        if(signal.peaksComp.length>tmpPeaks.length)\n\t            return symRank2;\n\t        else{\n\t            signal.delta1 = cs;\n\t            signal.peaksComp = tmpPeaks;\n\t            signal.mask = tmpMask;\n\t            return symRank1;\n\t        }\n\t\n\t    },\n\t    /**\n\t     * This function will return a set of symmetric peaks that will\n\t     * be the enter point for the patter compilation process.\n\t     */\n\t    symmetrize : function(signal, maxError, iteration){\n\t        //Before to symmetrize we need to keep only the peaks that possibly conforms the multiplete\n\t        var max, min, avg, ratio, avgWidth, j;\n\t        var peaks = new Array(signal.peaks.length);\n\t        //Make a deep copy of the peaks and convert PPM ot HZ\n\t        for(j=0;j<peaks.length;j++){\n\t            peaks[j]= {x:signal.peaks[j].x*signal.observe,\n\t                intensity:signal.peaks[j].intensity,\n\t                width:signal.peaks[j].width};\n\t        }\n\t        //Join the peaks that are closer than 0.25 Hz\n\t        for(j=peaks.length-2;j>=0;j--){\n\t            if(Math.abs(peaks[j].x-peaks[j+1].x)<0.25){\n\t                peaks[j].x = (peaks[j].x*peaks[j].intensity+peaks[j+1].x*peaks[j+1].intensity);\n\t                peaks[j].intensity = peaks[j].intensity+peaks[j+1].intensity;\n\t                peaks[j].x/=peaks[j].intensity;\n\t                peaks[j].intensity/=2;\n\t                peaks[j].width+=peaks[j+1].width;\n\t                peaks.splice(j+1,1);\n\t            }\n\t        }\n\t        signal.peaksComp = peaks;\n\t        var nbPeaks = peaks.length;\n\t        var mask = new Array(nbPeaks);\n\t        signal.mask = mask;\n\t        var left=0, right=peaks.length-1, cs = signal.delta1*signal.observe, middle = [(peaks[0].x+peaks[nbPeaks-1].x)/2,1];\n\t        maxError = this.error(Math.abs(cs-middle[0]));\n\t        var heightSum = 0;\n\t        //We try to symmetrize the extreme peaks. We consider as candidates for symmetricing those which have\n\t        //ratio smaller than 3\n\t        for(var i=0;i<nbPeaks;i++){\n\t            mask[i]= true;\n\t            heightSum+=signal.peaks[i].intensity;\n\t        }\n\t\n\t        while(left<=right){\n\t            mask[left] = true;\n\t            mask[right] = true;\n\t            if(left==right){\n\t                if(nbPeaks>2&&Math.abs(peaks[left].x-cs)>maxError){\n\t                    mask[left] = false;\n\t                }\n\t            }\n\t            else{\n\t                max = Math.max(peaks[left].intensity,peaks[right].intensity);\n\t                min = Math.min(peaks[left].intensity,peaks[right].intensity);\n\t                ratio = max/min;\n\t                if(ratio>this.symRatio){\n\t                    if(peaks[left].intensity==min){\n\t                        mask[left] = false;\n\t                        right++;\n\t                    }\n\t                    else{\n\t                        mask[right] = false;\n\t                        left--;\n\t                    }\n\t                }\n\t                else{\n\t                    var diffL = Math.abs(peaks[left].x-cs);\n\t                    var diffR = Math.abs(peaks[right].x-cs);\n\t\n\t                    if(Math.abs(diffL-diffR)<maxError){\n\t                        //avg = (peaks[left].intensity+peaks[right].intensity)/2;\n\t                        avg = Math.min(peaks[left].intensity,peaks[right].intensity);\n\t                        avgWidth = Math.min(peaks[left].width,peaks[right].width);\n\t                        peaks[left].intensity=peaks[right].intensity=avg;\n\t                        peaks[left].width=peaks[right].width=avgWidth;\n\t                        middle=[middle[0]+((peaks[right].x+peaks[left].x)/2), middle[1]+1];\n\t                    }\n\t                    else{\n\t                        if(Math.max(diffL,diffR)==diffR){\n\t                            mask[right] = false;\n\t                            left--;\n\t                        }\n\t                        else{\n\t                            mask[left] = false;\n\t                            right++;\n\t                        }\n\t                    }\n\t                    if(this.DEBUG){\n\t                        console.log(\"MaxError: \"+maxError+\" \"+middle[0]+\" \"+middle[1]);\n\t                        console.log(iteration+\" CS: \"+cs+\" Hz \"+cs/signal.observe+\" PPM\");\n\t                        console.log(\"Middle: \"+(middle[0]/middle[1])+\" Hz \"+(middle[0]/middle[1])/signal.observe+\" PPM\");\n\t                        console.log(diffL+ \" \"+diffR);\n\t                        console.log(Math.abs(diffL-diffR));\n\t                        console.log(JSON.stringify(peaks));\n\t                        console.log(JSON.stringify(mask));\n\t                    }\n\t                }\n\t            }\n\t            left++;\n\t            right--;\n\t            //Only alter cs if it is the first iteration of the sym process.\n\t            if(iteration==1){\n\t                cs = this.chemicalShift(peaks, mask);\n\t                //There is not more available peaks\n\t                if(isNaN(cs)){ return 0;}\n\t            }\n\t            maxError = this.error(Math.abs(cs-middle[0]/middle[1]));\n\t        }\n\t        //To remove the weak peaks and recalculate the cs\n\t        for(i=nbPeaks-1;i>=0;i--){\n\t            if(mask[i]===false){\n\t                peaks.splice(i,1);\n\t            }\n\t        }\n\t        cs = this.chemicalShift(peaks);\n\t        if(isNaN(cs)){ return 0;}\n\t        signal.delta1 = cs/signal.observe;\n\t        //Now, the peak should be symmetric in heights, but we need to know if it is symmetric in x\n\t        var symFactor = 0,weight = 0;\n\t        if(peaks.length>1){\n\t            for(i=Math.ceil(peaks.length/2)-1;i>=0;i--){\n\t                symFactor+=(3+Math.min(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))\n\t                /(3+Math.max(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))*peaks[i].intensity;\n\t                weight+=peaks[i].intensity;\n\t            }\n\t            symFactor/=weight;\n\t        }\n\t        else{\n\t            if(peaks.length==1)\n\t                symFactor=1;\n\t        }\n\t        var newSumHeights = 0;\n\t        for(i=0;i<peaks.length;i++){\n\t            newSumHeights+=peaks[i].intensity;\n\t        }\n\t        symFactor-=(heightSum-newSumHeights)/heightSum*0.12; //Removed peaks penalty\n\t        if(this.DEBUG){\n\t            console.log(\"Penalty \"+(heightSum-newSumHeights)/heightSum*0.12);\n\t            console.log(\"cs: \"+(cs/signal.observe)+\" symFactor: \"+symFactor);\n\t        }\n\t        //Sometimes we need a second opinion after the first symmetrization.\n\t        if(symFactor>0.8&&symFactor<0.97&&iteration<2){\n\t            return this.symmetrize(signal, this.maxErrorIter2, 2);\n\t        }{\n\t            //Center the given pattern at cs and symmetrize x\n\t            if(peaks.length>1) {\n\t                var weight = 0, dxi;\n\t                for (i = Math.ceil(peaks.length / 2) - 1; i >= 0; i--) {\n\t                    dxi = (peaks[i].x - peaks[peaks.length - 1 - i].x)/2.0;\n\t                    peaks[i].x =cs+dxi;\n\t                    peaks[peaks.length - 1 - i].x=cs-dxi;\n\t                }\n\t            }\n\t        }\n\t        return symFactor;\n\t    },\n\t\n\t    error : function(value){\n\t        var maxError = value*2.5;\n\t        if(maxError<0.75)\n\t            maxError = 0.75;\n\t        if(maxError > 3)\n\t            maxError = 3;\n\t        return maxError;\n\t    },\n\t    /**\n\t     * 2 stages normalizarion of the peaks heights to Math.pow(2,n).\n\t     * Creates a new mask with the peaks that could contribute to the multiplete\n\t     * @param signal\n\t     * @param n\n\t     * @returns {*}\n\t     */\n\t    normalize : function(signal, n){\n\t        //Perhaps this is slow\n\t        var peaks = JSON.parse(JSON.stringify(signal.peaksComp));\n\t        var norm = 0,norm2=0,i;//Math.pow(2,n);\n\t        for(i=0;i<peaks.length;i++){\n\t            norm+= peaks[i].intensity;\n\t        }\n\t        norm=Math.pow(2,n)/norm;\n\t        signal.mask2 = JSON.parse(JSON.stringify(signal.mask));\n\t        //console.log(\"Mask0 \"+JSON.stringify(signal.mask2));\n\t        var index=signal.mask2.length-1;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            peaks[i].intensity*= norm;\n\t            while(index>=0&&signal.mask2[index]===false)\n\t                index--;\n\t            if(peaks[i].intensity<0.75){\n\t                if(this.DEBUG)\n\t                    console.log(\"Peak \"+i+\" does not seem to belong to this multiplet \"+peaks[i].intensity);\n\t                peaks.splice(i,1);\n\t                signal.mask2[index]=false;\n\t            }\n\t            else{\n\t                norm2+= peaks[i].intensity;\n\t            }\n\t            index--;\n\t        }\n\t        norm2=Math.pow(2,n)/norm2;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            peaks[i].intensity*= norm2;\n\t        }\n\t        //console.log(\"Mask1 \"+JSON.stringify(signal.mask2));\n\t        if(this.DEBUG) console.log(JSON.stringify(peaks));\n\t        return peaks;\n\t    },\n\t\n\t    /**\n\t     * Calculates the chemical shift as the weighted sum of the peaks\n\t     * @param peaks\n\t     * @param mask\n\t     * @returns {number}\n\t     */\n\t    chemicalShift : function(peaks, mask){\n\t        var sum=0,cs= 0, i, area;\n\t        if(mask){\n\t            for(i=0;i<peaks.length;i++){\n\t                //console.log(mask[i]);\n\t                if(mask[i]===true){\n\t                    area = this.area(peaks[i]);\n\t                    sum+=area;\n\t                    cs+=area*peaks[i].x;\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            for(i=0;i<peaks.length;i++){\n\t                area = this.area(peaks[i]);\n\t                sum+=area;\n\t                cs+=area*peaks[i].x;\n\t            }\n\t        }\n\t        return cs/sum;\n\t    },\n\t\n\t    area: function(peak){\n\t        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n\t    }\n\t}\n\t\n\tmodule.exports = JAnalyzer;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\tmodule.exports.post = __webpack_require__(12);\n\tmodule.exports.gsd = __webpack_require__(35);\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 9/6/15.\n\t */\n\tvar Opt = __webpack_require__(13);\n\t\n\tfunction sampleFunction(from, to, x, y, lastIndex){\n\t    var nbPoints = x.length;\n\t    var sampleX = [];\n\t    var sampleY = [];\n\t    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n\t    if(direction==-1){\n\t        lastIndex[0]= x.length-1;\n\t    }\n\t\n\t    var delta = Math.abs(to-from)/2;\n\t    var mid = (from+to)/2;\n\t    var stop = false;\n\t    var index = lastIndex[0];\n\t    while(!stop&&index<nbPoints&&index>=0){\n\t        if(Math.abs(x[index]-mid)<=delta){\n\t            sampleX.push(x[index]);\n\t            sampleY.push(y[index]);\n\t            index+=direction;\n\t        }\n\t        //It is outside the range.\n\t        else{\n\t\n\t            if(Math.sign(mid-x[index])==1){\n\t                //We'll reach the mid going in the current direction\n\t                index+=direction;\n\t            }\n\t            else{\n\t                //There is not more peaks in the current range\n\t                stop=true;\n\t            }\n\t        }\n\t        //console.log(sampleX);\n\t    }\n\t    lastIndex[0]=index;\n\t    return [sampleX, sampleY];\n\t}\n\t\n\tfunction optimizePeaks(peakList,x,y,n, fnType){\n\t    var i, j, lastIndex=[0];\n\t    var groups = groupPeaks(peakList,n);\n\t    var result = [];\n\t    var factor = 1;\n\t    if(fnType==\"gaussian\")\n\t        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n\t    for(i=0;i<groups.length;i++){\n\t        var peaks = groups[i].group;\n\t        if(peaks.length>1){\n\t            //Multiple peaks\n\t            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n\t            //console.log(\"here1\");\n\t            //console.log(groups[i].limits);\n\t            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n\t            //console.log(sampling);\n\t            if(sampling[0].length>5){\n\t                var error = peaks[0].width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                var optPeaks = [];\n\t                if(fnType==\"gaussian\")\n\t                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                for(j=0;j<optPeaks.length;j++){\n\t                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            //Single peak\n\t            peaks = peaks[0];\n\t            var sampling = sampleFunction(peaks.x-n*peaks.width,\n\t                peaks.x+n*peaks.width,x,y,lastIndex);\n\t            //console.log(\"here2\");\n\t            //console.log(groups[i].limits);\n\t            if(sampling[0].length>5){\n\t                var error = peaks.width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n\t                var optPeak = [];\n\t                if(fnType==\"gaussian\")\n\t                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n\t            }\n\t        }\n\t\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction groupPeaks(peakList,nL){\n\t    var group = [];\n\t    var groups = [];\n\t    var i, j;\n\t    var limits = [peakList[0].x,nL*peakList[0].width];\n\t    var upperLimit, lowerLimit;\n\t    //Merge forward\n\t    for(i=0;i<peakList.length;i++){\n\t        //If the 2 things overlaps\n\t        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n\t            //Add the peak to the group\n\t            group.push(peakList[i]);\n\t            //Update the group limits\n\t            upperLimit = limits[0]+limits[1];\n\t            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n\t                upperLimit = peakList[i].x+nL*peakList[i].width;\n\t            }\n\t            lowerLimit = limits[0]-limits[1];\n\t            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n\t                lowerLimit = peakList[i].x-nL*peakList[i].width;\n\t            }\n\t            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t        }\n\t        else{\n\t            groups.push({limits:limits,group:group});\n\t            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n\t            group=[peakList[i]];\n\t            limits = [peakList[i].x,nL*peakList[i].width];\n\t        }\n\t    }\n\t    groups.push({limits:limits,group:group});\n\t    //Merge backward\n\t    for(i =groups.length-2;i>=0;i--){\n\t        //The groups overlaps\n\t        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n\t            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n\t            for(j=0;j<groups[i+1].group.length;j++){\n\t                groups[i].group.push(groups[i+1].group[j]);\n\t            }\n\t            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n\t            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n\t                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n\t            }\n\t            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n\t            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n\t                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n\t            }\n\t            //console.log(limits);\n\t            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t            groups.splice(i+1,1);\n\t        }\n\t    }\n\t    return groups;\n\t}\n\t/**\n\t * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n\t * @param peakList\n\t * @param options\n\t */\n\tfunction joinBroadPeaks(peakList, options){\n\t    var width = options.width;\n\t    var broadLines=[];\n\t    //Optimize the possible broad lines\n\t    var max=0, maxI=0,count=1;\n\t    var isPartOf = false;\n\t    for(var i=peakList.length-1;i>=0;i--){\n\t        if(peakList[i].soft){\n\t            broadLines.push(peakList.splice(i,1)[0]);\n\t        }\n\t    }\n\t    //Push a feak peak\n\t    broadLines.push({x:Number.MAX_VALUE});\n\t\n\t    var candidates = [[broadLines[0].x,\n\t                        broadLines[0].y]];\n\t    var indexes = [0];\n\t\n\t    for(var i=1;i<broadLines.length;i++){\n\t        //console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n\t        if(Math.abs(broadLines[i-1].x-broadLines[i].x)<width){\n\t            candidates.push([broadLines[i].x,broadLines[i].y]);\n\t            if(broadLines[i].y>max){\n\t                max = broadLines[i].y;\n\t                maxI = i;\n\t            }\n\t            indexes.push(i);\n\t            count++;\n\t        }\n\t        else{\n\t            if(count>2){\n\t                var fitted =  Opt.optimizeSingleLorentzian(candidates,\n\t                    {x: broadLines[maxI].x, y:max, width: Math.abs(candidates[0][0]-candidates[candidates.length-1][0])});\n\t                //console.log(fitted)\n\t                peakList.push({x:fitted[0][0],y:fitted[1][0],width:fitted[2][0],soft:false});\n\t\n\t            }\n\t            else{\n\t                //Put back the candidates to the signals list\n\t                indexes.map(function(index){peakList.push(broadLines[index])});\n\t            }\n\t            candidates = [[broadLines[i].x,broadLines[i].y]];\n\t            indexes = [i];\n\t            max = broadLines[i].y;\n\t            maxI = i;\n\t            count = 1;\n\t        }\n\t    }\n\t\n\t    peakList.sort(function (a, b) {\n\t        return a.x - b.x;\n\t    });\n\t\n\t    return peakList;\n\t\n\t}\n\t\n\t/*if(options.broadRatio>0){\n\t var broadLines=[[Number.MAX_VALUE,0,0]];\n\t //Optimize the possible broad lines\n\t var max=0, maxI=0,count=0;\n\t var candidates = [],broadLinesS=[];\n\t var isPartOf = false;\n\t\n\t for(var i=broadLines.length-1;i>0;i--){\n\t //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n\t if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\t\n\t candidates.push(broadLines[i]);\n\t if(broadLines[i][1]>max){\n\t max = broadLines[i][1];\n\t maxI = i;\n\t }\n\t count++;\n\t }\n\t else{\n\t isPartOf = true;\n\t if(count>30){ // TODO, an options ?\n\t isPartOf = false;\n\t //for(var j=0;j<signals.length;j++){\n\t //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n\t //       isPartOf = true;\n\t //    }\n\t //console.log(\"Was part of \"+isPartOf);\n\t }\n\t if(isPartOf){\n\t for(var j=0;j<candidates.length;j++){\n\t signals.push([candidates[j][0], candidates[j][1], dx]);\n\t }\n\t }\n\t else{\n\t var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n\t width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n\t []);\n\t //console.log(fitted);\n\t signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n\t }\n\t candidates = [];\n\t max = 0;\n\t maxI = 0;\n\t count = 0;\n\t }\n\t }\n\t }*/\n\t\n\tmodule.exports={optimizePeaks:optimizePeaks,joinBroadPeaks:joinBroadPeaks};\n\t\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar LM = __webpack_require__(14);\n\tvar math = LM.Matrix.algebra;\n\tvar Matrix = __webpack_require__(26);\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfLorentzians(t,p,c){\n\t    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        p2 = Math.pow(p[i+nL*2][0]/2,2);\n\t        factor = p[i+nL][0]*p2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfGaussians(t,p,c){\n\t    var nL = p.length/3,factor,i, j, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t/**\n\t * Single 4 parameter lorentzian function\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleLorentzian(t,p,c){\n\t    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Single 3 parameter gaussian function\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters [mean, height, std]\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleGaussian(t,p,c){\n\t    var factor2 = p[2][0]*p[2][0]/2;\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleLorentzian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];\n\t    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t\n\t    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t\n\t\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t\n\t}\n\t\n\t/**\n\t * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleGaussian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];                         // optional vector of constants\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t\n\t    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n\t    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\t\n\t    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t}\n\t\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeLorentzianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = 1;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n\t        p_min[i+nL][0] = 0;\n\t        p_min[i+2*nL][0] = group[i].width/4;\n\t\n\t        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n\t        p_max[i+nL][0] = 1.5;\n\t        p_max[i+2*nL][0] = group[i].width*4;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t\n\t    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n\t    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n\t    p_fit=p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeGaussianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.rows,i;\n\t\n\t    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n\t    for(i=0;i<nbPoints;i++){\n\t        weight[i][0]=k;///(y_data[i][0]);\n\t        //weight[i][0]=k*(2-y_data[i][0]);\n\t    }\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n\t    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = group[i].y/maxY;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;\n\t        p_min[i+nL][0] = group[i].y*0.8/maxY;\n\t        p_min[i+2*nL][0] = group[i].width/2;\n\t\n\t        p_max[i][0] = group[i].x+dt;\n\t        p_max[i+nL][0] = group[i].y*1.2/maxY;\n\t        p_max[i+2*nL][0] = group[i].width*2;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t    //console.log(t);\n\t    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t/**\n\t *\n\t * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n\t * @param xy\n\t * @returns {*[]}\n\t */\n\tfunction parseData(xy){\n\t    var nbSeries = xy.length;\n\t    var t = null;\n\t    var y_data = null, x,y;\n\t    var maxY = 0, i,j;\n\t\n\t    if(nbSeries==2){\n\t        //Looks like row wise matrix [x,y]\n\t        var nbPoints = xy[0].length;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else{\n\t            t = new Matrix(nbPoints,1);\n\t            y_data = new Matrix(nbPoints,1);\n\t            x = xy[0];\n\t            y = xy[1];\n\t            if(typeof x[0] === \"number\"){\n\t                for(i=0;i<nbPoints;i++){\n\t                    t[i][0]=x[i];\n\t                    y_data[i][0]=y[i];\n\t                    if(y[i]>maxY)\n\t                        maxY = y[i];\n\t                }\n\t            }\n\t            else{\n\t                //It is a colum matrix\n\t                if(typeof x[0] === \"object\"){\n\t                    for(i=0;i<nbPoints;i++){\n\t                        t[i][0]=x[i][0];\n\t                        y_data[i][0]=y[i][0];\n\t                        if(y[i][0]>maxY)\n\t                            maxY = y[i][0];\n\t                    }\n\t                }\n\t\n\t            }\n\t\n\t        }\n\t    }\n\t    else{\n\t        //Looks like a column wise matrix [[x],[y]]\n\t        var nbPoints = nbSeries;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else {\n\t            t = new Matrix(nbPoints, 1);\n\t            y_data = new Matrix(nbPoints, 1);\n\t            for (i = 0; i < nbPoints; i++) {\n\t                t[i][0] = xy[i][0];\n\t                y_data[i][0] = xy[i][1];\n\t                if(y_data[i][0]>maxY)\n\t                    maxY = y_data[i][0];\n\t            }\n\t        }\n\t    }\n\t    for (i = 0; i < nbPoints; i++) {\n\t        y_data[i][0]/=maxY;\n\t    }\n\t    return [t,y_data,maxY];\n\t}\n\t\n\tfunction sizeException(nbPoints) {\n\t    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n\t}\n\t\n\tmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\n\tmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\n\tmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\n\tmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\n\tmodule.exports.singleGaussian = singleGaussian;\n\tmodule.exports.singleLorentzian = singleLorentzian;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(15);\n\tmodule.exports.Matrix = __webpack_require__(16);\n\tmodule.exports.Matrix.algebra = __webpack_require__(25);\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/5/15.\n\t */\n\tvar Matrix = __webpack_require__(16);\n\tvar math = __webpack_require__(25);\n\t\n\tvar DEBUG = false;\n\t/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n\t ----------  INPUT  VARIABLES  -----------\n\t func   = function of n independent variables, 't', and m parameters, 'p',\n\t returning the simulated model: y_hat = func(t,p,c)\n\t p      = n-vector of initial guess of parameter values\n\t t      = m-vectors or matrix of independent variables (used as arg to func)\n\t y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n\t weight = weighting vector for least squares fit ( weight >= 0 ) ...\n\t inverse of the standard measurement errors\n\t Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n\t dp     = fractional increment of 'p' for numerical derivatives\n\t dp(j)>0 central differences calculated\n\t dp(j)<0 one sided 'backwards' differences calculated\n\t dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t Default:  0.001;\n\t p_min  = n-vector of lower bounds for parameter values\n\t p_max  = n-vector of upper bounds for parameter values\n\t c      = an optional matrix of values passed to func(t,p,c)\n\t opts   = vector of algorithmic parameters\n\t parameter    defaults    meaning\n\t opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n\t opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n\t opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n\t opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n\t opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n\t opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n\t opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n\t opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n\t opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n\t opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n\t 2: Quadratic update\n\t 3: Nielsen's lambda update equations\n\t\n\t ----------  OUTPUT  VARIABLES  -----------\n\t p       = least-squares optimal estimate of the parameter values\n\t X2      = Chi squared criteria\n\t sigma_p = asymptotic standard error of the parameters\n\t sigma_y = asymptotic standard error of the curve-fit\n\t corr    = correlation matrix of the parameters\n\t R_sq    = R-squared cofficient of multiple determination\n\t cvg_hst = convergence history\n\t\n\t Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n\t modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n\t using references by\n\t Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n\t Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n\t Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n\t Mathworks        optimization toolbox reference manual\n\t K. Madsen, H.B., Nielsen, and O. Tingleff\n\t http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n\t */\n\tvar LM = {\n\t\n\t    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\t\n\t        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\t\n\t        var iteration  = 0;\t\t\t// iteration counter\n\t        //func_calls = 0;\t\t\t// running count of function evaluations\n\t\n\t        if((typeof p[0])!=\"object\"){\n\t            for(var i=0;i< p.length;i++){\n\t                p[i]=[p[i]];\n\t            }\n\t\n\t        }\n\t        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n\t        var i,k;\n\t        var eps = 2^-52;\n\t        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n\t        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n\t        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n\t        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n\t        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var J =  Matrix.zeros(Npnt,Npar);\n\t\n\t\n\t        if (t.length != y_dat.length) {\n\t            console.log('lm.m error: the length of t must equal the length of y_dat');\n\t\n\t            length_t = t.length;\n\t            length_y_dat = y_dat.length;\n\t            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n\t            if (!tensor_parameter) {\n\t                return;\n\t            }\n\t        }\n\t\n\t        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n\t        dp = dp || 0.001;\n\t        p_min   = p_min || math.multiply(Math.abs(p),-100);\n\t        p_max   = p_max || math.multiply(Math.abs(p),100);\n\t        c = c || 1;\n\t        // Algorithmic Paramters\n\t        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n\t        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\t\n\t        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n\t        var MaxIter       = opts[1];\t// maximum number of iterations\n\t        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n\t        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n\t        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n\t        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n\t        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n\t        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n\t        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n\t        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n\t        // 2: Quadratic update\n\t        // 3: Nielsen's lambda update equations\n\t\n\t        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\t\n\t\n\t        if(!dp.length || dp.length == 1){\n\t            var dp_array = new Array(Npar);\n\t            for(var i=0;i<Npar;i++)\n\t                dp_array[i]=[dp];\n\t            dp=dp_array;\n\t        }\n\t\n\t        // indices of the parameters to be fit\n\t        var idx   = [];\n\t        for(i=0;i<dp.length;i++){\n\t            if(dp[i][0]!=0){\n\t                idx.push(i);\n\t            }\n\t        }\n\t\n\t        var Nfit = idx.length;\t\t\t// number of parameters to fit\n\t        var stop = false;\t\t\t\t// termination flag\n\t\n\t        var weight_sq = null;\n\t        //console.log(weight);\n\t        if ( !weight.length || weight.length < Npnt )\t{\n\t            // squared weighting vector\n\t            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n\t            //console.log(\"weight[0] \"+typeof weight[0]);\n\t            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n\t            weight_sq = math.dotMultiply(tmp,tmp);\n\t        }\n\t        else{\n\t            //weight_sq = (weight(:)).^2;\n\t            weight_sq = math.dotMultiply(weight,weight);\n\t        }\n\t\n\t\n\t        // initialize Jacobian with finite difference calculation\n\t        //console.log(\"J \"+weight_sq);\n\t        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        //console.log(JtWJ);\n\t\n\t        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n\t            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n\t            console.log(' *** epsilon_1 = ', epsilon_1);\n\t            stop = true;\n\t        }\n\t\n\t\n\t        switch(Update_Type){\n\t            case 1: // Marquardt: init'l lambda\n\t                lambda  = lambda_0;\n\t                break;\n\t            default:    // Quadratic and Nielsen\n\t                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n\t                nu=2;\n\t        }\n\t        //console.log(X2);\n\t        X2_old = X2; // previous value of X2\n\t        //console.log(MaxIter+\" \"+Npar);\n\t        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n\t        var h = null;\n\t        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n\t            iteration = iteration + 1;\n\t            // incremental change in parameters\n\t            switch(Update_Type){\n\t                case 1:\t\t\t\t\t// Marquardt\n\t                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n\t                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n\t                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n\t                    break;\n\t                default:\t\t\t\t\t// Quadratic and Nielsen\n\t                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\t\n\t                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n\t            }\n\t\n\t            /*for(var k=0;k< h.length;k++){\n\t             h[k]=[h[k]];\n\t             }*/\n\t            //console.log(\"h \"+h);\n\t            //h=math.matrix(h);\n\t            //  big = max(abs(h./p)) > 2;\n\t            //this is a big step\n\t            // --- Are parameters [p+h] much better than [p] ?\n\t            var hidx = new Array(idx.length);\n\t            for(k=0;k<idx.length;k++){\n\t                hidx[k]=h[idx[k]];\n\t            }\n\t            var p_try = math.add(p, hidx);// update the [idx] elements\n\t\n\t            for(k=0;k<p_try.length;k++){\n\t                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n\t            }\n\t            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\t\n\t            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n\t            //func_calls = func_calls + 1;\n\t            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\t\n\t            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t\n\t            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n\t                //    One step of quadratic line update in the h direction for minimum X2\n\t                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n\t                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t\n\t                h = math.multiply(alpha, h);\n\t                for(var k=0;k<idx.length;k++){\n\t                    hidx[k]=h[idx[k]];\n\t                }\n\t\n\t                p_try = math.add(p ,hidx);                     // update only [idx] elements\n\t                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\t\n\t                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n\t                // func_calls = func_calls + 1;\n\t                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n\t                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n\t            }\n\t\n\t            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n\t            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n\t            //console.log(\"rho \"+rho);\n\t            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n\t                //console.log(\"Here\");\n\t                dX2 = X2 - X2_old;\n\t                X2_old = X2;\n\t                p_old = p;\n\t                y_old = y_hat;\n\t                p = p_try;\t\t\t// accept p_try\n\t\n\t                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n\t                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                // decrease lambda ==> Gauss-Newton method\n\t\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t\t// Nielsen\n\t                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n\t                        nu = 2;\n\t                        break;\n\t                }\n\t            }\n\t            else {\t\t\t\t\t// it IS NOT better\n\t                X2 = X2_old;\t\t\t// do not accept p_try\n\t                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n\t                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n\t                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                }\n\t\n\t                // increase lambda  ==> gradient descent method\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t// Nielsen\n\t                        lambda = lambda * nu;\n\t                        nu = 2 * nu;\n\t                        break;\n\t                }\n\t            }\n\t        }// --- End of Main Loop\n\t\n\t        // --- convergence achieved, find covariance and confidence intervals\n\t\n\t        // equal weights for paramter error analysis\n\t        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\t\n\t        weight_sq.apply(function(i,j){\n\t            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n\t        });\n\t        //console.log(weight_sq);\n\t        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n\t        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t\n\t        /*if nargout > 2\t\t\t\t// standard error of parameters\n\t         covar = inv(JtWJ);\n\t         sigma_p = sqrt(diag(covar));\n\t         end\n\t\n\t         if nargout > 3\t\t\t\t// standard error of the fit\n\t         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n\t         sigma_y = zeros(Npnt,1);\n\t         for i=1:Npnt\n\t         sigma_y(i) = J(i,:) * covar * J(i,:)';\n\t         end\n\t         sigma_y = sqrt(sigma_y);\n\t         end\n\t\n\t         if nargout > 4\t\t\t\t// parameter correlation matrix\n\t         corr = covar ./ [sigma_p*sigma_p'];\n\t         end\n\t\n\t         if nargout > 5\t\t\t\t// coefficient of multiple determination\n\t         R_sq = corrcoef([y_dat y_hat]);\n\t         R_sq = R_sq(1,2).^2;\n\t         end\n\t\n\t         if nargout > 6\t\t\t\t// convergence history\n\t         cvg_hst = cvg_hst(1:iteration,:);\n\t         end*/\n\t\n\t        // endfunction  # ---------------------------------------------------------- LM\n\t\n\t        return { p:p, X2:X2};\n\t    },\n\t\n\t    lm_FD_J:function(func,t,p,y,dp,c) {\n\t        // J = lm_FD_J(func,t,p,y,{dp},{c})\n\t        //\n\t        // partial derivatives (Jacobian) dy/dp for use with lm.m\n\t        // computed via Finite Differences\n\t        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n\t        // -------- INPUT VARIABLES ---------\n\t        // func = function of independent variables, 't', and parameters, 'p',\n\t        //        returning the simulated model: y_hat = func(t,p,c)\n\t        // t  = m-vector of independent variables (used as arg to func)\n\t        // p  = n-vector of current parameter values\n\t        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n\t        // dp = fractional increment of p for numerical derivatives\n\t        //      dp(j)>0 central differences calculated\n\t        //      dp(j)<0 one sided differences calculated\n\t        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //      Default:  0.001;\n\t        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t        var m = y.length;\t\t\t// number of data points\n\t        var n = p.length;\t\t\t// number of parameters\n\t\n\t        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\t\n\t        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n\t        //var ps = $.extend(true, [], p);\n\t        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\t\n\t        for (var j = 0;j < n; j++) {\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n\t            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t\n\t            if (del[j] != 0){\n\t                y1 = func(t, p, c);\n\t                //func_calls = func_calls + 1;\n\t                if (dp[j][0] < 0) {\t\t// backwards difference\n\t                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n\t                    //console.log(del[j]);\n\t                    //console.log(y);\n\t                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t                    //console.log(column);\n\t                }\n\t                else{\n\t                    p[j][0] = ps[j][0] - del[j];\n\t                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n\t                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t\n\t                }\t\t\t// central difference, additional func call\n\t            }\n\t\n\t            p[j] = ps[j];\t\t// restore p(j)\n\t\n\t        }\n\t        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n\t        return J;\n\t\n\t    },\n\t\n\t    // endfunction # -------------------------------------------------- LM_FD_J\n\t    lm_Broyden_J: function(p_old,y_old,J,p,y){\n\t        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n\t        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n\t        //---------- INPUT VARIABLES -------\n\t        // p_old = previous set of parameters\n\t        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n\t        // J  = current version of the Jacobian matrix\n\t        // p     = current  set of parameters\n\t        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t        //console.log(p+\" X \"+ p_old)\n\t        var h  = math.subtract(p, p_old);\n\t\n\t        //console.log(\"hhh \"+h);\n\t        var h_t = math.transpose(h);\n\t        h_t.div(math.multiply(h_t,h));\n\t\n\t        //console.log(h_t);\n\t        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n\t        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n\t        return J;\n\t        // endfunction # ---------------------------------------------- LM_Broyden_J\n\t    },\n\t\n\t    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n\t        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n\t        //\n\t        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n\t        // and calculate the Chi-squared error function, Chi_sq\n\t        // Used by Levenberg-Marquard algorithm, lm.m\n\t        // -------- INPUT VARIABLES ---------\n\t        // func   = function ofpn independent variables, p, and m parameters, p,\n\t        //         returning the simulated model: y_hat = func(t,p,c)\n\t        // t      = m-vectors or matrix of independent variables (used as arg to func)\n\t        // p_old  = n-vector of previous parameter values\n\t        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n\t        // dX2    = previous change in Chi-squared criteria\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t        // p      = n-vector of current  parameter values\n\t        // y_dat  = n-vector of data to be fit by func(t,p,c)\n\t        // weight_sq = square of the weighting vector for least squares fit ...\n\t        //\t    inverse of the standard measurement errors\n\t        // dp     = fractional increment of 'p' for numerical derivatives\n\t        //          dp(j)>0 central differences calculated\n\t        //          dp(j)<0 one sided differences calculated\n\t        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //          Default:  0.001;\n\t        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n\t        // JtWdy   = linearized fitting vector\n\t        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n\t        // y_hat  = model evaluated with parameters 'p'\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t\n\t        var Npnt = y_dat.length;\t\t// number of data points\n\t        var Npar = p.length;\t\t// number of parameters\n\t\n\t        dp = dp || 0.001;\n\t\n\t\n\t        //var JtWJ = new Matrix.zeros(Npar);\n\t        //var JtWdy  = new Matrix.zeros(Npar,1);\n\t\n\t        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n\t        //func_calls = func_calls + 1;\n\t        //console.log(J);\n\t        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n\t            //console.log(\"Par\");\n\t            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n\t        }\n\t        else{\n\t            //console.log(\"ImPar\");\n\t            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n\t        }\n\t        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n\t        //console.log(delta_y[0][0]);\n\t        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n\t        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n\t        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n\t        var Jt = math.transpose(J);\n\t\n\t        //console.log(weight_sq);\n\t\n\t        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\t\n\t        //JtWdy = J' * ( weight_sq .* delta_y );\n\t        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\t\n\t\n\t        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n\t        // endfunction  # ------------------------------------------------------ LM_MATX\n\t    }\n\t\n\t\n\t\n\t};\n\t\n\tmodule.exports = LM;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(17);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(18);\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(17);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(19);\n\tvar EigenvalueDecomposition = __webpack_require__(21);\n\tvar LuDecomposition = __webpack_require__(22);\n\tvar QrDecomposition = __webpack_require__(23);\n\tvar CholeskyDecomposition = __webpack_require__(24);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(17);\n\tvar hypotenuse = __webpack_require__(20).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(17);\n\tvar hypotenuse = __webpack_require__(20).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(17);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(17);\n\tvar hypotenuse = __webpack_require__(20).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(17);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/24/15.\n\t */\n\t/**\n\t * Non in-place function definitions, compatible with mathjs code *\n\t */\n\t\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(16);\n\t\n\tfunction matrix(A,B){\n\t    return new Matrix(A,B);\n\t}\n\t\n\tfunction ones(rows, cols){\n\t    return Matrix.ones(rows,cols);\n\t}\n\t\n\tfunction eye(rows, cols){\n\t    return Matrix.eye(rows, cols);\n\t}\n\t\n\tfunction zeros(rows, cols){\n\t    return Matrix.zeros(rows, cols);\n\t}\n\t\n\tfunction random(rows, cols){\n\t    return Matrix.rand(rows,cols);\n\t}\n\t\n\tfunction transpose(A){\n\t    if(typeof A == 'number')\n\t        return A;\n\t    var result = A.clone();\n\t    return result.transpose();\n\t}\n\t\n\tfunction add(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A+B;\n\t    if(typeof A == 'number')\n\t        return this.add(B,A);\n\t\n\t    var result = A.clone();\n\t    return result.add(B);\n\t\n\t}\n\t\n\tfunction subtract(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A-B;\n\t    if(typeof A == 'number')\n\t        return this.subtract(B,A);\n\t    var result = A.clone();\n\t    return result.sub(B);\n\t}\n\t\n\tfunction multiply(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A*B;\n\t    if(typeof A == 'number')\n\t        return this.multiply(B,A);\n\t\n\t    var result = A.clone();\n\t\n\t    if(typeof B === 'number')\n\t        result.mul(B);\n\t    else\n\t        result = result.mmul(B);\n\t\n\t    if(result.rows==1&&result.columns==1)\n\t        return result[0][0];\n\t    else\n\t        return result;\n\t\n\t}\n\t\n\tfunction dotMultiply(A, B){\n\t    var result = A.clone();\n\t    return result.mul(B);\n\t}\n\t\n\tfunction dotDivide(A, B){\n\t    var result = A.clone();\n\t    return result.div(B);\n\t}\n\t\n\tfunction diag(A){\n\t    var diag = null;\n\t    var rows = A.rows, cols = A.columns, j, r;\n\t    //It is an array\n\t    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n\t        if(A[0]&&A[0].length){\n\t            rows = A.length;\n\t            cols = A[0].length;\n\t            r = Math.min(rows,cols);\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j][j];\n\t            }\n\t        }\n\t        else{\n\t            cols = A.length;\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j];\n\t            }\n\t        }\n\t\n\t    }\n\t    if(rows == 1){\n\t        diag = Matrix.zeros(cols, cols);\n\t        for (j = 0; j < cols; j++) {\n\t            diag[j][j]=A[0][j];\n\t        }\n\t    }\n\t    else{\n\t        if(rows>0 && cols > 0){\n\t            r = Math.min(rows,cols);\n\t            diag = new Array(r);\n\t            for (j = 0; j < r; j++) {\n\t                diag[j] = A[j][j];\n\t            }\n\t        }\n\t    }\n\t    return diag;\n\t}\n\t\n\tfunction min(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.min(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] < B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction max(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.max(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] > B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction sqrt(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.sqrt(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction abs(A){\n\t    if(typeof A==='number' )\n\t        return Math.abs(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.abs(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction exp(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.exp(A[i][j]);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction dotPow(A, b){\n\t    if(typeof A==='number' )\n\t        return Math.pow(A,b);\n\t    //console.log(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.pow(A[i][j],b);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction solve(A, B){\n\t    return A.solve(B);\n\t}\n\t\n\tfunction inv(A){\n\t    if(typeof A ===\"number\")\n\t        return 1/A;\n\t    return A.inverse();\n\t}\n\t\n\tmodule.exports = {\n\t    transpose:transpose,\n\t    add:add,\n\t    subtract:subtract,\n\t    multiply:multiply,\n\t    dotMultiply:dotMultiply,\n\t    dotDivide:dotDivide,\n\t    diag:diag,\n\t    min:min,\n\t    max:max,\n\t    solve:solve,\n\t    inv:inv,\n\t    sqrt:sqrt,\n\t    exp:exp,\n\t    dotPow:dotPow,\n\t    abs:abs,\n\t    matrix:matrix,\n\t    ones:ones,\n\t    zeros:zeros,\n\t    random:random,\n\t    eye:eye\n\t};\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(27);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(28);\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(27);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(29);\n\tvar EigenvalueDecomposition = __webpack_require__(31);\n\tvar LuDecomposition = __webpack_require__(32);\n\tvar QrDecomposition = __webpack_require__(33);\n\tvar CholeskyDecomposition = __webpack_require__(34);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(27);\n\tvar hypotenuse = __webpack_require__(30).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(27);\n\tvar hypotenuse = __webpack_require__(30).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(27);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(27);\n\tvar hypotenuse = __webpack_require__(30).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(27);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Opt = __webpack_require__(13);\n\tvar stats = __webpack_require__(36);\n\tvar extend = __webpack_require__(7);\n\tvar SG = __webpack_require__(38);\n\t\n\tvar sgDefOptions = {\n\t    windowSize: 9,\n\t    polynomial: 3\n\t};\n\t\n\t\n\tfunction gsd(x, y, options){\n\t    //options = extend({}, defaultOptions, options);\n\t    var options=Object.create(options || {});\n\t    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n\t    if (options.broadRatio===undefined) options.broadRatio=0.00;\n\t    if (options.noiseLevel===undefined) options.noiseLevel=undefined;\n\t    if (options.noiseFactor===undefined) options.noiseFactor=3;\n\t    if (options.maxCriteria===undefined) options.maxCriteria=true;\n\t    if (options.smoothY===undefined) options.smoothY=true;\n\t    if (options.realTopDetection===undefined) options.realTopDetection=false;\n\t\n\t    var sgOptions = extend({}, sgDefOptions, options.sgOptions);\n\t\n\t    //console.log(JSON.stringify(stats.array.minMax(y)));\n\t    if(options.noiseLevel===undefined){\n\t        //We have to know if x is equally spaced\n\t        var maxDx=0, minDx=Number.MAX_VALUE,tmp;\n\t        for(var i=0;i< x.length-1;i++){\n\t            var tmp = Math.abs(x[i+1]-x[i]);\n\t            if(tmp<minDx){\n\t                minDx = tmp;\n\t            }\n\t            if(tmp>maxDx){\n\t                maxDx = tmp;\n\t            }\n\t        }\n\t\n\t        if((maxDx-minDx)/maxDx<0.05){\n\t\n\t            options.noiseLevel = getNoiseLevel(y);\n\t            //console.log(options.noiseLevel+\" \"+stats.array.median(y));\n\t        }\n\t        else{\n\t            options.noiseLevel = 0;\n\t        }\n\t    }\n\t    //console.log(\"options.noiseLevel \"+options.noiseLevel);\n\t    y=[].concat(y);\n\t    var yCorrection = {m:1, b:options.noiseLevel};\n\t    if(!options.maxCriteria){\n\t        yCorrection.m =-1;\n\t        yCorrection.b*=-1;\n\t    }\n\t\n\t    for (var i=0; i<y.length; i++){\n\t        y[i]=yCorrection.m*y[i]-yCorrection.b;\n\t    }\n\t\n\t    for (var i=0; i<y.length; i++) {\n\t        if (y[i] < 0) {\n\t            y[i] = 0;\n\t        }\n\t    }\n\t\n\t    //If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n\t    var Y = y;\n\t    if((maxDx-minDx)/maxDx<0.05){\n\t        if(options.smoothY)\n\t            Y = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n\t        var dY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n\t        var ddY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n\t    }\n\t    else{\n\t        if(options.smoothY)\n\t            Y = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n\t        var dY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n\t        var ddY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n\t    }\n\t\n\t    var X = x;\n\t    var dx = x[1]-x[0];\n\t    var maxDdy=0;\n\t    var maxY = 0;\n\t    //console.log(Y.length);\n\t    for (var i = 0; i < Y.length ; i++){\n\t        if(Math.abs(ddY[i])>maxDdy){\n\t            maxDdy = Math.abs(ddY[i]);\n\t        }\n\t        if(Math.abs(Y[i])>maxY){\n\t            maxY = Math.abs(Y[i]);\n\t        }\n\t    }\n\t    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n\t\n\t    var minddY = [];\n\t    var intervalL = [];\n\t    var intervalR = [];\n\t    var lastMax = null;\n\t    var lastMin = null;\n\t    var broadMask = new Array();\n\t    //console.log(dx);\n\t    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n\t    for (var i = 1; i < Y.length -1 ; i++){\n\t        //console.log(dY[i]);\n\t        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n\t            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n\t            lastMin = X[i];\n\t            //console.log(\"min \"+lastMin);\n\t            if(dx>0&&lastMax!=null){\n\t                intervalL.push(lastMax);\n\t                intervalR.push(lastMin);\n\t\n\t            }\n\t        }\n\t\n\t        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n\t            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n\t            lastMax = X[i];\n\t            //console.log(\"max \"+lastMax);\n\t            if(dx<0&&lastMin!=null){\n\t                intervalL.push(lastMax);\n\t                intervalR.push(lastMin);\n\t            }\n\t        }\n\t        if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n\t            minddY.push(i);//( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n\t            if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n\t                broadMask.push(false);\n\t            }\n\t            else{\n\t                broadMask.push(true);\n\t            }\n\t        }\n\t    }\n\t    //\n\t    //console.log(intervalL.length+\" \"+minddY.length+\" \"+broadMask.length);\n\t    var signals = [];\n\t    var lastK = 0,possible, k, f,frequency, distanceJ, minDistance, gettingCloser;\n\t    for (var j = 0; j < minddY.length; j++){\n\t        frequency = X[minddY[j]];//minddY[j][0];\n\t        possible = -1;\n\t        k=lastK+1;\n\t        minDistance = Number.MAX_VALUE;\n\t        distanceJ = 0;\n\t        gettingCloser=true;\n\t        while(possible==-1&&k<intervalL.length&&gettingCloser){\n\t            distanceJ = Math.abs(frequency-(intervalL[k]+intervalR[k])/2);\n\t            //Still getting closer?\n\t            if(distanceJ<minDistance){\n\t                minDistance = distanceJ;\n\t            }\n\t            else{\n\t                gettingCloser = false;\n\t            }\n\t            if( distanceJ <Math.abs(intervalL[k]-intervalR[k])/2){\n\t                possible=k;\n\t                lastK = k;\n\t            }\n\t            k++;\n\t        }\n\t        //console.log(lastK+\" \"+intervalL.length+\" possible \"+k);\n\t        if (possible!=-1){\n\t            //console.log(height);\n\t            if (Math.abs(Y[minddY[j]]) > options.minMaxRatio*maxY) {\n\t                signals.push({\n\t                    i:minddY[j],\n\t                    x: frequency,\n\t                    y: (Y[minddY[j]]-yCorrection.b)/yCorrection.m,\n\t                    width:Math.abs(intervalR[possible] - intervalL[possible]),//widthCorrection\n\t                    soft:broadMask[j]\n\t                })\n\t            }\n\t        }\n\t    }\n\t\n\t\n\t    if(options.realTopDetection){\n\t        realTopDetection(signals,X,Y);\n\t    }\n\t\n\t    //Correct the values to fit the original spectra data\n\t    for(var j=0;j<signals.length;j++){\n\t        signals[j].base=options.noiseLevel;\n\t    }\n\t\n\t    signals.sort(function (a, b) {\n\t        return a.x - b.x;\n\t    });\n\t\n\t    return signals;\n\t\n\t}\n\t\n\tfunction getNoiseLevel(y){\n\t    var mean = 0,stddev=0;\n\t    var length = y.length,i=0;\n\t    for(i = 0; i < length; i++){\n\t        mean+=y[i];\n\t    }\n\t    mean/=length;\n\t    var averageDeviations = new Array(length);\n\t    for (i = 0; i < length; i++)\n\t        averageDeviations[i] = Math.abs(y[i] - mean);\n\t    averageDeviations.sort();\n\t    if (length % 2 == 1) {\n\t        stddev = averageDeviations[(length-1)/2] / 0.6745;\n\t    } else {\n\t        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n\t    }\n\t\n\t    return stddev;\n\t}\n\t\n\tfunction realTopDetection(peakList, x, y){\n\t    //console.log(peakList);\n\t    //console.log(x);\n\t    //console.log(y);\n\t    var listP = [];\n\t    var alpha, beta, gamma, p,currentPoint;\n\t    for(var j=0;j<peakList.length;j++){\n\t        currentPoint = peakList[j].i;//peakList[j][2];\n\t        var tmp = currentPoint;\n\t        //The detected peak could be moved 1 or 2 unit to left or right.\n\t        if(y[currentPoint-1]>=y[currentPoint-2]\n\t            &&y[currentPoint-1]>=y[currentPoint]) {\n\t            currentPoint--;\n\t        }\n\t        else{\n\t            if(y[currentPoint+1]>=y[currentPoint]\n\t                &&y[currentPoint+1]>=y[currentPoint+2]) {\n\t                currentPoint++;\n\t            }\n\t            else{\n\t                if(y[currentPoint-2]>=y[currentPoint-3]\n\t                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n\t                    currentPoint-=2;\n\t                }\n\t                else{\n\t                    if(y[currentPoint+2]>=y[currentPoint+1]\n\t                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n\t                        currentPoint+=2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n\t            &&y[currentPoint]>=y[currentPoint-1]\n\t            &&y[currentPoint]>=y[currentPoint+1]) {\n\t            alpha = 20 * Math.log10(y[currentPoint - 1]);\n\t            beta = 20 * Math.log10(y[currentPoint]);\n\t            gamma = 20 * Math.log10(y[currentPoint + 1]);\n\t            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n\t            //console.log(\"p: \"+p);\n\t            //console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n\t            peakList[j].x = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n\t            peakList[j].y = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n\t                - y[currentPoint + 1]) * p;//signal.peaks[j].intensity);\n\t            //console.log(y[tmp]+\" \"+peakList[j].y);\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports=gsd;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.array = __webpack_require__(2);\n\texports.matrix = __webpack_require__(37);\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar arrayStat = __webpack_require__(2);\n\t\n\t// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\t\n\tfunction entropy(matrix, eps) {\n\t    if (typeof(eps) === 'undefined') {\n\t        eps = 0;\n\t    }\n\t    var sum = 0,\n\t        l1 = matrix.length,\n\t        l2 = matrix[0].length;\n\t    for (var i = 0; i < l1; i++) {\n\t        for (var j = 0; j < l2; j++) {\n\t            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n\t        }\n\t    }\n\t    return -sum;\n\t}\n\t\n\tfunction mean(matrix, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        theMean, N, i, j;\n\t\n\t    if (dimension === -1) {\n\t        theMean = [0];\n\t        N = rows * cols;\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = 0; j < cols; j++) {\n\t                theMean[0] += matrix[i][j];\n\t            }\n\t        }\n\t        theMean[0] /= N;\n\t    } else if (dimension === 0) {\n\t        theMean = new Array(cols);\n\t        N = rows;\n\t        for (j = 0; j < cols; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < rows; i++) {\n\t                theMean[j] += matrix[i][j];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else if (dimension === 1) {\n\t        theMean = new Array(rows);\n\t        N = cols;\n\t        for (j = 0; j < rows; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < cols; i++) {\n\t                theMean[j] += matrix[j][i];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t    return theMean;\n\t}\n\t\n\tfunction standardDeviation(matrix, means, unbiased) {\n\t    var vari = variance(matrix, means, unbiased), l = vari.length;\n\t    for (var i = 0; i < l; i++) {\n\t        vari[i] = Math.sqrt(vari[i]);\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction variance(matrix, means, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') {\n\t        unbiased = true;\n\t    }\n\t    means = means || mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum1 = 0, sum2 = 0, x = 0;\n\t        for (var i = 0; i < rows; i++) {\n\t            x = matrix[i][j] - means[j];\n\t            sum1 += x;\n\t            sum2 += x * x;\n\t        }\n\t        if (unbiased) {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n\t        } else {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n\t        }\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction median(matrix) {\n\t    var rows = matrix.length, cols = matrix[0].length;\n\t    var medians = new Array(cols);\n\t\n\t    for (var i = 0; i < cols; i++) {\n\t        var data = new Array(rows);\n\t        for (var j = 0; j < rows; j++) {\n\t            data[j] = matrix[j][i];\n\t        }\n\t        data.sort();\n\t        var N = data.length;\n\t        if (N % 2 === 0) {\n\t            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n\t        } else {\n\t            medians[i] = data[Math.floor(N / 2)];\n\t        }\n\t    }\n\t    return medians;\n\t}\n\t\n\tfunction mode(matrix) {\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        modes = new Array(cols),\n\t        i, j;\n\t    for (i = 0; i < cols; i++) {\n\t        var itemCount = new Array(rows);\n\t        for (var k = 0; k < rows; k++) {\n\t            itemCount[k] = 0;\n\t        }\n\t        var itemArray = new Array(rows);\n\t        var count = 0;\n\t\n\t        for (j = 0; j < rows; j++) {\n\t            var index = itemArray.indexOf(matrix[j][i]);\n\t            if (index >= 0) {\n\t                itemCount[index]++;\n\t            } else {\n\t                itemArray[count] = matrix[j][i];\n\t                itemCount[count] = 1;\n\t                count++;\n\t            }\n\t        }\n\t\n\t        var maxValue = 0, maxIndex = 0;\n\t        for (j = 0; j < count; j++) {\n\t            if (itemCount[j] > maxValue) {\n\t                maxValue = itemCount[j];\n\t                maxIndex = j;\n\t            }\n\t        }\n\t\n\t        modes[i] = itemArray[maxIndex];\n\t    }\n\t    return modes;\n\t}\n\t\n\tfunction skewness(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, l = means.length;\n\t    var skew = new Array(l);\n\t\n\t    for (var j = 0; j < l; j++) {\n\t        var s2 = 0, s3 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s3 += dev * dev * dev;\n\t        }\n\t\n\t        var m2 = s2 / n;\n\t        var m3 = s3 / n;\n\t        var g = m3 / Math.pow(m2, 3 / 2);\n\t\n\t        if (unbiased) {\n\t            var a = Math.sqrt(n * (n - 1));\n\t            var b = n - 2;\n\t            skew[j] = (a / b) * g;\n\t        } else {\n\t            skew[j] = g;\n\t        }\n\t    }\n\t    return skew;\n\t}\n\t\n\tfunction kurtosis(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, m = matrix[0].length;\n\t    var kurt = new Array(m);\n\t\n\t    for (var j = 0; j < m; j++) {\n\t        var s2 = 0, s4 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s4 += dev * dev * dev * dev;\n\t        }\n\t        var m2 = s2 / n;\n\t        var m4 = s4 / n;\n\t\n\t        if (unbiased) {\n\t            var v = s2 / (n - 1);\n\t            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t            var b = s4 / (v * v);\n\t            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t            kurt[j] = a * b - 3 * c;\n\t        } else {\n\t            kurt[j] = m4 / (m2 * m2) - 3;\n\t        }\n\t    }\n\t    return kurt;\n\t}\n\t\n\tfunction standardError(matrix) {\n\t    var samples = matrix.length;\n\t    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n\t    var standardErrors = new Array(l);\n\t    var sqrtN = Math.sqrt(samples);\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        standardErrors[i] = standardDeviations[i] / sqrtN;\n\t    }\n\t    return standardErrors;\n\t}\n\t\n\tfunction covariance(matrix, dimension) {\n\t    return scatter(matrix, undefined, dimension);\n\t}\n\t\n\tfunction scatter(matrix, divisor, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    if (typeof(divisor) === 'undefined') {\n\t        if (dimension === 0) {\n\t            divisor = matrix.length - 1;\n\t        } else if (dimension === 1) {\n\t            divisor = matrix[0].length - 1;\n\t        }\n\t    }\n\t    var means = mean(matrix, dimension),\n\t        rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, s, k;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tfunction correlation(matrix) {\n\t    var means = mean(matrix),\n\t        standardDeviations = standardDeviation(matrix, true, means),\n\t        scores = zScores(matrix, means, standardDeviations),\n\t        rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        i, j;\n\t\n\t    var cor = new Array(cols);\n\t    for (i = 0; i < cols; i++) {\n\t        cor[i] = new Array(cols);\n\t    }\n\t    for (i = 0; i < cols; i++) {\n\t        for (j = i; j < cols; j++) {\n\t            var c = 0;\n\t            for (var k = 0, l = scores.length; k < l; k++) {\n\t                c += scores[k][j] * scores[k][i];\n\t            }\n\t            c /= rows - 1;\n\t            cor[i][j] = c;\n\t            cor[j][i] = c;\n\t        }\n\t    }\n\t    return cor;\n\t}\n\t\n\tfunction zScores(matrix, means, standardDeviations) {\n\t    means = means || mean(matrix);\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n\t    return standardize(center(matrix, means, false), standardDeviations, true);\n\t}\n\t\n\tfunction center(matrix, means, inPlace) {\n\t    means = means || mean(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var row = result[i];\n\t        for (j = 0, jj = row.length; j < jj; j++) {\n\t            row[j] = matrix[i][j] - means[j];\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction standardize(matrix, standardDeviations, inPlace) {\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var resultRow = result[i];\n\t        var sourceRow = matrix[i];\n\t        for (j = 0, jj = resultRow.length; j < jj; j++) {\n\t            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n\t                resultRow[j] = sourceRow[j] / standardDeviations[j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction weightedVariance(matrix, weights) {\n\t    var means = mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum = 0;\n\t        var a = 0, b = 0;\n\t\n\t        for (var i = 0; i < rows; i++) {\n\t            var z = matrix[i][j] - means[j];\n\t            var w = weights[i];\n\t\n\t            sum += w * (z * z);\n\t            b += w;\n\t            a += w * w;\n\t        }\n\t\n\t        vari[j] = sum * (b / (b * b - a));\n\t    }\n\t\n\t    return vari;\n\t}\n\t\n\tfunction weightedMean(matrix, weights, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length,\n\t        means, i, ii, j, w, row;\n\t\n\t    if (dimension === 0) {\n\t        means = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            row = matrix[i];\n\t            w = weights[i];\n\t            for (j = 0; j < cols; j++) {\n\t                means[j] += row[j] * w;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        means = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (j = 0; j < rows; j++) {\n\t            row = matrix[j];\n\t            w = weights[j];\n\t            for (i = 0; i < cols; i++) {\n\t                means[j] += row[i] * w;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    var weightSum = arrayStat.sum(weights);\n\t    if (weightSum !== 0) {\n\t        for (i = 0, ii = means.length; i < ii; i++) {\n\t            means[i] /= weightSum;\n\t        }\n\t    }\n\t    return means;\n\t}\n\t\n\tfunction weightedCovariance(matrix, weights, means, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    var s1 = 0, s2 = 0;\n\t    for (var i = 0, ii = weights.length; i < ii; i++) {\n\t        s1 += weights[i];\n\t        s2 += weights[i] * weights[i];\n\t    }\n\t    var factor = s1 / (s1 * s1 - s2);\n\t    return weightedScatter(matrix, weights, means, factor, dimension);\n\t}\n\t\n\tfunction weightedScatter(matrix, weights, means, factor, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    if (typeof(factor) === 'undefined') {\n\t        factor = 1;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, k, s;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tmodule.exports = {\n\t    entropy: entropy,\n\t    mean: mean,\n\t    standardDeviation: standardDeviation,\n\t    variance: variance,\n\t    median: median,\n\t    mode: mode,\n\t    skewness: skewness,\n\t    kurtosis: kurtosis,\n\t    standardError: standardError,\n\t    covariance: covariance,\n\t    scatter: scatter,\n\t    correlation: correlation,\n\t    zScores: zScores,\n\t    center: center,\n\t    standardize: standardize,\n\t    weightedVariance: weightedVariance,\n\t    weightedMean: weightedMean,\n\t    weightedCovariance: weightedCovariance,\n\t    weightedScatter: weightedScatter\n\t};\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\n\tvar extend = __webpack_require__(7);\n\tvar stat = __webpack_require__(36);\n\t\n\tvar defaultOptions = {\n\t    windowSize: 9,\n\t    derivative: 0,\n\t    polynomial: 3,\n\t};\n\t\n\t\n\tfunction SavitzkyGolay(data, h, options) {\n\t    options = extend({}, defaultOptions, options);\n\t\n\t    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n\t            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\t\n\t\n\t    if (options.windowSize>data.length)\n\t        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n\t    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n\t        throw new RangeError('Derivative should be a positive integer');\n\t    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n\t        throw new RangeError('Polynomial should be a positive integer');\n\t    if (options.polynomial >= 6)\n\t        console.warn('You should not use polynomial grade higher than 5 if you are' +\n\t            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\t\n\t    var windowSize = options.windowSize;\n\t\n\t    var half = Math.floor(windowSize/2);\n\t    var np = data.length;\n\t    var ans = new Array(np);\n\t    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n\t    var hs = 0;\n\t    var constantH = true;\n\t    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n\t        constantH = false;\n\t    }\n\t    else{\n\t        hs = Math.pow(h, options.derivative);\n\t    }\n\t    //console.log(\"Constant h: \"+constantH);\n\t    //For the borders\n\t    for(var i=0;i<half;i++){\n\t        var wg1=weights[half-i-1];\n\t        var wg2=weights[half+i+1];\n\t        var d1 = 0,d2=0;\n\t        for (var l = 0; l < windowSize; l++){\n\t            d1 += wg1[l] * data[l];\n\t            d2 += wg2[l] * data[np-windowSize+l-1];\n\t        }\n\t        if(constantH){\n\t            ans[half-i-1] = d1/hs;\n\t            ans[np-half+i] = d2/hs;\n\t        }\n\t        else{\n\t            hs = getHs(h,half-i-1,half, options.derivative);\n\t            ans[half-i-1] = d1/hs;\n\t            hs = getHs(h,np-half+i,half, options.derivative);\n\t            ans[np-half+i] = d2/hs;\n\t        }\n\t    }\n\t    //For the internal points\n\t    var wg = weights[half];\n\t    for(var i=windowSize;i<np+1;i++){\n\t        var d = 0;\n\t        for (var l = 0; l < windowSize; l++)\n\t            d += wg[l] * data[l+i-windowSize];\n\t        if(!constantH)\n\t            hs = getHs(h,i-half-1,half, options.derivative);\n\t        ans[i-half-1] = d/hs;\n\t    }\n\t    return ans;\n\t}\n\t\n\tfunction getHs(h,center,half,derivative){\n\t    var hs = 0;\n\t    var count = 0;\n\t    for(var i=center-half;i<center+half;i++){\n\t        if(i>=0 && i < h.length-1){\n\t            hs+= (h[i+1]-h[i]);\n\t            count++;\n\t        }\n\t    }\n\t    return Math.pow(hs/count,derivative);\n\t}\n\t\n\tfunction GramPoly(i,m,k,s){\n\t    var Grampoly = 0;\n\t    if(k>0){\n\t        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n\t            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n\t    }\n\t    else{\n\t        if(k==0&&s==0){\n\t            Grampoly=1;\n\t        }\n\t        else{\n\t            Grampoly=0;\n\t        }\n\t    }\n\t    //console.log(Grampoly);\n\t    return Grampoly;\n\t}\n\t\n\tfunction GenFact(a,b){\n\t    var gf=1;\n\t    if(a>=b){\n\t        for(var j=a-b+1;j<=a;j++){\n\t            gf*=j;\n\t        }\n\t    }\n\t    return gf;\n\t}\n\t\n\tfunction Weight(i,t,m,n,s){\n\t    var sum=0;\n\t    for(var k=0;k<=n;k++){\n\t        //console.log(k);\n\t        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n\t    }\n\t    return sum;\n\t}\n\t\n\t/**\n\t *\n\t * @param m  Number of points\n\t * @param n  Polynomial grade\n\t * @param s  Derivative\n\t */\n\tfunction fullWeights(m,n,s){\n\t    var weights = new Array(m);\n\t    var np = Math.floor(m/2);\n\t    for(var t=-np;t<=np;t++){\n\t        weights[t+np] = new Array(m);\n\t        for(var j=-np;j<=np;j++){\n\t            weights[t+np][j+np]=Weight(j,t,np,n,s);\n\t        }\n\t    }\n\t    return weights;\n\t}\n\t\n\t/*function entropy(data,h,options){\n\t    var trend = SavitzkyGolay(data,h,trendOptions);\n\t    var copy = new Array(data.length);\n\t    var sum = 0;\n\t    var max = 0;\n\t    for(var i=0;i<data.length;i++){\n\t        copy[i] = data[i]-trend[i];\n\t    }\n\t\n\t    sum/=data.length;\n\t    console.log(sum+\" \"+max);\n\t    console.log(stat.array.standardDeviation(copy));\n\t    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n\t    return sum;\n\t\n\t}\n\t\n\t\n\t\n\tfunction guessWindowSize(data, h){\n\t    console.log(\"entropy \"+entropy(data,h,trendOptions));\n\t    return 5;\n\t}\n\t*/\n\tmodule.exports = SavitzkyGolay;\n\t \n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar impuritiesList = [\n\t    {\"solvent\":\"CDCl3\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"ds\",\"shift\":7.26}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"bs\",\"shift\":1.56}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.1}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.17}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.1}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.36}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.28}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.19},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.22}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.98},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.01},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.27},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.43}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.26}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.43}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.73}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.3}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.21},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.48}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.65},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.57},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.39}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.4},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.55}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.09},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.02},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":8.02},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.96},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.88}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.62}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.71}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.25},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.72},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":1.32}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.05},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.12},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.26}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.14},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.46},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.06}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.76}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.26}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.26}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.65}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.49},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.09}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.33}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":7},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.27}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.22},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":4.04}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.62},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.29},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.68}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.07}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.85},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.76}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.36},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.17},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.25}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.03},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.53}],\"name\":\"triethylamine\"}]},\n\t    {\"solvent\":\"(CD3)2CO\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":2.05}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.84}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.09}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.05}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.36}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.18}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.13},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.13}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.96},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.22},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.41}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":8.02}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.43}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.87}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.63}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.11},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.41}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.56},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.47},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.46}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.83}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.96},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.78}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.52}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.59}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.12},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.57},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":3.39}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.05},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.2}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.45},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.87},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.29}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.28}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.59}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.31},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.12}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.43}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.27}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.1},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.9}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.58},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.35},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.76}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.13}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.79},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.63}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.32},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.5},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.5}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.45}],\"name\":\"triethylamine\"}]},\n\t    {\"solvent\":\"(CD3)2SO/DMSO\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"quint\",\"shift\":2.5}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.33}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.91}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.09}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.37}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.11},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.19}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.11},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.08}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.87},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.65},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.18},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.36}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":8.32}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.9}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.76}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.09},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.38}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.51},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.38},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.24}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.24},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.43}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.78}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.95},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.89},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.73}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.54}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.57}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.06},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.44},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":4.63}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.99},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.03},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.17}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.43},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.91}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.34}],\"name\":\"ethylene_glycol\"},{\"shifts\":[],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.25}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.53}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.16},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.01}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.42}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.27}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.04},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.78}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.58},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.39},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.79}],\"name\":\"pyridine\"},{\"shifts\":[],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.76},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.6}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.3},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.18},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.25}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.93},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.43}],\"name\":\"triethylamine\"}]},\n\t    {\"solvent\":\"C6D6\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":7.16}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.4}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.15}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.05},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.07},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.04}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.05},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.79},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.24},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.38}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.15}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.9}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.27}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.11},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.26}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.46},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.34},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.11}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.12},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.33}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.6},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.57},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.05}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.63},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.36},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.86}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.68}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.35}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.34}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.65},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.89},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.92}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.58},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":1.81},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.85}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.41}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.92},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.36}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.89},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.24}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.4}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.07}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.23}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":0.95},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.67}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.53},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":6.66},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":6.98}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.29}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.4},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.57}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.11},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.02},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.13}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.4}],\"name\":\"triethylamine\"}]},\n\t    {\"solvent\":\"CD3CN\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":1.94}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.13}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.08}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.37}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.16},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.18}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.14},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.13}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.97},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.2},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.22},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.39}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.58}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.44}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.81}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.44}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.12},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.42}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.53},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.45},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.29}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.45}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.96},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.83}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.92},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.89},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.77}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.5}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.6}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.12},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.54},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":2.47}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.06},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.2}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.06},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.43},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.51}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.27}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.89},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.28}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.57}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.16}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.31}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.87},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.29}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.09},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.87}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.57},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.33},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.73}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.08}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.8},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.64}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.33},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.2},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.2}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.45}],\"name\":\"triethylamine\"}]},\n\t    {\"solvent\":\"CD3OD\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":3.31}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.87}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.99}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.15}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.03}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.33}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.15},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.2}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.92},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.21},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.9}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.45}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.78}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.49}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.18},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.49}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.61},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.58},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.35}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.35},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.52}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.31},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.92}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.97},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.99},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.86}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.65}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.66}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.19},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.6}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.01},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.09},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.24}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.12},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.5},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.01}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.59}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.29}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.9},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.29}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.64}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.34}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.34}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.89},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.29}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.5},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.92}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.53},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.44},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.85}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.1}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.87},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.71}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.32},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.16},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.16}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.05},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.58}],\"name\":\"triethylamine\"}]},\n\t    {\"solvent\":\"D2O\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":4.79}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.08}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.22}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.06}],\"name\":\"acetonitrile\"},{\"shifts\":[],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.24}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.21},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.22}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[],\"name\":\"BHTb\"},{\"shifts\":[],\"name\":\"chloroform\"},{\"shifts\":[],\"name\":\"cyclohexane\"},{\"shifts\":[],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.17},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.56}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.67},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.61},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.37}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.37},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.6}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.08},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.06},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.9}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.92},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.01},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.85}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.71}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.75}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.17},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.65}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.14},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.24}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.19},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.18},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.26}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.65}],\"name\":\"ethylene_glycol\"},{\"shifts\":[],\"name\":\"grease^f\"},{\"shifts\":[],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.61}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.34}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.4}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.9}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.17},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":4.02}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.52},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.45},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.87}],\"name\":\"pyridine\"},{\"shifts\":[],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.88},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.74}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.99},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.57}],\"name\":\"triethylamine\"}]}];\n\t\n\tvar look4 = \"solvent_residual_peak\"+\"H2O\"+\"TMS\";\n\tvar pascalTriangle = [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]];\n\tvar patterns = [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"];\n\t\n\tfunction removeSignal(peak, noiseSignal){\n\t\n\t}\n\t\n\tfunction checkImpurity(peakList, impurity){\n\t    var error = 0.025,i;\n\t    var found = false;\n\t    var indexes = new Array(impurity.length);\n\t    for(i=0;i<impurity.length;i++){\n\t        found=false;\n\t        for(var j=0;j<peakList.length;j++){\n\t            if(Math.abs(impurity[i].shift-peakList[j].delta1)<\n\t                (error+Math.abs(peakList[j].startX-peakList[j].stopX)/2)&&\n\t                (impurity[i].multiplicity===\"\"||\n\t                (impurity[i].multiplicity.indexOf(peakList[j].multiplicity)>=0&&!peakList[j].asymmetric))){\n\t                found = true;\n\t                indexes[i]=j;\n\t                break;\n\t            }\n\t        }\n\t        if(!found)\n\t            break;\n\t    }\n\t\n\t    var toRemove = [];\n\t    if(found){\n\t        for(i=0;i<impurity.length;i++){\n\t            toRemove.push(indexes[i]);\n\t        }\n\t    }\n\t    else\n\t        return 0;\n\t    for(i=0;i<toRemove.length;i++){\n\t        peakList[toRemove[i]].integralData.value = 0;\n\t    }\n\t    return 1;\n\t}\n\t\n\tfunction removeImpurities(peakList, solvent, nH){\n\t    var impurities = null, i;\n\t    for(i=0;i<impuritiesList.length;i++){\n\t        if(impuritiesList[i].solvent.indexOf(solvent)>=0){\n\t            impurities = impuritiesList[i].impurities;\n\t            break;\n\t        }\n\t    }\n\t    impurities.push({\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":0.0}],\"name\":\"TMS\"});\n\t    var nCols = peakList.length;\n\t    var nRows = impurities.length;\n\t    var scores = new Array(nRows);\n\t    for(i=0;i<nRows;i++){\n\t        if( look4.indexOf(impurities[i].name)>=0){\n\t            scores[i]=checkImpurity(peakList, impurities[i].shifts);\n\t        }\n\t    }\n\t    //Recompute the integrals\n\t    var sumObserved=0;\n\t    for(i=0;i<peakList.length;i++){\n\t        sumObserved+=peakList[i].integralData.value;\n\t    }\n\t    if(sumObserved!=nH){\n\t        sumObserved=nH/sumObserved;\n\t        for(i=0;i<peakList.length;i++){\n\t            peakList[i].integralData.value*=sumObserved;\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports = removeImpurities;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.FFTUtils = __webpack_require__(41);\n\texports.FFT = __webpack_require__(42);\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar FFT = __webpack_require__(42);\n\t\n\tvar FFTUtils= {\n\t    DEBUG : false,\n\t\n\t    /**\n\t     * Calculates the inverse of a 2D Fourier transform\n\t     *\n\t     * @param ft\n\t     * @param ftRows\n\t     * @param ftCols\n\t     * @return\n\t     */\n\t    ifft2DArray : function(ft, ftRows, ftCols){\n\t        var tempTransform = new Array(ftRows * ftCols);\n\t        var nRows = ftRows / 2;\n\t        var nCols = (ftCols - 1) * 2;\n\t        // reverse transform columns\n\t        FFT.init(nRows);\n\t        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n\t        for (var iCol = 0; iCol < ftCols; iCol++) {\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tmpCols.re[iRow] = ft[(iRow * 2) * ftCols + iCol];\n\t                tmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];\n\t            }\n\t            //Unnormalized inverse transform\n\t            FFT.bt(tmpCols.re, tmpCols.im);\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tempTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t                tempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t            }\n\t        }\n\t\n\t        // reverse row transform\n\t        var finalTransform = new Array(nRows * nCols);\n\t        FFT.init(nCols);\n\t        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n\t        var scale = nCols * nRows;\n\t        for (var iRow = 0; iRow < ftRows; iRow += 2) {\n\t            tmpRows.re[0] = tempTransform[iRow * ftCols];\n\t            tmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];\n\t            for (var iCol = 1; iCol < ftCols; iCol++) {\n\t                tmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];\n\t                tmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];\n\t                tmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];\n\t                tmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];\n\t            }\n\t            //Unnormalized inverse transform\n\t            FFT.bt(tmpRows.re, tmpRows.im);\n\t\n\t            var indexB = (iRow / 2) * nCols;\n\t            for (var iCol = nCols - 1; iCol >= 0; iCol--) {\n\t                finalTransform[indexB + iCol] = tmpRows.re[iCol] / scale;\n\t            }\n\t        }\n\t        return finalTransform;\n\t    },\n\t    /**\n\t     * Calculates the fourier transform of a matrix of size (nRows,nCols) It is\n\t     * assumed that both nRows and nCols are a power of two\n\t     *\n\t     * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the\n\t     * even rows contain the real part and the odd rows the imaginary part of the\n\t     * transform\n\t     * @param data\n\t     * @param nRows\n\t     * @param nCols\n\t     * @return\n\t     */\n\t    fft2DArray:function(data, nRows, nCols) {\n\t        var ftCols = (nCols / 2 + 1);\n\t        var ftRows = nRows * 2;\n\t        var tempTransform = new Array(ftRows * ftCols);\n\t        FFT.init(nCols);\n\t        // transform rows\n\t        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n\t        var row1 = {re: new Array(nCols), im: new Array(nCols)}\n\t        var row2 = {re: new Array(nCols), im: new Array(nCols)}\n\t        var index, iRow0, iRow1, iRow2, iRow3;\n\t        for (var iRow = 0; iRow < nRows / 2; iRow++) {\n\t            index = (iRow * 2) * nCols;\n\t            tmpRows.re = data.slice(index, index + nCols);\n\t\n\t            index = (iRow * 2 + 1) * nCols;\n\t            tmpRows.im = data.slice(index, index + nCols);\n\t\n\t            FFT.fft1d(tmpRows.re, tmpRows.im);\n\t\n\t            this.reconstructTwoRealFFT(tmpRows, row1, row2);\n\t            //Now lets put back the result into the output array\n\t            iRow0 = (iRow * 4) * ftCols;\n\t            iRow1 = (iRow * 4 + 1) * ftCols;\n\t            iRow2 = (iRow * 4 + 2) * ftCols;\n\t            iRow3 = (iRow * 4 + 3) * ftCols;\n\t            for (var k = ftCols - 1; k >= 0; k--) {\n\t                tempTransform[iRow0 + k] = row1.re[k];\n\t                tempTransform[iRow1 + k] = row1.im[k];\n\t                tempTransform[iRow2 + k] = row2.re[k];\n\t                tempTransform[iRow3 + k] = row2.im[k];\n\t            }\n\t        }\n\t\n\t        //console.log(tempTransform);\n\t        row1 = null;\n\t        row2 = null;\n\t        // transform columns\n\t        var finalTransform = new Array(ftRows * ftCols);\n\t        FFT.init(nRows);\n\t        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n\t        for (var iCol = ftCols - 1; iCol >= 0; iCol--) {\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tmpCols.re[iRow] = tempTransform[(iRow * 2) * ftCols + iCol];\n\t                tmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];\n\t            }\n\t            FFT.fft1d(tmpCols.re, tmpCols.im);\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                finalTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t                finalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t            }\n\t        }\n\t\n\t        //console.log(finalTransform);\n\t        return finalTransform;\n\t\n\t    },\n\t    /**\n\t     *\n\t     * @param fourierTransform\n\t     * @param realTransform1\n\t     * @param realTransform2\n\t     *\n\t     * Reconstructs the individual Fourier transforms of two simultaneously\n\t     * transformed series. Based on the Symmetry relationships (the asterisk\n\t     * denotes the complex conjugate)\n\t     *\n\t     * F_{N-n} = F_n^{*} for a purely real f transformed to F\n\t     *\n\t     * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G\n\t     *\n\t     */\n\t    reconstructTwoRealFFT:function(fourierTransform, realTransform1, realTransform2) {\n\t        var length = fourierTransform.re.length;\n\t\n\t        // the components n=0 are trivial\n\t        realTransform1.re[0] = fourierTransform.re[0];\n\t        realTransform1.im[0] = 0.0;\n\t        realTransform2.re[0] = fourierTransform.im[0];\n\t        realTransform2.im[0] = 0.0;\n\t        var rm, rp, im, ip, j;\n\t        for (var i = length / 2; i > 0; i--) {\n\t            j = length - i;\n\t            rm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);\n\t            rp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);\n\t            im = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);\n\t            ip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);\n\t            realTransform1.re[i] = rp;\n\t            realTransform1.im[i] = im;\n\t            realTransform1.re[j] = rp;\n\t            realTransform1.im[j] = -im;\n\t            realTransform2.re[i] = ip;\n\t            realTransform2.im[i] = -rm;\n\t            realTransform2.re[j] = ip;\n\t            realTransform2.im[j] = rm;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * In place version of convolute 2D\n\t     *\n\t     * @param ftSignal\n\t     * @param ftFilter\n\t     * @param ftRows\n\t     * @param ftCols\n\t     * @return\n\t     */\n\t    convolute2DI:function(ftSignal, ftFilter, ftRows, ftCols) {\n\t        var re, im;\n\t        for (var iRow = 0; iRow < ftRows / 2; iRow++) {\n\t            for (var iCol = 0; iCol < ftCols; iCol++) {\n\t                //\n\t                re = ftSignal[(iRow * 2) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2) * ftCols + iCol]\n\t                - ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2 + 1) * ftCols + iCol];\n\t                im = ftSignal[(iRow * 2) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2 + 1) * ftCols + iCol]\n\t                + ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2) * ftCols + iCol];\n\t                //\n\t                ftSignal[(iRow * 2) * ftCols + iCol] = re;\n\t                ftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;\n\t            }\n\t        }\n\t    },\n\t    /**\n\t     *\n\t     * @param data\n\t     * @param kernel\n\t     * @param nRows\n\t     * @param nCols\n\t     * @returns {*}\n\t     */\n\t    convolute:function(data, kernel, nRows, nCols){\n\t        var ftSpectrum = new Array(nCols * nRows);\n\t        for (var i = 0; i<nRows * nCols; i++){\n\t            ftSpectrum[i] = data[i];\n\t        }\n\t\n\t        ftSpectrum = this.fft2DArray(ftSpectrum, nRows, nCols);\n\t\n\t        var dim = kernel.length;\n\t        var ftFilterData = new Array(nCols * nRows);\n\t        for(var i=0;i<nCols * nRows;i++){\n\t            ftFilterData[i]=0;\n\t        }\n\t\n\t        var iRow, iCol;\n\t        var shift = (dim - 1) / 2;\n\t        //console.log(dim);\n\t        for (var ir = 0; ir < dim; ir++) {\n\t            iRow = (ir - shift + nRows) % nRows;\n\t            for (var ic = 0; ic < dim; ic++) {\n\t                iCol = (ic - shift + nCols) % nCols;\n\t                ftFilterData[iRow * nCols + iCol] = kernel[ir][ic];\n\t            }\n\t        }\n\t\n\t        ftFilterData = this.fft2DArray(ftFilterData, nRows, nCols);\n\t\n\t        var ftRows = nRows * 2;\n\t        var ftCols = nCols / 2 + 1;\n\t        this.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\t\n\t        return  this.ifft2DArray(ftSpectrum, ftRows, ftCols);\n\t    }\n\t}\n\t\n\tmodule.exports = FFTUtils;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Fast Fourier Transform module\n\t * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n\t */\n\tvar FFT = (function(){\n\t  var FFT;  \n\t  \n\t  if(true) {\n\t    FFT = exports;   // for CommonJS\n\t  } else {\n\t    FFT = {};\n\t  }\n\t  \n\t  var version = {\n\t    release: '0.3.0',\n\t    date: '2013-03'\n\t  };\n\t  FFT.toString = function() {\n\t    return \"version \" + version.release + \", released \" + version.date;\n\t  };\n\t\n\t  // core operations\n\t  var _n = 0,          // order\n\t      _bitrev = null,  // bit reversal table\n\t      _cstb = null;    // sin/cos table\n\t\n\t  var core = {\n\t    init : function(n) {\n\t      if(n !== 0 && (n & (n - 1)) === 0) {\n\t        _n = n;\n\t        core._initArray();\n\t        core._makeBitReversalTable();\n\t        core._makeCosSinTable();\n\t      } else {\n\t        throw new Error(\"init: radix-2 required\");\n\t      }\n\t    },\n\t    // 1D-FFT\n\t    fft1d : function(re, im) {\n\t      core.fft(re, im, 1);\n\t    },\n\t    // 1D-IFFT\n\t    ifft1d : function(re, im) {\n\t      var n = 1/_n;\n\t      core.fft(re, im, -1);\n\t      for(var i=0; i<_n; i++) {\n\t        re[i] *= n;\n\t        im[i] *= n;\n\t      }\n\t    },\n\t     // 1D-IFFT\n\t    bt1d : function(re, im) {\n\t      core.fft(re, im, -1);\n\t    },\n\t    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n\t    fft2d : function(re, im) {\n\t      var tre = [],\n\t          tim = [],\n\t          i = 0;\n\t      // x-axis\n\t      for(var y=0; y<_n; y++) {\n\t        i = y*_n;\n\t        for(var x1=0; x1<_n; x1++) {\n\t          tre[x1] = re[x1 + i];\n\t          tim[x1] = im[x1 + i];\n\t        }\n\t        core.fft1d(tre, tim);\n\t        for(var x2=0; x2<_n; x2++) {\n\t          re[x2 + i] = tre[x2];\n\t          im[x2 + i] = tim[x2];\n\t        }\n\t      }\n\t      // y-axis\n\t      for(var x=0; x<_n; x++) {\n\t        for(var y1=0; y1<_n; y1++) {\n\t          i = x + y1*_n;\n\t          tre[y1] = re[i];\n\t          tim[y1] = im[i];\n\t        }\n\t        core.fft1d(tre, tim);\n\t        for(var y2=0; y2<_n; y2++) {\n\t          i = x + y2*_n;\n\t          re[i] = tre[y2];\n\t          im[i] = tim[y2];\n\t        }\n\t      }\n\t    },\n\t    // 2D-IFFT\n\t    ifft2d : function(re, im) {\n\t      var tre = [],\n\t          tim = [],\n\t          i = 0;\n\t      // x-axis\n\t      for(var y=0; y<_n; y++) {\n\t        i = y*_n;\n\t        for(var x1=0; x1<_n; x1++) {\n\t          tre[x1] = re[x1 + i];\n\t          tim[x1] = im[x1 + i];\n\t        }\n\t        core.ifft1d(tre, tim);\n\t        for(var x2=0; x2<_n; x2++) {\n\t          re[x2 + i] = tre[x2];\n\t          im[x2 + i] = tim[x2];\n\t        }\n\t      }\n\t      // y-axis\n\t      for(var x=0; x<_n; x++) {\n\t        for(var y1=0; y1<_n; y1++) {\n\t          i = x + y1*_n;\n\t          tre[y1] = re[i];\n\t          tim[y1] = im[i];\n\t        }\n\t        core.ifft1d(tre, tim);\n\t        for(var y2=0; y2<_n; y2++) {\n\t          i = x + y2*_n;\n\t          re[i] = tre[y2];\n\t          im[i] = tim[y2];\n\t        }\n\t      }\n\t    },\n\t    // core operation of FFT\n\t    fft : function(re, im, inv) {\n\t      var d, h, ik, m, tmp, wr, wi, xr, xi,\n\t          n4 = _n >> 2;\n\t      // bit reversal\n\t      for(var l=0; l<_n; l++) {\n\t        m = _bitrev[l];\n\t        if(l < m) {\n\t          tmp = re[l];\n\t          re[l] = re[m];\n\t          re[m] = tmp;\n\t          tmp = im[l];\n\t          im[l] = im[m];\n\t          im[m] = tmp;\n\t        }\n\t      }\n\t      // butterfly operation\n\t      for(var k=1; k<_n; k<<=1) {\n\t        h = 0;\n\t        d = _n/(k << 1);\n\t        for(var j=0; j<k; j++) {\n\t          wr = _cstb[h + n4];\n\t          wi = inv*_cstb[h];\n\t          for(var i=j; i<_n; i+=(k<<1)) {\n\t            ik = i + k;\n\t            xr = wr*re[ik] + wi*im[ik];\n\t            xi = wr*im[ik] - wi*re[ik];\n\t            re[ik] = re[i] - xr;\n\t            re[i] += xr;\n\t            im[ik] = im[i] - xi;\n\t            im[i] += xi;\n\t          }\n\t          h += d;\n\t        }\n\t      }\n\t    },\n\t    // initialize the array (supports TypedArray)\n\t    _initArray : function() {\n\t      if(typeof Uint32Array !== 'undefined') {\n\t        _bitrev = new Uint32Array(_n);\n\t      } else {\n\t        _bitrev = [];\n\t      }\n\t      if(typeof Float64Array !== 'undefined') {\n\t        _cstb = new Float64Array(_n*1.25);\n\t      } else {\n\t        _cstb = [];\n\t      }\n\t    },\n\t    // zero padding\n\t    _paddingZero : function() {\n\t      // TODO\n\t    },\n\t    // makes bit reversal table\n\t    _makeBitReversalTable : function() {\n\t      var i = 0,\n\t          j = 0,\n\t          k = 0;\n\t      _bitrev[0] = 0;\n\t      while(++i < _n) {\n\t        k = _n >> 1;\n\t        while(k <= j) {\n\t          j -= k;\n\t          k >>= 1;\n\t        }\n\t        j += k;\n\t        _bitrev[i] = j;\n\t      }\n\t    },\n\t    // makes trigonometiric function table\n\t    _makeCosSinTable : function() {\n\t      var n2 = _n >> 1,\n\t          n4 = _n >> 2,\n\t          n8 = _n >> 3,\n\t          n2p4 = n2 + n4,\n\t          t = Math.sin(Math.PI/_n),\n\t          dc = 2*t*t,\n\t          ds = Math.sqrt(dc*(2 - dc)),\n\t          c = _cstb[n4] = 1,\n\t          s = _cstb[0] = 0;\n\t      t = 2*dc;\n\t      for(var i=1; i<n8; i++) {\n\t        c -= dc;\n\t        dc += t*c;\n\t        s += ds;\n\t        ds -= t*s;\n\t        _cstb[i] = s;\n\t        _cstb[n4 - i] = c;\n\t      }\n\t      if(n8 !== 0) {\n\t        _cstb[n8] = Math.sqrt(0.5);\n\t      }\n\t      for(var j=0; j<n4; j++) {\n\t        _cstb[n2 - j]  = _cstb[j];\n\t      }\n\t      for(var k=0; k<n2p4; k++) {\n\t        _cstb[k + n2] = -_cstb[k];\n\t      }\n\t    }\n\t  };\n\t  // aliases (public APIs)\n\t  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n\t  for(var i=0; i<apis.length; i++) {\n\t    FFT[apis[i]] = core[apis[i]];\n\t  }\n\t  FFT.bt = core.bt1d;\n\t  FFT.fft = core.fft1d;\n\t  FFT.ifft = core.ifft1d;\n\t  \n\t  return FFT;\n\t}).call(this);\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Created by abol on 4/20/16.\n\t */\n\tmodule.exports.fourierTransform = __webpack_require__(44);\n\tmodule.exports.zeroFilling = __webpack_require__(45);\n\tmodule.exports.apodization = __webpack_require__(46);\n\tmodule.exports.phaseCorrection = __webpack_require__(47);\n\tmodule.exports.digitalFilter = __webpack_require__(48);\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Created by abol on 4/20/16.\n\t */\n\tvar fft = __webpack_require__(40);\n\t\n\tfunction fourierTransform(spectraData){\n\t    //console.log(spectraData);\n\t\n\t    var nbPoints = spectraData.getNbPoints();\n\t    var nSubSpectra = spectraData.getNbSubSpectra() / 2;\n\t    var spectraType = \"NMR SPECTRUM\";//spectraData.TYPE_NMR_SPECTRUM;\n\t    var FFT = fft.FFT;\n\t    if (nSubSpectra > 1)\n\t        spectraType = \"nD NMR SPECTRUM\";//spectraData.TYPE_2DNMR_SPECTRUM;\n\t\n\t    FFT.init(nbPoints);\n\t\n\t\n\t    var fcor = spectraData.getParamDouble(\"$FCOR\", 0.0);\n\t    //var tempArray = new Array(nbPoints / 2);\n\t    for (var iSubSpectra = 0; iSubSpectra < nSubSpectra; iSubSpectra++)\n\t    {\n\t        var re = spectraData.getYData(2 * iSubSpectra);\n\t        var im = spectraData.getYData(2 * iSubSpectra + 1);\n\t        if (false) {\n\t            console.log(\"firstPoint: (\" + re[0] + \",\" + im[0] + \")\");\n\t            console.log(\"fcor: \" + fcor);\n\t        }\n\t        re[0] *= fcor;\n\t        im[0] *= fcor;\n\t\n\t        FFT.fft(re, im);\n\t        re = re.concat(re.slice(0,(nbPoints+1)/2));\n\t        re.splice(0, (nbPoints+1)/2);\n\t        im = im.concat(im.slice(0,(nbPoints+1)/2));\n\t        im.splice(0, (nbPoints+1)/2);\n\t\n\t        spectraData.setActiveElement(2 * iSubSpectra);\n\t        updateSpectra(spectraData, spectraType);\n\t\n\t        spectraData.setActiveElement(2 * iSubSpectra + 1);\n\t        updateSpectra(spectraData, spectraType);\n\t    }\n\t    //TODO For Alejandro\n\t    //Now we can try to apply the FFt on the second dimension\n\t    if(spectraData.is2D()){\n\t        var mode = spectraData.getParam(\".ACQUISITION SCHEME\");\n\t        switch(mode){\n\t            case 1://\"State-TPP\"\n\t                break;\n\t            case 2://State\n\t                break;\n\t            case 3://Echo-Antiecho\n\t                break;\n\t            defaut:\n\t                //QF\n\t                //Does not transform in the indirect dimension\n\t            break;\n\t\n\t        }\n\t    }\n\t    spectraData.setActiveElement(0);\n\t    return spectraData;\n\t}\n\t\n\tfunction updateSpectra(spectraData, spectraType){\n\t    var baseFrequency = spectraData.getParamDouble(\"$BF1\", NaN);\n\t    var spectralFrequency = spectraData.getParamDouble(\"$SFO1\", NaN);\n\t    var spectralWidth = spectraData.getParamDouble(\"$SW\", NaN);\n\t    var xMiddle = ((spectralFrequency - baseFrequency) / baseFrequency )* 1e6;\n\t    var dx = 0.5 * spectralWidth * spectralFrequency / baseFrequency;\n\t\n\t    spectraData.setDataType(spectraType);\n\t    spectraData.setFirstX(xMiddle + dx);\n\t    spectraData.setLastX(xMiddle - dx);\n\t    spectraData.setXUnits(\"PPM\");\n\t\n\t    var x = spectraData.getXData();\n\t    var tmp = xMiddle + dx;\n\t    dx = -2*dx/(x.length-1);\n\t    for(var i=0;i< x.length;i++){\n\t        x[i]= tmp;\n\t        tmp+=dx;\n\t    }\n\t\n\t    //TODO update minmax in Y axis\n\t}\n\t\n\tmodule.exports = fourierTransform;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Created by abol on 4/20/16.\n\t */\n\t\n\tfunction zeroFilling(spectraData, zeroFillingX, zeroFillingY){\n\t    var nbSubSpectra = spectraData.getNbSubSpectra();\n\t    //var zeroPadding = spectraData.getParamDouble(\"$$ZEROPADDING\", 0);\n\t    var nbXPoints, lastX, deltaX, k, x, y;\n\t    if (zeroFillingX != 0){\n\t        for (var iSubSpectra = 0 ; iSubSpectra < nbSubSpectra; iSubSpectra++){\n\t            spectraData.setActiveElement(iSubSpectra);\n\t            nbXPoints = spectraData.getNbPoints();\n\t            y = spectraData.getYData();\n\t            x = spectraData.getXData();\n\t            lastX = spectraData.getLastX();\n\t            deltaX = (lastX-x[0])/(nbXPoints-1);\n\t            for (k = nbXPoints; k < zeroFillingX; k++){\n\t                y.push(0);\n\t                x.push(lastX+deltaX);\n\t            }\n\t            if (zeroFillingX < nbXPoints){\n\t                y.splice(zeroFillingX, y.length-1);\n\t                x.splice(zeroFillingX, x.length-1);\n\t            }\n\t            spectraData.setFirstX(x[0]);\n\t            spectraData.setLastX(x[x.length-1]);\n\t        }\n\t    }\n\t    spectraData.setActiveElement(0);\n\t    return spectraData;\n\t    // @TODO implement zeroFillingY\n\t}\n\tmodule.exports = zeroFilling;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Created by acastillo on 4/26/16.\n\t */\n\t\n\tfunction apodization(spectraData, parameters){\n\t    //org.cheminfo.hook.nemo.filters.ApodizationFilter\n\t\n\t    /*public String toString() {\n\t     switch (this) {\n\t     case NONE:\n\t     return \"None\";\n\t     case EXPONENTIAL:\n\t     return \"Exponential\";\n\t     case GAUSSIAN:\n\t     return \"Gaussian\";\n\t     case TRAF:\n\t     return \"TRAF\";\n\t     case SINE_BELL:\n\t     return \"Sine Bell\";\n\t     case SINE_BELL_SQUARED:\n\t     return \"Sine Bell Squared\";\n\t     default:\n\t     return \"\";\n\t     }\n\t     }*/\n\t}\n\t\n\tmodule.exports = apodization;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Created by acastillo on 4/26/16.\n\t */\n\tfunction phaseCorrection(spectraData, phi0, phi1){\n\t    //System.out.println(spectraData.toString());\n\t    var nbPoints = spectraData.getNbPoints();\n\t    var reData = spectraData.getYData(0);\n\t    var imData = spectraData.getYData(1);\n\t    //var corrections = spectraData.getParam(\"corrections\");\n\t\n\t    //for(var k=0;k<corrections.length;k++){\n\t    //    Point2D phi = corrections.elementAt(k);\n\t\n\t        //double phi0 = phi.getX();\n\t        //double phi1 = phi.getY();\n\t\n\t    if(false) System.out.println(\" ph0 = \"+phi0);\n\t    if(false) System.out.println(\" ph1 = \"+phi1);\n\t\n\t    var delta = phi1 / nbPoints;\n\t    var alpha = 2 * Math.pow(Math.sin(delta / 2), 2);\n\t    var beta = Math.sin(delta);\n\t    var cosTheta = Math.cos(phi0);\n\t    var sinTheta = Math.sin(phi0);\n\t    var cosThetaNew, sinThetaNew;\n\t\n\t    var reTmp, imTmp;\n\t    var index;\n\t        for (var i = 0; i < nbPoints; i++) {\n\t            index = nbPoints - i - 1;\n\t            index = i;\n\t            reTmp = reData[index] * cosTheta - imData[index] * sinTheta;\n\t            imTmp = reData[index] * sinTheta + imData[index] * cosTheta;\n\t            reData[index] = reTmp;\n\t            imData[index] = imTmp;\n\t            // calculate angles i+1 from i\n\t            cosThetaNew = cosTheta - (alpha * cosTheta + beta * sinTheta);\n\t            sinThetaNew = sinTheta - (alpha * sinTheta - beta * cosTheta);\n\t            cosTheta = cosThetaNew;\n\t            sinTheta = sinThetaNew;\n\t        }\n\t        //toApply--;\n\t    //}\n\t\n\t    spectraData.resetMinMax();\n\t    //spectraData.updateDefaults();\n\t    //spectraData.updateY();\n\t    spectraData.putParam(\"PHC0\", phi0);\n\t    spectraData.putParam(\"PHC1\", phi1);\n\t}\n\t\n\tmodule.exports = phaseCorrection;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/**\n\t * Created by acastillo on 4/26/16.\n\t */\n\tvar rotate = __webpack_require__(49);\n\t\n\tfunction digitalFilter(spectraData, options){\n\t    var nbPoints = 0;\n\t    if(options.nbPoints){\n\t        nbPoints = options.nbPoints;\n\t    }\n\t    else{\n\t        if(options.brukerFilter){\n\t            //TODO Determine the number of points to shift, or the ph1 correction\n\t            //based on DECIM and DSPSVF parameters\n\t            nbPoints = 0;\n\t        }\n\t    }\n\t\n\t    var nbSubSpectra = spectraData.getNbSubSpectra();\n\t    if (nbPoints != 0){\n\t        for (var iSubSpectra = 0 ; iSubSpectra < nbSubSpectra; iSubSpectra++){\n\t            spectraData.setActiveElement(iSubSpectra);\n\t            rotate(spectraData.getYData(),nbPoints);\n\t            if(options.rotateX){\n\t                rotate(spectraData.getXData(),nbPoints);\n\t                spectraData.setFirstX(spectraData.getX(0));\n\t                spectraData.setLastX(spectraData.getX(spectraData.getNbPoints()-1));\n\t            }\n\t        }\n\t    }\n\t    spectraData.setActiveElement(0);\n\t    return spectraData;\n\t}\n\t\n\tmodule.exports = digitalFilter;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Created by acastillo on 4/26/16.\n\t */\n\t/**\n\t * This function performs a circular shift of the input object without realocating memory.\n\t * Positive values of shifts will shift to the right and negative values will do to the left\n\t * @example rotate([1,2,3,4],1) -> [4,1,2,3]\n\t * @example rotate([1,2,3,4],-1) -> [2,3,4,1]\n\t * @param array\n\t */\n\tfunction rotate(array,shift){\n\t    var nbPoints = array.length;\n\t    //Lets calculate the lest amount of points to shift.\n\t    //It decreases the amount of validations in the loop\n\t    shift = shift%nbPoints;\n\t\n\t    if(Math.abs(shift)>nbPoints/2){\n\t        shift = shift>0?shift-nbPoints:shift+nbPoints;\n\t    }\n\t\n\t    if(shift!=0){\n\t        var currentIndex=0, nextIndex=shift;\n\t        var toMove = nbPoints;\n\t        var current = array[currentIndex], next;\n\t        var lastFirstIndex = shift;\n\t        var direction = shift>0?1:-1;\n\t\n\t        while(toMove>0){\n\t            nextIndex = putInRange(nextIndex,nbPoints);\n\t            next = array[nextIndex];\n\t            array[nextIndex] = current;\n\t            nextIndex+=shift;\n\t            current = next;\n\t            toMove--;\n\t\n\t            if(nextIndex==lastFirstIndex){\n\t                nextIndex = putInRange(nextIndex+direction,nbPoints);\n\t                lastFirstIndex = nextIndex;\n\t                currentIndex = putInRange(nextIndex-shift,nbPoints);\n\t                current = array[currentIndex];\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction putInRange(value, nbPoints){\n\t    if(value<0)\n\t        value+=nbPoints;\n\t    if(value>=nbPoints)\n\t        value-=nbPoints;\n\t    return value;\n\t}\n\t\n\tmodule.exports = rotate;\n\t\n\t\n\t/*var foo = [1,2,3,4,5,6];\n\trotate(foo,-4);\n\tconsole.log(foo);*/\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar SD = __webpack_require__(1);\n\tvar PeakPicking2D = __webpack_require__(51);\n\tvar PeakOptimizer = __webpack_require__(52);\n\tvar JcampConverter=__webpack_require__(3);\n\tvar stat = __webpack_require__(36);\n\t\n\t/**\n\t * Construct the object from the given sd object(output of the jcampconverter or brukerconverter filter)\n\t * @param sd\n\t * @constructor\n\t */\n\tfunction NMR2D(sd) {\n\t    SD.call(this, sd); // Héritage\n\t}\n\t\n\tNMR2D.prototype = Object.create(SD.prototype);\n\tNMR2D.prototype.constructor = NMR2D;\n\t\n\t/**\n\t * @function fromJcamp(jcamp,options)\n\t * Construct the object from the given jcamp.\n\t * @param jcamp\n\t * @param options\n\t * @option xy\n\t * @option keepSpectra\n\t * @option keepRecordsRegExp\n\t * @returns {NMR2D}\n\t */\n\tNMR2D.fromJcamp = function(jcamp,options) {\n\t    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new NMR2D(spectrum);\n\t}\n\t\n\t/**\n\t * @function isHomoNuclear()\n\t * Returns true if the it is an homo-nuclear experiment\n\t * @returns {boolean}\n\t */\n\tNMR2D.prototype.isHomoNuclear=function(){\n\t    return this.sd.xType==this.sd.yType;\n\t}\n\t\n\t/**\n\t * @function observeFrequencyX()\n\t * Returns the observe frequency in the direct dimension\n\t * @returns {*}\n\t */\n\tNMR2D.prototype.observeFrequencyX=function(){\n\t    return this.sd.spectra[0].observeFrequency;\n\t}\n\t/**\n\t * @function observeFrequencyY()\n\t * Returns the observe frequency in the indirect dimension\n\t * @returns {*}\n\t */\n\tNMR2D.prototype.observeFrequencyY=function(){\n\t    return this.sd.indirectFrequency;\n\t}\n\t\n\t/**\n\t * @function getSolventName()\n\t * Returns the solvent name.\n\t * @returns {string|XML}\n\t */\n\tNMR2D.prototype.getSolventName=function(){\n\t    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]).replace(\"<\",\"\").replace(\">\",\"\");\n\t}\n\t\n\t/**\n\t * @function getXUnits()\n\t * This function returns the units of the direct dimension. It overrides the SD getXUnits function\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getXUnits = function(){\n\t    return this.sd.ntuples[1].units;\n\t}\n\t/**\n\t * @function getYUnits()\n\t * This function returns the units of the indirect dimension. It overrides the SD getYUnits function\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getYUnits = function(){\n\t    return this.sd.ntuples[0].units;\n\t}\n\t/**\n\t * @function getZUnits()\n\t * Returns the units of the dependent variable\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getZUnits = function(){\n\t    return this.sd.ntuples[2].units;\n\t}\n\t/**\n\t * @function getLastY()\n\t * Returns the min value in the indirect dimension.\n\t * @returns {sd.minMax.maxY}\n\t */\n\tNMR2D.prototype.getLastY = function(){\n\t    return this.sd.minMax.maxY;\n\t}\n\t/**\n\t * @function getFirstY()\n\t * Returns the min value in the indirect dimension.\n\t * @returns {sd.minMax.minY}\n\t */\n\tNMR2D.prototype.getFirstY = function(){\n\t    return this.sd.minMax.minY;\n\t}\n\t/**\n\t * @function getDeltaY()\n\t * Returns the separation between 2 consecutive points in the indirect domain\n\t * @returns {number}\n\t */\n\tNMR2D.prototype.getDeltaY=function(){\n\t    return ( this.getLastY()-this.getFirstY()) / (this.getNbSubSpectra()-1);\n\t}\n\t\n\t/**\n\t * @function nmrPeakDetection2D(options)\n\t * This function process the given spectraData and tries to determine the NMR signals. \n\t + Returns an NMRSignal2D array containing all the detected 2D-NMR Signals\n\t * @param\toptions:+Object\t\t\tObject containing the options\n\t * @option\tthresholdFactor:number\tA factor to scale the automatically determined noise threshold.\n\t * @returns [*]\tset of NMRSignal2D\n\t */\n\tNMR2D.prototype.nmrPeakDetection2D=function(options){\n\t    options = options||{};\n\t    if(!options.thresholdFactor)\n\t        options.thresholdFactor=1;\n\t    var id = Math.round(Math.random()*255);\n\t    if(options.idPrefix){\n\t        id=options.idPrefix;\n\t    }\n\t    var peakList = PeakPicking2D.findPeaks2D(this, options.thresholdFactor);\n\t\n\t    //lets add an unique ID for each peak.\n\t    for(var i=0;i<peakList.length;i++){\n\t        peakList[i]._highlight=[id+\"_\"+i];\n\t        peakList[i].signalID = id+\"_\"+i;\n\t    }\n\t    if(options.references)\n\t        PeakOptimizer.alignDimensions(peakList,options.references);\n\t\n\t    if(options.format===\"new\"){\n\t        var newSignals = new Array(peakList.length);\n\t        var minMax1, minMax2;\n\t        for(var k=peakList.length-1;k>=0;k--){\n\t            var signal = peakList[k];\n\t            newSignals[k]={\n\t                fromTo:signal.fromTo,\n\t                integral:signal.intensity||1,\n\t                remark:\"\",\n\t                signal:[{\n\t                    peak:signal.peaks,\n\t                    delta:[signal.shiftX, signal.shiftY]\n\t                }],\n\t                _highlight:signal._highlight,\n\t                signalID:signal.signalID,\n\t            };\n\t        }\n\t        peakList = newSignals;\n\t    }\n\t\n\t\n\t    return peakList;\n\t}\n\t\n\t/**\n\t * @function getNMRPeakThreshold(nucleus)\n\t * Returns the noise factor depending on the nucleus.\n\t * @param nucleus\n\t * @returns {number}\n\t */\n\tNMR2D.prototype.getNMRPeakThreshold=function(nucleus) {\n\t    if (nucleus == \"1H\")\n\t        return 3.0;\n\t    if (nucleus ==\"13C\")\n\t        return 5.0;\n\t    return 1.0;\n\t}\n\t\n\t/**\n\t * @function getNucleus(dim)\n\t * Returns the observed nucleus in the specified dimension\n\t * @param dim\n\t * @returns {string}\n\t */\n\tNMR2D.prototype.getNucleus=function(dim){\n\t    if(dim==1)\n\t        return this.sd.xType;\n\t    if(dim==2)\n\t        return this.sd.yType;\n\t    return this.sd.xType;\n\t}\n\t\n\t\n\t/**\n\t * @function zeroFilling(nPointsX [,nPointsY])\n\t * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one\n\t * could increase artificially the spectral resolution.\n\t * @param nPointsX Number of new zero points in the direct dimension\n\t * @param nPointsY Number of new zero points in the indirect dimension\n\t * @returns this object\n\t */\n\tNMR2D.prototype.zeroFilling=function(nPointsX, nPointsY) {\n\t    return Filters.zeroFilling(this,nPointsX, nPointsY);\n\t}\n\t\n\t/**\n\t * @function brukerFilter()\n\t * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that\n\t * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the\n\t * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n\t * @returns this object\n\t */\n\tNMR2D.prototype.brukerFilter=function() {\n\t    return Filters.digitalFilter(this, {\"brukerFilter\":true});\n\t}\n\t\n\t/**\n\t * @function digitalFilter(options)\n\t * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that\n\t * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the\n\t * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n\t * @option nbPoints: The number of points to shift. Positive values will shift the values to the rigth\n\t * and negative values will do to the left.\n\t * @option brukerSpectra\n\t * @returns this object\n\t */\n\tNMR2D.prototype.digitalFilter=function(options) {\n\t    return Filters.digitalFilter(this, options);\n\t}\n\t\n\t\n\t/**\n\t * @function fourierTransform()\n\t * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n\t * @returns this object\n\t */\n\tNMR2D.prototype.fourierTransform=function( ) {\n\t    return Filters.fourierTransform(this);\n\t}\n\t\n\t/**\n\t * @function postFourierTransform(ph1corr)\n\t * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained\n\t * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra\n\t * filter could not find the correct number of points to perform a circular shift.\n\t * The actual problem is that not all of the spectra has the necessary parameters for use only one method for\n\t * correcting the problem of the Bruker digital filters.\n\t * @param spectraData A fourier transformed spectraData.\n\t * @param ph1corr Phase 1 correction value in radians.\n\t * @returns this object\n\t */\n\tNMR2D.prototype.postFourierTransform=function(ph1corr) {\n\t    return Filters.phaseCorrection(0,ph1corr);\n\t}\n\t\n\tmodule.exports = NMR2D;\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar lib = __webpack_require__(40);\n\tvar PeakOptimizer = __webpack_require__(52);\n\tvar SimpleClustering =  __webpack_require__(53);\n\tvar StatArray = __webpack_require__(2);\n\tvar FFTUtils = lib.FFTUtils;\n\t\n\tvar PeakPicking2D= {\n\t    DEBUG : false,\n\t    smallFilter : [\n\t        [0, 0, 1, 2, 2, 2, 1, 0, 0],\n\t        [0, 1, 4, 7, 7, 7, 4, 1, 0],\n\t        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n\t        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n\t        [2, 7, 0, -23, -40, -23, 0, 7, 2],\n\t        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n\t        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n\t        [0, 1, 3, 7, 7, 7, 3, 1, 0],\n\t        [0, 0, 1, 2, 2, 2, 1, 0, 0]],\n\t\n\t\n\t    //How noisy is the spectrum depending on the kind of experiment.\n\t    getLoGnStdDevNMR : function(spectraData) {\n\t    if (spectraData.isHomoNuclear())\n\t        return 1.5\n\t    else\n\t        return 3;\n\t    },\n\t\n\t    findPeaks2D : function(spectraData, thresholdFactor){\n\t        if(thresholdFactor==0)\n\t            thresholdFactor=1;\n\t        if(thresholdFactor<0)\n\t            thresholdFactor=-thresholdFactor;\n\t        var nbPoints = spectraData.getNbPoints();\n\t        var nbSubSpectra = spectraData.getNbSubSpectra();\n\t\n\t        var data = new Array(nbPoints * nbSubSpectra);\n\t        //var data = new Array(nbPoints * nbSubSpectra/2);\n\t\n\t        var isHomonuclear = spectraData.isHomoNuclear();\n\t\n\t        //var sum = new Array(nbPoints);\n\t\n\t        for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra; iSubSpectra++) {\n\t            var spectrum = spectraData.getYData(iSubSpectra);\n\t            for (var iCol = 0; iCol < nbPoints; iCol++) {\n\t                if(isHomonuclear){\n\t                    data[iSubSpectra * nbPoints + iCol] =(spectrum[iCol]>0?spectrum[iCol]:0);\n\t                }\n\t                else{\n\t                    data[iSubSpectra * nbPoints + iCol] =Math.abs(spectrum[iCol]);\n\t                }\n\t            }\n\t        }\n\t\n\t        var nStdDev = this.getLoGnStdDevNMR(spectraData);\n\t        if(isHomonuclear){\n\t            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n\t            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);//)1.5);\n\t            var peaksMax1 = this.findPeaks2DMax(data, convolutedSpectrum, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);//2.0);\n\t            for(var i=0;i<peaksMC1.length;i++)\n\t                peaksMax1.push(peaksMC1[i]);\n\t            //console.log(peaksMax1);\n\t            return PeakOptimizer.enhanceSymmetry(this.createSignals2D(peaksMax1,spectraData,24));\n\t\n\t        }\n\t        else{\n\t            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n\t            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);\n\t            //Peak2D[] peaksMC1 = PeakPicking2D.findPeaks2DMax(data, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);\n\t            //Remove peaks with less than 3% of the intensity of the highest peak\n\t            return this.createSignals2D(PeakOptimizer.clean(peaksMC1, 0.05), spectraData,24);\n\t        }\n\t\n\t    },\n\t    /**\n\t     Calculates the 1st derivative of the 2D matrix, using the LoG kernel approximation\n\t     */\n\t    convoluteWithLoG : function(inputSpectrum, nRows, nCols){\n\t        var ftSpectrum = new Array(nCols * nRows);\n\t        for (var i = nRows * nCols-1; i >=0; i--){\n\t            ftSpectrum[i] = inputSpectrum[i];\n\t        }\n\t\n\t        ftSpectrum = FFTUtils.fft2DArray(ftSpectrum, nRows, nCols);\n\t\n\t        var dim = this.smallFilter.length;\n\t        var ftFilterData = new Array(nCols * nRows);\n\t        for(var i=nCols * nRows-1;i>=0;i--){\n\t            ftFilterData[i]=0;\n\t        }\n\t\n\t        var iRow, iCol;\n\t        var shift = (dim - 1) / 2;\n\t        //console.log(dim);\n\t        for (var ir = 0; ir < dim; ir++) {\n\t            iRow = (ir - shift + nRows) % nRows;\n\t            for (var ic = 0; ic < dim; ic++) {\n\t                iCol = (ic - shift + nCols) % nCols;\n\t                ftFilterData[iRow * nCols + iCol] = this.smallFilter[ir][ic];\n\t            }\n\t        }\n\t\n\t        ftFilterData = FFTUtils.fft2DArray(ftFilterData, nRows, nCols);\n\t\n\t        var ftRows = nRows * 2;\n\t        var ftCols = nCols / 2 + 1;\n\t        FFTUtils.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\t\n\t        return  FFTUtils.ifft2DArray(ftSpectrum, ftRows, ftCols);\n\t    },\n\t    /**\n\t     Detects all the 2D-peaks in the given spectrum based on center of mass logic.\n\t     */\n\t    findPeaks2DLoG : function(inputSpectrum, convolutedSpectrum, nRows, nCols, nStdDev) {\n\t        var threshold = 0;\n\t        for(var i=nCols*nRows-2;i>=0;i--)\n\t            threshold+=Math.pow(convolutedSpectrum[i]-convolutedSpectrum[i+1],2);\n\t        threshold=-Math.sqrt(threshold);\n\t        threshold*=nStdDev/nRows;\n\t\n\t        var bitmask = new Array(nCols * nRows);\n\t        for(var i=nCols * nRows-1;i>=0;i--){\n\t            bitmask[i]=0;\n\t        }\n\t        var nbDetectedPoints = 0;\n\t        var lasti=-1;\n\t        for (var i = convolutedSpectrum.length-1; i >=0 ; i--) {\n\t            if (convolutedSpectrum[i] < threshold) {\n\t                bitmask[i] = 1;\n\t                nbDetectedPoints++;\n\t            }\n\t        }\n\t        var iStart = 0;\n\t        //int ranges = 0;\n\t        var peakList = [];\n\t\n\t        while (nbDetectedPoints != 0) {\n\t            for (iStart; iStart < bitmask.length && bitmask[iStart]==0; iStart++){};\n\t            //\n\t            if (iStart == bitmask.length)\n\t                break;\n\t\n\t            nbDetectedPoints -= this.extractArea(inputSpectrum, convolutedSpectrum,\n\t                bitmask, iStart, nRows, nCols, peakList, threshold);\n\t        }\n\t\n\t        if (peakList.length > 0&&this.DEBUG) {\n\t            console.log(\"No peak found\");\n\t        }\n\t        return peakList;\n\t    },\n\t    /**\n\t     Detects all the 2D-peaks in the given spectrum based on the Max logic.\n\t     */\n\t    findPeaks2DMax : function(inputSpectrum, cs, nRows, nCols, nStdDev) {\n\t        var threshold = 0;\n\t        for(var i=nCols*nRows-2;i>=0;i--)\n\t            threshold+=Math.pow(cs[i]-cs[i+1],2);\n\t        threshold=-Math.sqrt(threshold);\n\t        threshold*=nStdDev/nRows;\n\t\n\t        var rowI,colI;\n\t        var peakListMax = [];\n\t        var tmpIndex = 0;\n\t        for (var i = 0; i < cs.length; i++) {\n\t            if (cs[i] < threshold) {\n\t                //It is a peak?\n\t                rowI=Math.floor(i/nCols);\n\t                colI=i%nCols;\n\t                //Verifies if this point is a peak;\n\t                if(rowI>0&&rowI+1<nRows&&colI+1<nCols&&colI>0){\n\t                    //It is the minimum in the same row\n\t                    if(cs[i]<cs[i+1]&&cs[i]<cs[i-1]){\n\t                        //It is the minimum in the previous row\n\t                        tmpIndex=(rowI-1)*nCols+colI;\n\t                        if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t                            //It is the minimum in the next row\n\t                            tmpIndex=(rowI+1)*nCols+colI;\n\t                            if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t                                peakListMax.push({x:colI,y:rowI,z:inputSpectrum[i]});\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return peakListMax;\n\t    },\n\t    /*\n\t     This function detects the peaks\n\t     */\n\t    extractArea : function(spectrum, convolutedSpectrum, bitmask, iStart,\n\t                                                   nRows, nCols, peakList, threshold) {\n\t        var iRow = Math.floor(iStart / nCols);\n\t        var iCol = iStart % nCols;\n\t        var peakPoints =[];\n\t        //console.log(iStart+\" \"+iRow+\" \"+iCol);\n\t        // scanBitmask(bitmask, convolutedSpectrum, nRows, nCols, iRow, iCol,\n\t        // peakPoints);\n\t        this.scanBitmask(bitmask, nRows, nCols, iRow, iCol, peakPoints);\n\t        //console.log(\"extractArea.lng \"+peakPoints.length);\n\t        var x = new Array(peakPoints.length);\n\t        var y = new Array(peakPoints.length);\n\t        var z = new Array(peakPoints.length);\n\t        var nValues = peakPoints.length;\n\t        var xAverage = 0.0;\n\t        var yAverage = 0.0;\n\t        var zSum = 0.0;\n\t        if (nValues >= 9) {\n\t            if (this.DEBUG)\n\t                console.log(\"nValues=\" + nValues);\n\t            var maxValue = Number.NEGATIVE_INFINITY;\n\t            var maxIndex = -1;\n\t            for (var i = 0; i < nValues; i++) {\n\t                var pt = (peakPoints.splice(0,1))[0];\n\t                x[i] = pt[0];\n\t                y[i] = pt[1];\n\t                z[i] = spectrum[pt[1] * nCols + pt[0]];\n\t                xAverage += x[i] * z[i];\n\t                yAverage += y[i] * z[i];\n\t                zSum += z[i];\n\t                if (z[i] > maxValue) {\n\t                    maxValue = z[i];\n\t                    maxIndex = i;\n\t                }\n\t            }\n\t            if (maxIndex != -1) {\n\t                xAverage /= zSum;\n\t                yAverage /= zSum;\n\t                var newPeak = {x:xAverage, y:yAverage, z:zSum};\n\t                var minmax;\n\t                minmax =StatArray.minMax(x);\n\t                newPeak.minX=minmax.min;\n\t                newPeak.maxX=minmax.max;\n\t                minmax = StatArray.minMax(y);\n\t                newPeak.minY=minmax.min;\n\t                newPeak.maxY=minmax.max;\n\t                peakList.push(newPeak);\n\t            }\n\t        }\n\t        return nValues;\n\t    },\n\t    /*\n\t     Return all the peaks(x,y points) that composes a signal.\n\t     */\n\t    scanBitmask : function(bitmask, nRows, nCols, iRow, iCol, peakPoints) {\n\t        //console.log(nRows+\" \"+iRow+\" \"+nCols+\" \"+iCol);\n\t        if (iRow < 0 || iCol < 0 || iCol == nCols || iRow == nRows)\n\t            return;\n\t        if (bitmask[iRow * nCols + iCol]) {\n\t            bitmask[iRow * nCols + iCol] = 0;\n\t            peakPoints.push([iCol, iRow]);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow + 1, iCol, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow - 1, iCol, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol + 1, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol - 1, peakPoints);\n\t        }\n\t    },\n\t    /**\n\t     This function converts a set of 2D-peaks in 2D-signals. Each signal could be composed\n\t     of many 2D-peaks, and it has some additional information related to the NMR spectrum.\n\t     */\n\t    createSignals2D : function(peaks, spectraData, tolerance){\n\t        //console.log(peaks.length);\n\t        var signals=[];\n\t        var nbSubSpectra = spectraData.getNbSubSpectra();\n\t\n\t        var bf1=spectraData.observeFrequencyX();\n\t        var bf2=spectraData.observeFrequencyY();\n\t\n\t        var firstY = spectraData.getFirstY();\n\t        var lastY = spectraData.getLastY();\n\t        var dy = spectraData.getDeltaY();\n\t\n\t        //console.log(firstY+\" \"+lastY+\" \"+dy+\" \"+nbSubSpectra);\n\t        //spectraData.setActiveElement(0);\n\t        var noValid=0;\n\t        for (var i = peaks.length-1; i >=0 ; i--) {\n\t            //console.log(peaks[i].x+\" \"+spectraData.arrayPointToUnits(peaks[i].x));\n\t            //console.log(peaks[i].y+\" \"+(firstY + dy * (peaks[i].y)));\n\t            peaks[i].x=(spectraData.arrayPointToUnits(peaks[i].x));\n\t            peaks[i].y=(firstY + dy * (peaks[i].y));\n\t\n\t            //console.log(peaks[i])\n\t            //Still having problems to correctly detect peaks on those areas. So I'm removing everything there.\n\t            if(peaks[i].y<-1||peaks[i].y>=210){\n\t                peaks.splice(i,1);\n\t            }\n\t        }\n\t        //console.log(peaks);\n\t        //The connectivity matrix is an square and symmetric matrix, so we'll only store the upper diagonal in an\n\t        //array like form\n\t        var connectivity = [];\n\t        var tmp=0;\n\t        tolerance*=tolerance;\n\t        //console.log(tolerance);\n\t        for (var i = 0; i < peaks.length; i++) {\n\t            for (var j = i; j < peaks.length; j++) {\n\t                tmp=Math.pow((peaks[i].x-peaks[j].x)*bf1,2)+Math.pow((peaks[i].y-peaks[j].y)*bf2,2);\n\t                //Console.log(peaks[i].getX()+\" \"+peaks[j].getX()+\" \"+tmp);\n\t                if(tmp<tolerance){//30*30Hz We cannot distinguish peaks with less than 20 Hz of separation\n\t                    connectivity.push(1);\n\t                }\n\t                else{\n\t                    connectivity.push(0);\n\t                }\n\t            }\n\t        }\n\t\n\t        //console.log(connectivity);\n\t\n\t        var clusters = SimpleClustering.fullClusterGenerator(connectivity);\n\t\n\t        //console.log(clusters)\n\t\n\t        var signals = [];\n\t        if (peaks != null) {\n\t            var xValue, yValue;\n\t            for (var iCluster = 0; iCluster < clusters.length; iCluster++) {\n\t                var signal={nucleusX:spectraData.getNucleus(1),nucleusY:spectraData.getNucleus(2)};\n\t                signal.resolutionX=( spectraData.getLastX()-spectraData.getFirstX()) / spectraData.getNbPoints();\n\t                signal.resolutionY=dy;\n\t                var peaks2D = [];\n\t                signal.shiftX = 0;\n\t                signal.shiftY = 0;\n\t                var minMax1 = [Number.MAX_VALUE,0];\n\t                var minMax2 = [Number.MAX_VALUE,0];\n\t                var sumZ = 0;\n\t                for(var jPeak = clusters[iCluster].length-1;jPeak>=0;jPeak--){\n\t                    if(clusters[iCluster][jPeak]==1){\n\t                        peaks2D.push({\n\t                            x: peaks[jPeak].x,\n\t                            y: peaks[jPeak].y,\n\t                            z: peaks[jPeak].z\n\t\n\t                        }  );\n\t                        signal.shiftX+=peaks[jPeak].x*peaks[jPeak].z;\n\t                        signal.shiftY+=peaks[jPeak].y*peaks[jPeak].z;\n\t                        sumZ+=peaks[jPeak].z;\n\t                        if(peaks[jPeak].x<minMax1[0]){\n\t                            minMax1[0]=peaks[jPeak].x;\n\t                        }\n\t                        if(peaks[jPeak].x>minMax1[1]){\n\t                            minMax1[1]=peaks[jPeak].x;\n\t                        }\n\t                        if(peaks[jPeak].y<minMax2[0]){\n\t                            minMax2[0]=peaks[jPeak].y\n\t                        }\n\t                        if(peaks[jPeak].y>minMax2[1]){\n\t                            minMax2[1]=peaks[jPeak].y;\n\t                        }\n\t\n\t                    }\n\t                }\n\t                signal.fromTo = [{from:minMax1[0],to:minMax1[1]},\n\t                                {from:minMax2[0],to:minMax2[1]}];\n\t                signal.shiftX/=sumZ;\n\t                signal.shiftY/=sumZ;\n\t                signal.peaks = peaks2D;\n\t                signals.push(signal);\n\t            }\n\t        }\n\t        //console.log(signals);\n\t        return signals;\n\t    }\n\t}\n\t\n\tmodule.exports = PeakPicking2D;\n\n/***/ },\n/* 52 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar PeakOptimizer={\n\t\tdiagonalError:0.05,\n\t\ttolerance:0.05,\n\t\tDEBUG:false,\n\t    toleranceX : 0.025,\n\t    toleranceY : 0.5,\n\t\n\t    clean: function(peaks, threshold){\n\t        var max = Number.NEGATIVE_INFINITY;\n\t        var i,peak;\n\t        //double min = Double.MAX_VALUE;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            if(Math.abs(peaks[i].z)>max)\n\t                max=Math.abs(peaks[i].z);\n\t        }\n\t        max*=threshold;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            if(Math.abs(peaks[i].z)<max)\n\t                peaks.splice(i,1);\n\t        }\n\t        return peaks;\n\t    },\n\t\t\n\t\tenhanceSymmetry: function(signals){\n\t\t\t\n\t\t\tvar properties = this.initializeProperties(signals);\n\t\t\tvar output = signals;\n\t\n\t\t\tif(this.DEBUG)\n\t\t\t\tconsole.log(\"Before optimization size: \"+output.size());\n\t\t\t\n\t\t\t//First step of the optimization: Symmetry validation\n\t\t\tvar i,hits,index;\n\t\t\tvar signal;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tsignal = output[i];\n\t\t\t\tif(signal.peaks.length>1)\n\t\t\t\t\tproperties[i][1]++;\n\t\t\t\tif(properties[i][0]==1){\n\t\t\t\t\tindex = this.exist(output, properties, signal,-1,true);\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tproperties[i][1]+=2;\n\t\t\t\t\t\tproperties[index][1]+=2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Second step of the optimization: Diagonal image existence\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tsignal = output[i];\n\t\t\t\tif(properties[i][0]==0){\n\t\t\t\t\thits = this.checkCrossPeaks(output, properties, signal, true);\n\t\t\t\t\tproperties[i][1]+=hits;\n\t\t\t\t\t//checkCrossPeaks(output, properties, signal, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Now, each peak have a score between 0 and 4, we can complete the patterns which\n\t\t\t//contains peaks with high scores, and finally, we can remove peaks with scores 0 and 1\n\t\t\tvar count = 0;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]!==0&&properties[i][1]>2){\n\t\t\t\t\tcount++;\n\t\t\t\t\tcount+=this.completeMissingIfNeeded(output,properties,output[i],properties[i]);\n\t\t\t\t}\n\t\t\t\tif(properties[i][1]>=2&&properties[i][0]===0)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tif(this.DEBUG)\n\t\t\t\tconsole.log(\"After optimization size: \"+count);\n\t\t\tvar  toReturn = new Array(count);\n\t\t\tcount--;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]!==0&&properties[i][1]>2\n\t\t\t\t\t\t||properties[i][0]===0&&properties[i][1]>1){\n\t\t\t\t\ttoReturn[count--]=output[i];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"Removed \"+i+\" \"+output[i].peaks.length);\n\t\t\t\t}\n\t\t\t\t//if(properties.get(i)[1]>=2)\n\t\t\t\t//\ttoReturn[count--]=output.get(i);\n\t\t\t}\n\t\t\treturn toReturn;\n\t\t},\n\t\t\n\t\tcompleteMissingIfNeeded: function(output, properties, thisSignal, thisProp) {\n\t\t\t//Check for symmetry\n\t\t\tvar index = this.exist(output, properties, thisSignal,-thisProp[0],true);\n\t\t\tvar addedPeaks=0;\n\t\t\tvar newSignal = null, tmpProp=null;\n\t\t\tif(index<0){//If this signal have no a symmetry image, we have to include it\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftX,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [-thisProp[0],thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\t//Check for diagonal peaks\n\t\t\tvar j=0;\n\t\t\tvar diagX=false, diagY=false;\n\t\t\tvar signal;\n\t\t\tfor(j=output.length-1;j>=0;j--){\n\t\t\t\tsignal = output[j];\n\t\t\t\tif(properties[j][0]===0){\n\t\t\t\t\tif(Math.abs(signal.shiftX-thisSignal.shiftX)<this.diagonalError)\n\t\t\t\t\t\tdiagX=true;\n\t\t\t\t\tif(Math.abs(signal.shiftY-thisSignal.shiftY)<this.diagonalError)\n\t\t\t\t\t\tdiagY=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(diagX===false){\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftX;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftX,y:thisSignal.shiftX,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\tif(diagY===false){\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftY;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftY,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\treturn addedPeaks;\n\t\t\t\n\t\t},\n\t\t\n\t\t//Check for any diagonal peak that match this cross peak\n\t\tcheckCrossPeaks: function(output, properties, signal, updateProperties) {\n\t\t\tvar hits = 0, i=0, shift=signal.shiftX*4;\n\t\t\tvar crossPeaksX = [],crossPeaksY = [];\n\t\t\tvar cross;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tcross = output[i];\n\t\t\t\tif(properties[i][0]!==0){\n\t\t\t\t\tif(Math.abs(cross.shiftX-signal.shiftX)<this.diagonalError){\n\t\t\t\t\t\thits++;\n\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\tcrossPeaksX.push(i);\n\t\t\t\t\t\tshift+=cross.shiftX;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(Math.abs(cross.shiftY-signal.shiftY)<this.diagonalError){\n\t\t\t\t\t\t\thits++;\n\t\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\t\tcrossPeaksY.push(i);\n\t\t\t\t\t\t\tshift+=cross.shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Update found crossPeaks and diagonal peak\n\t\t\tshift/=(crossPeaksX.length+crossPeaksY.length+4);\n\t\t\tif(crossPeaksX.length>0){\n\t\t\t\tfor( i=crossPeaksX.length-1;i>=0;i--){\n\t\t\t\t\toutput[crossPeaksX[i]].shiftX=shift;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(crossPeaksY.length>0){\n\t\t\t\tfor( i=crossPeaksY.length-1;i>=0;i--){\n\t\t\t\t\toutput[crossPeaksY[i]].shiftY=shift;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsignal.shiftX=shift;\n\t\t\tsignal.shiftY=shift;\n\t\t\treturn hits;\n\t\t},\n\t\n\t\texist: function(output, properties, signal, type, symmetricSearch) {\n\t\t\tfor(var i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]==type){\n\t\t\t\t\tif(this.distanceTo(signal, output[i], symmetricSearch)<this.tolerance){\n\t\t\t\t\t\tif(!symmetricSearch){\n\t\t\t\t\t\t\tvar shiftX=(output[i].shiftX+signal.shiftX)/2.0;\n\t\t\t\t\t\t\tvar shiftY=(output[i].shiftY+signal.shiftY)/2.0;\n\t\t\t\t\t\t\toutput[i].shiftX=shiftX;\n\t\t\t\t\t\t\toutput[i].shiftY=shiftY;\n\t\t\t\t\t\t\tsignal.shiftX=shiftX;\n\t\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tvar shiftX=signal.shiftX;\n\t\t\t\t\t\t\tvar shiftY=output[i].shiftX;\n\t\t\t\t\t\t\toutput[i].shiftY=shiftX;\n\t\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\t/**\n\t\t * We try to determine the position of each signal within the spectrum matrix.\n\t\t * Peaks could be of 3 types: upper diagonal, diagonal or under diagonal 1,0,-1\n\t\t * respectively.\n\t\t * @param Signals\n\t\t * @return A matrix containing the properties of each signal\n\t\t */\n\t\tinitializeProperties: function(signals){\n\t\t\tvar signalsProperties = new Array(signals.length);\n\t\t\tfor(var i=signals.length-1;i>=0;i--){\n\t\t\t\tsignalsProperties[i]=[0,0];\n\t\t\t\t//We check if it is a diagonal peak\n\t\t\t\tif(Math.abs(signals[i].shiftX-signals[i].shiftY)<=this.diagonalError){\n\t\t\t\t\tsignalsProperties[i][1]=1;\n\t\t\t\t\t//We adjust the x and y value to be symmetric.\n\t\t\t\t\t//In general chemical shift in the direct dimension is better than in the other one,\n\t\t\t\t\t//so, we believe more to the shiftX than to the shiftY.\n\t\t\t\t\tvar shift = (signals[i].shiftX*2+signals[i].shiftY)/3.0;\n\t\t\t\t\tsignals[i].shiftX=shift;\n\t\t\t\t\tsignals[i].shiftY=shift;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(signals[i].shiftX-signals[i].shiftY>0)\n\t\t\t\t\t\tsignalsProperties[i][0]=1;\n\t\t\t\t\telse\n\t\t\t\t\t\tsignalsProperties[i][0]=-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn signalsProperties;\n\t\t},\n\t\t\n\t\t/**\n\t\t * This function calculates the distance between 2 nmr signals . If toImage is true, \n\t\t * it will interchange x by y in the distance calculation for the second signal.\n\t\t */\n\t\tdistanceTo: function(a, b, toImage){\n\t\t\tif(!toImage){\n\t\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftX, 2)\n\t\t\t\t\t\t+Math.pow(a.shiftY-b.shiftY, 2));\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftY, 2)\n\t\t\t\t\t\t+Math.pow(a.shiftY-b.shiftX, 2));\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * This function maps the corresponding 2D signals to the given set of 1D signals\n\t\t */\n\t\talignDimensions:function(signals2D,references){\n\t\t\t//For each reference dimension\n\t\t\tfor(var i=0;i<references.length;i++){\n\t\t\t\tvar ref = references[i];\n\t\t\t\tif(ref)\n\t\t\t\t\tthis._alignSingleDimension(signals2D,ref);\n\t\t\t}\n\t\t},\n\t\n\t\t_alignSingleDimension: function(signals2D, references){\n\t\t\t//For each 2D signal\n\t\t\tvar center = 0, width = 0, i, j;\n\t\t\tfor(i=0;i<signals2D.length;i++){\n\t\t\t\tvar signal2D = signals2D[i];\n\t\t\t\t//For each reference 1D signal\n\t\t\t\tfor(j=0;j<references.length;j++){\n\t\t\t\t\tcenter = (references[j].startX+references[j].stopX)/2;\n\t\t\t\t\twidth = Math.abs(references[j].startX-references[j].stopX)/2;\n\t\t\t\t\tif(signal2D.nucleusX==references[j].nucleus){\n\t\t\t\t\t\t//The 2D peak overlaps with the 1D signal\n\t\t\t\t\t\tif(Math.abs(signal2D.shiftX-center)<=width){\n\t\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t\tif(signal2D.nucleusY==references[j].nucleus){\n\t\t\t\t\t\tif(Math.abs(signal2D.shiftY-center)<=width){\n\t\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t}\n\t\n\t};\n\t\n\tmodule.exports = PeakOptimizer;\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar SimpleClustering={\n\t\n\t\t/*This function returns the cluster list for a given connectivity matrix.\n\t\t*To improve the performance, the connectivity(square and symmetric) matrix \n\t\t*is given as a single vector containing  the upper diagonal of the matrix\n\t\t*Note: This algorithm is O(n*n) complexity. I wonder if there is something better. \n\t\t*acastillo\n\t\t*/\n\t\tfullClusterGenerator:function(conn){\n\t\t\tvar nRows = Math.sqrt(conn.length*2+0.25)-0.5;\n\t\t\t//console.log(\"nRows: \"+nRows+\" - \"+conn.length);\n\t\t\tvar clusterList = [];\n\t\t\tvar available = new Array(nRows);\n\t\t\tvar remaining = nRows, i=0;\n\t\t\tvar cluster = [];\n\t\t\t//Mark all the elements as available\n\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\tavailable[i]=1;\n\t\t\t}\n\t\t\tvar nextAv=-1;\n\t\t\tvar toInclude = [];\n\t\t\twhile(remaining>0){\n\t\t\t\tif(toInclude.length===0){\n\t\t\t\t\t//If there is no more elements to include. Start a new cluster\n\t\t\t\t\tcluster = new Array(nRows);\n\t\t\t\t\tfor(i=nRows-1;i>=0;i--)\n\t\t\t\t\t\tcluster[i]=0;\n\t\t\t\t\tclusterList.push(cluster);\n\t\t\t    \tfor(nextAv = nRows-1;available[nextAv]==0;nextAv--){};\n\t\t\t    }\n\t\t\t    else{\n\t\t\t    \tnextAv=toInclude.splice(0,1);\n\t\t\t    }\n\t\t\t    //console.log(\"row: \"+nextAv);\n\t\t\t    cluster[nextAv]=1;\n\t\t\t    available[nextAv]=0;\n\t\t\t    remaining--;\n\t\t\t    //Copy the next available row\n\t\t\t    var row = new Array(nRows);\n\t\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\t\tvar c=Math.max(nextAv,i);\n\t\t\t\t\tvar r=Math.min(nextAv,i);\n\t\t\t\t\t//The element in the conn matrix\n\t\t\t\t\t//console.log(\"index: \"+r*(2*nRows-r-1)/2+c)\n\t\t\t\t\trow[i]=conn[r*(2*nRows-r-1)/2+c];\n\t\t\t\t\t//console.log(\"col: \"+i+\":\"+row[i]);\n\t\t\t\t\t//There is new elements to include in this row?\n\t\t\t\t\t//Then, include it to the current cluster\n\t\t\t\t\tif(row[i]==1&&available[i]==1&&cluster[i]==0){\n\t\t\t\t\t\ttoInclude.push(i);\n\t\t\t\t\t\tcluster[i]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn clusterList;\n\t\t}\n\t}\n\t\n\tmodule.exports = SimpleClustering;\n\n/***/ },\n/* 54 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * This library formats a set of nmr1D signals to the ACS format.\n\t * Created by acastillo on 3/11/15. p\n\t */\n\tvar ACS=ACS || {};\n\tACS.formater =(function() {\n\t    var acsString=\"\";\n\t    var parenthesis=\"\";\n\t    var spectro=\"\";\n\t    var rangeForMultiplet=false;\n\t\n\t    function fromNMRSignal1D2ACS(spectrum, options){\n\t        acsString=\"\";\n\t        parenthesis=\"\";\n\t        spectro=\"\";\n\t        var solvent = null;\n\t        if(options&&options.solvent)\n\t            solvent = options.solvent;\n\t        //options.rangeForMultiplet=false;\n\t        if(options&&options.rangeForMultiplet!=undefined)\n\t            rangeForMultiplet = options.rangeForMultiplet;\n\t\n\t        if(options&&options.ascending){\n\t            spectrum.sort(function(a,b){\n\t                return b.delta1- a.delta1\n\t            });\n\t        }\n\t        else{\n\t            spectrum.sort(function(a,b){\n\t                return a.delta1- b.delta1\n\t            });\n\t        }\n\t\n\t        //console.log(\"Range1: \"+options.rangeForMultiplet);\n\t\n\t        spectrum.type=\"NMR SPEC\";\n\t        if (spectrum[0][\"nucleus\"]==\"1H\") {\n\t            formatAcs_default(spectrum, false, 2, 1, solvent);\n\t        } else if (spectrum[0][\"nucleus\"]==\"13C\") {\n\t            formatAcs_default(spectrum, false, 1, 0, solvent);\n\t        }\n\t\n\t        if (acsString.length>0) acsString+=\".\";\n\t\n\t        return acsString;\n\t    }\n\t\n\t    /*function formatAcs_default_IR(spectra, ascending, decimalValue, smw) {\n\t     appendSeparator();\n\t     appendSpectroInformation(spectra);\n\t     if (spectra[\"peakLabels\"]) {\n\t     var numberPeakLabels=spectra[\"peakLabels\"].length;\n\t     var minIntensity= 9999999;\n\t     var maxIntensity=-9999999;\n\t     for (var i=0; i<numberPeakLabels; i++) {\n\t     if (spectra[\"peakLabels\"][i].intensity<minIntensity) minIntensity=spectra[\"peakLabels\"][i].intensity;\n\t     if (spectra[\"peakLabels\"][i].intensity>maxIntensity) maxIntensity=spectra[\"peakLabels\"][i].intensity;\n\t     }\n\t     for (var i=0; i<numberPeakLabels; i++) {\n\t     if (ascending) {\n\t     var peakLabel=spectra[\"peakLabels\"][i];\n\t     } else {\n\t     var peakLabel=spectra[\"peakLabels\"][numberPeakLabels-i-1];\n\t     }\n\t     if (peakLabel) {\n\t     appendSeparator();\n\t     appendValue(peakLabel,decimalValue);\n\t     if (smw) { // we need to add small / medium / strong\n\t     if (peakLabel.intensity<((maxIntensity-minIntensity)/3+minIntensity)) acsString+=\" (s)\";\n\t     else if (peakLabel.intensity>(maxIntensity-(maxIntensity-minIntensity)/3)) acsString+=\" (w)\";\n\t     else acsString+=\" (m)\";\n\t     }\n\t     }\n\t     }\n\t     }\n\t     }*/\n\t\n\t    function formatAcs_default(spectra, ascending, decimalValue, decimalJ, solvent) {\n\t        appendSeparator();\n\t        appendSpectroInformation(spectra, solvent);\n\t        var numberSmartPeakLabels=spectra.length;\n\t        //console.log(\"SP \"+spectra);\n\t        //console.log(\"# \"+numberSmartPeakLabels);\n\t        for (var i=0; i<numberSmartPeakLabels; i++) {\n\t            if (ascending) {\n\t                var signal=spectra[i];\n\t            } else {\n\t                var signal=spectra[numberSmartPeakLabels-i-1];\n\t            }\n\t            if (signal) {\n\t                //console.log(\"X2X\"+i+JSON.stringify(signal));\n\t                appendSeparator();\n\t                appendDelta(signal,decimalValue);\n\t                appendParenthesis(signal,decimalJ);\n\t                //console.log(\"S2S\"+i);\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendSpectroInformation(spectrum, solvent) {\n\t        if (spectrum.type==\"NMR SPEC\") {\n\t            if (spectrum[0].nucleus) {\n\t                acsString+=formatNucleus(spectrum[0].nucleus);\n\t            }\n\t            acsString+=\" NMR\";\n\t            if ((solvent) || (spectrum[0].observe)) {\n\t                acsString+=\" (\";\n\t                if (spectrum[0].observe) {\n\t                    acsString+=(spectrum[0].observe*1).toFixed(0)+\" MHz\";\n\t                    if (solvent) acsString+=\", \";\n\t                }\n\t                if (solvent) {\n\t                    acsString+=formatMF(solvent);\n\t                }\n\t                acsString+=\")\";\n\t            }\n\t            acsString+=\" δ \";\n\t        } else if (spectrum.type==\"IR\") {\n\t            acsString+=\" IR \";\n\t        } else if (spectrum.type==\"MASS\") {\n\t            acsString+=\" MASS \";\n\t        }\n\t    }\n\t\n\t    function appendDelta(line, nbDecimal) {\n\t        //console.log(\"appendDelta1\");\n\t        var startX = 0,stopX=0,delta1=0;\n\t        if(line.startX){\n\t            if((typeof line.startX)==\"string\"){\n\t                startX=parseFloat(line.startX);\n\t            }\n\t            else\n\t                startX=line.startX;\n\t        }\n\t        if(line.stopX){\n\t            if((typeof line.stopX)==\"string\"){\n\t                stopX=parseFloat(line.stopX);\n\t            }\n\t            else\n\t                stopX=line.stopX;\n\t        }\n\t        if(line.delta1){\n\t            if((typeof line.delta1)==\"string\"){\n\t                delta1=parseFloat(line.delta1);\n\t            }\n\t            else\n\t                delta1=line.delta1;\n\t\n\t        }\n\t        //console.log(\"Range2: \"+rangeForMultiplet+\" \"+line.multiplicity);\n\t        if (line.asymmetric===true||(line.multiplicity==\"m\"&&rangeForMultiplet===true)) {//Is it massive??\n\t            if (line.startX&&line.stopX) {\n\t                if (startX<stopX) {\n\t                    acsString+=startX.toFixed(nbDecimal)+\"-\"+stopX.toFixed(nbDecimal);\n\t                } else {\n\t                    acsString+=stopX.toFixed(nbDecimal)+\"-\"+startX.toFixed(nbDecimal);\n\t                }\n\t            } else {\n\t                if(line.delta1)\n\t                    acsString+=delta1.toFixed(nbDecimal);\n\t            }\n\t        }\n\t        else{\n\t            if(line.delta1)\n\t                acsString+=delta1.toFixed(nbDecimal);\n\t            else{\n\t                if(line.startX&&line.stopX){\n\t                    acsString+=((startX+stopX)/2).toFixed(nbDecimal);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendValue(line, nbDecimal) {\n\t        if (line.xPosition) {\n\t            acsString+=line.xPosition.toFixed(nbDecimal);\n\t        }\n\t    }\n\t\n\t    function appendParenthesis(line, nbDecimal) {\n\t        //console.log(\"appendParenthesis1\");\n\t        // need to add assignment - coupling - integration\n\t        parenthesis=\"\";\n\t        appendMultiplicity(line);\n\t        appendIntegration(line);\n\t        appendCoupling(line,nbDecimal);\n\t        appendAssignment(line);\n\t\n\t\n\t        if (parenthesis.length>0) {\n\t            acsString+=\" (\"+parenthesis+\")\";\n\t        }\n\t        //console.log(\"appendParenthesis2\");\n\t    }\n\t\n\t    function appendIntegration(line) {\n\t        if (line.pubIntegration) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.pubIntegration;\n\t        } else if (line.integralData) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.integralData.value.toFixed(0)+\" H\";\n\t        }\n\t    }\n\t\n\t    function appendAssignment(line) {\n\t        if (line.pubAssignment) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=formatAssignment(line.pubAssignment);\n\t        }\n\t        else{\n\t            if (line.assignment) {\n\t                appendParenthesisSeparator();\n\t                parenthesis+=formatAssignment(line.assignment);\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendMultiplicity(line) {\n\t        if (line.pubMultiplicity) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.pubMultiplicity;\n\t        } else if (line.multiplicity) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.multiplicity;\n\t        }\n\t    }\n\t\n\t    function appendCoupling(line, nbDecimal) {\n\t        if (line.nmrJs) {\n\t            var j=\"<i>J</i> = \";\n\t            for (var i=0; i<line.nmrJs.length; i++) {\n\t                var coupling=line.nmrJs[i].coupling;\n\t                if (j.length>11) j+=\", \";\n\t                j+=coupling.toFixed(nbDecimal);\n\t            }\n\t            appendParenthesisSeparator();\n\t            parenthesis+=j+\" Hz\";\n\t        }\n\t\n\t    }\n\t\n\t    function formatAssignment(assignment) {\n\t        assignment=assignment.replace(/([0-9])/g,\"<sub>$1</sub>\");\n\t        assignment=assignment.replace(/\\\"([^\\\"]*)\\\"/g,\"<i>$1</i>\");\n\t        return assignment;\n\t    }\n\t\n\t    function formatMF(mf) {\n\t        mf=mf.replace(/([0-9])/g,\"<sub>$1</sub>\");\n\t        return mf;\n\t    }\n\t\n\t    function formatNucleus(nucleus) {\n\t        nucleus=nucleus.replace(/([0-9])/g,\"<sup>$1</sup>\");\n\t        return nucleus;\n\t    }\n\t\n\t    function appendSeparator() {\n\t        if ((acsString.length>0) && (! acsString.match(/ $/))) {\n\t            acsString+=\", \";\n\t        }\n\t    }\n\t\n\t    function appendParenthesisSeparator() {\n\t        if ((parenthesis.length>0) && (! parenthesis.match(\", $\"))) parenthesis+=\", \";\n\t    }\n\t\n\t    function fromACS2NMRSignal1D(acsString){\n\t        return JSON.parse(SDAPI.AcsParserAsJSONString(acsString));\n\t    }\n\t\n\t    return {\n\t        toACS:fromNMRSignal1D2ACS,\n\t        toNMRSignal:fromACS2NMRSignal1D\n\t    }\n\t})();\n\t\n\tmodule.exports=ACS;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** spectra-data.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 780d5e0cc7d1cd8631a3\n **/","'use strict';\n\n\nexports.SD = require('./SD');\nexports.NMR = require('./NMR');\nexports.NMR2D = require('./NMR2D');\nexports.ACS = require('./AcsParser');\nexports.JAnalyzer = require('./JAnalyzer');\n//exports.SD2 = require('/SD2');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","'use strict';\n// small note on the best way to define array\n// http://jsperf.com/lp-array-and-loops/2\n\nvar StatArray = require('ml-stat/array');\nvar JcampConverter = require(\"jcampconverter\");\nvar JcampCreator = require(\"./JcampCreator\");\nvar extend = require(\"extend\");\n\n/**\n * Construct the object from the given sd object(output of the jcampconverter or brukerconverter filter)\n * @param sd\n * @constructor\n */\nfunction SD(sd) {\n    this.DATACLASS_XY=1;\n    this.DATACLASS_PEAK=2;\n\n    this.sd=sd;\n    this.activeElement=0;\n}\n\n/**\n * @function fromJcamp(jcamp,options)\n * Construct the object from the given jcamp.\n * @param jcamp\n * @param options\n * @option xy\n * @option keepSpectra\n * @option keepRecordsRegExp\n * @returns {SD}\n */\nSD.fromJcamp = function(jcamp, options) {\n    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new SD(spectrum);\n}\n\n\n/**\n * @function setActiveElement(nactiveSpectrum);\n * This function sets the nactiveSpectrum sub-spectrum as active\n * @param index of the sub-spectrum to set as active\n */\nSD.prototype.setActiveElement = function(nactiveSpectrum){\n    this.activeElement=nactiveSpectrum;\n}\n\n/**\n * @function getActiveElement();\n * This function returns the index of the active sub-spectrum.\n * @returns {number|*}\n */\nSD.prototype.getActiveElement = function(){\n    return this.activeElement;\n}\n\n/**\n * @function getXUnits()\n * This function returns the units of the independent dimension.\n * @returns {xUnit|*|M.xUnit}\n */\nSD.prototype.getXUnits = function(){\n    return this.getSpectrum().xUnit;\n}\n\n/**\n * @function setXUnits()\n * This function returns the units of the independent dimension.\n * @returns {xUnit|*|M.xUnit}\n */\nSD.prototype.setXUnits = function(units){\n    this.getSpectrum().xUnit=units;\n}\n\n/**\n * @function getYUnits()\n * * This function returns the units of the dependent variable.\n * @returns {yUnit|*|M.yUnit}\n */\nSD.prototype.getYUnits = function(){\n    return this.getSpectrum().yUnit;\n}\n\n/**\n * @function getSpectraVariable()\n * This function returns the information about the dimensions\n * @returns {*}\n */\nSD.prototype.getSpectraVariable = function(dim){\n    return this.sd.ntuples[dim];\n}\n\n/**\n * @function getNbPoints()\n * Return the number of points in the current spectrum\n * @param i sub-spectrum\n * @returns {*}\n */\nSD.prototype.getNbPoints=function(i){\n    return this.getSpectrumData(i).y.length;\n}\n\n/**\n * @function getFirstX()\n * Return the first value of the direct dimension\n * @param i sub-spectrum\n * @returns {number}\n */\nSD.prototype.getFirstX=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].firstX;\n}\n\n/**\n * @function setFirstX()\n * Set the firstX for this spectrum. You have to force and update of the xAxis after!!!\n * @param x\n * @param i sub-spectrum\n */\nSD.prototype.setFirstX=function(x, i) {\n    i=i||this.activeElement;\n    this.sd.spectra[i].firstX=x;\n}\n\n/**\n * @function getLastX()\n * Return the last value of the direct dimension\n * @param i sub-spectrum\n * @returns {number}\n */\nSD.prototype.getLastX=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].lastX;\n}\n\n/**\n * @function setLastX()\n * Set the last value of the direct dimension. You have to force and update of the xAxis after!!!\n * @param x\n * @param i sub-spectrum\n */\nSD.prototype.setLastX=function(x, i) {\n    i=i||this.activeElement;\n    this.sd.spectra[i].lastX=x;\n}\n\n/**\n */\n/**\n * Return the first value of the direct dimension\n * @param i sub-spectrum\n * @returns {number}\n */\nSD.prototype.getFirstY=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].firstY;\n}\n\n/**\n * @function setFirstY()\n * Set the first value of the indirect dimension. Only valid for 2D spectra.\n * @param y\n * @param i sub-spectrum\n */\nSD.prototype.setFirstY=function(y, i) {\n    i=i||this.activeElement;\n    this.sd.spectra[i].firstY = y;\n}\n\n/**\n * @function getLastY\n * Return the first value of the indirect dimension. Only valid for 2D spectra.\n * @returns {number}\n */\nSD.prototype.getLastY = function(i){\n    i=i||this.activeElement;\n    return this.sd.spectra[i].lastY;\n}\n\n/**\n * @function setLastY()\n * Return the first value of the indirect dimension\n * @param y\n * @param i sub-spectrum\n */\nSD.prototype.setLastY = function(y, i){\n    i=i||this.activeElement;\n    this.sd.spectra[i].lastY = y;\n}\n\n/**\n * @function setDataClass()\n * Set the spectrum data_class. It could be DATACLASS_PEAK=1 or DATACLASS_XY=2\n * @param dataClass\n */\nSD.prototype.setDataClass = function(dataClass){\n    if(dataClass==this.DATACLASS_PEAK) {\n        this.getSpectrum().isPeaktable = true;\n        this.getSpectrum().isXYdata = false;\n    }\n    if(dataClass==this.DATACLASS_XY){\n        this.getSpectrum().isXYdata = true;\n        this.getSpectrum().isPeaktable = false;\n    }\n}\n\n/**\n * @function isDataClassPeak();\n * Is this a PEAKTABLE spectrum?\n * @returns {*}\n */\nSD.prototype.isDataClassPeak = function(){\n    if(this.getSpectrum().isPeaktable)\n        return  this.getSpectrum().isPeaktable;\n    return false;\n}\n\n/**\n * @function isDataClassXY();\n * Is this a XY spectrum?\n * @returns {*}\n */\nSD.prototype.isDataClassXY = function(){\n    if(this.getSpectrum().isXYdata)\n        return  this.getSpectrum().isXYdata;\n    return false\n}\n\n/**\n * @function setDataType()\n * Set the data type for this spectrum. It could be one of the following:\n [\"INFRARED\"||\"IR\",\"IV\",\"NDNMRSPEC\",\"NDNMRFID\",\"NMRSPEC\",\"NMRFID\",\"HPLC\",\"MASS\"\n * \"UV\", \"RAMAN\" \"GC\"|| \"GASCHROMATOGRAPH\",\"CD\"|| \"DICHRO\",\"XY\",\"DEC\"]\n * @param dataType\n */\nSD.prototype.setDataType = function(dataType){\n    this.getSpectrum().dataType=dataType;\n}\n\n/**\n * @function getDataType()\n * Return the dataType(see: setDataType )\n * @returns {string|string|*|string}\n */\nSD.prototype.getDataType = function(){\n    return this.getSpectrum().dataType;\n}\n\n/**\n * @function getSpectrumData()\n * Return the i-th sub-spectrum data in the current spectrum\n * @param i\n * @returns {this.sd.spectra[i].data[0]}\n */\nSD.prototype.getSpectrumData=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].data[0];\n}\n\n/**\n * @function getSpectrum()\n * Return the i-th sub-spectra in the current spectrum\n * @param i\n * @returns {this.sd.spectra[i]}\n */\nSD.prototype.getSpectrum=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i];\n}\n\n/**\n * @function getNbSubSpectra()\n * Return the amount of sub-spectra in this object\n * @returns {*}\n */\nSD.prototype.getNbSubSpectra=function(){\n    return this.sd.spectra.length;\n}\n\n/**\n * @function getXData()\n *  Returns an array containing the x values of the spectrum\n * @param i sub-spectrum Default:activeSpectrum\n * @returns {Array}\n */\nSD.prototype.getXData=function(i){\n    return this.getSpectrumData(i).x;\n}\n\n/**\n * @function getYData()\n * This function returns a double array containing the values with the intensities for the current sub-spectrum.\n * @param i sub-spectrum Default:activeSpectrum\n * @returns {Array}\n */\nSD.prototype.getYData=function(i){\n    return this.getSpectrumData(i).y;\n}\n\n/**\n * @function getX()\n * Returns the x value at the specified index for the active sub-spectrum.\n * @param i array index between 0 and spectrum.getNbPoints()-1\n * @returns {number}\n */\nSD.prototype.getX=function(i){\n    return this.getXData()[i];\n}\n\n/**\n * @function getY()\n * Returns the y value at the specified index for the active sub-spectrum.\n * @param i array index between 0 and spectrum.getNbPoints()-1\n * @returns {number}\n */\nSD.prototype.getY=function(i){\n    return this.getYData()[i];\n}\n\n/**\n * @function getXYData();\n * Returns a double[2][nbPoints] where the first row contains the x values and the second row the y values.\n * @param i sub-spectrum Default:activeSpectrum\n * @returns {*[]}\n */\nSD.prototype.getXYData=function(i){\n    return [this.getXData(i),this.getYData(i)];\n}\n\n/**\n * @function getTitle\n * Return the title of the current spectrum.\n * @param i sub-spectrum Default:activeSpectrum\n * @returns {*}\n */\nSD.prototype.getTitle=function(i) {\n    return this.getSpectrum(i).title;\n}\n\n/**\n * @function setTitle(newTitle);\n * Set the title of this spectrum.\n * @param newTitle The new title\n * @param i sub-spectrum Default:activeSpectrum\n */\nSD.prototype.setTitle=function(newTitle,i) {\n    this.getSpectrum(i).title=newTitle;\n}\n\n/**\n * @function getMinY(i)\n * This function returns the minimal value of Y\n * @param i sub-spectrum Default:activeSpectrum\n * @returns {number}\n */\nSD.prototype.getMinY=function(i) {\n    return  StatArray.min(this.getYData(i));\n}\n\n/**\n * @function getMaxY(i)\n * This function returns the maximal value of Y\n * @param i sub-spectrum Default:activeSpectrum\n * @returns {number}\n */\nSD.prototype.getMaxY=function(i) {\n    return  StatArray.max(this.getYData(i));\n}\n\n/**\n * @function getMinMax(i)\n * Return the min and max value of Y\n * @param i sub-spectrum Default:activeSpectrum\n * @returns {{min, max}|*}\n */\nSD.prototype.getMinMaxY=function(i) {\n    return  StatArray.minMax(this.getYData(i));\n}\n\n\n/**\n * @function getNoiseLevel()\n * Get the noise threshold level of the current spectrum. It uses median instead of the mean\n * @returns {number}\n */\nSD.prototype.getNoiseLevel=function(){\n    var mean = 0,stddev=0;\n    var y = this.getYData();\n    var length = this.getNbPoints(),i=0;\n    for(i = 0; i < length; i++){\n        mean+=y[i];\n    }\n    mean/=this.getNbPoints();\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort();\n    if (length % 2 == 1) {\n        stddev = averageDeviations[(length-1)/2] / 0.6745;\n    } else {\n        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n    }\n\n    return stddev*this.getNMRPeakThreshold(this.getNucleus(1));\n}\n\n/**\n * @function arrayPointToUnits(doublePoint)\n * Return the xValue for the given index.\n * @param doublePoint\n * @returns {number}\n */\nSD.prototype.arrayPointToUnits=function(doublePoint){\n    return (this.getFirstX() - (doublePoint* (this.getFirstX() - this.getLastX()) / (this.getNbPoints()-1)));\n}\n\n/**\n * @function unitsToArrayPoint(inValue)\n * Returns the index-value for the data array corresponding to a X-value in\n * units for the element of spectraData to which it is linked (spectraNb).\n * This method makes use of spectraData.getFirstX(), spectraData.getLastX()\n * and spectraData.getNbPoints() to derive the return value if it of data class XY\n * It performs a binary search if the spectrum is a peak table\n * @param inValue\n *            (value in Units to be converted)\n * @return {number} An integer representing the index value of the inValue\n */\nSD.prototype.unitsToArrayPoint=function(inValue){\n    if (this.isDataClassXY()) {\n        return Math.round((this.getFirstX() - inValue) * (-1.0 / this.getDeltaX()));\n    } else if (this.isDataClassPeak())\n    {\n        var currentArrayPoint = 0,upperLimit=this.getNbPoints()-1, lowerLimit=0, midPoint;\n        //If inverted scale\n        if(this.getFirstX()>this.getLastX()){\n            upperLimit=0;\n            lowerLimit=this.getNbPoints()-1;\n\n            if(inValue>this.getFirstX())\n                return this.getNbPoints();\n            if(inValue<this.getLastX())\n                return -1;\n        }\n        else{\n            if(inValue<this.getFirstX())\n                return -1;\n            if(inValue>this.getLastX())\n                return this.getNbPoints();\n        }\n\n        while (Math.abs(upperLimit-lowerLimit) > 1)\n        {\n            midPoint=Math.round(Math.floor((upperLimit+lowerLimit)/2));\n            //x=this.getX(midPoint);\n            if(this.getX(midPoint)==inValue)\n                return midPoint;\n            if(this.getX(midPoint)>inValue)\n                upperLimit=midPoint;\n            else\n                lowerLimit=midPoint;\n        }\n        currentArrayPoint=lowerLimit;\n        if(Math.abs(this.getX(lowerLimit)-inValue)>Math.abs(this.getX(upperLimit)-inValue))\n            currentArrayPoint=upperLimit;\n        return currentArrayPoint;\n    } else {\n        return 0;\n    }\n}\n\n/**\n * @function getDeltaX()\n * Returns the separation between 2 consecutive points in the spectrum domain\n * @returns {number}\n */\nSD.prototype.getDeltaX=function(){\n    return (this.getLastX()-this.getFirstX()) / (this.getNbPoints()-1);\n}\n\n/**\n * @function setMinMax(min,max)\n * This function scales the values of Y between the min and max parameters\n * @param min   Minimum desired value for Y\n * @param max   Maximum desired value for Y\n */\nSD.prototype.setMinMax=function(min,max) {\n    var y = this.getYData();\n    var minMax = StatArray.minMax(y);\n    var factor = (max - min)/(minMax.max-minMax.min);\n    for(var i=0;i< y.length;i++){\n        y[i]=(y[i]-minMax.min)*factor+min;\n    }\n}\n\n/**\n * @function setMin(min)\n * This function scales the values of Y to fit the min parameter\n * @param min   Minimum desired value for Y\n */\nSD.prototype.setMin=function(min) {\n    var y = this.getYData();\n    var currentMin = StatArray.min(y);\n    var factor = min/currentMin;\n    for(var i=0;i< y.length;i++){\n        y[i]*=factor;\n    }\n}\n\n/**\n * @function setMax(max)\n * This function scales the values of Y to fit the max parameter\n * @param max   Maximum desired value for Y\n */\nSD.prototype.setMax=function(max) {\n    var y = this.getYData();\n    var currentMin = StatArray.max(y);\n    var factor = max/currentMin;\n    for(var i=0;i< y.length;i++){\n        y[i]*=factor;\n    }\n}\n\n/**\n * @function YShift(value)\n * This function shifts the values of Y\n * @param value Distance of the shift\n */\nSD.prototype.YShift=function(value) {\n    var y = this.getSpectrumData().y;\n    var length = this.getNbPoints(),i=0;\n    for(i=0;i<length;i++){\n        y[i]+=value;\n    }\n    this.getSpectrum().firstY+=value;\n    this.getSpectrum().lastY+=value;\n}\n\n/**\n * @function shift(globalShift)\n * This function shift the given spectraData. After this function is applied, all the peaks in the\n * spectraData will be found at xi+globalShift\n * @param globalShift\n */\nSD.prototype.shift=function(globalShift) {\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        var x = this.getSpectrumData().x;\n        var length = this.getNbPoints(),i=0;\n        for(i=0;i<length;i++){\n            x[i]+=globalShift;\n        }\n\n        this.getSpectrum().firstX+=globalShift;\n        this.getSpectrum().lastX+=globalShift;\n    }\n\n}\n\n/**\n * @function fillWith(from, to, value)\n * This function fills a zone of the spectrum with the given value.\n * @param from\n * @param to\n * @param fillWith\n */\nSD.prototype.fillWith=function(from, to, value) {\n    var tmp, start, end, x, y;\n    if(from > to) {\n        var tmp = from;\n        from = to;\n        to = tmp;\n    }\n\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        x = this.getXData();\n        y = this.getYData();\n        start = this.unitsToArrayPoint(from);\n        end = this.unitsToArrayPoint(to);\n        if(start > end){\n            tmp = start;\n            start = end;\n            end = tmp;\n        }\n        if(start<0)\n            start=0;\n        if(end>=this.getNbPoints)\n            end=this.getNbPoints-1;\n        for(i=start;i<=end;i++){\n                y[i]=value;\n        }\n    }\n}\n\n/**\n * @function suppressZone(from, to)\n * This function suppress a zone from the given spectraData within the given x range.\n * Returns a spectraData of type PEAKDATA without peaks in the given region\n * @param from\n * @param to\n */\nSD.prototype.suppressZone=function(from, to) {\n    var tmp, start, end, x, y;\n    if(from > to) {\n        var tmp = from;\n        from = to;\n        to = tmp;\n    }\n\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        x = this.getXData();\n        y = this.getYData();\n        start = this.unitsToArrayPoint(from);\n        end = this.unitsToArrayPoint(to);\n        if(start > end){\n            tmp = start;\n            start = end;\n            end = tmp;\n        }\n        if(start<0)\n            start=0;\n        if(end>=this.getNbPoints)\n            end=this.getNbPoints-1;\n        for(i=end;i>=start;i--){\n            y.splice(i,1);\n            x.splice(i,1);\n        }\n    }\n    this.setDataClass(this.DATACLASS_PEAK);\n}\n\n\n/**\n * @function peakPicking(parameters)\n * This function performs a simple peak detection in a spectraData. The parameters that can be specified are:\n * Returns a two dimensional array of double specifying [x,y] of the detected peaks.\n * @option from:    Lower limit.\n * @option to:      Upper limit.\n * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak.\n * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n * @option resolution: The maximum resolution of the spectrum for considering peaks.\n * @option yInverted: Is it a Y inverted spectrum?(like an IR spectrum)\n * @option smooth: A function for smoothing the spectraData before the detection. If your are dealing with\n * experimental spectra, smoothing will make the algorithm less prune to false positives.\n */\nSD.prototype.simplePeakPicking=function(parameters) {\n    //@TODO implements this filter\n}\n\n/**\n * @function getMaxPeak()\n * Get the maximum peak\n * @returns {[x, y]}\n */\nSD.prototype.getMaxPeak = function(){\n    var y = this.getSpectraDataY();\n    var max=y[0], index=0;\n    for(var i=0;i< y.length;i++){\n        if(max<y[i]){\n            max = y[i];\n            index=i;\n        }\n    }\n    return [this.getX(index),max];\n}\n\n/**\n * @function getParamDouble(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n * @returns {number}\n */\nSD.prototype.getParamDouble = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value;\n}\n\n/**\n * @function getParamString(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n * @returns {string}\n */\nSD.prototype.getParamString = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value+\"\";\n}\n\n/**\n * @function getParamInt(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n * @returns {number}\n */\nSD.prototype.getParamInt = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value;\n}\n\n/**\n * @function getParam(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n * @returns {*}\n */\nSD.prototype.getParam = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value;\n}\n\n/**\n * @function containsParam(name)\n *True if the spectrum.info contains the given parameter\n * @param name\n * @returns {boolean}\n */\nSD.prototype.containsParam = function(name){\n    if(this.sd.info[name]){\n        return true;\n    }\n    return false;\n}\n\n/**\n * @function getSpectraDataY()\n * Return the y elements of the current spectrum. Same as getYData. Kept for backward compatibility.\n * @returns {Array}\n */\nSD.prototype.getSpectraDataY = function(){\n    return this.getYData();\n}\n\n/**\n * @function getSpectraDataX()\n * Return the x elements of the current spectrum. Same as getXData. Kept for backward compatibility.\n * @returns {Array}\n */\nSD.prototype.getSpectraDataX = function(){\n    return this.getXData();\n}\n\n/**\n * @function resetMinMax()\n * Update min max values of X and Yaxis.\n */\nSD.prototype.resetMinMax = function(){\n    //TODO Impelement this function\n}\n\n/**\n * @function putParam(name, value)\n * Set a new parameter to this spectrum\n * @param name\n * @param value\n */\nSD.prototype.putParam = function(name, value){\n    this.sd.info[name]=value;\n}\n\n/**\n * @function getArea(from, to)\n * This function returns the area under the spectrum in the given window\n * @param from in spectrum units\n * @param to in spectrum units\n * @returns {number}\n */\nSD.prototype.getArea = function(from, to){\n    var i0 = this.unitsToArrayPoint(from);\n    var ie = this.unitsToArrayPoint(to);\n    var area = 0;\n    if(i0>ie){\n        var tmp = i0;\n        i0 = ie;\n        ie = tmp;\n    }\n    i0=i0<0?0:i0;\n    ie=ie>=this.getNbPoints()?this.getNbPoints()-1:ie;\n    for(var i=i0;i<ie;i++){\n        area+= this.getY(i);\n    }\n    return area*Math.abs(this.getDeltaX());\n},\n\n/**\n * @function getVector(from, to, nPoints)\n * Returns a equally spaced vector within the given window.\n * @param from in spectrum units\n * @param to in spectrum units\n * @param nPoints number of points to return(!!!sometimes it is not possible to return exactly the required nbPoints)\n * @returns [x,y]\n */\nSD.prototype.getVector = function(from, to, nPoints){\n    var x = this.getSpectraDataX();\n    var y = this.getSpectraDataY();\n    var result = [];\n    var start = 0, end = x.length- 1,direction=1;\n    var reversed = false;\n\n    if(x[0]>x[1]){\n        direction = -1;\n        start= x.length-1;\n        end = 0;\n    }\n\n    if(from > to){\n        var tmp = from;\n        from = to;\n        to = tmp;\n        reversed = true;\n    }\n    //console.log(x[end]+\" \"+from+\" \"+x[start]+\" \"+to);\n    if(x[start]>to||x[end]<from){\n        //console.log(\"ssss\");\n        return [];\n    }\n\n    while(x[start]<from){start+=direction;}\n    while(x[end]>to){end-=direction;}\n\n    var winPoints = Math.abs(end-start)+1;\n    if(!nPoints){\n        nPoints = winPoints;\n    }\n    var xwin = new Array(nPoints);\n    var ywin = new Array(nPoints);\n    var index = 0;\n\n    if(direction==-1)\n        index=nPoints-1;\n\n    var di = winPoints/nPoints;\n    var i=start-direction;\n    for(var k=0;k<nPoints;k++) {\n        i += Math.round(di * direction);\n        //console.log(i+\" \"+y[i]);\n        xwin[index] = x[i];\n        ywin[index] = y[i];\n        index += direction;\n    }\n    return [xwin,ywin];\n}\n\n/**\n * @function is2D()\n * Is it a 2D spectrum?\n * @returns {boolean}\n */\nSD.prototype.is2D = function(){\n    if(typeof this.sd.twoD == \"undefined\")\n        return false;\n    return this.sd.twoD;\n}\n\n/**\n * @function toJcamp(options)\n * This function creates a String that represents the given spectraData in the format JCAM-DX 5.0\n * The X,Y data can be compressed using one of the methods described in:\n * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\",\n *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n * @option encode: ['FIX','SQZ','DIF','DIFDUP','CVS','PAC'] (Default: 'DIFDUP')\n * @option yfactor: The YFACTOR. It allows to compress the data by removing digits from the ordinate. (Default: 1)\n * @option type: [\"NTUPLES\", \"SIMPLE\"] (Default: \"SIMPLE\")\n * @option keep: A set of user defined parameters of the given SpectraData to be stored in the jcamp.\n * @returns a string containing the jcamp-DX file\n * @example SD.toJcamp(spectraData,{encode:'DIFDUP',yfactor:0.01,type:\"SIMPLE\",keep:['#batchID','#url']});\n */\nSD.prototype.toJcamp=function(options) {\n    var defaultOptions = {\"encode\":\"DIFDUP\",\"yFactor\":1,\"type\":\"SIMPLE\",\"keep\":[]};\n    options = extend({}, defaultOptions, options);\n    return JcampCreator.convert(this, options.encode, options.yFactor, options.type, options.keep);\n}\n\n\nmodule.exports = SD;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/SD.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/array.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nvar parseXYDataRegExp = require('./parseXYData.js');\n\n\nfunction getConverter() {\n\n    // the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\n    var ntuplesSeparator = /[, \\t]{1,}/;\n\n    var GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\n    function convertToFloatArray(stringArray) {\n        var l = stringArray.length;\n        var floatArray = new Array(l);\n        for (var i = 0; i < l; i++) {\n            floatArray[i] = parseFloat(stringArray[i]);\n        }\n        return floatArray;\n    }\n    \n    function Spectrum() {\n        \n    }\n\n    /*\n     options.keepSpectra: keep the original spectra for a 2D\n     options.xy: true // create x / y array instead of a 1D array\n     options.keepRecordsRegExp: which fields do we keep\n     */\n\n    function convert(jcamp, options) {\n        options = options || {};\n\n        var keepRecordsRegExp = /^$/;\n        if (options.keepRecordsRegExp) keepRecordsRegExp = options.keepRecordsRegExp;\n\n        var start = Date.now();\n\n        var ntuples = {},\n            ldr,\n            dataLabel,\n            dataValue,\n            ldrs,\n            i, ii, position, endLine, infos;\n\n        var result = {};\n        result.profiling = [];\n        result.logs = [];\n        var spectra = [];\n        result.spectra = spectra;\n        result.info = {};\n        var spectrum = new Spectrum();\n\n        if (!(typeof jcamp === 'string')) return result;\n        // console.time('start');\n\n        if (result.profiling) result.profiling.push({\n            action: 'Before split to LDRS',\n            time: Date.now() - start\n        });\n\n        ldrs = jcamp.split(/[\\r\\n]+##/);\n\n        if (result.profiling) result.profiling.push({\n            action: 'Split to LDRS',\n            time: Date.now() - start\n        });\n\n        if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\n        for (i = 0, ii = ldrs.length; i < ii; i++) {\n            ldr = ldrs[i];\n            // This is a new LDR\n            position = ldr.indexOf('=');\n            if (position > 0) {\n                dataLabel = ldr.substring(0, position);\n                dataValue = ldr.substring(position + 1).trim();\n            } else {\n                dataLabel = ldr;\n                dataValue = '';\n            }\n            dataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\n            if (dataLabel === 'DATATABLE') {\n                endLine = dataValue.indexOf('\\n');\n                if (endLine === -1) endLine = dataValue.indexOf('\\r');\n                if (endLine > 0) {\n                    var xIndex = -1;\n                    var yIndex = -1;\n                    // ##DATA TABLE= (X++(I..I)), XYDATA\n                    // We need to find the variables\n\n                    infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n                    if (infos[0].indexOf('++') > 0) {\n                        var firstVariable = infos[0].replace(/.*\\(([a-zA-Z0-9]+)\\+\\+.*/, '$1');\n                        var secondVariable = infos[0].replace(/.*\\.\\.([a-zA-Z0-9]+).*/, '$1');\n                        xIndex = ntuples.symbol.indexOf(firstVariable);\n                        yIndex = ntuples.symbol.indexOf(secondVariable);\n                    }\n\n                    if (xIndex === -1) xIndex = 0;\n                    if (yIndex === -1) yIndex = 0;\n\n                    if (ntuples.first) {\n                        if (ntuples.first.length > xIndex) spectrum.firstX = ntuples.first[xIndex];\n                        if (ntuples.first.length > yIndex) spectrum.firstY = ntuples.first[yIndex];\n                    }\n                    if (ntuples.last) {\n                        if (ntuples.last.length > xIndex) spectrum.lastX = ntuples.last[xIndex];\n                        if (ntuples.last.length > yIndex) spectrum.lastY = ntuples.last[yIndex];\n                    }\n                    if (ntuples.vardim && ntuples.vardim.length > xIndex) {\n                        spectrum.nbPoints = ntuples.vardim[xIndex];\n                    }\n                    if (ntuples.factor) {\n                        if (ntuples.factor.length > xIndex) spectrum.xFactor = ntuples.factor[xIndex];\n                        if (ntuples.factor.length > yIndex) spectrum.yFactor = ntuples.factor[yIndex];\n                    }\n                    if (ntuples.units) {\n                        if (ntuples.units.length > xIndex) spectrum.xUnit = ntuples.units[xIndex];\n                        if (ntuples.units.length > yIndex) spectrum.yUnit = ntuples.units[yIndex];\n                    }\n                    spectrum.datatable = infos[0];\n                    if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n                        dataLabel = 'PEAKTABLE';\n                    } else if (infos[1] && (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)) {\n                        dataLabel = 'XYDATA';\n                        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n                    }\n                }\n            }\n\n\n            if (dataLabel === 'TITLE') {\n                spectrum.title = dataValue;\n            } else if (dataLabel === 'DATATYPE') {\n                spectrum.dataType = dataValue;\n                if (dataValue.indexOf('nD') > -1) {\n                    result.twoD = true;\n                }\n            } else if (dataLabel === 'NTUPLES') {\n                if (dataValue.indexOf('nD') > -1) {\n                    result.twoD = true;\n                }\n            } else if (dataLabel === 'XUNITS') {\n                spectrum.xUnit = dataValue;\n            } else if (dataLabel === 'YUNITS') {\n                spectrum.yUnit = dataValue;\n            } else if (dataLabel === 'FIRSTX') {\n                spectrum.firstX = parseFloat(dataValue);\n            } else if (dataLabel === 'LASTX') {\n                spectrum.lastX = parseFloat(dataValue);\n            } else if (dataLabel === 'FIRSTY') {\n                spectrum.firstY = parseFloat(dataValue);\n            } else if (dataLabel === 'LASTY') {\n                spectrum.lastY = parseFloat(dataValue);\n            } else if (dataLabel === 'NPOINTS') {\n                spectrum.nbPoints = parseFloat(dataValue);\n            } else if (dataLabel === 'XFACTOR') {\n                spectrum.xFactor = parseFloat(dataValue);\n            } else if (dataLabel === 'YFACTOR') {\n                spectrum.yFactor = parseFloat(dataValue);\n            } else if (dataLabel === 'DELTAX') {\n                spectrum.deltaX = parseFloat(dataValue);\n            } else if (dataLabel === '.OBSERVEFREQUENCY' || dataLabel === '$SFO1') {\n                if (!spectrum.observeFrequency) spectrum.observeFrequency = parseFloat(dataValue);\n            } else if (dataLabel === '.OBSERVENUCLEUS') {\n                if (!spectrum.xType) result.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n            } else if (dataLabel === '$SFO2') {\n                if (!result.indirectFrequency) result.indirectFrequency = parseFloat(dataValue);\n\n            } else if (dataLabel === '$OFFSET') {   // OFFSET for Bruker spectra\n                result.shiftOffsetNum = 0;\n                if (!result.shiftOffsetVal)  result.shiftOffsetVal = parseFloat(dataValue);\n            } else if (dataLabel === '$REFERENCEPOINT') {   // OFFSET for Varian spectra\n\n\n                // if we activate this part it does not work for ACD specmanager\n                //         } else if (dataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n                //                 var parts = dataValue.split(/ *, */);\n                //                 result.shiftOffsetNum = parseInt(parts[2].trim());\n                //                 result.shiftOffsetVal = parseFloat(parts[3].trim());\n            } else if (dataLabel === 'VARNAME') {\n                ntuples.varname = dataValue.split(ntuplesSeparator);\n            } else if (dataLabel === 'SYMBOL') {\n                ntuples.symbol = dataValue.split(ntuplesSeparator);\n            } else if (dataLabel === 'VARTYPE') {\n                ntuples.vartype = dataValue.split(ntuplesSeparator);\n            } else if (dataLabel === 'VARFORM') {\n                ntuples.varform = dataValue.split(ntuplesSeparator);\n            } else if (dataLabel === 'VARDIM') {\n                ntuples.vardim = convertToFloatArray(dataValue.split(ntuplesSeparator));\n            } else if (dataLabel === 'UNITS') {\n                ntuples.units = dataValue.split(ntuplesSeparator);\n            } else if (dataLabel === 'FACTOR') {\n                ntuples.factor = convertToFloatArray(dataValue.split(ntuplesSeparator));\n            } else if (dataLabel === 'FIRST') {\n                ntuples.first = convertToFloatArray(dataValue.split(ntuplesSeparator));\n            } else if (dataLabel === 'LAST') {\n                ntuples.last = convertToFloatArray(dataValue.split(ntuplesSeparator));\n            } else if (dataLabel === 'MIN') {\n                ntuples.min = convertToFloatArray(dataValue.split(ntuplesSeparator));\n            } else if (dataLabel === 'MAX') {\n                ntuples.max = convertToFloatArray(dataValue.split(ntuplesSeparator));\n            } else if (dataLabel === '.NUCLEUS') {\n                if (result.twoD) {\n                    result.yType = dataValue.split(ntuplesSeparator)[0];\n                }\n            } else if (dataLabel === 'PAGE') {\n                spectrum.page = dataValue.trim();\n                spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n                spectrum.pageSymbol = spectrum.page.replace(/=.*/, '');\n                var pageSymbolIndex = ntuples.symbol.indexOf(spectrum.pageSymbol);\n                var unit = '';\n                if (ntuples.units && ntuples.units[pageSymbolIndex]) {\n                    unit = ntuples.units[pageSymbolIndex];\n                }\n                if (result.indirectFrequency && unit !== 'PPM') {\n                    spectrum.pageValue /= result.indirectFrequency;\n                }\n            } else if (dataLabel === 'RETENTIONTIME') {\n                spectrum.pageValue = parseFloat(dataValue);\n            } else if (dataLabel === 'XYDATA') {\n                prepareSpectrum(result, spectrum);\n                // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n                if (dataValue.match(/.*\\+\\+.*/)) {\n                    if (options.fastParse === false) {\n                        parseXYDataRegExp(spectrum, dataValue, result);\n                    } else {\n                        if (!spectrum.deltaX) {\n                            spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n                        }\n                        fastParseXYData(spectrum, dataValue, result);\n                    }\n                } else {\n                    parsePeakTable(spectrum, dataValue, result);\n                }\n                spectra.push(spectrum);\n                spectrum = new Spectrum();\n            } else if (dataLabel === 'PEAKTABLE') {\n                prepareSpectrum(result, spectrum);\n                parsePeakTable(spectrum, dataValue, result);\n                spectra.push(spectrum);\n                spectrum = new Spectrum();\n            } else if (isMSField(dataLabel)) {\n                spectrum[convertMSFieldToLabel(dataLabel)] = dataValue;\n            }\n            if (dataLabel.match(keepRecordsRegExp)) {\n                result.info[dataLabel] = dataValue.trim();\n            }\n        }\n\n        if (result.profiling) result.profiling.push({\n            action: 'Finished parsing',\n            time: Date.now() - start\n        });\n\n        if (Object.keys(ntuples).length > 0) {\n            var newNtuples = [];\n            var keys = Object.keys(ntuples);\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                var values = ntuples[key];\n                for (var j = 0; j < values.length; j++) {\n                    if (!newNtuples[j]) newNtuples[j] = {};\n                    newNtuples[j][key] = values[j];\n                }\n            }\n            result.ntuples = newNtuples;\n        }\n\n        if (result.twoD) {\n            add2D(result, options);\n            if (result.profiling) result.profiling.push({\n                action: 'Finished countour plot calculation',\n                time: Date.now() - start\n            });\n            if (!options.keepSpectra) {\n                delete result.spectra;\n            }\n        }\n\n        var isGCMS = (spectra.length > 1 && (!spectra[0].dataType || spectra[0].dataType.match(/.*mass.*/i)));\n        if (isGCMS && options.newGCMS) {\n            options.xy = true;\n        }\n\n        if (options.xy) { // the spectraData should not be a oneD array but an object with x and y\n            if (spectra.length > 0) {\n                for (var i = 0; i < spectra.length; i++) {\n                    var spectrum = spectra[i];\n                    if (spectrum.data.length > 0) {\n                        for (var j = 0; j < spectrum.data.length; j++) {\n                            var data = spectrum.data[j];\n                            var newData = {\n                                x: new Array(data.length / 2),\n                                y: new Array(data.length / 2)\n                            };\n                            for (var k = 0; k < data.length; k = k + 2) {\n                                newData.x[k / 2] = data[k];\n                                newData.y[k / 2] = data[k + 1];\n                            }\n                            spectrum.data[j] = newData;\n                        }\n\n                    }\n\n                }\n            }\n        }\n\n        // maybe it is a GC (HPLC) / MS. In this case we add a new format\n        if (isGCMS) {\n            if (options.newGCMS) {\n                addNewGCMS(result);\n            } else {\n                addGCMS(result);\n            }\n            if (result.profiling) result.profiling.push({\n                action: 'Finished GCMS calculation',\n                time: Date.now() - start\n            });\n        }\n\n        if (result.profiling) {\n            result.profiling.push({\n                action: 'Total time',\n                time: Date.now() - start\n            });\n        }\n\n        return result;\n    }\n\n\n    function convertMSFieldToLabel(value) {\n        return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n    }\n\n    function isMSField(dataLabel) {\n        return GC_MS_FIELDS.indexOf(dataLabel) !== -1;\n    }\n\n    function addNewGCMS(result) {\n        var spectra = result.spectra;\n        var length = spectra.length;\n        var gcms = {\n            times: new Array(length),\n            series: [{\n                name: 'ms',\n                dimension: 2,\n                data: new Array(length)\n            }]\n        };\n\n        var i;\n        var existingGCMSFields = [];\n        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n            if (spectra[0][label]) {\n                existingGCMSFields.push(label);\n                gcms.series.push({\n                    name: label,\n                    dimension: 1,\n                    data: new Array(length)\n                });\n            }\n        }\n\n        for (i = 0; i < length; i++) {\n            var spectrum = spectra[i];\n            gcms.times[i] = spectrum.pageValue;\n            for (var j = 0; j < existingGCMSFields.length; j++) {\n                gcms.series[j + 1].data[i] = parseFloat(spectrum[existingGCMSFields[j]]);\n            }\n            if (spectrum.data) {\n                gcms.series[0].data[i] = [spectrum.data[0].x, spectrum.data[0].y];\n            }\n\n        }\n        result.gcms = gcms;\n    }\n\n    function addGCMS(result) {\n        var spectra = result.spectra;\n        var existingGCMSFields = [];\n        var i;\n        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n            if (spectra[0][label]) {\n                existingGCMSFields.push(label);\n            }\n        }\n        if (existingGCMSFields.length === 0) return;\n        var gcms = {};\n        gcms.gc = {};\n        gcms.ms = [];\n        for (i = 0; i < existingGCMSFields.length; i++) {\n            gcms.gc[existingGCMSFields[i]] = [];\n        }\n        for (i = 0; i < spectra.length; i++) {\n            var spectrum = spectra[i];\n            for (var j = 0; j < existingGCMSFields.length; j++) {\n                gcms.gc[existingGCMSFields[j]].push(spectrum.pageValue);\n                gcms.gc[existingGCMSFields[j]].push(parseFloat(spectrum[existingGCMSFields[j]]));\n            }\n            if (spectrum.data) gcms.ms[i] = spectrum.data[0];\n\n        }\n        result.gcms = gcms;\n    }\n\n    function prepareSpectrum(result, spectrum) {\n        if (!spectrum.xFactor) spectrum.xFactor = 1;\n        if (!spectrum.yFactor) spectrum.yFactor = 1;\n        if (spectrum.observeFrequency) {\n            if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n                spectrum.xUnit = 'PPM';\n                spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n                spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n                spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n                spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n            }\n        }\n        if (result.shiftOffsetVal) {\n            var shift = spectrum.firstX - result.shiftOffsetVal;\n            spectrum.firstX = spectrum.firstX - shift;\n            spectrum.lastX = spectrum.lastX - shift;\n        }\n    }\n\n\n    function convertTo3DZ(spectra) {\n        var noise = 0;\n        var minZ = spectra[0].data[0][0];\n        var maxZ = minZ;\n        var ySize = spectra.length;\n        var xSize = spectra[0].data[0].length / 2;\n        var z = new Array(ySize);\n        for (var i = 0; i < ySize; i++) {\n            z[i] = new Array(xSize);\n            var xVector = spectra[i].data[0];\n            for (var j = 0; j < xSize; j++) {\n                var value = xVector[j * 2 + 1];\n                z[i][j] = value;\n                if (value < minZ) minZ = value;\n                if (value > maxZ) maxZ = value;\n                if (i !== 0 && j !== 0) {\n                    noise += Math.abs(value - z[i][j - 1]) + Math.abs(value - z[i - 1][j]);\n                }\n            }\n        }\n        return {\n            z: z,\n            minX: spectra[0].data[0][0],\n            maxX: spectra[0].data[0][spectra[0].data[0].length - 2], // has to be -2 because it is a 1D array [x,y,x,y,...]\n            minY: spectra[0].pageValue,\n            maxY: spectra[ySize - 1].pageValue,\n            minZ: minZ,\n            maxZ: maxZ,\n            noise: noise / ((ySize - 1) * (xSize - 1) * 2)\n        };\n\n    }\n\n    function add2D(result, options) {\n        var zData = convertTo3DZ(result.spectra);\n        result.contourLines = generateContourLines(zData, options);\n        delete zData.z;\n        result.minMax = zData;\n    }\n\n\n    function generateContourLines(zData, options) {\n        var noise = zData.noise;\n        var z = zData.z;\n        var contourLevels = [];\n        var nbLevels = options.nbContourLevels || 7;\n        var noiseMultiplier = options.noiseMultiplier === undefined ? 5 : options.noiseMultiplier;\n        var povarHeight0, povarHeight1, povarHeight2, povarHeight3;\n        var isOver0, isOver1, isOver2, isOver3;\n        var nbSubSpectra = z.length;\n        var nbPovars = z[0].length;\n        var pAx, pAy, pBx, pBy;\n\n        var x0 = zData.minX;\n        var xN = zData.maxX;\n        var dx = (xN - x0) / (nbPovars - 1);\n        var y0 = zData.minY;\n        var yN = zData.maxY;\n        var dy = (yN - y0) / (nbSubSpectra - 1);\n        var minZ = zData.minZ;\n        var maxZ = zData.maxZ;\n\n        //System.out.prvarln('y0 '+y0+' yN '+yN);\n        // -------------------------\n        // Povars attribution\n        //\n        // 0----1\n        // |  / |\n        // | /  |\n        // 2----3\n        //\n        // ---------------------d------\n\n        var lineZValue;\n        for (var level = 0; level < nbLevels * 2; level++) { // multiply by 2 for positif and negatif\n            var contourLevel = {};\n            contourLevels[level] = contourLevel;\n            var side = level % 2;\n            var factor = (maxZ - noiseMultiplier * noise) * Math.exp((level >> 1) - nbLevels);\n            if (side === 0) {\n                lineZValue = factor + noiseMultiplier * noise;\n            } else {\n                lineZValue = -factor - noiseMultiplier * noise;\n            }\n            var lines = [];\n            contourLevel.zValue = lineZValue;\n            contourLevel.lines = lines;\n\n            if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\n            for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n                var subSpectra = z[iSubSpectra];\n                var subSpectraAfter = z[iSubSpectra + 1];\n                for (var povar = 0; povar < nbPovars - 1; povar++) {\n                    povarHeight0 = subSpectra[povar];\n                    povarHeight1 = subSpectra[povar + 1];\n                    povarHeight2 = subSpectraAfter[povar];\n                    povarHeight3 = subSpectraAfter[povar + 1];\n\n                    isOver0 = (povarHeight0 > lineZValue);\n                    isOver1 = (povarHeight1 > lineZValue);\n                    isOver2 = (povarHeight2 > lineZValue);\n                    isOver3 = (povarHeight3 > lineZValue);\n\n                    // Example povar0 is over the plane and povar1 and\n                    // povar2 are below, we find the varersections and add\n                    // the segment\n                    if (isOver0 !== isOver1 && isOver0 !== isOver2) {\n                        pAx = povar + (lineZValue - povarHeight0) / (povarHeight1 - povarHeight0);\n                        pAy = iSubSpectra;\n                        pBx = povar;\n                        pBy = iSubSpectra + (lineZValue - povarHeight0) / (povarHeight2 - povarHeight0);\n                        lines.push(pAx * dx + x0);\n                        lines.push(pAy * dy + y0);\n                        lines.push(pBx * dx + x0);\n                        lines.push(pBy * dy + y0);\n                    }\n                    // remove push does not help !!!!\n                    if (isOver3 !== isOver1 && isOver3 !== isOver2) {\n                        pAx = povar + 1;\n                        pAy = iSubSpectra + 1 - (lineZValue - povarHeight3) / (povarHeight1 - povarHeight3);\n                        pBx = povar + 1 - (lineZValue - povarHeight3) / (povarHeight2 - povarHeight3);\n                        pBy = iSubSpectra + 1;\n                        lines.push(pAx * dx + x0);\n                        lines.push(pAy * dy + y0);\n                        lines.push(pBx * dx + x0);\n                        lines.push(pBy * dy + y0);\n                    }\n                    // test around the diagonal\n                    if (isOver1 !== isOver2) {\n                        pAx = (povar + 1 - (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) * dx + x0;\n                        pAy = (iSubSpectra + (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) * dy + y0;\n                        if (isOver1 !== isOver0) {\n                            pBx = povar + 1 - (lineZValue - povarHeight1) / (povarHeight0 - povarHeight1);\n                            pBy = iSubSpectra;\n                            lines.push(pAx);\n                            lines.push(pAy);\n                            lines.push(pBx * dx + x0);\n                            lines.push(pBy * dy + y0);\n                        }\n                        if (isOver2 !== isOver0) {\n                            pBx = povar;\n                            pBy = iSubSpectra + 1 - (lineZValue - povarHeight2) / (povarHeight0 - povarHeight2);\n                            lines.push(pAx);\n                            lines.push(pAy);\n                            lines.push(pBx * dx + x0);\n                            lines.push(pBy * dy + y0);\n                        }\n                        if (isOver1 !== isOver3) {\n                            pBx = povar + 1;\n                            pBy = iSubSpectra + (lineZValue - povarHeight1) / (povarHeight3 - povarHeight1);\n                            lines.push(pAx);\n                            lines.push(pAy);\n                            lines.push(pBx * dx + x0);\n                            lines.push(pBy * dy + y0);\n                        }\n                        if (isOver2 !== isOver3) {\n                            pBx = povar + (lineZValue - povarHeight2) / (povarHeight3 - povarHeight2);\n                            pBy = iSubSpectra + 1;\n                            lines.push(pAx);\n                            lines.push(pAy);\n                            lines.push(pBx * dx + x0);\n                            lines.push(pBy * dy + y0);\n                        }\n                    }\n                }\n            }\n        }\n\n        return {\n            minX: zData.minX,\n            maxX: zData.maxX,\n            minY: zData.minY,\n            maxY: zData.maxY,\n            segments: contourLevels\n        };\n    }\n\n    function fastParseXYData(spectrum, value) {\n        // TODO need to deal with result\n        //  console.log(value);\n        // we check if deltaX is defined otherwise we calculate it\n\n        var yFactor = spectrum.yFactor;\n        var deltaX = spectrum.deltaX;\n\n\n        spectrum.isXYdata = true;\n        // TODO to be improved using 2 array {x:[], y:[]}\n        var currentData = [];\n        var currentPosition = 0;\n        spectrum.data = [currentData];\n\n\n        var currentX = spectrum.firstX;\n        var currentY = spectrum.firstY;\n\n        // we skip the first line\n        //\n        var endLine = false;\n        for (var i = 0; i < value.length; i++) {\n            var ascii = value.charCodeAt(i);\n            if (ascii === 13 || ascii === 10) {\n                endLine = true;\n            } else {\n                if (endLine) break;\n            }\n        }\n\n        // we proceed taking the i after the first line\n        var newLine = true;\n        var isDifference = false;\n        var isLastDifference = false;\n        var lastDifference = 0;\n        var isDuplicate = false;\n        var inComment = false;\n        var currentValue = 0;\n        var isNegative = false;\n        var inValue = false;\n        var skipFirstValue = false;\n        var decimalPosition = 0;\n        var ascii;\n        for (; i <= value.length; i++) {\n            if (i === value.length) ascii = 13;\n            else ascii = value.charCodeAt(i);\n            if (inComment) {\n                // we should ignore the text if we are after $$\n                if (ascii === 13 || ascii === 10) {\n                    newLine = true;\n                    inComment = false;\n                }\n            } else {\n                // when is it a new value ?\n                // when it is not a digit, . or comma\n                // it is a number that is either new or we continue\n                if (ascii <= 57 && ascii >= 48) { // a number\n                    inValue = true;\n                    if (decimalPosition > 0) {\n                        currentValue += (ascii - 48) / Math.pow(10, decimalPosition++);\n                    } else {\n                        currentValue *= 10;\n                        currentValue += ascii - 48;\n                    }\n                } else if (ascii === 44 || ascii === 46) { // a \",\" or \".\"\n                    inValue = true;\n                    decimalPosition++;\n                } else {\n                    if (inValue) {\n                        // need to process the previous value\n                        if (newLine) {\n                            newLine = false; // we don't check the X value\n                            // console.log(\"NEW LINE\",isDifference, lastDifference);\n                            // if new line and lastDifference, the first value is just a check !\n                            // that we don't check ...\n                            if (isLastDifference) skipFirstValue = true;\n                        } else {\n                            // need to deal with duplicate and differences\n                            if (skipFirstValue) {\n                                skipFirstValue = false;\n                            } else {\n                                if (isDifference) {\n                                    if (currentValue === 0) lastDifference = 0;\n                                    else lastDifference = isNegative ? -currentValue : currentValue;\n                                    isLastDifference = true;\n                                    isDifference = false;\n                                }\n                                var duplicate = isDuplicate ? currentValue - 1 : 1;\n                                for (var j = 0; j < duplicate; j++) {\n                                    if (isLastDifference) {\n                                        currentY += lastDifference;\n                                    } else {\n                                        if (currentValue === 0) currentY = 0;\n                                        else currentY = isNegative ? -currentValue : currentValue;\n                                    }\n\n                                    //  console.log(\"Separator\",isNegative ?\n                                    //          -currentValue : currentValue,\n                                    //      \"isDiff\", isDifference, \"isDup\", isDuplicate,\n                                    //      \"lastDif\", lastDifference, \"dup:\", duplicate, \"y\", currentY);\n\n                                    // push is slightly slower ... (we loose 10%)\n                                    currentData[currentPosition++] = currentX;\n                                    currentData[currentPosition++] = currentY * yFactor;\n                                    currentX += deltaX;\n                                }\n                            }\n                        }\n                        isNegative = false;\n                        currentValue = 0;\n                        decimalPosition = 0;\n                        inValue = false;\n                        isDuplicate = false;\n                    }\n\n                    // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n                    if ((ascii < 74) && (ascii > 63)) {\n                        inValue = true;\n                        isLastDifference = false;\n                        currentValue = ascii - 64;\n                    } else\n                    // negative SQZ digits a b c d e f g h i (ascii 97-105)\n                    if ((ascii > 96) && (ascii < 106)) {\n                        inValue = true;\n                        isLastDifference = false;\n                        currentValue = ascii - 96;\n                        isNegative = true;\n                    } else\n                    // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n                    if (ascii === 115) {\n                        inValue = true;\n                        isDuplicate = true;\n                        currentValue = 9;\n                    } else if ((ascii > 82) && (ascii < 91)) {\n                        inValue = true;\n                        isDuplicate = true;\n                        currentValue = ascii - 82;\n                    } else\n                    // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n                    if ((ascii > 73) && (ascii < 83)) {\n                        inValue = true;\n                        isDifference = true;\n                        currentValue = ascii - 73;\n                    } else\n                    // negative DIF digits j k l m n o p q r (ascii 106-114)\n                    if ((ascii > 105) && (ascii < 115)) {\n                        inValue = true;\n                        isDifference = true;\n                        currentValue = ascii - 105;\n                        isNegative = true;\n                    } else\n                    // $ sign, we need to check the next one\n                    if (ascii === 36 && value.charCodeAt(i + 1) === 36) {\n                        inValue = true;\n                        inComment = true;\n                    } else\n                    // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n                    if (ascii === 37) {\n                        inValue = true;\n                        isDifference = true;\n                        currentValue = 0;\n                        isNegative = false;\n                    } else if (ascii === 45) { // a \"-\"\n                        // check if after there is a number, decimal or comma\n                        var ascii2 = value.charCodeAt(i + 1);\n                        if ((ascii2 >= 48 && ascii2 <= 57) || ascii2 === 44 || ascii2 === 46) {\n                            inValue = true;\n                            isLastDifference = false;\n                            isNegative = true;\n                        }\n                    } else if (ascii === 13 || ascii === 10) {\n                        newLine = true;\n                        inComment = false;\n                    }\n                    // and now analyse the details ... space or tabulation\n                    // if \"+\" we just don't care\n                }\n            }\n        }\n    }\n\n    function parsePeakTable(spectrum, value, result) {\n        var removeCommentRegExp = /\\$\\$.*/;\n        var peakTableSplitRegExp = /[,\\t ]+/;\n\n        spectrum.isPeaktable = true;\n        var i, ii, j, jj, values;\n        var currentData = [];\n        spectrum.data = [currentData];\n\n        // counts for around 20% of the time\n        var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\n        var k = 0;\n        for (i = 1, ii = lines.length; i < ii; i++) {\n            values = lines[i].trim().replace(removeCommentRegExp, '').split(peakTableSplitRegExp);\n            if (values.length % 2 === 0) {\n                for (j = 0, jj = values.length; j < jj; j = j + 2) {\n                    // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n                    currentData[k++] = (parseFloat(values[j]) * spectrum.xFactor);\n                    currentData[k++] = (parseFloat(values[j + 1]) * spectrum.yFactor);\n                }\n            } else {\n                result.logs.push('Format error: ' + values);\n            }\n        }\n    }\n\n\n    return convert;\n\n}\n\nvar convert = getConverter();\n\nfunction JcampConverter(input, options, useWorker) {\n    if (typeof options === 'boolean') {\n        useWorker = options;\n        options = {};\n    }\n    if (useWorker) {\n        return postToWorker(input, options);\n    } else {\n        return convert(input, options);\n    }\n}\n\nvar stamps = {},\n    worker;\n\nfunction postToWorker(input, options) {\n    if (!worker) {\n        createWorker();\n    }\n    return new Promise(function (resolve) {\n        var stamp = Date.now() + '' + Math.random();\n        stamps[stamp] = resolve;\n        worker.postMessage(JSON.stringify({\n            stamp: stamp,\n            input: input,\n            options: options\n        }));\n    });\n}\n\nfunction createWorker() {\n    var workerURL = URL.createObjectURL(new Blob([\n        'var getConverter =' + getConverter.toString() + ';var convert = getConverter(); onmessage = function (event) { var data = JSON.parse(event.data); postMessage(JSON.stringify({stamp: data.stamp, output: convert(data.input, data.options)})); };'\n    ], {type: 'application/javascript'}));\n    worker = new Worker(workerURL);\n    URL.revokeObjectURL(workerURL);\n    worker.addEventListener('message', function (event) {\n        var data = JSON.parse(event.data);\n        var stamp = data.stamp;\n        if (stamps[stamp]) {\n            stamps[stamp](data.output);\n        }\n    });\n}\n\nmodule.exports = {\n    convert: JcampConverter\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/jcampconverter/src/index.js\n ** module id = 3\n ** module chunks = 0\n **/","'use strict';\n\n\nvar xyDataSplitRegExp = /[,\\t \\+-]*(?=[^\\d,\\t \\.])|[ \\t]+(?=[\\d+\\.-])/;\nvar removeCommentRegExp = /\\$\\$.*/;\nvar DEBUG=false;\n\nmodule.exports=function(spectrum, value, result) {\n    // we check if deltaX is defined otherwise we calculate it\n    if (!spectrum.deltaX) {\n        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n    }\n\n    spectrum.isXYdata=true;\n\n    var currentData = [];\n    var currentPosition=0;\n    spectrum.data = [currentData];\n\n    var currentX = spectrum.firstX;\n    var currentY = spectrum.firstY;\n    var lines = value.split(/[\\r\\n]+/);\n    var lastDif, values, ascii, expectedY;\n    values = [];\n    for (var i = 1, ii = lines.length; i < ii; i++) {\n        //var previousValues=JSON.parse(JSON.stringify(values));\n        values = lines[i].trim().replace(removeCommentRegExp, '').split(xyDataSplitRegExp);\n        if (values.length > 0) {\n            if (DEBUG) {\n                if (!spectrum.firstPoint) {\n                    spectrum.firstPoint = +values[0];\n                }\n                var expectedCurrentX = (values[0] - spectrum.firstPoint) * spectrum.xFactor + spectrum.firstX;\n                if ((lastDif || lastDif === 0)) {\n                    expectedCurrentX += spectrum.deltaX;\n                }\n                result.logs.push('Checking X value: currentX: ' + currentX + ' - expectedCurrentX: ' + expectedCurrentX);\n            }\n            for (var j = 1, jj = values.length; j < jj; j++) {\n                if (j === 1 && (lastDif || lastDif === 0)) {\n                    lastDif = null; // at the beginning of each line there should be the full value X / Y so the diff is always undefined\n                    // we could check if we have the expected Y value\n                    ascii = values[j].charCodeAt(0);\n\n                    if (false) { // this code is just to check the jcamp DIFDUP and the next line repeat of Y value\n                        // + - . 0 1 2 3 4 5 6 7 8 9\n                        if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n                            expectedY = +values[j];\n                        } else\n                        // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n                        if ((ascii > 63) && (ascii < 74)) {\n                            expectedY = +(String.fromCharCode(ascii - 16) + values[j].substring(1));\n                        } else\n                        // negative SQZ digits a b c d e f g h i (ascii 97-105)\n                        if ((ascii > 96) && (ascii < 106)) {\n                            expectedY = -(String.fromCharCode(ascii - 48) + values[j].substring(1));\n                        }\n                        if (expectedY !== currentY) {\n                            result.logs.push('Y value check error: Found: ' + expectedY + ' - Current: ' + currentY);\n                            result.logs.push('Previous values: ' + previousValues.length);\n                            result.logs.push(previousValues);\n                        }\n                    }\n                } else {\n                    if (values[j].length > 0) {\n                        ascii = values[j].charCodeAt(0);\n                        // + - . 0 1 2 3 4 5 6 7 8 9\n                        if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n                            lastDif = null;\n                            currentY = +values[j];\n                            // currentData.push(currentX, currentY * spectrum.yFactor);\n                            currentData[currentPosition++]=currentX;\n                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n                            currentX += spectrum.deltaX;\n                        } else\n                        // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n                        if ((ascii > 63) && (ascii < 74)) {\n                            lastDif = null;\n                            currentY = +(String.fromCharCode(ascii - 16) + values[j].substring(1));\n                            // currentData.push(currentX, currentY * spectrum.yFactor);\n                            currentData[currentPosition++] = currentX;\n                            currentData[currentPosition++] = currentY * spectrum.yFactor;\n                            currentX += spectrum.deltaX;\n                        } else\n                        // negative SQZ digits a b c d e f g h i (ascii 97-105)\n                        if ((ascii > 96) && (ascii < 106)) {\n                            lastDif = null;\n                            // we can multiply the string by 1 because if may not contain decimal (is this correct ????)\n                            currentY = -(String.fromCharCode(ascii - 48) + values[j].substring(1))*1;\n                            //currentData.push(currentX, currentY * spectrum.yFactor);\n                            currentData[currentPosition++]=currentX;\n                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n                            currentX += spectrum.deltaX;\n                        } else\n\n\n\n                        // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n                        if (((ascii > 82) && (ascii < 91)) || (ascii === 115)) {\n                            var dup = (String.fromCharCode(ascii - 34) + values[j].substring(1)) - 1;\n                            if (ascii === 115) {\n                                dup = ('9' + values[j].substring(1)) - 1;\n                            }\n                            for (var l = 0; l < dup; l++) {\n                                if (lastDif) {\n                                    currentY = currentY + lastDif;\n                                }\n                                // currentData.push(currentX, currentY * spectrum.yFactor);\n                                currentData[currentPosition++]=currentX;\n                                currentData[currentPosition++]=currentY * spectrum.yFactor;\n                                currentX += spectrum.deltaX;\n                            }\n                        } else\n                        // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n                        if (ascii === 37) {\n                            lastDif = +('0' + values[j].substring(1));\n                            currentY += lastDif;\n                            // currentData.push(currentX, currentY * spectrum.yFactor);\n                            currentData[currentPosition++]=currentX;\n                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n                            currentX += spectrum.deltaX;\n                        } else if ((ascii > 73) && (ascii < 83)) {\n                            lastDif = (String.fromCharCode(ascii - 25) + values[j].substring(1))*1;\n                            currentY += lastDif;\n                            // currentData.push(currentX, currentY * spectrum.yFactor);\n                            currentData[currentPosition++]=currentX;\n                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n                            currentX += spectrum.deltaX;\n                        } else\n                        // negative DIF digits j k l m n o p q r (ascii 106-114)\n                        if ((ascii > 105) && (ascii < 115)) {\n                            lastDif = -(String.fromCharCode(ascii - 57) + values[j].substring(1))*1;\n                            currentY += lastDif;\n                            // currentData.push(currentX, currentY * spectrum.yFactor);\n                            currentData[currentPosition++]=currentX;\n                            currentData[currentPosition++]=currentY * spectrum.yFactor;\n                            currentX += spectrum.deltaX;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/jcampconverter/src/parseXYData.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by acastillo on 3/2/16.\n */\n/**\n * This class converts a SpectraData object into a String that can be stored as a jcamp file.\n * The string reflects the current state of the object and not the raw data from where this\n * spectrum was initially loaded.\n * @author acastillo\n *\n */\n\nvar Encoder = require(\"./VectorEncoder\");\n\nvar JcampCreator = (function(){\n\n    const Integer = {MAX_VALUE:2e31-1,MIN_VALUE:-2e31};\n    const CRLF = \"\\r\\n\";\n    const version = \"Cheminfo tools, March 2016\"\n\n    /**\n     * This function creates a String that represents the given spectraData, in the format JCAM-DX 5.0\n     * The X,Y data can be compressed using one of the methods described in:\n     * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\",\n     *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n     * @param spectraData\n     * @param encodeFormat: ('FIX','SQZ','DIF','DIFDUP','CVS','PAC')\n     * @return\n     */\n    var convert = function(spectraData, encodeFormat, factorY, type, userDefinedParams){\n        encodeFormat = encodeFormat.toUpperCase().trim();\n\n        if(type===null||type.length==0)\n            type=\"SIMPLE\";\n\n        var outString = \"\";\n        spectraData.setActiveElement(0);\n\n        var scale=factorY/spectraData.getParamDouble(\"YFACTOR\", 1);\n        if(spectraData.getMaxY()*scale>=Integer.MAX_VALUE/2){\n            scale=Integer.MAX_VALUE/(spectraData.getMaxY()*2);\n        }\n        if(Math.abs(spectraData.getMaxY()-spectraData.getMinY())*scale<16)\n            scale=16/(Math.abs(spectraData.getMaxY()-spectraData.getMinY()));\n\n        var scaleX=Math.abs(1.0/spectraData.getDeltaX());\n\n        outString+=(\"##TITLE= \" + spectraData.getTitle() + CRLF);\n        outString+=(\"##JCAMP-DX= 5.00\\t$$\"+version+ CRLF);\n        outString+=(\"##OWNER= \" + spectraData.getParamString(\"##OWNER=\", \"\")+ CRLF);\n        outString+=(\"##DATA TYPE= \" +spectraData.getDataType()+ CRLF);\n\n        if(type==\"NTUPLES\") {\n            outString+=ntuplesHead(spectraData, scale, scaleX, encodeFormat, userDefinedParams);\n        }\n\n        if(type==\"SIMPLE\"){\n            outString+=simpleHead(spectraData, scale, scaleX, encodeFormat, userDefinedParams);\n        }\n        return outString;\n    }\n\n    var ntuplesHead = function(spectraData, scale, scaleX, encodeFormat, userDefinedParams){\n        var outString=\"\";\n        var variableX = spectraData.getSpectraVariable(0);\n        var variableY = spectraData.getSpectraVariable(1);\n        var variableZ = spectraData.getSpectraVariable(2);\n\n        outString+=\"##DATA CLASS= NTUPLES\" + CRLF;\n        outString+=\"##NUM DIM= 2\" + CRLF;\n        var nTuplesName=spectraData.getDataType().trim();\n        // we set the VarName parameter to the most common ones.\n        // These tables contain the number of occurences of each one\n        var abscVar = {};\n        var sub;\n        for ( sub = 0; sub < spectraData.getNbSubSpectra(); sub++) {\n            spectraData.setActiveElement(sub);\n            if (abscVar[spectraData.getXUnits()]) {\n                abscVar[spectraData.getXUnits()].value++;\n            } else {\n                abscVar[spectraData.getXUnits()]={value:1, index:sub};\n            }\n        }\n\n        var keys = Object.keys(abscVar);\n        var mostCommon =keys[0], defaultSub = 0;\n\n        for(sub=1;sub<keys.length;sub++){\n            if(abscVar[keys[sub]].value>abscVar[mostCommon].value){\n                mostCommon = keys[sub];\n                defaultSub=abscVar[keys[sub]].index;\n            }\n        }\n        var isComplex=false;\n        spectraData.setActiveElement(defaultSub);\n        var isNMR = spectraData.getDataType().indexOf(\"NMR\")>=0;\n        //If it is a NMR spectrum\n        if(isNMR){\n            outString+=(\"##.OBSERVE FREQUENCY= \" + spectraData.getParamDouble(\"observefrequency\", 0) + CRLF);\n            outString+=(\"##.OBSERVE NUCLEUS= ^\" + spectraData.getNucleus()+ CRLF);\n            outString+=(\"##$DECIM= \" + (spectraData.getParamDouble(\"$DECIM\",0))+ CRLF);\n            outString+=(\"##$DSPFVS= \" + (spectraData.getParamDouble(\"$DSPFVS\",0))+ CRLF);\n            outString+=(\"##$FCOR= \" + (Math.floor(spectraData.getParamDouble(\"$FCOR\",0)))+ CRLF);\n            if(spectraData.containsParam(\"$SW_h\"))\n                outString+=(\"##$SW_h= \" + (spectraData.getParamDouble(\"$SW_h\",0))+ CRLF);\n            else\n            if(spectraData.containsParam(\"$SW_p\"))\n                outString+=(\"##$SW_p= \" + (spectraData.getParamDouble(\"$SW_p\",0))+ CRLF);\n            outString+=(\"##$SW= \" + (spectraData.getParamDouble(\"$SW\",0))+ CRLF);\n            outString+=(\"##$TD= \" + (Math.floor(spectraData.getParamDouble(\"$TD\",0)))+ CRLF);\n            outString+=(\"##$BF1= \" + (spectraData.getParamDouble(\"$BF1\",0))+ CRLF);\n            outString+=(\"##$GRPDLY= \" + (spectraData.getParamDouble(\"$GRPDLY\",0))+ CRLF);\n            outString+=(\"##.DIGITISER RES= \" + (spectraData.getParamInt(\".DIGITISER RES\",0))+ CRLF);\n            outString+=(\"##.PULSE SEQUENCE= \" + (spectraData.getParamString(\".PULSE SEQUENCE\", \"\"))+ CRLF);\n            outString+=(\"##.SOLVENT NAME= \" + (spectraData.getSolventName())+ CRLF);\n            outString+=(\"##$NUC1= <\" +spectraData.getNucleus()+\">\"+ CRLF);\n            if(spectraData.containsParam(\"2D_X_FREQUENCY\"))\n                outString+=(\"##$SFO1= \" + (spectraData.getParamDouble(\"2D_X_FREQUENCY\",0))+ CRLF);\n            else\n                outString+=(\"##$SFO1= \" + (spectraData.getParamDouble(\"$SFO1\",0))+ CRLF);\n\n            if(spectraData.containsParam(\"2D_X_OFFSET\"))\n                outString+=(\"##$OFFSET= \" +spectraData.getParamDouble(\"2D_X_OFFSET\", 0)+ CRLF);\n\n            if(spectraData.is2D()){\n                outString+=(\"$$Parameters for 2D NMR Spectrum\"+ CRLF);\n                outString+=(\"##$NUC1= <\" +spectraData.getNucleus(2)+\">\"+ CRLF);\n                if(spectraData.containsParam(\"2D_Y_FREQUENCY\")){\n                    outString+=(\"##$SFO1= \" + spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0)+ CRLF);\n                    outString+=(\"##$SFO2= \" + spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0)+ CRLF);\n                    outString+=(\"##$BF2= \" +spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0)+ CRLF);\n                }\n                if(spectraData.containsParam(\"2D_Y_OFFSET\"))\n                    outString+=(\"##$OFFSET= \" +spectraData.getParamDouble(\"2D_Y_OFFSET\", 0)+ CRLF);\n\n                outString+=(\"$$End of Parameters for 2D NMR Spectrum\"+ CRLF);\n            }\n        }\n        outString+=(\"##NTUPLES=\\t\" + nTuplesName + CRLF);\n        var freq1 = 1,freq2=1;//spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 0);\n        if(!spectraData.is2D()&&spectraData.getNbSubSpectra()>1&& isNMR)\n            isComplex=true;\n        if(isComplex){\n            outString+=(\"##VAR_NAME=\\t\" + spectraData.getXUnits() + \",\\t\"+ nTuplesName.substring(4) +\"/REAL,\\t\"+ nTuplesName.substring(4) +\"/IMAG\"+CRLF);\n            outString+=(\"##SYMBOL=\\tX,\\tR,\\tI\" + CRLF);\n            outString+=(\"##VAR_TYPE=\\tINDEPENDENT,\\tDEPENDENT,\\tDEPENDENT\" + CRLF);\n            if(encodeFormat!=\"CSV\"||encodeFormat!=\"PAC\")\n                outString+=(\"##VAR_FORM=\\tAFFN,\\tASDF,\\tASDF\" + CRLF);\n            else\n                outString+=(\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tAFFN\" + CRLF);\n            outString+=(\"##VAR_DIM=\\t\" + spectraData.getNbPoints() + \",\\t\" + spectraData.getNbPoints()+\",\\t\" + spectraData.getNbPoints()+CRLF);\n            outString+=(\"##UNITS=\\tHZ\"+ \",\\t\"+ spectraData.getYUnits() +\",\\t\"+ variableZ.units + CRLF);\n            outString+=(\"##FACTOR=\\t\" + 1.0/scaleX + \",\\t\"+1.0/scale+\",\\t\"+1.0/scale+ CRLF);\n\n            if(spectraData.getXUnits()==\"PPM\")\n                freq1 = spectraData.observeFrequencyX();\n\n            outString+=(\"##FIRST=\\t\" + spectraData.getFirstX()*freq1 + \",\\t\"+spectraData.getY(0)+\",\\t0\" + CRLF);\n            outString+=(\"##LAST=\\t\" + spectraData.getLastX()*freq1 + \",\\t\"+spectraData.getLastY()+\",\\t0\" + CRLF);\n        }\n        else{\n            freq1 = 1;\n            if(spectraData.is2D()) {\n                outString += (\"##VAR_NAME=\\tFREQUENCY1,\\tFREQUENCY2,\\tSPECTRUM\" + CRLF);\n                outString += (\"##SYMBOL=\\tF1,\\tF2,\\tY\" + CRLF);\n                outString += (\"##.NUCLEUS=\\t\" + spectraData.getNucleus(2) + \",\\t\" + spectraData.getNucleus(1) + CRLF);\n                outString += (\"##VAR_TYPE=\\tINDEPENDENT,\\tINDEPENDENT,\\tDEPENDENT\" + CRLF);\n                if (encodeFormat != \"CSV\" || encodeFormat != \"PAC\")\n                    outString += (\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tASDF\" + CRLF);\n                else\n                    outString+=(\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tASDF\" + CRLF);\n                outString+=(\"##VAR_DIM=\\t\" + spectraData.getNbSubSpectra() + \",\\t\" + spectraData.getNbPoints()+ \",\\t\" + spectraData.getNbPoints() + CRLF);\n                //We had to change this, for Mestre compatibility\n                //outString+=(\"##UNITS=\\tHZ,\\t\"+ spectraData.getXUnits() + \",\\t\" + spectraData.getYUnits()+CRLF);\n                outString+=(\"##UNITS=\\tHZ,\\tHZ,\\t\" + spectraData.getYUnits()+CRLF);\n                if(spectraData.getXUnits()==\"PPM\")\n                    freq1 = spectraData.getParamDouble(\"2D_Y_FREQUENCY\", 1);\n                if(spectraData.getYUnits()==\"PPM\"){\n                    freq2 = spectraData.getParamDouble(\"2D_X_FREQUENCY\", 1);\n                }\n                outString+=(\"##FACTOR=\\t1,\\t\"+freq2/scaleX + \",\\t\"+1.0/scale+ CRLF);\n                outString+=(\"##FIRST=\\t\"+spectraData.getParamDouble(\"firstY\", 0)*freq1+\",\\t\"+ spectraData.getFirstX()*freq2 + \",\\t\"+spectraData.getY(0) + CRLF);\n                outString+=(\"##LAST=\\t\" +spectraData.getParamDouble(\"lastY\", 0)*freq1+\",\\t\"+ spectraData.getLastX() *freq2\n                + \",\\t\"+ spectraData.getY(spectraData.getNbPoints()-1)+ CRLF);\n            }else{\n                outString+=(\"##VAR_NAME=\\t\" + variableX.varname + \",\\t\"+ variableY.varname + \",\\t\"+ variableX.varname + CRLF);\n                outString+=(\"##SYMBOL=\\t\" + variableX.symbol + \",\\t\"+ variableY.symbol + \",\\t\"+ variableZ.symbol + CRLF);\n                outString+=(\"##VAR_TYPE=\\t\" + variableX.vartype + \",\\t\"+ variableY.vartype + \",\\t\"+ variableZ.vartype + CRLF);\n                if(encodeFormat!=\"CSV\"||encodeFormat!=\"PAC\")\n                    outString+=(\"##VAR_FORM=\\tAFFN,\\tASDF,\\tASDF\" + CRLF);\n                else\n                    outString+=(\"##VAR_FORM=\\tAFFN,\\tAFFN,\\tAFFN\" + CRLF);\n                outString+=(\"##VAR_DIM=\\t\" + variableX.vardim + \",\\t\"+ variableY.vardim + \",\\t\"+ variableZ.vardim + CRLF);\n                outString+=(\"##UNITS=\\tHZ\" + \",\\t\"+ spectraData.getYUnits() + \",\\t\"+ variableZ.units + CRLF);\n                if(spectraData.getXUnits()==\"PPM\")\n                    freq1 = spectraData.observeFrequencyX();\n                outString+=(\"##FACTOR=\\t\" + 1.0/scaleX + \",\\t\"+1.0/scale + CRLF);\n                outString+=(\"##FIRST=\\t\" + variableX.first*freq1 + \",\\t\"+ variableY.first + \",\\t\"+ variableZ.first + CRLF);\n                outString+=(\"##LAST=\\t\" + variableX.last*freq1 + \",\\t\"+ variableY.last + \",\\t\"+ variableZ.last + CRLF);\n\n            }\n        }\n\n        //Set the user defined parameters\n        if(userDefinedParams!=null){\n            for(var i=userDefinedParams.length-1;i>=0;i--){\n                if(spectraData.containsParam(userDefinedParams[i])){\n                    outString+=(\"##\"+userDefinedParams[i]+\"= \"\n                    + spectraData.getParam(userDefinedParams[i], \"\")+ CRLF);\n                }\n            }\n        }\n        //Ordinate of the second dimension in case of 2D NMR spectra\n        var yUnits = 0, lastY = 0, dy = 0;\n\n        if(spectraData.is2D()&& isNMR){\n            yUnits = spectraData.getParamDouble(\"firstY\", 0)*freq1;\n            lastY = spectraData.getParamDouble(\"lastY\", 0)*freq1;\n            dy = (lastY-yUnits)/(spectraData.getNbSubSpectra()-1);\n        }\n\n        for ( sub = 0; sub < spectraData.getNbSubSpectra(); sub++) {\n            spectraData.setActiveElement(sub);\n            outString+=(\"##PAGE= \" + spectraData.page + CRLF);\n            yUnits+=dy;\n\n            if(spectraData.is2D()&&isNMR)\n                outString+=(\"##FIRST=\\t\"+spectraData.getParamDouble(\"firstY\", 0)*freq1+\",\\t\"\n                + spectraData.getFirstX()*freq2 + \",\\t\"+spectraData.getY(0) + CRLF);\n\n\n            outString+=(\"##DATA TABLE= \");\n            if (spectraData.isDataClassPeak()) {\n                outString+=(\"(XY..XY), PEAKS\" + CRLF);\n                for (var point = 0; point < spectraData.getNbPoints(); point++)\n                    outString+=(spectraData.getX(point) + \", \" + spectraData.getY(point)+ CRLF);\n\n            } else if (spectraData.isDataClassXY()) {\n                if(isNMR){\n                    if(spectraData.is2D()){\n                        outString+=(\"(F2++(Y..Y)), PROFILE\" + CRLF);\n                    }\n                    else{\n                        if(sub%2==0)\n                            outString+=(\"(X++(R..R)), XYDATA\" + CRLF);\n                        else\n                            outString+=(\"(X++(I..I)), XYDATA\" + CRLF);\n                    }\n                }\n                else\n                    outString+=(\"(X++(Y..Y)), XYDATA\" + CRLF);\n\n                var tempString = \"\";\n                var data = new Array(spectraData.getNbPoints());\n                for (var point = data.length-1; point >=0; point--) {\n                    data[point]=Math.round((spectraData.getY(point)*scale));\n                }\n\n                tempString+=Encoder.encode(data,\n                    spectraData.getFirstX()*scaleX,spectraData.getDeltaX()*scaleX,encodeFormat);\n\n                outString+=(tempString+CRLF);\n            }\n        }\n        outString+=(\"##END NTUPLES= \" + nTuplesName + CRLF);\n        outString+=(\"##END= \");\n\n        spectraData.setActiveElement(0);\n\n        return outString;\n    }\n\n    var simpleHead = function(spectraData, scale, scaleX, encodeFormat, userDefinedParams){\n        var variableX = spectraData.getSpectraVariable(0);\n        var variableY = spectraData.getSpectraVariable(1);\n        var outString=\"\";\n        if(spectraData.isDataClassPeak())\n            outString+=(\"##DATA CLASS= PEAK TABLE\"+ CRLF);\n        if(spectraData.isDataClassXY())\n            outString+=(\"##DATA CLASS= XYDATA\"+ CRLF);\n\n        spectraData.setActiveElement(0);\n        //If it is a NMR spectrum\n        if(spectraData.getDataType().indexOf(\"NMR\")>=0){\n            outString+=(\"##.OBSERVE FREQUENCY= \" + spectraData.getParamDouble(\"observefrequency\", 0) + CRLF);\n            outString+=(\"##.OBSERVE NUCLEUS= ^\" + spectraData.getNucleus()+ CRLF);\n            outString+=(\"##$DECIM= \" + (Math.round(spectraData.getParamDouble(\"$DECIM\",0)))+ CRLF);\n            outString+=(\"##$DSPFVS= \" + (Math.round(spectraData.getParamDouble(\"$DSPFVS\",0)))+ CRLF);\n            outString+=(\"##$FCOR= \" + (Math.round(spectraData.getParamDouble(\"$FCOR\",0)))+ CRLF);\n            outString+=(\"##$SW_h= \" + (spectraData.getParamDouble(\"$SW_h\",0))+ CRLF);\n            outString+=(\"##$SW= \" + (spectraData.getParamDouble(\"$SW\",0))+ CRLF);\n            outString+=(\"##$TD= \" + (Math.round(spectraData.getParamDouble(\"$TD\",0)))+ CRLF);\n            outString+=(\"##$GRPDLY= \" + (spectraData.getParamDouble(\"$GRPDLY\",0))+ CRLF);\n            outString+=(\"##$BF1= \" + (spectraData.getParamDouble(\"$BF1\",0))+ CRLF);\n            outString+=(\"##$SFO1= \" + (spectraData.getParamDouble(\"$SFO1\",0))+ CRLF);\n            outString+=(\"##$NUC1= <\" +spectraData.getNucleus()+\">\"+ CRLF);\n            outString+=(\"##.SOLVENT NAME= \" + (spectraData.getSolventName())+ CRLF);\n\n        }\n        outString+=(\"##XUNITS=\\t\" + spectraData.getXUnits() + CRLF);\n        outString+=(\"##YUNITS=\\t\" + spectraData.getYUnits() + CRLF);\n        outString+=(\"##NPOINTS=\\t\" + spectraData.getNbPoints() + CRLF);\n        outString+=(\"##FIRSTX=\\t\" + spectraData.getFirstX() + CRLF);\n        outString+=(\"##LASTX=\\t\" + spectraData.getLastX() + CRLF);\n        outString+=(\"##FIRSTY=\\t\" + spectraData.getFirstY() + CRLF);\n        outString+=(\"##LASTY=\\t\" + spectraData.getLastY() + CRLF);\n        if (spectraData.isDataClassPeak()) {\n            outString+=(\"##XFACTOR=1\"+ CRLF);\n            outString+=(\"##YFACTOR=1\"+ CRLF);\n        } else if (spectraData.isDataClassXY()) {\n            outString+=(\"##XFACTOR= \"+ 1.0/scaleX+ CRLF);\n            outString+=(\"##YFACTOR= \"+1.0/scale + CRLF);\n        }\n        outString+=(\"##MAXY= \"+ spectraData.getMaxY()+ CRLF);\n        outString+=(\"##MINY= \"+ spectraData.getMinY()+ CRLF);\n\n        //Set the user defined parameters\n        if(userDefinedParams!=null){\n            for(var i=userDefinedParams.length-1;i>=0;i--){\n                if(spectraData.containsParam(userDefinedParams[i])){\n                    outString+=(\"##\"+userDefinedParams[i]+\"= \"\n                    + spectraData.getParam(userDefinedParams[i], \"\")+ CRLF);\n                }\n            }\n        }\n\n\n        if (spectraData.isDataClassPeak()) {\n            outString+=(\"##PEAK TABLE= (XY..XY)\" + CRLF);\n            for (var point = 0; point < spectraData.getNbPoints(); point++)\n                outString+=(spectraData.getX(point) + \", \" + spectraData.getY(point)+ CRLF);\n            outString+=(\"##END \");\n\n        } else if (spectraData.isDataClassXY()) {\n            outString+=(\"##DELTAX= \"+spectraData.getDeltaX()+CRLF);\n            outString+=(\"##XYDATA=(X++(Y..Y))\" + CRLF);\n            var tempString = \"\";\n            var data = new Array(spectraData.getNbPoints());\n            for (var point = data.length-1; point >=0; point--) {\n                data[point]=Math.round(spectraData.getY(point)*scale);\n            }\n\n            tempString+=Encoder.encode(data, spectraData.getFirstX()*scaleX,spectraData.getDeltaX()*scaleX, encodeFormat);\n\n            outString+=(tempString+CRLF);\n            outString+=(\"##END= \");\n        }\n\n        spectraData.setActiveElement(0);\n        return outString;\n    }\n\n    return {\"convert\":convert};\n})();\n\nmodule.exports = JcampCreator;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JcampCreator.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n/**\n * class encodes a integer vector as a String in order to store it in a text file.\n * The algorithms used to encode the data are describe in:\n *            http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n * Created by acastillo on 3/2/16.\n */\nvar Encoder = (function(){\n    var newLine=\"\\r\\n\";\n\n    var pseudoDigits=[['0','1','2','3','4','5','6','7','8','9'],\n                  ['@','A','B','C','D','E','F','G','H','I'],\n                  ['@','a','b','c','d','e','f','g','h','i'],\n                  ['%','J','K','L','M','N','O','P','Q','R'],\n                  ['%','j','k','l','m','n','o','p','q','r'],\n                  [' ','S','T','U','V','W','X','Y','Z','s']];\n\n    var SQZ_P= 1, SQZ_N= 2, DIF_P=3, DIF_N=4, DUP=5, MaxLinelength=100;\n\n    /**\n     * This function encodes the given vector. The encoding format is specified by the\n     * encoding option\n     * @param data\n     * @param firstX\n     * @param intervalX\n     * @param encoding: ('FIX','SQZ','DIF','DIFDUP','CVS','PAC') Default 'DIFDUP'\n     * @returns {String}\n     */\n    var encode = function(data, firstX, intervalX, encoding){\n        if(encoding==(\"FIX\"))\n            return FIXencod(data, firstX,intervalX);\n        if(encoding==(\"SQZ\"))\n            return SQZencod(data, firstX,intervalX);\n        if(encoding==(\"DIF\"))\n            return DIFencod(data, firstX,intervalX);\n        if(encoding==(\"DIFDUP\"))\n            return DIFDUPencod(data, firstX,intervalX);\n        if(encoding==(\"CSV\"))\n            return CSVencod(data, firstX,intervalX);\n        if(encoding==(\"PAC\"))\n            return PACencod(data, firstX,intervalX);\n        //Default\n        return DIFencod(data, firstX,intervalX);\n    }\n\n    /**\n     * No data compression used. The data is separated by a comma(',').\n     * @param data\n     * @return\n     */\n    var CSVencod =  function(data, firstX, intervalX){\n        return FIXencod(data, firstX, intervalX, \",\");\n    };\n\n    /**\n     * No data compression used. The data is separated by the specified separator.\n     * @param data\n     * @param separator, The separator character\n     * @return\n     */\n    var FIXencod =  function(data, firstX, intervalX, separator){\n        if(!separator)\n            separator = \" \";\n        var outputData = \"\";\n        var j=0, TD = data.length, i;\n        while(j<TD-7){\n            outputData+=Math.ceil(firstX+j*intervalX);\n            for(i = 0;i<8;i++)\n                outputData+=separator+data[j++];\n            outputData+=newLine;\n        }\n        if(j<TD){\n            //We add last numbers\n            outputData+=Math.ceil(firstX+j*intervalX);\n            for(i=j;i<TD;i++)\n                outputData+=separator + data[i];\n        }\n        return outputData;\n    };\n    /**\n     * No data compression used. The data is separated by the sign of the number.\n     * @param data\n     * @return\n     */\n    var PACencod = function(data, firstX, intervalX){\n        var outputData = \"\";\n        var j=0, TD = data.length, i;\n\n        while(j<TD-7){\n            outputData+=Math.ceil(firstX+j*intervalX);\n            for(i = 0;i<8;i++){\n                if(data[j]<0)\n                    outputData+=\"-\"+data[j++];\n                else\n                    outputData+=\"+\"+data[j++];\n            }\n            outputData+=newLine;\n        }\n        if(j<TD){\n            //We add last numbers\n            outputData+=Math.ceil(firstX+j*intervalX);\n            for(i=j;i<TD;i++){\n                if(data[i]<0)\n                    outputData+=\"-\"+data[i];\n                else\n                    outputData+=\"+\"+data[i];\n            }\n        }\n        return outputData;\n    };\n    /**\n     * Data compression is possible using the squeezed form (SQZ) in which the delimiter, the leading digit,\n     * and sign are replaced by a pseudo-digit from Table 1. For example, the Y-values 30, 32 would be\n     * represented as C0C2.\n     * @param data\n     * @return String\n     */\n    var SQZencod = function(data, firstX, intervalX){\n        var outputData = \"\";\n        //String outputData = new String();\n        var j=0, TD = data.length, i;\n\n        while(j<TD-10){\n            outputData+=Math.ceil(firstX+j*intervalX);\n            for(i = 0;i<10;i++)\n                outputData+=SQZDigit(data[j++].toString());\n            outputData+=newLine;\n        }\n        if(j<TD){\n            //We add last numbers\n            outputData+=Math.ceil(firstX+j*intervalX);\n            for(i = j;i<TD;i++)\n                outputData+=SQZDigit(data[i].toString());\n        }\n\n        return outputData;\n    };\n\n    /**\n     * Duplicate suppression encoding\n     * @param data\n     * @return\n     */\n    var DIFDUPencod = function(data, firstX, intervalX){\n        var mult=0, index=0, charCount= 0, i;\n        //We built a string where we store the encoded data.\n        var encodData = \"\",encodNumber = \"\",temp = \"\";\n\n        //We calculate the differences vector\n        var diffData = new Array(data.length-1);\n        for(i=0;i<diffData.length;i++){\n            diffData[i]= data[i+1]-data[i];\n        }\n\n        //We simulate a line carry\n        var numDiff = diffData.length;\n        while(index<numDiff){\n            if(charCount==0){//Start line\n                encodNumber = Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+DIFDigit(diffData[index].toString());\n                encodData+=encodNumber;\n                charCount+=encodNumber.length;\n            }\n            else{\n                //Try to insert next difference\n                if(diffData[index-1]==diffData[index]){\n                    mult++;\n                }\n                else{\n                    if(mult>0){//Now we know that it can be in line\n                        mult++;\n                        encodNumber=DUPDigit(mult.toString());\n                        encodData+=encodNumber;\n                        charCount+=encodNumber.length;\n                        mult=0;\n                        index--;\n                    }\n                    else{\n                        //Mirar si cabe, en caso contrario iniciar una nueva linea\n                        encodNumber=DIFDigit(diffData[index].toString());\n                        if(encodNumber.length+charCount<MaxLinelength){\n                            encodData+=encodNumber;\n                            charCount+=encodNumber.length;\n                        }\n                        else{//Iniciar nueva linea\n                            encodData+=newLine;\n                            temp=Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+encodNumber;\n                            encodData+=temp;//Each line start with first index number.\n                            charCount=temp.length;\n                        }\n                    }\n                }\n            }\n            index++;\n        }\n        if(mult>0)\n            encodData+=DUPDigit((mult+1).toString());\n        //We insert the last data from fid. It is done to control of data\n        //The last line start with the number of datas in the fid.\n        encodData+=newLine+Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString());\n\n        return encodData;\n    };\n\n    /**\n     * Differential encoding\n     * @param data\n     * @return\n     */\n    var DIFencod = function(data, firstX, intervalX){\n        var index=0, charCount= 0,i;\n\n        var encodData = \"\";\n        //String encodData = new String();\n        var encodNumber = \"\", temp = \"\";\n\n        //We calculate the differences vector\n        var diffData = new Array(data.length-1);\n        for(i=0;i<diffData.length;i++){\n            diffData[i]= data[i+1]-data[i];\n        }\n\n        index=0;\n        var numDiff = diffData.length;\n        while(index<numDiff){\n            if(charCount==0){//Iniciar linea\n                //We convert the first number.\n                encodNumber = Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+DIFDigit(diffData[index].toString());\n                encodData+=encodNumber;\n                charCount+=encodNumber.length;\n            }\n            else{\n                //Mirar si cabe, en caso contrario iniciar una nueva linea\n                encodNumber=DIFDigit(diffData[index].toString());\n                if(encodNumber.length+charCount<MaxLinelength){\n                    encodData+=encodNumber;\n                    charCount+=encodNumber.length;\n                }\n                else{//Iniciar nueva linea\n                    encodData+=newLine;\n                    temp=Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString())+encodNumber;\n                    encodData+=temp;//Each line start with first index number.\n                    charCount=temp.length;\n                }\n            }\n            index++;\n        }\n        //We insert the last number from data. It is done to control of data\n        encodData+=newLine+Math.ceil(firstX+index*intervalX)+SQZDigit(data[index].toString());\n\n        return encodData;\n    };\n\n    /**\n     * Convert number to the ZQZ format, using pseudo digits.\n     * @param num\n     * @return\n     */\n    var SQZDigit = function(num){\n        //console.log(num+\" \"+num.length);\n        var SQZdigit = \"\";\n        if(num.charAt(0)=='-'){\n            SQZdigit+=pseudoDigits[SQZ_N][Number(num.charAt(1))];\n            if(num.length>2)\n                SQZdigit+=num.substring(2);\n        }\n        else{\n            SQZdigit+=pseudoDigits[SQZ_P][Number(num.charAt(0))];\n            if(num.length>1)\n                SQZdigit+=num.substring(1);\n        }\n\n        return SQZdigit;\n    };\n    /**\n     * Convert number to the DIF format, using pseudo digits.\n     * @param num\n     * @return\n     */\n    var DIFDigit = function(num){\n        var DIFFdigit = \"\";\n\n        if(num.charAt(0)=='-'){\n            DIFFdigit+=pseudoDigits[DIF_N][Number(num.charAt(1))];\n            if(num.length>2)\n                DIFFdigit+=num.substring(2);\n\n        }\n        else{\n            DIFFdigit+=pseudoDigits[DIF_P][Number(num.charAt(0))];\n            if(num.length>1)\n                DIFFdigit+=num.substring(1);\n\n        }\n\n        return DIFFdigit;\n    };\n    /**\n     * Convert number to the DUP format, using pseudo digits.\n     * @param num\n     * @return\n     */\n    var DUPDigit = function(num){\n        var DUPdigit = \"\";\n        DUPdigit+=pseudoDigits[DUP][Number(num.charAt(0))];\n        if(num.length>1)\n            DUPdigit+=num.substring(1);\n\n        return DUPdigit;\n    }\n\n    return {\n        encode:encode,\n        FIXencod:FIXencod,\n        CSVencod:CSVencod,\n        PACencod:PACencod,\n        SQZencod:SQZencod,\n        DIFDUPencod:DIFDUPencod,\n        DIFencod:DIFDUPencod\n    };\n\n})();\n\nmodule.exports = Encoder;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/VectorEncoder.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\nvar SD = require('./SD');\nvar PeakPicking = require('./PeakPicking');\nvar JcampConverter=require(\"jcampconverter\");\nvar fft = require(\"ml-fft\");\nvar Filters = require(\"./filters/Filters.js\");\n\n/**\n * Construct the object from the given sd object(output of the jcampconverter or brukerconverter filter)\n * @param sd\n * @constructor\n */\nfunction NMR(sd) {\n    SD.call(this, sd); // Héritage\n}\n\nNMR.prototype = Object.create(SD.prototype);\nNMR.prototype.constructor = NMR;\n\n/**\n * @function fromJcamp(jcamp,options)\n * Construct the object from the given jcamp.\n * @param jcamp\n * @param options\n * @option xy\n * @option keepSpectra\n * @option keepRecordsRegExp\n * @returns {NMR}\n */\nNMR.fromJcamp = function(jcamp,options) {\n    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new NMR(spectrum);\n}\n\n/**\n * @function getNucleus(dim)\n * Returns the observed nucleus. A dimension parameter is accepted for compatibility with 2DNMR\n * @param dim\n * @returns {*}\n */\nNMR.prototype.getNucleus=function(dim){\n    if(!dim||dim==0||dim==1)\n        return this.sd.xType;\n    else{\n        return \"\";\n    }\n}\n\n/**\n * @function getSolventName()\n * Returns the solvent name.\n * @returns {string|XML}\n */\nNMR.prototype.getSolventName=function(){\n    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]||\"\").replace(\"<\",\"\").replace(\">\",\"\");\n}\n\n/**\n * @function observeFrequencyX()\n * Returns the observe frequency in the direct dimension\n * @returns {number}\n */\nNMR.prototype.observeFrequencyX=function(){\n    return this.sd.spectra[0].observeFrequency;\n}\n\n/**\n * @function getNMRPeakThreshold(nucleus)\n * Returns the noise factor depending on the nucleus.\n * @param nucleus\n * @returns {number}\n */\nNMR.prototype.getNMRPeakThreshold=function(nucleus) {\n    if (nucleus == \"1H\")\n        return 3.0;\n    if (nucleus ==\"13C\")\n        return 5.0;\n    return 1.0;\n}\n\n\n    \n/**\n * @function addNoise(SNR)\n * This function adds white noise to the the given spectraData. The intensity of the noise is \n * calculated from the given signal to noise ratio.\n * @param SNR Signal to noise ratio\n * @returns this object\n */\n NMR.prototype.addNoise=function(SNR) {\n     //@TODO Implement addNoise filter\n}\n\n\n/**\n * @function addSpectraDatas(spec2,factor1,factor2,autoscale )   \n *  This filter performs a linear combination of two spectraDatas.\n * A=spec1\n * B=spec2\n * After to apply this filter you will get:\n *      A=A*factor1+B*factor2\n * if autoscale is set to 'true' then you will obtain:\n *  A=A*factor1+B*k*factor2\n * Where the k is a factor such that the maximum peak in A is equal to the maximum peak in spectraData2 \n * @param spec2 spectraData2\n * @param factor1 linear factor for spec1\n * @param factor2 linear factor for spec2\n * @param autoscale Auto-adjust scales before combine the spectraDatas\n * @returns this object\n * @example spec1 = addSpectraDatas(spec1,spec2,1,-1, false) This subtract spec2 from spec1\n*/\nNMR.prototype.addSpectraDatas=function(spec2,factor1,factor2,autoscale ) {\n    //@TODO Implement addSpectraDatas filter\n\n}\n\n/**\n * @function autoBaseline()\n * Automatically corrects the base line of a given spectraData. After this process the spectraData\n * should have meaningful integrals.\n * @returns this object\n */\nNMR.prototype.autoBaseline=function( ) {\n    //@TODO Implement autoBaseline filter\n}\n\n/**\n * @function fourierTransform()\n * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n * @returns this object\n */\nNMR.prototype.fourierTransform=function( ) {\n    return Filters.fourierTransform(this);\n}\n\n/**\n * @function postFourierTransform(ph1corr)\n * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained \n * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra \n * filter could not find the correct number of points to perform a circular shift.\n * The actual problem is that not all of the spectra has the necessary parameters for use only one method for \n * correcting the problem of the Bruker digital filters.\n * @param spectraData A fourier transformed spectraData.\n * @param ph1corr Phase 1 correction value in radians.\n * @returns this object\n */\nNMR.prototype.postFourierTransform=function(ph1corr) {\n    return Filters.phaseCorrection(0,ph1corr);\n}\n\n/**\n * @function zeroFilling(nPointsX [,nPointsY])\n * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one \n * could increase artificially the spectral resolution.\n * @param nPointsX Number of new zero points in the direct dimension\n * @param nPointsY Number of new zero points in the indirect dimension\n * @returns this object\n */\nNMR.prototype.zeroFilling=function(nPointsX, nPointsY) {\n    return Filters.zeroFilling(this,nPointsX, nPointsY);\n}\n\n/**\n * @function  haarWhittakerBaselineCorrection(waveletScale,whittakerLambda)\n * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n * The needed parameters are the wavelet scale and the lambda used in the whittaker smoother.\n * @param waveletScale To be described\n * @param whittakerLambda To be described\n * @returns this object\n */\nNMR.prototype.haarWhittakerBaselineCorrection=function(waveletScale,whittakerLambda) {\n    //@TODO Implement haarWhittakerBaselineCorrection filter\n}\n\n/**\n * @function whittakerBaselineCorrection(whittakerLambda,ranges)\n * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n * The needed parameters are the Wavelet scale and the lambda used in the Whittaker smoother.\n * @param waveletScale To be described\n * @param whittakerLambda To be described\n * @param ranges A string containing the ranges of no signal.\n * @returns this object\n */\nNMR.prototype.whittakerBaselineCorrection=function(whittakerLambda,ranges) {\n    //@TODO Implement whittakerBaselineCorrection filter\n}\n\n/**\n * @function brukerFilter()\n * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that \n * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the \n * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n * @returns this object\n */\nNMR.prototype.brukerFilter=function() {\n    return Filters.digitalFilter(this, {\"brukerFilter\":true});\n}\n\n/**\n * @function digitalFilter(options)\n * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that\n * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the\n * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n * @option nbPoints: The number of points to shift. Positive values will shift the values to the rigth\n * and negative values will do to the left.\n * @option brukerSpectra\n * @returns this object\n */\nNMR.prototype.digitalFilter=function(options) {\n    return Filters.digitalFilter(this, options);\n}\n\n/**\n * @function apodization(functionName, lineBroadening)\n * Apodization of a spectraData object.\n * @param spectraData An spectraData of type NMR_FID\n * @param functionName Valid values for functionsName are\n *  Exponential, exp\n *  Hamming, hamming\n *  Gaussian, gauss\n *  TRAF, traf\n *  Sine Bell, sb\n *  Sine Bell Squared, sb2\n * @param lineBroadening The parameter LB should either be a line broadening factor in Hz \n * or alternatively an angle given by degrees for sine bell functions and the like.\n * @returns this object\n * @example SD.apodization(\"exp\", lineBroadening)\n */\nNMR.prototype.apodization=function(functionName, lineBroadening) {\n    return Filters.apodization(this,{\"functionName\":functionName,\n                            \"lineBroadening\":lineBroadening});\n\n}\n\n/**\n * @function echoAntiechoFilter();\n * That decodes an Echo-Antiecho 2D spectrum.\n * @returns this object\n */\nNMR.prototype.echoAntiechoFilter=function() {\n    //@TODO Implement echoAntiechoFilter filter\n}\n\n/**\n * @function SNVFilter()\n * This function apply a Standard Normal Variate Transformation over the given spectraData. Mainly used for IR spectra.\n * @returns this object\n */\nNMR.prototype.SNVFilter=function() {\n    //@TODO Implement SNVFilter\n}\n\n/**\n * @function powerFilter(power)\n * This function applies a power to all the Y values.<br>If the power is less than 1 and the spectrum has negative values, it will be shifted so that the lowest value is zero \n * @param   power   The power to apply\n * @returns this object\n */\nNMR.prototype.powerFilter=function(power) {\n    var minY=this.getMinY();\n    if(power<1 && minY<0){\n        this.YShift(-1*minY);\n        console.warn(\"SD.powerFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n    }\n    //@TODO Implement powerFilter\n}\n\n/**\n * @function logarithmFilter(base)\n * This function applies a log to all the Y values.<br>If the spectrum has negative or zero values, it will be shifted so that the lowest value is 1 \n * @param   base    The base to use\n * @returns this object\n */\nNMR.prototype.logarithmFilter=function(base) {\n    var minY=this.getMinY();\n    if(minY<=0){\n        this.YShift((-1*minY)+1);\n        console.warn(\"SD.logarithmFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n    }\n   //@TODO Implement logarithmFilter filter\n}\n\n\n/**\n * @function correlationFilter(func) \n * This function correlates the given spectraData with the given vector func. The correlation\n * operation (*) is defined as:\n * \n *                    __ inf\n *  c(x)=f(x)(*)g(x)= \\        f(x)*g(x+i)\n *                   ./    \n *                    -- i=-inf\n * @param func A double array containing the function to correlates the spectraData\n * @returns this object\n * @example var smoothedSP = SD.correlationFilter(spectraData,[1,1]) returns a smoothed version of the\n * given spectraData. \n */\nNMR.prototype.correlationFilter=function(func) {\n    //@TODO Implement correlationFilter filter\n}\n\n/**\n * @function  phaseCorrection(phi0, phi1)\n * Applies the phase correction (phi0,phi1) to a Fourier transformed spectraData. The angles must be given in radians.\n * @param phi0 Zero order phase correction\n * @param phi1 One order phase correction\n * @returns this object\n*/\nNMR.prototype.phaseCorrection=function(phi0, phi1) {\n    return Filters.phaseCorrection(this, phi0, phi1);\n}\n\n/**\n * @function automaticPhase() \n * This function determines automatically the correct parameters phi0 and phi1 for a phaseCorrection\n * function and applies it.\n * @returns this object\n */ \nNMR.prototype.automaticPhase=function() {\n    //@TODO Implement automaticPhase filter\n}\n\n\n/**\n * @function nmrPeakDetection(parameters);\n * This function process the given spectraData and tries to determine the NMR signals. Returns an NMRSignal1D array containing all the detected 1D-NMR Signals\n * @param parameters A JSONObject containing the optional parameters:\n * @option fromX:   Lower limit.\n * @option toX:     Upper limit.\n * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n * @returns {*}\n */\nNMR.prototype.nmrPeakDetection=function(parameters) {\n    return PeakPicking.peakPicking(this, parameters);\n}\n\n\n\nmodule.exports = NMR;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/NMR.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n/**\n * Implementation of the peak pickig method described by Cobas in:\n * A new approach to improving automated analysis of proton NMR spectra\n * through Global Spectral Deconvolution (GSD)\n * http://www.spectroscopyeurope.com/images/stories/ColumnPDFs/TD_23_1.pdf\n */\nvar JAnalyzer = require('./JAnalyzer');\n/*var LM = require('ml-curve-fitting');\nvar Matrix = LM.Matrix;\nvar math = Matrix.algebra;*/\nvar GSD = require(\"ml-gsd\");\nvar extend = require(\"extend\");\nvar removeImpurities = require(\"./ImpurityRemover\");\n\nvar PeakPicking={\n    impurities:[],\n    maxJ:20,\n    defaultOptions:{nH:99,\n        clean:true,\n        realTop:false,\n        thresholdFactor:1,\n        compile:true,\n        integralFn:0,\n        optimize:true,\n        idPrefix:\"\",\n        format:\"old\"\n    },\n\n    peakPicking:function(spectrum, optionsEx){\n        var options = extend({}, this.defaultOptions, optionsEx);\n        var i, j, nHi, sum;\n\n        var noiseLevel = Math.abs(spectrum.getNoiseLevel())*(options.thresholdFactor);\n\n        //console.log(\"noiseLevel \"+noiseLevel);\n        var gsdOptions = extend({},\n            {noiseLevel: noiseLevel,\n                minMaxRatio:0.01,\n                broadRatio:0.0025,\n                smoothY:true,\n                nL:4,\n                sgOptions:{windowSize: 9, polynomial: 3}\n            },\n            options.gsdOptions);\n\n        var data = spectrum.getXYData();\n        var peakList = GSD.gsd(data[0],data[1], gsdOptions);\n        var peakList = GSD.post.joinBroadPeaks(peakList,{width:0.25});\n        if(options.optimize)\n            peakList = GSD.post.optimizePeaks(peakList,data[0],data[1],gsdOptions.nL,\"lorentzian\");\n\n        peakList = this.clearList(peakList, noiseLevel);\n        var signals = this.detectSignals(peakList, spectrum, options.nH, options.integralFn);\n        //console.log(JSON.stringify(signals));\n        //Remove all the signals with small integral\n        if(options.clean||false){\n            for(var i=signals.length-1;i>=0;i--){\n                if(signals[i].integralData.value<0.5) {\n                    signals.splice(i, 1);\n                }\n            }\n        }\n        if(options.compile||false){\n            for(i=0;i<signals.length;i++){\n                //console.log(\"Sum \"+signals[i].integralData.value);\n                JAnalyzer.compilePattern(signals[i]);\n                //console.log(signals[i])\n                if(signals[i].maskPattern&&signals[i].multiplicity!=\"m\"\n                    && signals[i].multiplicity!=\"\"){\n                    //Create a new signal with the removed peaks\n                    nHi = 0;\n                    sum=0;\n                    var peaksO = [];\n                    for(j=signals[i].maskPattern.length-1;j>=0;j--){\n                        sum+=this.area(signals[i].peaks[j]);\n\n                        if(signals[i].maskPattern[j]===false) {\n                            var peakR = signals[i].peaks.splice(j,1)[0];\n                            peaksO.push({x:peakR.x, y:peakR.intensity, width:peakR.width});\n                            //peaksO.push(peakR);\n                            signals[i].mask.splice(j,1);\n                            signals[i].mask2.splice(j,1);\n                            signals[i].maskPattern.splice(j,1);\n                            signals[i].nbPeaks--;\n                            nHi+=this.area(peakR);\n                        }\n                    }\n                    if(peaksO.length>0){\n                        nHi=nHi*signals[i].integralData.value/sum;\n                        signals[i].integralData.value-=nHi;\n                        var peaks1 = [];\n                        for(var j=peaksO.length-1;j>=0;j--)\n                            peaks1.push(peaksO[j]);\n                        var newSignals = this.detectSignals(peaks1, spectrum, nHi, options.integralFn);\n\n                        for(j=0;j<newSignals.length;j++)\n                            signals.push(newSignals[j]);\n                    }\n                }\n            }\n            //console.log(signals);\n            this.updateIntegrals(signals, options.nH);\n        }\n        signals.sort(function(a,b){\n            return b.delta1- a.delta1\n        });\n        //Remove all the signals with small integral\n        if(options.clean||false){\n            for(var i=signals.length-1;i>=0;i--){\n                //console.log(signals[i]);\n                if(signals[i].integralData.value<0.5) {\n                    signals.splice(i, 1);\n                }\n            }\n        }\n\n        for(var i=0;i<signals.length;i++){\n            if(options.idPrefix&&options.idPrefix.length>0)\n                signals[i].signalID = options.idPrefix+\"_\"+(i+1);\n            else\n                signals[i].signalID = (i+1)+\"\";\n            signals[i]._highlight=[signals[i].signalID];\n        }\n\n        removeImpurities(signals, spectrum.getSolventName(),options.nH);\n\n        if(options.format===\"new\"){\n            var newSignals = new Array(signals.length);\n            for(var i=0;i<signals.length;i++){\n                var signal = signals[i];\n                newSignals[i] = {\n                    from : signal.integralData.from,\n                    to : signal.integralData.to,\n                    integral : signal.integralData.value,\n                    signal:[{\n                        delta:signal.delta1,\n                        nbAtoms:0,\n                        diaID:[],\n                        multiplicity:signal.multiplicity,\n                        peak:signal.peaks,\n                        kind:\"\",\n                        remark:\"\"\n                    }],\n                    signalID:signal.signalID,\n                    _highlight:signal._highlight\n\n                };\n                if(signal.nmrJs){\n                    newSignals[i].signal[0].j = signal.nmrJs;\n                }\n            }\n            signals = newSignals;\n        }\n\n        return signals;\n\n\n        /*var frequency = spectrum.observeFrequencyX();//getParamDouble(\"$BF1\",400);\n        var imp = this.labelPeaks(peakList, solvent, frequency);\n        return [peakList,imp];\n        */\n        //return createSignals(peakList,nH);\n    },\n\n    clearList:function(peakList, threshold){\n        for(var i=peakList.length-1;i>=0;i--){\n            if(Math.abs(peakList[i].y)<threshold){\n                peakList.splice(i,1);\n            }\n        }\n        return peakList;\n    },\n\n\n    /**\n     * This method implements a non linear sampling of the spectrum. The point close to\n     * the critic points are more sampled than the other ones.\n     * @param spectrum\n     * @param peaks\n     * @param rowWise\n     */\n    sampling: function(spectrum, peaks, rowWise){\n        var i0, ie, ic,i, j,nbPoints;\n        var xy = []\n        if(i0>ie){\n            var tmp = i0;\n            i0 = ie;\n            ie = tmp;\n        }\n        //Non linear sampling for each peak.\n        for(i=0;i<peaks.length;i++){\n            var more = true;\n            var nL = 4;\n            while(more) {\n                i0 = spectrum.unitsToArrayPoint(peaks[i][0] - peaks[i][2] * nL);\n                ie = spectrum.unitsToArrayPoint(peaks[i][0] + peaks[i][2] * nL);\n                ic = spectrum.unitsToArrayPoint(peaks[i][0]);\n                if (i0 > ie) {\n                    tmp = i0;\n                    i0 = ie;\n                    ie = tmp;\n                }\n                i0 = i0 < 0 ? 0 : i0;\n                ie = ie >= spectrum.getNbPoints() ? spectrum.getNbPoints() - 1 : ie;\n\n                if (ie - i0 < 10) {\n                    for (j = i0; j <= ie; j++) {\n                        xy.push([spectrum.getX(j), spectrum.getY(j)]);\n                    }\n                    more = false;\n                }\n                else {\n                    xy.push([spectrum.getX(i0), spectrum.getY(i0)]);\n                    xy.push([spectrum.getX(ie), spectrum.getY(ie)]);\n                    if (nL > 0.5) {\n                        nL -= 0.5;\n                    }\n                    else {\n                        nL /= 2;\n                    }\n                }\n            }\n        }\n        //console.log(xy);\n        xy.sort(function(a,b){\n            return a[0]-b[0];\n        });\n        //console.log(\"XX \"+xy.length);\n        var x=[],y=[];\n        var index =0;\n        if(rowWise){\n            x=[xy[0][0]],y=[xy[0][1]];\n            for(i=1;i<xy.length;i++){\n                if(x[index]!=xy[i][0]){\n                    x.push(xy[i][0]);\n                    y.push(xy[i][1]);\n                    index++;\n                }\n            }\n        }\n        else{\n            x=[[xy[0][0]]],y=[[xy[0][1]]];\n            for(i=1;i<xy.length;i++){\n                if(x[index][0]!=xy[i][0]){\n                    x.push([xy[i][0]]);\n                    y.push([xy[i][1]]);\n                    index++;\n                }\n            }\n        }\n        return [x,y];\n\n    },\n\n    getVector: function(spectrum, from, to, rowWise){\n        var i0 = spectrum.unitsToArrayPoint(from);\n        var ie = spectrum.unitsToArrayPoint(to);\n        var x = [];\n        var y = [];\n        if(i0>ie){\n            var tmp = i0;\n            i0 = ie;\n            ie = tmp;\n        }\n        i0=i0<0?0:i0;\n        ie=ie>=spectrum.getNbPoints()?spectrum.getNbPoints()-1:ie;\n        for(var i=i0;i<ie;i+=10){\n            if(rowWise){\n                y.push(spectrum.getY(i));\n                x.push(spectrum.getX(i));\n            }\n            else{\n                y.push([spectrum.getY(i)]);\n                x.push([spectrum.getX(i)]);\n            }\n        }\n        return [x,y];\n    },\n\n\n\n    updateLimits : function(signal){\n        if(signal.multiplicity!=\"m\" && signal.multiplicity!=\"\"){\n            //Remove the integral of the removed peaks\n            var peaksO = signal.peaks;\n            var nbPeaks0 = peaksO.length, index = 0, factor = 0, toRemove = 0;\n\n            for(var i=0;i<nbPeaks0;i++){\n                if(signal.maskPattern[i]===false)\n                    toRemove+=this.area(peaksO[i]);\n                factor+= this.area(peaksO[i]);\n            }\n            factor=signal.integralData.value/factor;\n            signal.integralData.value-=toRemove*factor;\n        }\n        return signal.integralData.value;\n    },\n\n    updateIntegrals : function(signals, nH){\n        var sumIntegral = 0,i,sumObserved=0;\n        for(i=0;i<signals.length;i++){\n            sumObserved+=Math.round(signals[i].integralData.value);\n        }\n        if(sumObserved!=nH){\n\n            sumIntegral=nH/sumObserved;\n            for(i=0;i<signals.length;i++){\n                signals[i].integralData.value*=sumIntegral;\n            }\n        }\n    },\n\n    /*\n     {\n     \"nbPeaks\":1,\"multiplicity\":\"\",\"units\":\"PPM\",\"startX\":3.43505,\"assignment\":\"\",\n     \"pattern\":\"s\",\"stopX\":3.42282,\"observe\":400.08,\"asymmetric\":false,\n     \"delta1\":3.42752,\n     \"integralData\":{\"to\":3.43505,\"value\":590586504,\"from\":3.42282},\n     \"nucleus\":\"1H\",\n     \"peaks\":[{\"intensity\":60066147,\"x\":3.42752}]\n     }\n     */\n    detectSignals: function(peakList, spectrum, nH, integralType){\n\n        var frequency = spectrum.observeFrequencyX();\n        var signals = [];\n        var signal1D = {};\n        var prevPeak = {x:100000,y:0,width:0},peaks=null;\n        var rangeX = 16/frequency;//Peaks withing this range are considered to belongs to the same signal1D\n        var spectrumIntegral = 0,cs,sum, i,j;\n        //console.log(\"RangeX \"+rangeX);\n        for(i=0;i<peakList.length;i++){\n            //console.log(peakList[i]);\n            if(Math.abs(peakList[i].x-prevPeak.x)>rangeX){\n                //console.log(typeof peakList[i].x+\" \"+typeof peakList[i].width);\n                signal1D = {\"nbPeaks\":1,\"units\":\"PPM\",\n                    \"startX\":peakList[i].x+peakList[i].width,\n                    \"stopX\":peakList[i].x-peakList[i].width,\n                    \"multiplicity\":\"\",\"pattern\":\"\",\n                    \"observe\":frequency,\"nucleus\":\"1H\",\n                    \"integralData\":{\"from\":peakList[i].x-peakList[i].width*3,\n                                    \"to\":peakList[i].x+peakList[i].width*3\n                                    //\"value\":this.area(peakList[i])\n                    },\n                    \"peaks\":[]};\n                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n                signals.push(signal1D);\n                //spectrumIntegral+=this.area(peakList[i]);\n            }\n            else{\n                var tmp = peakList[i].x-peakList[i].width;\n                signal1D.stopX = Math.min(signal1D.stopX,tmp);\n                tmp = peakList[i].x+peakList[i].width;\n                signal1D.stopX = Math.max(signal1D.stopX,tmp);\n                signal1D.nbPeaks++;\n                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n                //signal1D.integralData.value+=this.area(peakList[i]);\n                signal1D.integralData.from = Math.min(signal1D.integralData.from, peakList[i].x-peakList[i].width*3);\n                signal1D.integralData.to = Math.max(signal1D.integralData.to,peakList[i].x+peakList[i].width*3);\n                //spectrumIntegral+=this.area(peakList[i]);\n            }\n            prevPeak = peakList[i];\n        }\n        //Normalize the integral to the normalization parameter and calculate cs\n        for(i=0;i<signals.length;i++){\n            peaks = signals[i].peaks;\n            var integral = signals[i].integralData;\n            cs = 0;\n            sum = 0;\n\n            for(var j=0;j<peaks.length;j++){\n                cs+=peaks[j].x*this.area(peaks[j]);//.intensity;\n                sum+=this.area(peaks[j]);\n            }\n            signals[i].delta1 = cs/sum;\n\n            if(integralType==0)\n                integral.value = sum;\n            else {\n                integral.value=spectrum.getArea(integral.from,integral.to);//*nH/spectrumIntegral;\n            }\n            spectrumIntegral+=integral.value;\n\n        }\n        for(var i=0;i<signals.length;i++){\n            //console.log(integral.value);\n            var integral = signals[i].integralData;\n            integral.value*=nH/spectrumIntegral;\n        }\n\n        return signals;\n    },\n\n    area: function(peak){\n        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n    },\n\n    /**\n     Updates the score that a given impurity is present in the current spectrum. In this part I would expect\n     to have into account the multiplicity of the signal. Also the relative intensity of the signals.\n     THIS IS the KEY part of the algorithm!!!!!!!!!\n     */\n    updateScore:function(candidates, peakList, maxIntensity, frequency){\n        //You may do it to avoid this part.\n        //return 1;\n\n        //Check the multiplicity\n        var mul = \"\";\n        var j = 0,index, k, maxJppm=this.maxJ/frequency;\n        var min=0, indexMin=0, score=0;\n        for(var i=candidates.length-1;i>=0;i--){\n            mul = candidates[i][1];\n            j = candidates[i][2];\n            //console.log(candidates[i][4]);\n            index = candidates[i][4][0];\n            //console.log(peakList[index][0]+\" \"+mul+\" \"+j+\" \"+index);\n            //I guess we should try to identify the pattern in the nearby.\n            if(mul.indexOf(\"sep\")>=0){\n                if(peakList[index][1]>maxIntensity*0.33){\n                    candidates.splice(i,1);//Not a candidate anymore.\n                }\n            }else{\n                if(mul.indexOf(\"s\")>=0||mul.indexOf(\"X\")>=0){\n                    k=index-1;\n                    min=peakList[index][1];\n                    indexMin=index;\n                    while(k>=0&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n                        if(peakList[k][1]<min){\n                            min=peakList[k][1];\n                            indexMin=k;\n                        }\n                        k--;\n                    }\n                    k=index+1;\n                    while(k<peakList.length&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n                        if(peakList[k][1]<min){\n                            min=peakList[k][1];\n                            indexMin=k;\n                        }\n                        k++;\n                    }\n                    candidates[i][4][0]=indexMin;\n                    score+=1;\n                }\n            }\n            if(mul.indexOf(\"d\")>=0){\n                if(index>0&&index<peakList.length-1){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index-1][0])*frequency-j);\n                    if(thisJ1<2||thisJ2<2||thisJ3<2){\n                        if(thisJ1<thisJ2){\n                            if(thisJ1<thisJ3){\n                                candidates[i][4]=[index-1,index];\n                                score+=1;\n                            }\n                            else{\n                                candidates[i][4]=[index-1,index+1];\n                                score+=1;\n                            }\n                        }\n                        else{\n                            if(thisJ2<thisJ3){\n                                candidates[i][4]=[index,index+1];\n                                score+=1;\n                            }\n                            else{\n                                candidates[i][4]=[index-1,index+1];\n                                score+=1;\n                            }\n                        }\n                    }\n                }\n            }\n            if(mul.indexOf(\"t\")>=0){\n                //console.log(\"here\");\n                if(index>0&&index<peakList.length-1){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ4 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index+2][0])*frequency-j);\n                    //console.log(\"XX \"+thisJ1+\" \"+thisJ2);\n                    if(thisJ1<2){\n                        candidates[i][4]=[index-1, index];\n                        score+=0.5;\n                    }\n                    if(thisJ2<2){\n                        candidates[i][4].push(index+1);\n                        score+=0.5;\n                    }\n                    if(thisJ3<2){\n                        candidates[i][4].push(index+2);\n                        score+=0.5;\n                    }\n\n                }\n            }\n            if(mul.indexOf(\"q\")>=0){\n                if(index>1&&index<peakList.length-2){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-2][0]-peakList[index-1][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ4= Math.abs(Math.abs(peakList[index+2][0]-peakList[index+1][0])*frequency-j);\n                    if(thisJ1<2){\n                        candidates[i][4].push(index-2);\n                        score+=0.25;\n                    }\n                    if(thisJ2<2){\n                        candidates[i][4].push(index-1);\n                        score+=0.25;\n                    }\n                    if(thisJ3<2){\n                        candidates[i][4].push(index+1);\n                        score+=0.25;\n                    }\n                    if(thisJ4<2){\n                        candidates[i][4].push(index+2);\n                        score+=0.25;\n                    }\n                }\n            }\n        }\n\n        //console.log(score/candidates.length+ \" -> \"+candidates);\n        //Lets remove the candidates to be impurities.\n        //It would be equivalent to mark the peaks as valid again\n        if(score/candidates.length < 0.5){\n            for(var i=candidates.length-1;i>=0;i--){\n                candidates.splice(i,1);\n            }\n            return 0;\n        }\n        //Check the relative intensity\n        return 1;\n    },\n\n    score:function(value, gamma){\n        return Math.exp(-Math.pow(value/gamma,2)/2.0);\n    }\n\n}\n\nmodule.exports = PeakPicking;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakPicking.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n/**\n * This library implements the J analyser described by Cobas et al in the paper:\n * A two-stage approach to automatic determination of 1H NMR coupling constants\n * Created by acastillo on 4/5/15.\n */\nvar JAnalyzer = {\n    pascalTriangle : [[0],[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]],\n    patterns: [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"],\n    symRatio : 1.5,\n    maxErrorIter1 : 2.5,//Hz\n    maxErrorIter2 : 1,//Hz\n    DEBUG : false,\n\n    /**\n     * The compilation process implements at the first stage a normalization procedure described by Golotvin et al.\n     * embedding in peak-component-counting method described by Hoyes et al.\n     * @param signal\n     */\n    compilePattern : function(signal){\n        if(this.DEBUG)console.log(\"Debugin...\");\n\n        signal.multiplicity=\"m\";//By default the multiplicity is massive\n        // 1.1 symmetrize\n        // It will add a set of peaks(signal.peaksComp) to the signal that will be used during\n        // the compilation process. The unit of those peaks will be in Hz\n        signal.symRank = this.symmetrizeChoiseBest(signal,this.maxErrorIter1,1);\n        signal.asymmetric = true;\n       // console.log(signal.delta1+\" \"+signal.symRank);\n        //Is the signal symmetric?\n        if(signal.symRank>=0.95&&signal.peaksComp.length<32){\n            if(this.DEBUG)console.log(signal.delta1+ \" nbPeaks \"+signal.peaksComp.length);\n            signal.asymmetric = false;\n            var i,j,n,k=1,P1,Jc=[],n2,maxFlagged;\n            //Loop over the possible number of coupling contributing to the multiplet\n            for(n=0;n<9;n++){\n                if(this.DEBUG)console.log(\"Trying \"+n+\" couplings\");\n                //1.2 Normalize. It makes a deep copy of the peaks before to modify them.\n                var peaks = this.normalize(signal,n);\n                //signal.peaksCompX = peaks;\n                var validPattern = false;//It will change to true, when we find the good patter\n                //Lets check if the signal could be a singulet.\n                if(peaks.length == 1 && n === 0){\n                    validPattern=true;\n                }\n                else{\n                    if(peaks.length <= 1){\n                        continue;\n                    }\n                }\n                // 1.3 Establish a range for the Heights Hi [peaks.intensity*0.85,peaks.intensity*1.15];\n                var ranges = this.getRanges(peaks);\n                n2 = Math.pow(2,n);\n\n                if(this.DEBUG){\n                    console.log(\"ranges: \"+JSON.stringify(ranges));\n                    console.log(\"Target sum: \"+n2);\n                }\n\n                // 1.4 Find a combination of integer heights Hi, one from each Si, that sums to 2^n.\n                var heights = null;\n                while(!validPattern&&(heights = this.getNextCombination(ranges, n2))!==null){\n\n                    if(this.DEBUG){\n                        console.log(\"Possible pattern found with \"+n+\" couplings!!!\");\n                        console.log(heights);\n                    }\n                    // 2.1 Number the components of the multiplet consecutively from 1 to 2n,\n                    //starting at peak 1\n                    var numbering = new Array(heights.length);\n                    k=1;\n                    for(i=0;i<heights.length;i++){\n                        numbering[i]=new Array(heights[i]);\n                        for(j=0;j<heights[i];j++){\n                            numbering[i][j]=k++;\n                        }\n                    }\n                    if(this.DEBUG){\n                        console.log(\"Numbering: \"+JSON.stringify(numbering));\n                    }\n                    Jc = []; //The array to store the detected j-coupling\n                    // 2.2 Set j = 1; J1 = P2 - P1. Flag components 1 and 2 as accounted for.\n                    j=1;\n                    Jc.push(peaks[1].x-peaks[0].x);\n                    P1 = peaks[0].x;\n                    numbering[0].splice(0,1);//Flagged\n                    numbering[1].splice(0,1);//Flagged\n                    k=1;\n                    var nFlagged = 2;\n                    maxFlagged = Math.pow(2,n)-1;\n                    while(Jc.length<n&&nFlagged<maxFlagged&&k<peaks.length){\n                        if(this.DEBUG){\n                            console.log(\"New Jc\"+JSON.stringify(Jc));\n                            console.log(\"Aval. numbering \"+JSON.stringify(numbering));\n                        }\n                        // 4.1. Increment j. Set k to the number of the first unflagged component.\n                        j++;\n                        while(k<peaks.length&&numbering[k].length===0){\n                            k++;\n                        }\n                        if(k<peaks.length){\n                            // 4.2 Jj = Pk - P1.\n                            Jc.push(peaks[k].x-peaks[0].x);\n                            //Flag component k and, for each sum of the...\n                            numbering[k].splice(0,1);//Flageed\n                            nFlagged++;\n                            //Flag the other components of the multiplet\n                            for(var u=2;u<=j;u++){\n                                //TODO improve those loops\n                                var jSum = 0;\n                                for(i=0;i<u;i++){\n                                    jSum+=Jc[i];\n                                }\n                                for(i=1;i<numbering.length;i++){\n                                    //Maybe 0.25 Hz is too much?\n                                    if(Math.abs(peaks[i].x-(P1+jSum))<0.25){\n                                        numbering[i].splice(0,1);//Flageed\n                                        nFlagged++;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    //Calculate the ideal patter by using the extracted j-couplings\n                    var pattern = this.idealPattern(Jc);\n                    //Compare the ideal pattern with the proposed intensities.\n                    // All the intensities have to match to accept the multiplet\n                    validPattern = true;\n                    for(i=0;i<pattern.length;i++){\n                        if(pattern[i].intensity != heights[i])\n                            validPattern = false;\n                    }\n                    //More verbosity of the process\n                    if(this.DEBUG){\n                        console.log(\"Jc \"+JSON.stringify(Jc));\n                        console.log(\"Heights \"+JSON.stringify(heights));\n                        console.log(\"pattern \"+JSON.stringify(pattern));\n                        console.log(\"Valid? \"+validPattern);\n                    }\n                }\n                //If we found a valid pattern we should inform about the pattern.\n                if(validPattern){\n                    this.updateSignal(signal,Jc);\n                }\n            }\n        }\n\n        //Before to return, change the units of peaksComp from Hz to PPM again\n        for(i=0;i<signal.peaksComp.length;i++){\n            signal.peaksComp[i].x/=signal.observe;\n        }\n    },\n\n    updateSignal : function(signal, Jc){\n        //Update the limits of the signal\n        var peaks = signal.peaksComp;//Always in Hz\n        var nbPeaks = peaks.length;\n        signal.startX=peaks[0].x/signal.observe+peaks[0].width;\n        signal.stopX=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width;\n        signal.integralData.to=peaks[0].x/signal.observe+peaks[0].width*3;\n        signal.integralData.from=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width*3;\n\n        //Compile the pattern and format the constant couplings\n        signal.maskPattern = signal.mask2;\n        signal.multiplicity = this.abstractPattern(signal,Jc);\n        signal.pattern=signal.multiplicity;//Our library depends on this parameter, but it is old\n        //console.log(signal);\n        if(this.DEBUG)\n            console.log(\"Final j-couplings: \"+JSON.stringify(Jc));\n    },\n\n    /**\n     * Returns the multiplet in the compact format\n     */\n    abstractPattern : function(signal,Jc){\n        var tol = 0.05,i, pattern = \"\", cont = 1;\n        var newNmrJs = [];\n        if(Jc&&Jc.length>0){\n            Jc.sort(function(a,b){\n                return a-b;\n            });\n            for(i=0;i<Jc.length-1;i++){\n                if(Math.abs(Jc[i]-Jc[i+1])<tol){\n                    cont++;\n                }\n                else{\n                    newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n                    pattern+=this.patterns[cont];\n                    cont=1;\n                }\n            }\n            newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n            pattern+=this.patterns[cont];\n            signal.nmrJs =  newNmrJs;\n        }\n        else{\n            pattern=\"s\";\n            if(Math.abs(signal.startX-signal.stopX)*signal.observe>16){\n                pattern=\"br s\"\n            }\n        }\n        return pattern;\n    },\n\n    /**\n     *This function creates an ideal pattern from the given J-couplings\n     */\n    idealPattern : function(Jc){\n        var hsum = Math.pow(2,Jc.length),i,j;\n        var pattern = [{x:0,intensity:hsum}];\n        //To split the initial height\n        for(i=0;i<Jc.length;i++){\n            for(j=pattern.length-1;j>=0;j--){\n                pattern.push({x:pattern[j].x+Jc[i]/2,\n                    intensity:pattern[j].intensity/2});\n                pattern[j].x = pattern[j].x-Jc[i]/2;\n                pattern[j].intensity = pattern[j].intensity/2;\n            }\n        }\n        //To sum the heights in the same positions\n        pattern.sort(function compare(a,b) { return a.x-b.x});\n        for(j=pattern.length-2;j>=0;j--){\n            if(Math.abs(pattern[j].x-pattern[j+1].x)<0.1){\n                pattern[j].intensity+= pattern[j+1].intensity\n                pattern.splice(j+1,1);\n            }\n        }\n        return pattern;\n    },\n\n    /**\n     * Find a combination of integer heights Hi, one from each Si, that sums to 2n.\n     */\n    getNextCombination : function(ranges, value){\n        var half = Math.ceil(ranges.values.length/2), lng = ranges.values.length;\n        var sum = 0,i,ok;\n        while(sum!=value){\n            //Update the indexes to point at the next possible combination\n            ok = false;\n            var leftIndex = 0;\n            while(!ok){\n                ok = true;\n                ranges.currentIndex[ranges.active]++;\n                if(ranges.currentIndex[ranges.active]>=ranges.values[ranges.active].length){\n                    //In this case, there is no more possible combinations\n                    if(ranges.active+1==half){\n                        return null;\n                    }\n                    else{\n                        //If this happens we need to try the next active peak\n                        ranges.currentIndex[ranges.active]=0;\n                        ok=false;\n                        ranges.active++;\n                    }\n                }\n                else{\n                    ranges.active=0;\n                }\n            }\n            // Sum the heights for this combination\n            sum=0;\n            for(i=0;i<half;i++){\n                sum+= ranges.values[i][ranges.currentIndex[i]]*2;\n            }\n            if(ranges.values.length%2!==0){\n                sum-= ranges.values[half-1][ranges.currentIndex[half-1]];\n            }\n            if(this.DEBUG){\n                console.log(ranges.currentIndex);\n                console.log(sum+\" \"+value);\n            }\n        }\n        //If the sum is equal to the expected value, fill the array to return\n        if(sum==value){\n            var heights = new Array(lng);\n            for(i=0;i<half;i++){\n                heights[i] = ranges.values[i][ranges.currentIndex[i]];\n                heights[lng-i-1] = ranges.values[i][ranges.currentIndex[i]];\n            }\n            return heights;\n        }\n        return null;\n    },\n\n    /**\n     * This function generates the possible values that each peak can contribute\n     * to the multiplet.\n     * @param peaks\n     * @returns {{values: Array, currentIndex: Array, active: number}}\n     */\n    getRanges : function(peaks){\n        var ranges = new Array(peaks.length);\n        var currentIndex = new Array(peaks.length);\n        var min,max;\n        ranges[0] = [1];\n        ranges[peaks.length-1] = [1];\n        currentIndex[0]=-1;\n        currentIndex[peaks.length-1] = 0;\n        for(var i=1;i<peaks.length-1;i++){\n            min = Math.round(peaks[i].intensity*0.85);\n            max = Math.round(peaks[i].intensity*1.15);\n            ranges[i] =[];\n            for(var j=min;j<=max;j++){\n                ranges[i].push(j);\n            }\n            currentIndex[i]=0;\n        }\n        return {values:ranges, currentIndex:currentIndex, active:0};\n    },\n    /**\n     * Performs a symmetrization of the signal by using different aproximations to the center.\n     * It will return the result of the symmetrization that removes less peaks from the signal\n     * @param signal\n     * @param maxError\n     * @param iteration\n     * @returns {*}\n     */\n    symmetrizeChoiseBest : function(signal,maxError,iteration){\n        var symRank1 = this.symmetrize(signal,maxError,iteration);\n        var tmpPeaks = signal.peaksComp;\n        var tmpMask = signal.mask;\n        var cs = signal.delta1;\n        signal.delta1 = (signal.peaks[0].x+signal.peaks[signal.peaks.length-1].x)/2;\n        var symRank2 = this.symmetrize(signal,maxError,iteration);\n        if(signal.peaksComp.length>tmpPeaks.length)\n            return symRank2;\n        else{\n            signal.delta1 = cs;\n            signal.peaksComp = tmpPeaks;\n            signal.mask = tmpMask;\n            return symRank1;\n        }\n\n    },\n    /**\n     * This function will return a set of symmetric peaks that will\n     * be the enter point for the patter compilation process.\n     */\n    symmetrize : function(signal, maxError, iteration){\n        //Before to symmetrize we need to keep only the peaks that possibly conforms the multiplete\n        var max, min, avg, ratio, avgWidth, j;\n        var peaks = new Array(signal.peaks.length);\n        //Make a deep copy of the peaks and convert PPM ot HZ\n        for(j=0;j<peaks.length;j++){\n            peaks[j]= {x:signal.peaks[j].x*signal.observe,\n                intensity:signal.peaks[j].intensity,\n                width:signal.peaks[j].width};\n        }\n        //Join the peaks that are closer than 0.25 Hz\n        for(j=peaks.length-2;j>=0;j--){\n            if(Math.abs(peaks[j].x-peaks[j+1].x)<0.25){\n                peaks[j].x = (peaks[j].x*peaks[j].intensity+peaks[j+1].x*peaks[j+1].intensity);\n                peaks[j].intensity = peaks[j].intensity+peaks[j+1].intensity;\n                peaks[j].x/=peaks[j].intensity;\n                peaks[j].intensity/=2;\n                peaks[j].width+=peaks[j+1].width;\n                peaks.splice(j+1,1);\n            }\n        }\n        signal.peaksComp = peaks;\n        var nbPeaks = peaks.length;\n        var mask = new Array(nbPeaks);\n        signal.mask = mask;\n        var left=0, right=peaks.length-1, cs = signal.delta1*signal.observe, middle = [(peaks[0].x+peaks[nbPeaks-1].x)/2,1];\n        maxError = this.error(Math.abs(cs-middle[0]));\n        var heightSum = 0;\n        //We try to symmetrize the extreme peaks. We consider as candidates for symmetricing those which have\n        //ratio smaller than 3\n        for(var i=0;i<nbPeaks;i++){\n            mask[i]= true;\n            heightSum+=signal.peaks[i].intensity;\n        }\n\n        while(left<=right){\n            mask[left] = true;\n            mask[right] = true;\n            if(left==right){\n                if(nbPeaks>2&&Math.abs(peaks[left].x-cs)>maxError){\n                    mask[left] = false;\n                }\n            }\n            else{\n                max = Math.max(peaks[left].intensity,peaks[right].intensity);\n                min = Math.min(peaks[left].intensity,peaks[right].intensity);\n                ratio = max/min;\n                if(ratio>this.symRatio){\n                    if(peaks[left].intensity==min){\n                        mask[left] = false;\n                        right++;\n                    }\n                    else{\n                        mask[right] = false;\n                        left--;\n                    }\n                }\n                else{\n                    var diffL = Math.abs(peaks[left].x-cs);\n                    var diffR = Math.abs(peaks[right].x-cs);\n\n                    if(Math.abs(diffL-diffR)<maxError){\n                        //avg = (peaks[left].intensity+peaks[right].intensity)/2;\n                        avg = Math.min(peaks[left].intensity,peaks[right].intensity);\n                        avgWidth = Math.min(peaks[left].width,peaks[right].width);\n                        peaks[left].intensity=peaks[right].intensity=avg;\n                        peaks[left].width=peaks[right].width=avgWidth;\n                        middle=[middle[0]+((peaks[right].x+peaks[left].x)/2), middle[1]+1];\n                    }\n                    else{\n                        if(Math.max(diffL,diffR)==diffR){\n                            mask[right] = false;\n                            left--;\n                        }\n                        else{\n                            mask[left] = false;\n                            right++;\n                        }\n                    }\n                    if(this.DEBUG){\n                        console.log(\"MaxError: \"+maxError+\" \"+middle[0]+\" \"+middle[1]);\n                        console.log(iteration+\" CS: \"+cs+\" Hz \"+cs/signal.observe+\" PPM\");\n                        console.log(\"Middle: \"+(middle[0]/middle[1])+\" Hz \"+(middle[0]/middle[1])/signal.observe+\" PPM\");\n                        console.log(diffL+ \" \"+diffR);\n                        console.log(Math.abs(diffL-diffR));\n                        console.log(JSON.stringify(peaks));\n                        console.log(JSON.stringify(mask));\n                    }\n                }\n            }\n            left++;\n            right--;\n            //Only alter cs if it is the first iteration of the sym process.\n            if(iteration==1){\n                cs = this.chemicalShift(peaks, mask);\n                //There is not more available peaks\n                if(isNaN(cs)){ return 0;}\n            }\n            maxError = this.error(Math.abs(cs-middle[0]/middle[1]));\n        }\n        //To remove the weak peaks and recalculate the cs\n        for(i=nbPeaks-1;i>=0;i--){\n            if(mask[i]===false){\n                peaks.splice(i,1);\n            }\n        }\n        cs = this.chemicalShift(peaks);\n        if(isNaN(cs)){ return 0;}\n        signal.delta1 = cs/signal.observe;\n        //Now, the peak should be symmetric in heights, but we need to know if it is symmetric in x\n        var symFactor = 0,weight = 0;\n        if(peaks.length>1){\n            for(i=Math.ceil(peaks.length/2)-1;i>=0;i--){\n                symFactor+=(3+Math.min(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))\n                /(3+Math.max(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))*peaks[i].intensity;\n                weight+=peaks[i].intensity;\n            }\n            symFactor/=weight;\n        }\n        else{\n            if(peaks.length==1)\n                symFactor=1;\n        }\n        var newSumHeights = 0;\n        for(i=0;i<peaks.length;i++){\n            newSumHeights+=peaks[i].intensity;\n        }\n        symFactor-=(heightSum-newSumHeights)/heightSum*0.12; //Removed peaks penalty\n        if(this.DEBUG){\n            console.log(\"Penalty \"+(heightSum-newSumHeights)/heightSum*0.12);\n            console.log(\"cs: \"+(cs/signal.observe)+\" symFactor: \"+symFactor);\n        }\n        //Sometimes we need a second opinion after the first symmetrization.\n        if(symFactor>0.8&&symFactor<0.97&&iteration<2){\n            return this.symmetrize(signal, this.maxErrorIter2, 2);\n        }{\n            //Center the given pattern at cs and symmetrize x\n            if(peaks.length>1) {\n                var weight = 0, dxi;\n                for (i = Math.ceil(peaks.length / 2) - 1; i >= 0; i--) {\n                    dxi = (peaks[i].x - peaks[peaks.length - 1 - i].x)/2.0;\n                    peaks[i].x =cs+dxi;\n                    peaks[peaks.length - 1 - i].x=cs-dxi;\n                }\n            }\n        }\n        return symFactor;\n    },\n\n    error : function(value){\n        var maxError = value*2.5;\n        if(maxError<0.75)\n            maxError = 0.75;\n        if(maxError > 3)\n            maxError = 3;\n        return maxError;\n    },\n    /**\n     * 2 stages normalizarion of the peaks heights to Math.pow(2,n).\n     * Creates a new mask with the peaks that could contribute to the multiplete\n     * @param signal\n     * @param n\n     * @returns {*}\n     */\n    normalize : function(signal, n){\n        //Perhaps this is slow\n        var peaks = JSON.parse(JSON.stringify(signal.peaksComp));\n        var norm = 0,norm2=0,i;//Math.pow(2,n);\n        for(i=0;i<peaks.length;i++){\n            norm+= peaks[i].intensity;\n        }\n        norm=Math.pow(2,n)/norm;\n        signal.mask2 = JSON.parse(JSON.stringify(signal.mask));\n        //console.log(\"Mask0 \"+JSON.stringify(signal.mask2));\n        var index=signal.mask2.length-1;\n        for(i=peaks.length-1;i>=0;i--){\n            peaks[i].intensity*= norm;\n            while(index>=0&&signal.mask2[index]===false)\n                index--;\n            if(peaks[i].intensity<0.75){\n                if(this.DEBUG)\n                    console.log(\"Peak \"+i+\" does not seem to belong to this multiplet \"+peaks[i].intensity);\n                peaks.splice(i,1);\n                signal.mask2[index]=false;\n            }\n            else{\n                norm2+= peaks[i].intensity;\n            }\n            index--;\n        }\n        norm2=Math.pow(2,n)/norm2;\n        for(i=peaks.length-1;i>=0;i--){\n            peaks[i].intensity*= norm2;\n        }\n        //console.log(\"Mask1 \"+JSON.stringify(signal.mask2));\n        if(this.DEBUG) console.log(JSON.stringify(peaks));\n        return peaks;\n    },\n\n    /**\n     * Calculates the chemical shift as the weighted sum of the peaks\n     * @param peaks\n     * @param mask\n     * @returns {number}\n     */\n    chemicalShift : function(peaks, mask){\n        var sum=0,cs= 0, i, area;\n        if(mask){\n            for(i=0;i<peaks.length;i++){\n                //console.log(mask[i]);\n                if(mask[i]===true){\n                    area = this.area(peaks[i]);\n                    sum+=area;\n                    cs+=area*peaks[i].x;\n                }\n            }\n        }\n        else{\n            for(i=0;i<peaks.length;i++){\n                area = this.area(peaks[i]);\n                sum+=area;\n                cs+=area*peaks[i].x;\n            }\n        }\n        return cs/sum;\n    },\n\n    area: function(peak){\n        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n    }\n}\n\nmodule.exports = JAnalyzer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JAnalyzer.js\n ** module id = 10\n ** module chunks = 0\n **/","\nmodule.exports.post = require(\"../src/optimize\");\nmodule.exports.gsd = require(\"../src/gsd\");\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/index.js\n ** module id = 11\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 9/6/15.\n */\nvar Opt = require(\"ml-optimize-lorentzian\");\n\nfunction sampleFunction(from, to, x, y, lastIndex){\n    var nbPoints = x.length;\n    var sampleX = [];\n    var sampleY = [];\n    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n    if(direction==-1){\n        lastIndex[0]= x.length-1;\n    }\n\n    var delta = Math.abs(to-from)/2;\n    var mid = (from+to)/2;\n    var stop = false;\n    var index = lastIndex[0];\n    while(!stop&&index<nbPoints&&index>=0){\n        if(Math.abs(x[index]-mid)<=delta){\n            sampleX.push(x[index]);\n            sampleY.push(y[index]);\n            index+=direction;\n        }\n        //It is outside the range.\n        else{\n\n            if(Math.sign(mid-x[index])==1){\n                //We'll reach the mid going in the current direction\n                index+=direction;\n            }\n            else{\n                //There is not more peaks in the current range\n                stop=true;\n            }\n        }\n        //console.log(sampleX);\n    }\n    lastIndex[0]=index;\n    return [sampleX, sampleY];\n}\n\nfunction optimizePeaks(peakList,x,y,n, fnType){\n    var i, j, lastIndex=[0];\n    var groups = groupPeaks(peakList,n);\n    var result = [];\n    var factor = 1;\n    if(fnType==\"gaussian\")\n        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n    for(i=0;i<groups.length;i++){\n        var peaks = groups[i].group;\n        if(peaks.length>1){\n            //Multiple peaks\n            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n            //console.log(\"here1\");\n            //console.log(groups[i].limits);\n            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n            //console.log(sampling);\n            if(sampling[0].length>5){\n                var error = peaks[0].width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                var optPeaks = [];\n                if(fnType==\"gaussian\")\n                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n                    }\n                }\n                //console.log(optPeak);\n                for(j=0;j<optPeaks.length;j++){\n                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n                }\n            }\n        }\n        else{\n            //Single peak\n            peaks = peaks[0];\n            var sampling = sampleFunction(peaks.x-n*peaks.width,\n                peaks.x+n*peaks.width,x,y,lastIndex);\n            //console.log(\"here2\");\n            //console.log(groups[i].limits);\n            if(sampling[0].length>5){\n                var error = peaks.width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n                var optPeak = [];\n                if(fnType==\"gaussian\")\n                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n                    }\n                }\n                //console.log(optPeak);\n                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n            }\n        }\n\n    }\n    return result;\n}\n\nfunction groupPeaks(peakList,nL){\n    var group = [];\n    var groups = [];\n    var i, j;\n    var limits = [peakList[0].x,nL*peakList[0].width];\n    var upperLimit, lowerLimit;\n    //Merge forward\n    for(i=0;i<peakList.length;i++){\n        //If the 2 things overlaps\n        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n            //Add the peak to the group\n            group.push(peakList[i]);\n            //Update the group limits\n            upperLimit = limits[0]+limits[1];\n            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n                upperLimit = peakList[i].x+nL*peakList[i].width;\n            }\n            lowerLimit = limits[0]-limits[1];\n            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n                lowerLimit = peakList[i].x-nL*peakList[i].width;\n            }\n            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n        }\n        else{\n            groups.push({limits:limits,group:group});\n            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n            group=[peakList[i]];\n            limits = [peakList[i].x,nL*peakList[i].width];\n        }\n    }\n    groups.push({limits:limits,group:group});\n    //Merge backward\n    for(i =groups.length-2;i>=0;i--){\n        //The groups overlaps\n        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n            for(j=0;j<groups[i+1].group.length;j++){\n                groups[i].group.push(groups[i+1].group[j]);\n            }\n            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n            }\n            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n            }\n            //console.log(limits);\n            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n            groups.splice(i+1,1);\n        }\n    }\n    return groups;\n}\n/**\n * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n * @param peakList\n * @param options\n */\nfunction joinBroadPeaks(peakList, options){\n    var width = options.width;\n    var broadLines=[];\n    //Optimize the possible broad lines\n    var max=0, maxI=0,count=1;\n    var isPartOf = false;\n    for(var i=peakList.length-1;i>=0;i--){\n        if(peakList[i].soft){\n            broadLines.push(peakList.splice(i,1)[0]);\n        }\n    }\n    //Push a feak peak\n    broadLines.push({x:Number.MAX_VALUE});\n\n    var candidates = [[broadLines[0].x,\n                        broadLines[0].y]];\n    var indexes = [0];\n\n    for(var i=1;i<broadLines.length;i++){\n        //console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n        if(Math.abs(broadLines[i-1].x-broadLines[i].x)<width){\n            candidates.push([broadLines[i].x,broadLines[i].y]);\n            if(broadLines[i].y>max){\n                max = broadLines[i].y;\n                maxI = i;\n            }\n            indexes.push(i);\n            count++;\n        }\n        else{\n            if(count>2){\n                var fitted =  Opt.optimizeSingleLorentzian(candidates,\n                    {x: broadLines[maxI].x, y:max, width: Math.abs(candidates[0][0]-candidates[candidates.length-1][0])});\n                //console.log(fitted)\n                peakList.push({x:fitted[0][0],y:fitted[1][0],width:fitted[2][0],soft:false});\n\n            }\n            else{\n                //Put back the candidates to the signals list\n                indexes.map(function(index){peakList.push(broadLines[index])});\n            }\n            candidates = [[broadLines[i].x,broadLines[i].y]];\n            indexes = [i];\n            max = broadLines[i].y;\n            maxI = i;\n            count = 1;\n        }\n    }\n\n    peakList.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n    return peakList;\n\n}\n\n/*if(options.broadRatio>0){\n var broadLines=[[Number.MAX_VALUE,0,0]];\n //Optimize the possible broad lines\n var max=0, maxI=0,count=0;\n var candidates = [],broadLinesS=[];\n var isPartOf = false;\n\n for(var i=broadLines.length-1;i>0;i--){\n //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\n candidates.push(broadLines[i]);\n if(broadLines[i][1]>max){\n max = broadLines[i][1];\n maxI = i;\n }\n count++;\n }\n else{\n isPartOf = true;\n if(count>30){ // TODO, an options ?\n isPartOf = false;\n //for(var j=0;j<signals.length;j++){\n //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n //       isPartOf = true;\n //    }\n //console.log(\"Was part of \"+isPartOf);\n }\n if(isPartOf){\n for(var j=0;j<candidates.length;j++){\n signals.push([candidates[j][0], candidates[j][1], dx]);\n }\n }\n else{\n var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n []);\n //console.log(fitted);\n signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n }\n candidates = [];\n max = 0;\n maxI = 0;\n count = 0;\n }\n }\n }*/\n\nmodule.exports={optimizePeaks:optimizePeaks,joinBroadPeaks:joinBroadPeaks};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/optimize.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else{\n            t = new Matrix(nbPoints,1);\n            y_data = new Matrix(nbPoints,1);\n            x = xy[0];\n            y = xy[1];\n            if(typeof x[0] === \"number\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i][0]=x[i];\n                    y_data[i][0]=y[i];\n                    if(y[i]>maxY)\n                        maxY = y[i];\n                }\n            }\n            else{\n                //It is a colum matrix\n                if(typeof x[0] === \"object\"){\n                    for(i=0;i<nbPoints;i++){\n                        t[i][0]=x[i][0];\n                        y_data[i][0]=y[i][0];\n                        if(y[i][0]>maxY)\n                            maxY = y[i][0];\n                    }\n                }\n\n            }\n\n        }\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else {\n            t = new Matrix(nbPoints, 1);\n            y_data = new Matrix(nbPoints, 1);\n            for (i = 0; i < nbPoints; i++) {\n                t[i][0] = xy[i][0];\n                y_data[i][0] = xy[i][1];\n                if(y_data[i][0]>maxY)\n                    maxY = y_data[i][0];\n            }\n        }\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i][0]/=maxY;\n    }\n    return [t,y_data,maxY];\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/src/index.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/index.js\n ** module id = 14\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/LM.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/index.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/matrix.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/decompositions.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/svd.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/util.js\n ** module id = 20\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/evd.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/lu.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/qr.js\n ** module id = 23\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/~/ml-matrix/src/dc/cholesky.js\n ** module id = 24\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/algebra.js\n ** module id = 25\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/index.js\n ** module id = 26\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/matrix.js\n ** module id = 27\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/decompositions.js\n ** module id = 28\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/svd.js\n ** module id = 29\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/util.js\n ** module id = 30\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/evd.js\n ** module id = 31\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/lu.js\n ** module id = 32\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/qr.js\n ** module id = 33\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/~/ml-matrix/src/dc/cholesky.js\n ** module id = 34\n ** module chunks = 0\n **/","var Opt = require(\"ml-optimize-lorentzian\");\nvar stats = require(\"ml-stat\");\nvar extend = require('extend');\nvar SG = require('ml-savitzky-golay-generalized');\n\nvar sgDefOptions = {\n    windowSize: 9,\n    polynomial: 3\n};\n\n\nfunction gsd(x, y, options){\n    //options = extend({}, defaultOptions, options);\n    var options=Object.create(options || {});\n    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n    if (options.broadRatio===undefined) options.broadRatio=0.00;\n    if (options.noiseLevel===undefined) options.noiseLevel=undefined;\n    if (options.noiseFactor===undefined) options.noiseFactor=3;\n    if (options.maxCriteria===undefined) options.maxCriteria=true;\n    if (options.smoothY===undefined) options.smoothY=true;\n    if (options.realTopDetection===undefined) options.realTopDetection=false;\n\n    var sgOptions = extend({}, sgDefOptions, options.sgOptions);\n\n    //console.log(JSON.stringify(stats.array.minMax(y)));\n    if(options.noiseLevel===undefined){\n        //We have to know if x is equally spaced\n        var maxDx=0, minDx=Number.MAX_VALUE,tmp;\n        for(var i=0;i< x.length-1;i++){\n            var tmp = Math.abs(x[i+1]-x[i]);\n            if(tmp<minDx){\n                minDx = tmp;\n            }\n            if(tmp>maxDx){\n                maxDx = tmp;\n            }\n        }\n\n        if((maxDx-minDx)/maxDx<0.05){\n\n            options.noiseLevel = getNoiseLevel(y);\n            //console.log(options.noiseLevel+\" \"+stats.array.median(y));\n        }\n        else{\n            options.noiseLevel = 0;\n        }\n    }\n    //console.log(\"options.noiseLevel \"+options.noiseLevel);\n    y=[].concat(y);\n    var yCorrection = {m:1, b:options.noiseLevel};\n    if(!options.maxCriteria){\n        yCorrection.m =-1;\n        yCorrection.b*=-1;\n    }\n\n    for (var i=0; i<y.length; i++){\n        y[i]=yCorrection.m*y[i]-yCorrection.b;\n    }\n\n    for (var i=0; i<y.length; i++) {\n        if (y[i] < 0) {\n            y[i] = 0;\n        }\n    }\n\n    //If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n    var Y = y;\n    if((maxDx-minDx)/maxDx<0.05){\n        if(options.smoothY)\n            Y = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n        var dY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n        var ddY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n    }\n    else{\n        if(options.smoothY)\n            Y = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n        var dY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n        var ddY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n    }\n\n    var X = x;\n    var dx = x[1]-x[0];\n    var maxDdy=0;\n    var maxY = 0;\n    //console.log(Y.length);\n    for (var i = 0; i < Y.length ; i++){\n        if(Math.abs(ddY[i])>maxDdy){\n            maxDdy = Math.abs(ddY[i]);\n        }\n        if(Math.abs(Y[i])>maxY){\n            maxY = Math.abs(Y[i]);\n        }\n    }\n    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n\n    var minddY = [];\n    var intervalL = [];\n    var intervalR = [];\n    var lastMax = null;\n    var lastMin = null;\n    var broadMask = new Array();\n    //console.log(dx);\n    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n    for (var i = 1; i < Y.length -1 ; i++){\n        //console.log(dY[i]);\n        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n            lastMin = X[i];\n            //console.log(\"min \"+lastMin);\n            if(dx>0&&lastMax!=null){\n                intervalL.push(lastMax);\n                intervalR.push(lastMin);\n\n            }\n        }\n\n        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n            lastMax = X[i];\n            //console.log(\"max \"+lastMax);\n            if(dx<0&&lastMin!=null){\n                intervalL.push(lastMax);\n                intervalR.push(lastMin);\n            }\n        }\n        if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n            minddY.push(i);//( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n            if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n                broadMask.push(false);\n            }\n            else{\n                broadMask.push(true);\n            }\n        }\n    }\n    //\n    //console.log(intervalL.length+\" \"+minddY.length+\" \"+broadMask.length);\n    var signals = [];\n    var lastK = 0,possible, k, f,frequency, distanceJ, minDistance, gettingCloser;\n    for (var j = 0; j < minddY.length; j++){\n        frequency = X[minddY[j]];//minddY[j][0];\n        possible = -1;\n        k=lastK+1;\n        minDistance = Number.MAX_VALUE;\n        distanceJ = 0;\n        gettingCloser=true;\n        while(possible==-1&&k<intervalL.length&&gettingCloser){\n            distanceJ = Math.abs(frequency-(intervalL[k]+intervalR[k])/2);\n            //Still getting closer?\n            if(distanceJ<minDistance){\n                minDistance = distanceJ;\n            }\n            else{\n                gettingCloser = false;\n            }\n            if( distanceJ <Math.abs(intervalL[k]-intervalR[k])/2){\n                possible=k;\n                lastK = k;\n            }\n            k++;\n        }\n        //console.log(lastK+\" \"+intervalL.length+\" possible \"+k);\n        if (possible!=-1){\n            //console.log(height);\n            if (Math.abs(Y[minddY[j]]) > options.minMaxRatio*maxY) {\n                signals.push({\n                    i:minddY[j],\n                    x: frequency,\n                    y: (Y[minddY[j]]-yCorrection.b)/yCorrection.m,\n                    width:Math.abs(intervalR[possible] - intervalL[possible]),//widthCorrection\n                    soft:broadMask[j]\n                })\n            }\n        }\n    }\n\n\n    if(options.realTopDetection){\n        realTopDetection(signals,X,Y);\n    }\n\n    //Correct the values to fit the original spectra data\n    for(var j=0;j<signals.length;j++){\n        signals[j].base=options.noiseLevel;\n    }\n\n    signals.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n    return signals;\n\n}\n\nfunction getNoiseLevel(y){\n    var mean = 0,stddev=0;\n    var length = y.length,i=0;\n    for(i = 0; i < length; i++){\n        mean+=y[i];\n    }\n    mean/=length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort();\n    if (length % 2 == 1) {\n        stddev = averageDeviations[(length-1)/2] / 0.6745;\n    } else {\n        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n    }\n\n    return stddev;\n}\n\nfunction realTopDetection(peakList, x, y){\n    //console.log(peakList);\n    //console.log(x);\n    //console.log(y);\n    var listP = [];\n    var alpha, beta, gamma, p,currentPoint;\n    for(var j=0;j<peakList.length;j++){\n        currentPoint = peakList[j].i;//peakList[j][2];\n        var tmp = currentPoint;\n        //The detected peak could be moved 1 or 2 unit to left or right.\n        if(y[currentPoint-1]>=y[currentPoint-2]\n            &&y[currentPoint-1]>=y[currentPoint]) {\n            currentPoint--;\n        }\n        else{\n            if(y[currentPoint+1]>=y[currentPoint]\n                &&y[currentPoint+1]>=y[currentPoint+2]) {\n                currentPoint++;\n            }\n            else{\n                if(y[currentPoint-2]>=y[currentPoint-3]\n                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n                    currentPoint-=2;\n                }\n                else{\n                    if(y[currentPoint+2]>=y[currentPoint+1]\n                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n                        currentPoint+=2;\n                    }\n                }\n            }\n        }\n        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n            &&y[currentPoint]>=y[currentPoint-1]\n            &&y[currentPoint]>=y[currentPoint+1]) {\n            alpha = 20 * Math.log10(y[currentPoint - 1]);\n            beta = 20 * Math.log10(y[currentPoint]);\n            gamma = 20 * Math.log10(y[currentPoint + 1]);\n            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n            //console.log(\"p: \"+p);\n            //console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n            peakList[j].x = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n            peakList[j].y = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n                - y[currentPoint + 1]) * p;//signal.peaks[j].intensity);\n            //console.log(y[tmp]+\" \"+peakList[j].y);\n        }\n    }\n}\n\nmodule.exports=gsd;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/gsd.js\n ** module id = 35\n ** module chunks = 0\n **/","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/index.js\n ** module id = 36\n ** module chunks = 0\n **/","'use strict';\nvar arrayStat = require('./array');\n\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction entropy(matrix, eps) {\n    if (typeof(eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n}\n\nfunction mean(matrix, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n}\n\nfunction standardDeviation(matrix, means, unbiased) {\n    var vari = variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n}\n\nfunction variance(matrix, means, unbiased) {\n    if (typeof(unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n}\n\nfunction median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort();\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n}\n\nfunction mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n}\n\nfunction skewness(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n}\n\nfunction kurtosis(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n}\n\nfunction standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n}\n\nfunction covariance(matrix, dimension) {\n    return scatter(matrix, undefined, dimension);\n}\n\nfunction scatter(matrix, divisor, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof(divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = mean(matrix, dimension),\n        rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nfunction correlation(matrix) {\n    var means = mean(matrix),\n        standardDeviations = standardDeviation(matrix, true, means),\n        scores = zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n}\n\nfunction zScores(matrix, means, standardDeviations) {\n    means = means || mean(matrix);\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n    return standardize(center(matrix, means, false), standardDeviations, true);\n}\n\nfunction center(matrix, means, inPlace) {\n    means = means || mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n}\n\nfunction standardize(matrix, standardDeviations, inPlace) {\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction weightedVariance(matrix, weights) {\n    var means = mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n}\n\nfunction weightedMean(matrix, weights, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n}\n\nfunction weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return weightedScatter(matrix, weights, means, factor, dimension);\n}\n\nfunction weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    if (typeof(factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nmodule.exports = {\n    entropy: entropy,\n    mean: mean,\n    standardDeviation: standardDeviation,\n    variance: variance,\n    median: median,\n    mode: mode,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    standardError: standardError,\n    covariance: covariance,\n    scatter: scatter,\n    correlation: correlation,\n    zScores: zScores,\n    center: center,\n    standardize: standardize,\n    weightedVariance: weightedVariance,\n    weightedMean: weightedMean,\n    weightedCovariance: weightedCovariance,\n    weightedScatter: weightedScatter\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/matrix.js\n ** module id = 37\n ** module chunks = 0\n **/","//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\nvar extend = require('extend');\nvar stat = require('ml-stat');\n\nvar defaultOptions = {\n    windowSize: 9,\n    derivative: 0,\n    polynomial: 3,\n};\n\n\nfunction SavitzkyGolay(data, h, options) {\n    options = extend({}, defaultOptions, options);\n\n    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\n\n    if (options.windowSize>data.length)\n        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n        throw new RangeError('Derivative should be a positive integer');\n    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n        throw new RangeError('Polynomial should be a positive integer');\n    if (options.polynomial >= 6)\n        console.warn('You should not use polynomial grade higher than 5 if you are' +\n            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\n    var windowSize = options.windowSize;\n\n    var half = Math.floor(windowSize/2);\n    var np = data.length;\n    var ans = new Array(np);\n    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n    var hs = 0;\n    var constantH = true;\n    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n        constantH = false;\n    }\n    else{\n        hs = Math.pow(h, options.derivative);\n    }\n    //console.log(\"Constant h: \"+constantH);\n    //For the borders\n    for(var i=0;i<half;i++){\n        var wg1=weights[half-i-1];\n        var wg2=weights[half+i+1];\n        var d1 = 0,d2=0;\n        for (var l = 0; l < windowSize; l++){\n            d1 += wg1[l] * data[l];\n            d2 += wg2[l] * data[np-windowSize+l-1];\n        }\n        if(constantH){\n            ans[half-i-1] = d1/hs;\n            ans[np-half+i] = d2/hs;\n        }\n        else{\n            hs = getHs(h,half-i-1,half, options.derivative);\n            ans[half-i-1] = d1/hs;\n            hs = getHs(h,np-half+i,half, options.derivative);\n            ans[np-half+i] = d2/hs;\n        }\n    }\n    //For the internal points\n    var wg = weights[half];\n    for(var i=windowSize;i<np+1;i++){\n        var d = 0;\n        for (var l = 0; l < windowSize; l++)\n            d += wg[l] * data[l+i-windowSize];\n        if(!constantH)\n            hs = getHs(h,i-half-1,half, options.derivative);\n        ans[i-half-1] = d/hs;\n    }\n    return ans;\n}\n\nfunction getHs(h,center,half,derivative){\n    var hs = 0;\n    var count = 0;\n    for(var i=center-half;i<center+half;i++){\n        if(i>=0 && i < h.length-1){\n            hs+= (h[i+1]-h[i]);\n            count++;\n        }\n    }\n    return Math.pow(hs/count,derivative);\n}\n\nfunction GramPoly(i,m,k,s){\n    var Grampoly = 0;\n    if(k>0){\n        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n    }\n    else{\n        if(k==0&&s==0){\n            Grampoly=1;\n        }\n        else{\n            Grampoly=0;\n        }\n    }\n    //console.log(Grampoly);\n    return Grampoly;\n}\n\nfunction GenFact(a,b){\n    var gf=1;\n    if(a>=b){\n        for(var j=a-b+1;j<=a;j++){\n            gf*=j;\n        }\n    }\n    return gf;\n}\n\nfunction Weight(i,t,m,n,s){\n    var sum=0;\n    for(var k=0;k<=n;k++){\n        //console.log(k);\n        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n    }\n    return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m,n,s){\n    var weights = new Array(m);\n    var np = Math.floor(m/2);\n    for(var t=-np;t<=np;t++){\n        weights[t+np] = new Array(m);\n        for(var j=-np;j<=np;j++){\n            weights[t+np][j+np]=Weight(j,t,np,n,s);\n        }\n    }\n    return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\nmodule.exports = SavitzkyGolay;\n \n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay-generalized/src/index.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\n\nvar impuritiesList = [\n    {\"solvent\":\"CDCl3\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"ds\",\"shift\":7.26}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"bs\",\"shift\":1.56}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.1}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.17}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.1}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.36}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.28}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.19},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.22}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.98},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.01},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.27},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.43}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.26}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.43}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.73}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.3}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.21},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.48}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.65},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.57},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.39}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.4},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.55}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.09},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.02},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":8.02},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.96},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.88}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.62}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.71}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.25},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.72},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":1.32}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.05},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.12},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.26}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.14},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.46},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.06}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.76}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.26}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.26}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.65}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.49},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.09}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.33}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":7},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.27}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.22},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":4.04}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.62},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.29},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.68}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.07}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.85},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.76}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.36},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.17},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.25}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.03},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.53}],\"name\":\"triethylamine\"}]},\n    {\"solvent\":\"(CD3)2CO\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":2.05}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.84}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.09}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.05}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.36}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.18}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.13},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.13}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.96},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.22},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.41}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":8.02}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.43}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.87}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.63}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.11},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.41}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.56},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.47},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.46}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.83}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.96},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.78}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.52}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.59}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.12},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.57},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":3.39}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.05},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.2}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.45},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.87},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.29}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.28}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.59}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.31},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.12}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.43}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.27}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.1},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.9}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.58},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.35},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.76}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.13}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.79},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.63}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.32},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.5},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.5}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.45}],\"name\":\"triethylamine\"}]},\n    {\"solvent\":\"(CD3)2SO/DMSO\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"quint\",\"shift\":2.5}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.33}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.91}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.09}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.37}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.11},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.19}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.11},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.08}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.87},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.65},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.18},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.36}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":8.32}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.9}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.76}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.09},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.38}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.51},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.38},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.24}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.24},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.43}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.78}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.95},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.89},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.73}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.54}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.57}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.06},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.44},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":4.63}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.99},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.03},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.17}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.43},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.91}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.34}],\"name\":\"ethylene_glycol\"},{\"shifts\":[],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.25}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.53}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.16},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.01}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.42}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.27}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.04},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.78}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.58},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.39},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.79}],\"name\":\"pyridine\"},{\"shifts\":[],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.76},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.6}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.3},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.18},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.25}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.93},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.43}],\"name\":\"triethylamine\"}]},\n    {\"solvent\":\"C6D6\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":7.16}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.4}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.15}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.05},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.55}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.07},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.04}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.05},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.79},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.24},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.38}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.15}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.9}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.27}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.11},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.26}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.46},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.34},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.11}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.12},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.33}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.6},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.57},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.05}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.63},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.36},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.86}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.68}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.35}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.34}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.65},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.89},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.92}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.58},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":1.81},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.85}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.41}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.92},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.36}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.89},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.24}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.4}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.07}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.94}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.23}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":0.95},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.67}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.53},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":6.66},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":6.98}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.29}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.4},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.57}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.11},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.02},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.13}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.4}],\"name\":\"triethylamine\"}]},\n    {\"solvent\":\"CD3CN\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":1.94}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.13}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.08}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.96}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.37}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.16},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.18}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.14},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.13}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.97},{\"proton\":\"OHc\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.2},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.22},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.39}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.58}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.44}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.81}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.44}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.12},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.42}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.53},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.45},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.29}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.45}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.96},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.83}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.92},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.89},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.77}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.5}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.6}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.12},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.54},{\"proton\":\"OH\",\"coupling\":5,\"multiplicity\":\"s,t\",\"shift\":2.47}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.97},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.06},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.2}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.06},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.43},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.51}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.86},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.27}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.89},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.28}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.57}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.28},{\"proton\":\"OH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.16}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.31}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.87},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.29}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.09},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.87}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.57},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.33},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.73}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.08}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.8},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.64}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.33},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.2},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.2}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.96},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.45}],\"name\":\"triethylamine\"}]},\n    {\"solvent\":\"CD3OD\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":3.31}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[{\"proton\":\"H2O\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.87}],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.99}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.15}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.03}],\"name\":\"acetonitrile\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.33}],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.15},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.2}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[{\"proton\":\"ArH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":6.92},{\"proton\":\"ArCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.21},{\"proton\":\"ArC(CH3)3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.4}],\"name\":\"BHTb\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.9}],\"name\":\"chloroform\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.45}],\"name\":\"cyclohexane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.78}],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":5.49}],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.18},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.49}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.61},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.58},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.35}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.35},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.52}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.31},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.92}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.97},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.99},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.86}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.65}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.66}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.19},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.6}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.01},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.09},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.24}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.12},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.5},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.01}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.59}],\"name\":\"ethylene_glycol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":0.88},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"br_s\",\"shift\":1.29}],\"name\":\"grease^f\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"t\",\"shift\":0.9},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.29}],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.64}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.34}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.34}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.89},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.29}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.5},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":3.92}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.53},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.44},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.85}],\"name\":\"pyridine\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":0.1}],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.87},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.71}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.32},{\"proton\":\"CH(o/p)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.16},{\"proton\":\"CH(m)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.16}],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.05},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.58}],\"name\":\"triethylamine\"}]},\n    {\"solvent\":\"D2O\",\"impurities\":[{\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":4.79}],\"name\":\"solvent_residual_peak\"},{\"shifts\":[],\"name\":\"H2O\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.08}],\"name\":\"acetic_acid\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.22}],\"name\":\"acetone\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.06}],\"name\":\"acetonitrile\"},{\"shifts\":[],\"name\":\"benzene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.24}],\"name\":\"tert-butyl_alcohol\"},{\"shifts\":[{\"proton\":\"CCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":1.21},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.22}],\"name\":\"tert-butyl_methyl_ether\"},{\"shifts\":[],\"name\":\"BHTb\"},{\"shifts\":[],\"name\":\"chloroform\"},{\"shifts\":[],\"name\":\"cyclohexane\"},{\"shifts\":[],\"name\":\"1,2-dichloroethane\"},{\"shifts\":[],\"name\":\"dichloromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.17},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.56}],\"name\":\"diethyl_ether\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.67},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.61},{\"proton\":\"OCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.37}],\"name\":\"diglyme\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.37},{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.6}],\"name\":\"1,2-dimethoxyethane\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.08},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.06},{\"proton\":\"NCH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.9}],\"name\":\"dimethylacetamide\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":7.92},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.01},{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.85}],\"name\":\"dimethylformamide\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.71}],\"name\":\"dimethyl_sulfoxide\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.75}],\"name\":\"dioxane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.17},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.65}],\"name\":\"ethanol\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.07},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":4.14},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.24}],\"name\":\"ethyl_acetate\"},{\"shifts\":[{\"proton\":\"CH3CO\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":2.19},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":3.18},{\"proton\":\"CH2CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":1.26}],\"name\":\"ethyl_methyl_ketone\"},{\"shifts\":[{\"proton\":\"CH\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.65}],\"name\":\"ethylene_glycol\"},{\"shifts\":[],\"name\":\"grease^f\"},{\"shifts\":[],\"name\":\"n-hexane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":9.5,\"multiplicity\":\"d\",\"shift\":2.61}],\"name\":\"HMPAg\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":3.34}],\"name\":\"methanol\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":0,\"multiplicity\":\"s\",\"shift\":4.4}],\"name\":\"nitromethane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.9}],\"name\":\"n-pentane\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":6,\"multiplicity\":\"d\",\"shift\":1.17},{\"proton\":\"CH\",\"coupling\":6,\"multiplicity\":\"sep\",\"shift\":4.02}],\"name\":\"2-propanol\"},{\"shifts\":[{\"proton\":\"CH(2)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":8.52},{\"proton\":\"CH(3)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.45},{\"proton\":\"CH(4)\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":7.87}],\"name\":\"pyridine\"},{\"shifts\":[],\"name\":\"silicone_greasei\"},{\"shifts\":[{\"proton\":\"CH2\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":1.88},{\"proton\":\"CH2O\",\"coupling\":0,\"multiplicity\":\"m\",\"shift\":3.74}],\"name\":\"tetrahydrofuran\"},{\"shifts\":[],\"name\":\"toluene\"},{\"shifts\":[{\"proton\":\"CH3\",\"coupling\":7,\"multiplicity\":\"t\",\"shift\":0.99},{\"proton\":\"CH2\",\"coupling\":7,\"multiplicity\":\"q\",\"shift\":2.57}],\"name\":\"triethylamine\"}]}];\n\nvar look4 = \"solvent_residual_peak\"+\"H2O\"+\"TMS\";\nvar pascalTriangle = [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]];\nvar patterns = [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"];\n\nfunction removeSignal(peak, noiseSignal){\n\n}\n\nfunction checkImpurity(peakList, impurity){\n    var error = 0.025,i;\n    var found = false;\n    var indexes = new Array(impurity.length);\n    for(i=0;i<impurity.length;i++){\n        found=false;\n        for(var j=0;j<peakList.length;j++){\n            if(Math.abs(impurity[i].shift-peakList[j].delta1)<\n                (error+Math.abs(peakList[j].startX-peakList[j].stopX)/2)&&\n                (impurity[i].multiplicity===\"\"||\n                (impurity[i].multiplicity.indexOf(peakList[j].multiplicity)>=0&&!peakList[j].asymmetric))){\n                found = true;\n                indexes[i]=j;\n                break;\n            }\n        }\n        if(!found)\n            break;\n    }\n\n    var toRemove = [];\n    if(found){\n        for(i=0;i<impurity.length;i++){\n            toRemove.push(indexes[i]);\n        }\n    }\n    else\n        return 0;\n    for(i=0;i<toRemove.length;i++){\n        peakList[toRemove[i]].integralData.value = 0;\n    }\n    return 1;\n}\n\nfunction removeImpurities(peakList, solvent, nH){\n    var impurities = null, i;\n    for(i=0;i<impuritiesList.length;i++){\n        if(impuritiesList[i].solvent.indexOf(solvent)>=0){\n            impurities = impuritiesList[i].impurities;\n            break;\n        }\n    }\n    impurities.push({\"shifts\":[{\"proton\":\"X\",\"coupling\":0,\"multiplicity\":\"\",\"shift\":0.0}],\"name\":\"TMS\"});\n    var nCols = peakList.length;\n    var nRows = impurities.length;\n    var scores = new Array(nRows);\n    for(i=0;i<nRows;i++){\n        if( look4.indexOf(impurities[i].name)>=0){\n            scores[i]=checkImpurity(peakList, impurities[i].shifts);\n        }\n    }\n    //Recompute the integrals\n    var sumObserved=0;\n    for(i=0;i<peakList.length;i++){\n        sumObserved+=peakList[i].integralData.value;\n    }\n    if(sumObserved!=nH){\n        sumObserved=nH/sumObserved;\n        for(i=0;i<peakList.length;i++){\n            peakList[i].integralData.value*=sumObserved;\n        }\n    }\n}\n\nmodule.exports = removeImpurities;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/ImpurityRemover.js\n ** module id = 39\n ** module chunks = 0\n **/","'use strict';\n\nexports.FFTUtils = require(\"./FFTUtils\");\nexports.FFT = require('./fftlib');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/index.js\n ** module id = 40\n ** module chunks = 0\n **/","var FFT = require('./fftlib');\n\nvar FFTUtils= {\n    DEBUG : false,\n\n    /**\n     * Calculates the inverse of a 2D Fourier transform\n     *\n     * @param ft\n     * @param ftRows\n     * @param ftCols\n     * @return\n     */\n    ifft2DArray : function(ft, ftRows, ftCols){\n        var tempTransform = new Array(ftRows * ftCols);\n        var nRows = ftRows / 2;\n        var nCols = (ftCols - 1) * 2;\n        // reverse transform columns\n        FFT.init(nRows);\n        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n        for (var iCol = 0; iCol < ftCols; iCol++) {\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tmpCols.re[iRow] = ft[(iRow * 2) * ftCols + iCol];\n                tmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];\n            }\n            //Unnormalized inverse transform\n            FFT.bt(tmpCols.re, tmpCols.im);\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tempTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n                tempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n            }\n        }\n\n        // reverse row transform\n        var finalTransform = new Array(nRows * nCols);\n        FFT.init(nCols);\n        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n        var scale = nCols * nRows;\n        for (var iRow = 0; iRow < ftRows; iRow += 2) {\n            tmpRows.re[0] = tempTransform[iRow * ftCols];\n            tmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];\n            for (var iCol = 1; iCol < ftCols; iCol++) {\n                tmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];\n                tmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];\n                tmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];\n                tmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];\n            }\n            //Unnormalized inverse transform\n            FFT.bt(tmpRows.re, tmpRows.im);\n\n            var indexB = (iRow / 2) * nCols;\n            for (var iCol = nCols - 1; iCol >= 0; iCol--) {\n                finalTransform[indexB + iCol] = tmpRows.re[iCol] / scale;\n            }\n        }\n        return finalTransform;\n    },\n    /**\n     * Calculates the fourier transform of a matrix of size (nRows,nCols) It is\n     * assumed that both nRows and nCols are a power of two\n     *\n     * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the\n     * even rows contain the real part and the odd rows the imaginary part of the\n     * transform\n     * @param data\n     * @param nRows\n     * @param nCols\n     * @return\n     */\n    fft2DArray:function(data, nRows, nCols) {\n        var ftCols = (nCols / 2 + 1);\n        var ftRows = nRows * 2;\n        var tempTransform = new Array(ftRows * ftCols);\n        FFT.init(nCols);\n        // transform rows\n        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n        var row1 = {re: new Array(nCols), im: new Array(nCols)}\n        var row2 = {re: new Array(nCols), im: new Array(nCols)}\n        var index, iRow0, iRow1, iRow2, iRow3;\n        for (var iRow = 0; iRow < nRows / 2; iRow++) {\n            index = (iRow * 2) * nCols;\n            tmpRows.re = data.slice(index, index + nCols);\n\n            index = (iRow * 2 + 1) * nCols;\n            tmpRows.im = data.slice(index, index + nCols);\n\n            FFT.fft1d(tmpRows.re, tmpRows.im);\n\n            this.reconstructTwoRealFFT(tmpRows, row1, row2);\n            //Now lets put back the result into the output array\n            iRow0 = (iRow * 4) * ftCols;\n            iRow1 = (iRow * 4 + 1) * ftCols;\n            iRow2 = (iRow * 4 + 2) * ftCols;\n            iRow3 = (iRow * 4 + 3) * ftCols;\n            for (var k = ftCols - 1; k >= 0; k--) {\n                tempTransform[iRow0 + k] = row1.re[k];\n                tempTransform[iRow1 + k] = row1.im[k];\n                tempTransform[iRow2 + k] = row2.re[k];\n                tempTransform[iRow3 + k] = row2.im[k];\n            }\n        }\n\n        //console.log(tempTransform);\n        row1 = null;\n        row2 = null;\n        // transform columns\n        var finalTransform = new Array(ftRows * ftCols);\n        FFT.init(nRows);\n        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n        for (var iCol = ftCols - 1; iCol >= 0; iCol--) {\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tmpCols.re[iRow] = tempTransform[(iRow * 2) * ftCols + iCol];\n                tmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];\n            }\n            FFT.fft1d(tmpCols.re, tmpCols.im);\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                finalTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n                finalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n            }\n        }\n\n        //console.log(finalTransform);\n        return finalTransform;\n\n    },\n    /**\n     *\n     * @param fourierTransform\n     * @param realTransform1\n     * @param realTransform2\n     *\n     * Reconstructs the individual Fourier transforms of two simultaneously\n     * transformed series. Based on the Symmetry relationships (the asterisk\n     * denotes the complex conjugate)\n     *\n     * F_{N-n} = F_n^{*} for a purely real f transformed to F\n     *\n     * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G\n     *\n     */\n    reconstructTwoRealFFT:function(fourierTransform, realTransform1, realTransform2) {\n        var length = fourierTransform.re.length;\n\n        // the components n=0 are trivial\n        realTransform1.re[0] = fourierTransform.re[0];\n        realTransform1.im[0] = 0.0;\n        realTransform2.re[0] = fourierTransform.im[0];\n        realTransform2.im[0] = 0.0;\n        var rm, rp, im, ip, j;\n        for (var i = length / 2; i > 0; i--) {\n            j = length - i;\n            rm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);\n            rp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);\n            im = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);\n            ip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);\n            realTransform1.re[i] = rp;\n            realTransform1.im[i] = im;\n            realTransform1.re[j] = rp;\n            realTransform1.im[j] = -im;\n            realTransform2.re[i] = ip;\n            realTransform2.im[i] = -rm;\n            realTransform2.re[j] = ip;\n            realTransform2.im[j] = rm;\n        }\n    },\n\n    /**\n     * In place version of convolute 2D\n     *\n     * @param ftSignal\n     * @param ftFilter\n     * @param ftRows\n     * @param ftCols\n     * @return\n     */\n    convolute2DI:function(ftSignal, ftFilter, ftRows, ftCols) {\n        var re, im;\n        for (var iRow = 0; iRow < ftRows / 2; iRow++) {\n            for (var iCol = 0; iCol < ftCols; iCol++) {\n                //\n                re = ftSignal[(iRow * 2) * ftCols + iCol]\n                * ftFilter[(iRow * 2) * ftCols + iCol]\n                - ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n                * ftFilter[(iRow * 2 + 1) * ftCols + iCol];\n                im = ftSignal[(iRow * 2) * ftCols + iCol]\n                * ftFilter[(iRow * 2 + 1) * ftCols + iCol]\n                + ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n                * ftFilter[(iRow * 2) * ftCols + iCol];\n                //\n                ftSignal[(iRow * 2) * ftCols + iCol] = re;\n                ftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;\n            }\n        }\n    },\n    /**\n     *\n     * @param data\n     * @param kernel\n     * @param nRows\n     * @param nCols\n     * @returns {*}\n     */\n    convolute:function(data, kernel, nRows, nCols){\n        var ftSpectrum = new Array(nCols * nRows);\n        for (var i = 0; i<nRows * nCols; i++){\n            ftSpectrum[i] = data[i];\n        }\n\n        ftSpectrum = this.fft2DArray(ftSpectrum, nRows, nCols);\n\n        var dim = kernel.length;\n        var ftFilterData = new Array(nCols * nRows);\n        for(var i=0;i<nCols * nRows;i++){\n            ftFilterData[i]=0;\n        }\n\n        var iRow, iCol;\n        var shift = (dim - 1) / 2;\n        //console.log(dim);\n        for (var ir = 0; ir < dim; ir++) {\n            iRow = (ir - shift + nRows) % nRows;\n            for (var ic = 0; ic < dim; ic++) {\n                iCol = (ic - shift + nCols) % nCols;\n                ftFilterData[iRow * nCols + iCol] = kernel[ir][ic];\n            }\n        }\n\n        ftFilterData = this.fft2DArray(ftFilterData, nRows, nCols);\n\n        var ftRows = nRows * 2;\n        var ftCols = nCols / 2 + 1;\n        this.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\n        return  this.ifft2DArray(ftSpectrum, ftRows, ftCols);\n    }\n}\n\nmodule.exports = FFTUtils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/FFTUtils.js\n ** module id = 41\n ** module chunks = 0\n **/","/**\n * Fast Fourier Transform module\n * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n */\nvar FFT = (function(){\n  var FFT;  \n  \n  if(typeof exports !== 'undefined') {\n    FFT = exports;   // for CommonJS\n  } else {\n    FFT = {};\n  }\n  \n  var version = {\n    release: '0.3.0',\n    date: '2013-03'\n  };\n  FFT.toString = function() {\n    return \"version \" + version.release + \", released \" + version.date;\n  };\n\n  // core operations\n  var _n = 0,          // order\n      _bitrev = null,  // bit reversal table\n      _cstb = null;    // sin/cos table\n\n  var core = {\n    init : function(n) {\n      if(n !== 0 && (n & (n - 1)) === 0) {\n        _n = n;\n        core._initArray();\n        core._makeBitReversalTable();\n        core._makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    },\n    // 1D-FFT\n    fft1d : function(re, im) {\n      core.fft(re, im, 1);\n    },\n    // 1D-IFFT\n    ifft1d : function(re, im) {\n      var n = 1/_n;\n      core.fft(re, im, -1);\n      for(var i=0; i<_n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    },\n     // 1D-IFFT\n    bt1d : function(re, im) {\n      core.fft(re, im, -1);\n    },\n    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n    fft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.fft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.fft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // 2D-IFFT\n    ifft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.ifft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.ifft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // core operation of FFT\n    fft : function(re, im, inv) {\n      var d, h, ik, m, tmp, wr, wi, xr, xi,\n          n4 = _n >> 2;\n      // bit reversal\n      for(var l=0; l<_n; l++) {\n        m = _bitrev[l];\n        if(l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      }\n      // butterfly operation\n      for(var k=1; k<_n; k<<=1) {\n        h = 0;\n        d = _n/(k << 1);\n        for(var j=0; j<k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv*_cstb[h];\n          for(var i=j; i<_n; i+=(k<<1)) {\n            ik = i + k;\n            xr = wr*re[ik] + wi*im[ik];\n            xi = wr*im[ik] - wi*re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    },\n    // initialize the array (supports TypedArray)\n    _initArray : function() {\n      if(typeof Uint32Array !== 'undefined') {\n        _bitrev = new Uint32Array(_n);\n      } else {\n        _bitrev = [];\n      }\n      if(typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n*1.25);\n      } else {\n        _cstb = [];\n      }\n    },\n    // zero padding\n    _paddingZero : function() {\n      // TODO\n    },\n    // makes bit reversal table\n    _makeBitReversalTable : function() {\n      var i = 0,\n          j = 0,\n          k = 0;\n      _bitrev[0] = 0;\n      while(++i < _n) {\n        k = _n >> 1;\n        while(k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n        j += k;\n        _bitrev[i] = j;\n      }\n    },\n    // makes trigonometiric function table\n    _makeCosSinTable : function() {\n      var n2 = _n >> 1,\n          n4 = _n >> 2,\n          n8 = _n >> 3,\n          n2p4 = n2 + n4,\n          t = Math.sin(Math.PI/_n),\n          dc = 2*t*t,\n          ds = Math.sqrt(dc*(2 - dc)),\n          c = _cstb[n4] = 1,\n          s = _cstb[0] = 0;\n      t = 2*dc;\n      for(var i=1; i<n8; i++) {\n        c -= dc;\n        dc += t*c;\n        s += ds;\n        ds -= t*s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n      if(n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n      for(var j=0; j<n4; j++) {\n        _cstb[n2 - j]  = _cstb[j];\n      }\n      for(var k=0; k<n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  };\n  // aliases (public APIs)\n  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n  for(var i=0; i<apis.length; i++) {\n    FFT[apis[i]] = core[apis[i]];\n  }\n  FFT.bt = core.bt1d;\n  FFT.fft = core.fft1d;\n  FFT.ifft = core.ifft1d;\n  \n  return FFT;\n}).call(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/fftlib.js\n ** module id = 42\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by abol on 4/20/16.\n */\nmodule.exports.fourierTransform = require(\"./fourierTransform\");\nmodule.exports.zeroFilling = require(\"./zeroFilling\");\nmodule.exports.apodization = require(\"./apodization\");\nmodule.exports.phaseCorrection = require(\"./phaseCorrection\");\nmodule.exports.digitalFilter = require(\"./digitalFilter\");\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/filters/Filters.js\n ** module id = 43\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by abol on 4/20/16.\n */\nvar fft = require(\"ml-fft\");\n\nfunction fourierTransform(spectraData){\n    //console.log(spectraData);\n\n    var nbPoints = spectraData.getNbPoints();\n    var nSubSpectra = spectraData.getNbSubSpectra() / 2;\n    var spectraType = \"NMR SPECTRUM\";//spectraData.TYPE_NMR_SPECTRUM;\n    var FFT = fft.FFT;\n    if (nSubSpectra > 1)\n        spectraType = \"nD NMR SPECTRUM\";//spectraData.TYPE_2DNMR_SPECTRUM;\n\n    FFT.init(nbPoints);\n\n\n    var fcor = spectraData.getParamDouble(\"$FCOR\", 0.0);\n    //var tempArray = new Array(nbPoints / 2);\n    for (var iSubSpectra = 0; iSubSpectra < nSubSpectra; iSubSpectra++)\n    {\n        var re = spectraData.getYData(2 * iSubSpectra);\n        var im = spectraData.getYData(2 * iSubSpectra + 1);\n        if (false) {\n            console.log(\"firstPoint: (\" + re[0] + \",\" + im[0] + \")\");\n            console.log(\"fcor: \" + fcor);\n        }\n        re[0] *= fcor;\n        im[0] *= fcor;\n\n        FFT.fft(re, im);\n        re = re.concat(re.slice(0,(nbPoints+1)/2));\n        re.splice(0, (nbPoints+1)/2);\n        im = im.concat(im.slice(0,(nbPoints+1)/2));\n        im.splice(0, (nbPoints+1)/2);\n\n        spectraData.setActiveElement(2 * iSubSpectra);\n        updateSpectra(spectraData, spectraType);\n\n        spectraData.setActiveElement(2 * iSubSpectra + 1);\n        updateSpectra(spectraData, spectraType);\n    }\n    //TODO For Alejandro\n    //Now we can try to apply the FFt on the second dimension\n    if(spectraData.is2D()){\n        var mode = spectraData.getParam(\".ACQUISITION SCHEME\");\n        switch(mode){\n            case 1://\"State-TPP\"\n                break;\n            case 2://State\n                break;\n            case 3://Echo-Antiecho\n                break;\n            defaut:\n                //QF\n                //Does not transform in the indirect dimension\n            break;\n\n        }\n    }\n    spectraData.setActiveElement(0);\n    return spectraData;\n}\n\nfunction updateSpectra(spectraData, spectraType){\n    var baseFrequency = spectraData.getParamDouble(\"$BF1\", NaN);\n    var spectralFrequency = spectraData.getParamDouble(\"$SFO1\", NaN);\n    var spectralWidth = spectraData.getParamDouble(\"$SW\", NaN);\n    var xMiddle = ((spectralFrequency - baseFrequency) / baseFrequency )* 1e6;\n    var dx = 0.5 * spectralWidth * spectralFrequency / baseFrequency;\n\n    spectraData.setDataType(spectraType);\n    spectraData.setFirstX(xMiddle + dx);\n    spectraData.setLastX(xMiddle - dx);\n    spectraData.setXUnits(\"PPM\");\n\n    var x = spectraData.getXData();\n    var tmp = xMiddle + dx;\n    dx = -2*dx/(x.length-1);\n    for(var i=0;i< x.length;i++){\n        x[i]= tmp;\n        tmp+=dx;\n    }\n\n    //TODO update minmax in Y axis\n}\n\nmodule.exports = fourierTransform;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/filters/fourierTransform.js\n ** module id = 44\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by abol on 4/20/16.\n */\n\nfunction zeroFilling(spectraData, zeroFillingX, zeroFillingY){\n    var nbSubSpectra = spectraData.getNbSubSpectra();\n    //var zeroPadding = spectraData.getParamDouble(\"$$ZEROPADDING\", 0);\n    var nbXPoints, lastX, deltaX, k, x, y;\n    if (zeroFillingX != 0){\n        for (var iSubSpectra = 0 ; iSubSpectra < nbSubSpectra; iSubSpectra++){\n            spectraData.setActiveElement(iSubSpectra);\n            nbXPoints = spectraData.getNbPoints();\n            y = spectraData.getYData();\n            x = spectraData.getXData();\n            lastX = spectraData.getLastX();\n            deltaX = (lastX-x[0])/(nbXPoints-1);\n            for (k = nbXPoints; k < zeroFillingX; k++){\n                y.push(0);\n                x.push(lastX+deltaX);\n            }\n            if (zeroFillingX < nbXPoints){\n                y.splice(zeroFillingX, y.length-1);\n                x.splice(zeroFillingX, x.length-1);\n            }\n            spectraData.setFirstX(x[0]);\n            spectraData.setLastX(x[x.length-1]);\n        }\n    }\n    spectraData.setActiveElement(0);\n    return spectraData;\n    // @TODO implement zeroFillingY\n}\nmodule.exports = zeroFilling;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/filters/zeroFilling.js\n ** module id = 45\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by acastillo on 4/26/16.\n */\n\nfunction apodization(spectraData, parameters){\n    //org.cheminfo.hook.nemo.filters.ApodizationFilter\n\n    /*public String toString() {\n     switch (this) {\n     case NONE:\n     return \"None\";\n     case EXPONENTIAL:\n     return \"Exponential\";\n     case GAUSSIAN:\n     return \"Gaussian\";\n     case TRAF:\n     return \"TRAF\";\n     case SINE_BELL:\n     return \"Sine Bell\";\n     case SINE_BELL_SQUARED:\n     return \"Sine Bell Squared\";\n     default:\n     return \"\";\n     }\n     }*/\n}\n\nmodule.exports = apodization;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/filters/apodization.js\n ** module id = 46\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by acastillo on 4/26/16.\n */\nfunction phaseCorrection(spectraData, phi0, phi1){\n    //System.out.println(spectraData.toString());\n    var nbPoints = spectraData.getNbPoints();\n    var reData = spectraData.getYData(0);\n    var imData = spectraData.getYData(1);\n    //var corrections = spectraData.getParam(\"corrections\");\n\n    //for(var k=0;k<corrections.length;k++){\n    //    Point2D phi = corrections.elementAt(k);\n\n        //double phi0 = phi.getX();\n        //double phi1 = phi.getY();\n\n    if(false) System.out.println(\" ph0 = \"+phi0);\n    if(false) System.out.println(\" ph1 = \"+phi1);\n\n    var delta = phi1 / nbPoints;\n    var alpha = 2 * Math.pow(Math.sin(delta / 2), 2);\n    var beta = Math.sin(delta);\n    var cosTheta = Math.cos(phi0);\n    var sinTheta = Math.sin(phi0);\n    var cosThetaNew, sinThetaNew;\n\n    var reTmp, imTmp;\n    var index;\n        for (var i = 0; i < nbPoints; i++) {\n            index = nbPoints - i - 1;\n            index = i;\n            reTmp = reData[index] * cosTheta - imData[index] * sinTheta;\n            imTmp = reData[index] * sinTheta + imData[index] * cosTheta;\n            reData[index] = reTmp;\n            imData[index] = imTmp;\n            // calculate angles i+1 from i\n            cosThetaNew = cosTheta - (alpha * cosTheta + beta * sinTheta);\n            sinThetaNew = sinTheta - (alpha * sinTheta - beta * cosTheta);\n            cosTheta = cosThetaNew;\n            sinTheta = sinThetaNew;\n        }\n        //toApply--;\n    //}\n\n    spectraData.resetMinMax();\n    //spectraData.updateDefaults();\n    //spectraData.updateY();\n    spectraData.putParam(\"PHC0\", phi0);\n    spectraData.putParam(\"PHC1\", phi1);\n}\n\nmodule.exports = phaseCorrection;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/filters/phaseCorrection.js\n ** module id = 47\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by acastillo on 4/26/16.\n */\nvar rotate = require(\"./rotate\");\n\nfunction digitalFilter(spectraData, options){\n    var nbPoints = 0;\n    if(options.nbPoints){\n        nbPoints = options.nbPoints;\n    }\n    else{\n        if(options.brukerFilter){\n            //TODO Determine the number of points to shift, or the ph1 correction\n            //based on DECIM and DSPSVF parameters\n            nbPoints = 0;\n        }\n    }\n\n    var nbSubSpectra = spectraData.getNbSubSpectra();\n    if (nbPoints != 0){\n        for (var iSubSpectra = 0 ; iSubSpectra < nbSubSpectra; iSubSpectra++){\n            spectraData.setActiveElement(iSubSpectra);\n            rotate(spectraData.getYData(),nbPoints);\n            if(options.rotateX){\n                rotate(spectraData.getXData(),nbPoints);\n                spectraData.setFirstX(spectraData.getX(0));\n                spectraData.setLastX(spectraData.getX(spectraData.getNbPoints()-1));\n            }\n        }\n    }\n    spectraData.setActiveElement(0);\n    return spectraData;\n}\n\nmodule.exports = digitalFilter;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/filters/digitalFilter.js\n ** module id = 48\n ** module chunks = 0\n **/","'use strict';\n/**\n * Created by acastillo on 4/26/16.\n */\n/**\n * This function performs a circular shift of the input object without realocating memory.\n * Positive values of shifts will shift to the right and negative values will do to the left\n * @example rotate([1,2,3,4],1) -> [4,1,2,3]\n * @example rotate([1,2,3,4],-1) -> [2,3,4,1]\n * @param array\n */\nfunction rotate(array,shift){\n    var nbPoints = array.length;\n    //Lets calculate the lest amount of points to shift.\n    //It decreases the amount of validations in the loop\n    shift = shift%nbPoints;\n\n    if(Math.abs(shift)>nbPoints/2){\n        shift = shift>0?shift-nbPoints:shift+nbPoints;\n    }\n\n    if(shift!=0){\n        var currentIndex=0, nextIndex=shift;\n        var toMove = nbPoints;\n        var current = array[currentIndex], next;\n        var lastFirstIndex = shift;\n        var direction = shift>0?1:-1;\n\n        while(toMove>0){\n            nextIndex = putInRange(nextIndex,nbPoints);\n            next = array[nextIndex];\n            array[nextIndex] = current;\n            nextIndex+=shift;\n            current = next;\n            toMove--;\n\n            if(nextIndex==lastFirstIndex){\n                nextIndex = putInRange(nextIndex+direction,nbPoints);\n                lastFirstIndex = nextIndex;\n                currentIndex = putInRange(nextIndex-shift,nbPoints);\n                current = array[currentIndex];\n            }\n        }\n    }\n}\n\nfunction putInRange(value, nbPoints){\n    if(value<0)\n        value+=nbPoints;\n    if(value>=nbPoints)\n        value-=nbPoints;\n    return value;\n}\n\nmodule.exports = rotate;\n\n\n/*var foo = [1,2,3,4,5,6];\nrotate(foo,-4);\nconsole.log(foo);*/\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/filters/rotate.js\n ** module id = 49\n ** module chunks = 0\n **/","'use strict';\n\nvar SD = require('./SD');\nvar PeakPicking2D = require('./PeakPicking2D');\nvar PeakOptimizer = require(\"./PeakOptimizer\");\nvar JcampConverter=require(\"jcampconverter\");\nvar stat = require(\"ml-stat\");\n\n/**\n * Construct the object from the given sd object(output of the jcampconverter or brukerconverter filter)\n * @param sd\n * @constructor\n */\nfunction NMR2D(sd) {\n    SD.call(this, sd); // Héritage\n}\n\nNMR2D.prototype = Object.create(SD.prototype);\nNMR2D.prototype.constructor = NMR2D;\n\n/**\n * @function fromJcamp(jcamp,options)\n * Construct the object from the given jcamp.\n * @param jcamp\n * @param options\n * @option xy\n * @option keepSpectra\n * @option keepRecordsRegExp\n * @returns {NMR2D}\n */\nNMR2D.fromJcamp = function(jcamp,options) {\n    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new NMR2D(spectrum);\n}\n\n/**\n * @function isHomoNuclear()\n * Returns true if the it is an homo-nuclear experiment\n * @returns {boolean}\n */\nNMR2D.prototype.isHomoNuclear=function(){\n    return this.sd.xType==this.sd.yType;\n}\n\n/**\n * @function observeFrequencyX()\n * Returns the observe frequency in the direct dimension\n * @returns {*}\n */\nNMR2D.prototype.observeFrequencyX=function(){\n    return this.sd.spectra[0].observeFrequency;\n}\n/**\n * @function observeFrequencyY()\n * Returns the observe frequency in the indirect dimension\n * @returns {*}\n */\nNMR2D.prototype.observeFrequencyY=function(){\n    return this.sd.indirectFrequency;\n}\n\n/**\n * @function getSolventName()\n * Returns the solvent name.\n * @returns {string|XML}\n */\nNMR2D.prototype.getSolventName=function(){\n    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]).replace(\"<\",\"\").replace(\">\",\"\");\n}\n\n/**\n * @function getXUnits()\n * This function returns the units of the direct dimension. It overrides the SD getXUnits function\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getXUnits = function(){\n    return this.sd.ntuples[1].units;\n}\n/**\n * @function getYUnits()\n * This function returns the units of the indirect dimension. It overrides the SD getYUnits function\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getYUnits = function(){\n    return this.sd.ntuples[0].units;\n}\n/**\n * @function getZUnits()\n * Returns the units of the dependent variable\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getZUnits = function(){\n    return this.sd.ntuples[2].units;\n}\n/**\n * @function getLastY()\n * Returns the min value in the indirect dimension.\n * @returns {sd.minMax.maxY}\n */\nNMR2D.prototype.getLastY = function(){\n    return this.sd.minMax.maxY;\n}\n/**\n * @function getFirstY()\n * Returns the min value in the indirect dimension.\n * @returns {sd.minMax.minY}\n */\nNMR2D.prototype.getFirstY = function(){\n    return this.sd.minMax.minY;\n}\n/**\n * @function getDeltaY()\n * Returns the separation between 2 consecutive points in the indirect domain\n * @returns {number}\n */\nNMR2D.prototype.getDeltaY=function(){\n    return ( this.getLastY()-this.getFirstY()) / (this.getNbSubSpectra()-1);\n}\n\n/**\n * @function nmrPeakDetection2D(options)\n * This function process the given spectraData and tries to determine the NMR signals. \n + Returns an NMRSignal2D array containing all the detected 2D-NMR Signals\n * @param\toptions:+Object\t\t\tObject containing the options\n * @option\tthresholdFactor:number\tA factor to scale the automatically determined noise threshold.\n * @returns [*]\tset of NMRSignal2D\n */\nNMR2D.prototype.nmrPeakDetection2D=function(options){\n    options = options||{};\n    if(!options.thresholdFactor)\n        options.thresholdFactor=1;\n    var id = Math.round(Math.random()*255);\n    if(options.idPrefix){\n        id=options.idPrefix;\n    }\n    var peakList = PeakPicking2D.findPeaks2D(this, options.thresholdFactor);\n\n    //lets add an unique ID for each peak.\n    for(var i=0;i<peakList.length;i++){\n        peakList[i]._highlight=[id+\"_\"+i];\n        peakList[i].signalID = id+\"_\"+i;\n    }\n    if(options.references)\n        PeakOptimizer.alignDimensions(peakList,options.references);\n\n    if(options.format===\"new\"){\n        var newSignals = new Array(peakList.length);\n        var minMax1, minMax2;\n        for(var k=peakList.length-1;k>=0;k--){\n            var signal = peakList[k];\n            newSignals[k]={\n                fromTo:signal.fromTo,\n                integral:signal.intensity||1,\n                remark:\"\",\n                signal:[{\n                    peak:signal.peaks,\n                    delta:[signal.shiftX, signal.shiftY]\n                }],\n                _highlight:signal._highlight,\n                signalID:signal.signalID,\n            };\n        }\n        peakList = newSignals;\n    }\n\n\n    return peakList;\n}\n\n/**\n * @function getNMRPeakThreshold(nucleus)\n * Returns the noise factor depending on the nucleus.\n * @param nucleus\n * @returns {number}\n */\nNMR2D.prototype.getNMRPeakThreshold=function(nucleus) {\n    if (nucleus == \"1H\")\n        return 3.0;\n    if (nucleus ==\"13C\")\n        return 5.0;\n    return 1.0;\n}\n\n/**\n * @function getNucleus(dim)\n * Returns the observed nucleus in the specified dimension\n * @param dim\n * @returns {string}\n */\nNMR2D.prototype.getNucleus=function(dim){\n    if(dim==1)\n        return this.sd.xType;\n    if(dim==2)\n        return this.sd.yType;\n    return this.sd.xType;\n}\n\n\n/**\n * @function zeroFilling(nPointsX [,nPointsY])\n * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one\n * could increase artificially the spectral resolution.\n * @param nPointsX Number of new zero points in the direct dimension\n * @param nPointsY Number of new zero points in the indirect dimension\n * @returns this object\n */\nNMR2D.prototype.zeroFilling=function(nPointsX, nPointsY) {\n    return Filters.zeroFilling(this,nPointsX, nPointsY);\n}\n\n/**\n * @function brukerFilter()\n * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that\n * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the\n * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n * @returns this object\n */\nNMR2D.prototype.brukerFilter=function() {\n    return Filters.digitalFilter(this, {\"brukerFilter\":true});\n}\n\n/**\n * @function digitalFilter(options)\n * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that\n * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the\n * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n * @option nbPoints: The number of points to shift. Positive values will shift the values to the rigth\n * and negative values will do to the left.\n * @option brukerSpectra\n * @returns this object\n */\nNMR2D.prototype.digitalFilter=function(options) {\n    return Filters.digitalFilter(this, options);\n}\n\n\n/**\n * @function fourierTransform()\n * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n * @returns this object\n */\nNMR2D.prototype.fourierTransform=function( ) {\n    return Filters.fourierTransform(this);\n}\n\n/**\n * @function postFourierTransform(ph1corr)\n * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained\n * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra\n * filter could not find the correct number of points to perform a circular shift.\n * The actual problem is that not all of the spectra has the necessary parameters for use only one method for\n * correcting the problem of the Bruker digital filters.\n * @param spectraData A fourier transformed spectraData.\n * @param ph1corr Phase 1 correction value in radians.\n * @returns this object\n */\nNMR2D.prototype.postFourierTransform=function(ph1corr) {\n    return Filters.phaseCorrection(0,ph1corr);\n}\n\nmodule.exports = NMR2D;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/NMR2D.js\n ** module id = 50\n ** module chunks = 0\n **/","'use strict';\n\nvar lib = require(\"ml-fft\");\nvar PeakOptimizer = require(\"./PeakOptimizer\");\nvar SimpleClustering =  require(\"./SimpleClustering\");\nvar StatArray = require('ml-stat/array');\nvar FFTUtils = lib.FFTUtils;\n\nvar PeakPicking2D= {\n    DEBUG : false,\n    smallFilter : [\n        [0, 0, 1, 2, 2, 2, 1, 0, 0],\n        [0, 1, 4, 7, 7, 7, 4, 1, 0],\n        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n        [2, 7, 0, -23, -40, -23, 0, 7, 2],\n        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n        [0, 1, 3, 7, 7, 7, 3, 1, 0],\n        [0, 0, 1, 2, 2, 2, 1, 0, 0]],\n\n\n    //How noisy is the spectrum depending on the kind of experiment.\n    getLoGnStdDevNMR : function(spectraData) {\n    if (spectraData.isHomoNuclear())\n        return 1.5\n    else\n        return 3;\n    },\n\n    findPeaks2D : function(spectraData, thresholdFactor){\n        if(thresholdFactor==0)\n            thresholdFactor=1;\n        if(thresholdFactor<0)\n            thresholdFactor=-thresholdFactor;\n        var nbPoints = spectraData.getNbPoints();\n        var nbSubSpectra = spectraData.getNbSubSpectra();\n\n        var data = new Array(nbPoints * nbSubSpectra);\n        //var data = new Array(nbPoints * nbSubSpectra/2);\n\n        var isHomonuclear = spectraData.isHomoNuclear();\n\n        //var sum = new Array(nbPoints);\n\n        for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra; iSubSpectra++) {\n            var spectrum = spectraData.getYData(iSubSpectra);\n            for (var iCol = 0; iCol < nbPoints; iCol++) {\n                if(isHomonuclear){\n                    data[iSubSpectra * nbPoints + iCol] =(spectrum[iCol]>0?spectrum[iCol]:0);\n                }\n                else{\n                    data[iSubSpectra * nbPoints + iCol] =Math.abs(spectrum[iCol]);\n                }\n            }\n        }\n\n        var nStdDev = this.getLoGnStdDevNMR(spectraData);\n        if(isHomonuclear){\n            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);//)1.5);\n            var peaksMax1 = this.findPeaks2DMax(data, convolutedSpectrum, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);//2.0);\n            for(var i=0;i<peaksMC1.length;i++)\n                peaksMax1.push(peaksMC1[i]);\n            //console.log(peaksMax1);\n            return PeakOptimizer.enhanceSymmetry(this.createSignals2D(peaksMax1,spectraData,24));\n\n        }\n        else{\n            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);\n            //Peak2D[] peaksMC1 = PeakPicking2D.findPeaks2DMax(data, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);\n            //Remove peaks with less than 3% of the intensity of the highest peak\n            return this.createSignals2D(PeakOptimizer.clean(peaksMC1, 0.05), spectraData,24);\n        }\n\n    },\n    /**\n     Calculates the 1st derivative of the 2D matrix, using the LoG kernel approximation\n     */\n    convoluteWithLoG : function(inputSpectrum, nRows, nCols){\n        var ftSpectrum = new Array(nCols * nRows);\n        for (var i = nRows * nCols-1; i >=0; i--){\n            ftSpectrum[i] = inputSpectrum[i];\n        }\n\n        ftSpectrum = FFTUtils.fft2DArray(ftSpectrum, nRows, nCols);\n\n        var dim = this.smallFilter.length;\n        var ftFilterData = new Array(nCols * nRows);\n        for(var i=nCols * nRows-1;i>=0;i--){\n            ftFilterData[i]=0;\n        }\n\n        var iRow, iCol;\n        var shift = (dim - 1) / 2;\n        //console.log(dim);\n        for (var ir = 0; ir < dim; ir++) {\n            iRow = (ir - shift + nRows) % nRows;\n            for (var ic = 0; ic < dim; ic++) {\n                iCol = (ic - shift + nCols) % nCols;\n                ftFilterData[iRow * nCols + iCol] = this.smallFilter[ir][ic];\n            }\n        }\n\n        ftFilterData = FFTUtils.fft2DArray(ftFilterData, nRows, nCols);\n\n        var ftRows = nRows * 2;\n        var ftCols = nCols / 2 + 1;\n        FFTUtils.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\n        return  FFTUtils.ifft2DArray(ftSpectrum, ftRows, ftCols);\n    },\n    /**\n     Detects all the 2D-peaks in the given spectrum based on center of mass logic.\n     */\n    findPeaks2DLoG : function(inputSpectrum, convolutedSpectrum, nRows, nCols, nStdDev) {\n        var threshold = 0;\n        for(var i=nCols*nRows-2;i>=0;i--)\n            threshold+=Math.pow(convolutedSpectrum[i]-convolutedSpectrum[i+1],2);\n        threshold=-Math.sqrt(threshold);\n        threshold*=nStdDev/nRows;\n\n        var bitmask = new Array(nCols * nRows);\n        for(var i=nCols * nRows-1;i>=0;i--){\n            bitmask[i]=0;\n        }\n        var nbDetectedPoints = 0;\n        var lasti=-1;\n        for (var i = convolutedSpectrum.length-1; i >=0 ; i--) {\n            if (convolutedSpectrum[i] < threshold) {\n                bitmask[i] = 1;\n                nbDetectedPoints++;\n            }\n        }\n        var iStart = 0;\n        //int ranges = 0;\n        var peakList = [];\n\n        while (nbDetectedPoints != 0) {\n            for (iStart; iStart < bitmask.length && bitmask[iStart]==0; iStart++){};\n            //\n            if (iStart == bitmask.length)\n                break;\n\n            nbDetectedPoints -= this.extractArea(inputSpectrum, convolutedSpectrum,\n                bitmask, iStart, nRows, nCols, peakList, threshold);\n        }\n\n        if (peakList.length > 0&&this.DEBUG) {\n            console.log(\"No peak found\");\n        }\n        return peakList;\n    },\n    /**\n     Detects all the 2D-peaks in the given spectrum based on the Max logic.\n     */\n    findPeaks2DMax : function(inputSpectrum, cs, nRows, nCols, nStdDev) {\n        var threshold = 0;\n        for(var i=nCols*nRows-2;i>=0;i--)\n            threshold+=Math.pow(cs[i]-cs[i+1],2);\n        threshold=-Math.sqrt(threshold);\n        threshold*=nStdDev/nRows;\n\n        var rowI,colI;\n        var peakListMax = [];\n        var tmpIndex = 0;\n        for (var i = 0; i < cs.length; i++) {\n            if (cs[i] < threshold) {\n                //It is a peak?\n                rowI=Math.floor(i/nCols);\n                colI=i%nCols;\n                //Verifies if this point is a peak;\n                if(rowI>0&&rowI+1<nRows&&colI+1<nCols&&colI>0){\n                    //It is the minimum in the same row\n                    if(cs[i]<cs[i+1]&&cs[i]<cs[i-1]){\n                        //It is the minimum in the previous row\n                        tmpIndex=(rowI-1)*nCols+colI;\n                        if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n                            //It is the minimum in the next row\n                            tmpIndex=(rowI+1)*nCols+colI;\n                            if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n                                peakListMax.push({x:colI,y:rowI,z:inputSpectrum[i]});\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return peakListMax;\n    },\n    /*\n     This function detects the peaks\n     */\n    extractArea : function(spectrum, convolutedSpectrum, bitmask, iStart,\n                                                   nRows, nCols, peakList, threshold) {\n        var iRow = Math.floor(iStart / nCols);\n        var iCol = iStart % nCols;\n        var peakPoints =[];\n        //console.log(iStart+\" \"+iRow+\" \"+iCol);\n        // scanBitmask(bitmask, convolutedSpectrum, nRows, nCols, iRow, iCol,\n        // peakPoints);\n        this.scanBitmask(bitmask, nRows, nCols, iRow, iCol, peakPoints);\n        //console.log(\"extractArea.lng \"+peakPoints.length);\n        var x = new Array(peakPoints.length);\n        var y = new Array(peakPoints.length);\n        var z = new Array(peakPoints.length);\n        var nValues = peakPoints.length;\n        var xAverage = 0.0;\n        var yAverage = 0.0;\n        var zSum = 0.0;\n        if (nValues >= 9) {\n            if (this.DEBUG)\n                console.log(\"nValues=\" + nValues);\n            var maxValue = Number.NEGATIVE_INFINITY;\n            var maxIndex = -1;\n            for (var i = 0; i < nValues; i++) {\n                var pt = (peakPoints.splice(0,1))[0];\n                x[i] = pt[0];\n                y[i] = pt[1];\n                z[i] = spectrum[pt[1] * nCols + pt[0]];\n                xAverage += x[i] * z[i];\n                yAverage += y[i] * z[i];\n                zSum += z[i];\n                if (z[i] > maxValue) {\n                    maxValue = z[i];\n                    maxIndex = i;\n                }\n            }\n            if (maxIndex != -1) {\n                xAverage /= zSum;\n                yAverage /= zSum;\n                var newPeak = {x:xAverage, y:yAverage, z:zSum};\n                var minmax;\n                minmax =StatArray.minMax(x);\n                newPeak.minX=minmax.min;\n                newPeak.maxX=minmax.max;\n                minmax = StatArray.minMax(y);\n                newPeak.minY=minmax.min;\n                newPeak.maxY=minmax.max;\n                peakList.push(newPeak);\n            }\n        }\n        return nValues;\n    },\n    /*\n     Return all the peaks(x,y points) that composes a signal.\n     */\n    scanBitmask : function(bitmask, nRows, nCols, iRow, iCol, peakPoints) {\n        //console.log(nRows+\" \"+iRow+\" \"+nCols+\" \"+iCol);\n        if (iRow < 0 || iCol < 0 || iCol == nCols || iRow == nRows)\n            return;\n        if (bitmask[iRow * nCols + iCol]) {\n            bitmask[iRow * nCols + iCol] = 0;\n            peakPoints.push([iCol, iRow]);\n            this.scanBitmask(bitmask, nRows, nCols, iRow + 1, iCol, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow - 1, iCol, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol + 1, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol - 1, peakPoints);\n        }\n    },\n    /**\n     This function converts a set of 2D-peaks in 2D-signals. Each signal could be composed\n     of many 2D-peaks, and it has some additional information related to the NMR spectrum.\n     */\n    createSignals2D : function(peaks, spectraData, tolerance){\n        //console.log(peaks.length);\n        var signals=[];\n        var nbSubSpectra = spectraData.getNbSubSpectra();\n\n        var bf1=spectraData.observeFrequencyX();\n        var bf2=spectraData.observeFrequencyY();\n\n        var firstY = spectraData.getFirstY();\n        var lastY = spectraData.getLastY();\n        var dy = spectraData.getDeltaY();\n\n        //console.log(firstY+\" \"+lastY+\" \"+dy+\" \"+nbSubSpectra);\n        //spectraData.setActiveElement(0);\n        var noValid=0;\n        for (var i = peaks.length-1; i >=0 ; i--) {\n            //console.log(peaks[i].x+\" \"+spectraData.arrayPointToUnits(peaks[i].x));\n            //console.log(peaks[i].y+\" \"+(firstY + dy * (peaks[i].y)));\n            peaks[i].x=(spectraData.arrayPointToUnits(peaks[i].x));\n            peaks[i].y=(firstY + dy * (peaks[i].y));\n\n            //console.log(peaks[i])\n            //Still having problems to correctly detect peaks on those areas. So I'm removing everything there.\n            if(peaks[i].y<-1||peaks[i].y>=210){\n                peaks.splice(i,1);\n            }\n        }\n        //console.log(peaks);\n        //The connectivity matrix is an square and symmetric matrix, so we'll only store the upper diagonal in an\n        //array like form\n        var connectivity = [];\n        var tmp=0;\n        tolerance*=tolerance;\n        //console.log(tolerance);\n        for (var i = 0; i < peaks.length; i++) {\n            for (var j = i; j < peaks.length; j++) {\n                tmp=Math.pow((peaks[i].x-peaks[j].x)*bf1,2)+Math.pow((peaks[i].y-peaks[j].y)*bf2,2);\n                //Console.log(peaks[i].getX()+\" \"+peaks[j].getX()+\" \"+tmp);\n                if(tmp<tolerance){//30*30Hz We cannot distinguish peaks with less than 20 Hz of separation\n                    connectivity.push(1);\n                }\n                else{\n                    connectivity.push(0);\n                }\n            }\n        }\n\n        //console.log(connectivity);\n\n        var clusters = SimpleClustering.fullClusterGenerator(connectivity);\n\n        //console.log(clusters)\n\n        var signals = [];\n        if (peaks != null) {\n            var xValue, yValue;\n            for (var iCluster = 0; iCluster < clusters.length; iCluster++) {\n                var signal={nucleusX:spectraData.getNucleus(1),nucleusY:spectraData.getNucleus(2)};\n                signal.resolutionX=( spectraData.getLastX()-spectraData.getFirstX()) / spectraData.getNbPoints();\n                signal.resolutionY=dy;\n                var peaks2D = [];\n                signal.shiftX = 0;\n                signal.shiftY = 0;\n                var minMax1 = [Number.MAX_VALUE,0];\n                var minMax2 = [Number.MAX_VALUE,0];\n                var sumZ = 0;\n                for(var jPeak = clusters[iCluster].length-1;jPeak>=0;jPeak--){\n                    if(clusters[iCluster][jPeak]==1){\n                        peaks2D.push({\n                            x: peaks[jPeak].x,\n                            y: peaks[jPeak].y,\n                            z: peaks[jPeak].z\n\n                        }  );\n                        signal.shiftX+=peaks[jPeak].x*peaks[jPeak].z;\n                        signal.shiftY+=peaks[jPeak].y*peaks[jPeak].z;\n                        sumZ+=peaks[jPeak].z;\n                        if(peaks[jPeak].x<minMax1[0]){\n                            minMax1[0]=peaks[jPeak].x;\n                        }\n                        if(peaks[jPeak].x>minMax1[1]){\n                            minMax1[1]=peaks[jPeak].x;\n                        }\n                        if(peaks[jPeak].y<minMax2[0]){\n                            minMax2[0]=peaks[jPeak].y\n                        }\n                        if(peaks[jPeak].y>minMax2[1]){\n                            minMax2[1]=peaks[jPeak].y;\n                        }\n\n                    }\n                }\n                signal.fromTo = [{from:minMax1[0],to:minMax1[1]},\n                                {from:minMax2[0],to:minMax2[1]}];\n                signal.shiftX/=sumZ;\n                signal.shiftY/=sumZ;\n                signal.peaks = peaks2D;\n                signals.push(signal);\n            }\n        }\n        //console.log(signals);\n        return signals;\n    }\n}\n\nmodule.exports = PeakPicking2D;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakPicking2D.js\n ** module id = 51\n ** module chunks = 0\n **/","'use strict';\n\nvar PeakOptimizer={\n\tdiagonalError:0.05,\n\ttolerance:0.05,\n\tDEBUG:false,\n    toleranceX : 0.025,\n    toleranceY : 0.5,\n\n    clean: function(peaks, threshold){\n        var max = Number.NEGATIVE_INFINITY;\n        var i,peak;\n        //double min = Double.MAX_VALUE;\n        for(i=peaks.length-1;i>=0;i--){\n            if(Math.abs(peaks[i].z)>max)\n                max=Math.abs(peaks[i].z);\n        }\n        max*=threshold;\n        for(i=peaks.length-1;i>=0;i--){\n            if(Math.abs(peaks[i].z)<max)\n                peaks.splice(i,1);\n        }\n        return peaks;\n    },\n\t\n\tenhanceSymmetry: function(signals){\n\t\t\n\t\tvar properties = this.initializeProperties(signals);\n\t\tvar output = signals;\n\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"Before optimization size: \"+output.size());\n\t\t\n\t\t//First step of the optimization: Symmetry validation\n\t\tvar i,hits,index;\n\t\tvar signal;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(signal.peaks.length>1)\n\t\t\t\tproperties[i][1]++;\n\t\t\tif(properties[i][0]==1){\n\t\t\t\tindex = this.exist(output, properties, signal,-1,true);\n\t\t\t\tif(index>=0){\n\t\t\t\t\tproperties[i][1]+=2;\n\t\t\t\t\tproperties[index][1]+=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Second step of the optimization: Diagonal image existence\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(properties[i][0]==0){\n\t\t\t\thits = this.checkCrossPeaks(output, properties, signal, true);\n\t\t\t\tproperties[i][1]+=hits;\n\t\t\t\t//checkCrossPeaks(output, properties, signal, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Now, each peak have a score between 0 and 4, we can complete the patterns which\n\t\t//contains peaks with high scores, and finally, we can remove peaks with scores 0 and 1\n\t\tvar count = 0;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!==0&&properties[i][1]>2){\n\t\t\t\tcount++;\n\t\t\t\tcount+=this.completeMissingIfNeeded(output,properties,output[i],properties[i]);\n\t\t\t}\n\t\t\tif(properties[i][1]>=2&&properties[i][0]===0)\n\t\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"After optimization size: \"+count);\n\t\tvar  toReturn = new Array(count);\n\t\tcount--;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!==0&&properties[i][1]>2\n\t\t\t\t\t||properties[i][0]===0&&properties[i][1]>1){\n\t\t\t\ttoReturn[count--]=output[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"Removed \"+i+\" \"+output[i].peaks.length);\n\t\t\t}\n\t\t\t//if(properties.get(i)[1]>=2)\n\t\t\t//\ttoReturn[count--]=output.get(i);\n\t\t}\n\t\treturn toReturn;\n\t},\n\t\n\tcompleteMissingIfNeeded: function(output, properties, thisSignal, thisProp) {\n\t\t//Check for symmetry\n\t\tvar index = this.exist(output, properties, thisSignal,-thisProp[0],true);\n\t\tvar addedPeaks=0;\n\t\tvar newSignal = null, tmpProp=null;\n\t\tif(index<0){//If this signal have no a symmetry image, we have to include it\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [-thisProp[0],thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\t//Check for diagonal peaks\n\t\tvar j=0;\n\t\tvar diagX=false, diagY=false;\n\t\tvar signal;\n\t\tfor(j=output.length-1;j>=0;j--){\n\t\t\tsignal = output[j];\n\t\t\tif(properties[j][0]===0){\n\t\t\t\tif(Math.abs(signal.shiftX-thisSignal.shiftX)<this.diagonalError)\n\t\t\t\t\tdiagX=true;\n\t\t\t\tif(Math.abs(signal.shiftY-thisSignal.shiftY)<this.diagonalError)\n\t\t\t\t\tdiagY=true;\n\t\t\t}\n\t\t}\n\t\tif(diagX===false){\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftX;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftX,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\tif(diagY===false){\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftY;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftY,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\treturn addedPeaks;\n\t\t\n\t},\n\t\n\t//Check for any diagonal peak that match this cross peak\n\tcheckCrossPeaks: function(output, properties, signal, updateProperties) {\n\t\tvar hits = 0, i=0, shift=signal.shiftX*4;\n\t\tvar crossPeaksX = [],crossPeaksY = [];\n\t\tvar cross;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tcross = output[i];\n\t\t\tif(properties[i][0]!==0){\n\t\t\t\tif(Math.abs(cross.shiftX-signal.shiftX)<this.diagonalError){\n\t\t\t\t\thits++;\n\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\tcrossPeaksX.push(i);\n\t\t\t\t\tshift+=cross.shiftX;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(Math.abs(cross.shiftY-signal.shiftY)<this.diagonalError){\n\t\t\t\t\t\thits++;\n\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\tcrossPeaksY.push(i);\n\t\t\t\t\t\tshift+=cross.shiftY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Update found crossPeaks and diagonal peak\n\t\tshift/=(crossPeaksX.length+crossPeaksY.length+4);\n\t\tif(crossPeaksX.length>0){\n\t\t\tfor( i=crossPeaksX.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksX[i]].shiftX=shift;\n\t\t\t}\n\t\t}\n\t\tif(crossPeaksY.length>0){\n\t\t\tfor( i=crossPeaksY.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksY[i]].shiftY=shift;\n\t\t\t}\n\t\t}\n\t\tsignal.shiftX=shift;\n\t\tsignal.shiftY=shift;\n\t\treturn hits;\n\t},\n\n\texist: function(output, properties, signal, type, symmetricSearch) {\n\t\tfor(var i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]==type){\n\t\t\t\tif(this.distanceTo(signal, output[i], symmetricSearch)<this.tolerance){\n\t\t\t\t\tif(!symmetricSearch){\n\t\t\t\t\t\tvar shiftX=(output[i].shiftX+signal.shiftX)/2.0;\n\t\t\t\t\t\tvar shiftY=(output[i].shiftY+signal.shiftY)/2.0;\n\t\t\t\t\t\toutput[i].shiftX=shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftY;\n\t\t\t\t\t\tsignal.shiftX=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tvar shiftX=signal.shiftX;\n\t\t\t\t\t\tvar shiftY=output[i].shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\t/**\n\t * We try to determine the position of each signal within the spectrum matrix.\n\t * Peaks could be of 3 types: upper diagonal, diagonal or under diagonal 1,0,-1\n\t * respectively.\n\t * @param Signals\n\t * @return A matrix containing the properties of each signal\n\t */\n\tinitializeProperties: function(signals){\n\t\tvar signalsProperties = new Array(signals.length);\n\t\tfor(var i=signals.length-1;i>=0;i--){\n\t\t\tsignalsProperties[i]=[0,0];\n\t\t\t//We check if it is a diagonal peak\n\t\t\tif(Math.abs(signals[i].shiftX-signals[i].shiftY)<=this.diagonalError){\n\t\t\t\tsignalsProperties[i][1]=1;\n\t\t\t\t//We adjust the x and y value to be symmetric.\n\t\t\t\t//In general chemical shift in the direct dimension is better than in the other one,\n\t\t\t\t//so, we believe more to the shiftX than to the shiftY.\n\t\t\t\tvar shift = (signals[i].shiftX*2+signals[i].shiftY)/3.0;\n\t\t\t\tsignals[i].shiftX=shift;\n\t\t\t\tsignals[i].shiftY=shift;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(signals[i].shiftX-signals[i].shiftY>0)\n\t\t\t\t\tsignalsProperties[i][0]=1;\n\t\t\t\telse\n\t\t\t\t\tsignalsProperties[i][0]=-1;\n\t\t\t}\n\t\t}\n\t\treturn signalsProperties;\n\t},\n\t\n\t/**\n\t * This function calculates the distance between 2 nmr signals . If toImage is true, \n\t * it will interchange x by y in the distance calculation for the second signal.\n\t */\n\tdistanceTo: function(a, b, toImage){\n\t\tif(!toImage){\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftX, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftY, 2));\n\t\t}\n\t\telse{\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftY, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftX, 2));\n\t\t}\n\t},\n\n\t/**\n\t * This function maps the corresponding 2D signals to the given set of 1D signals\n\t */\n\talignDimensions:function(signals2D,references){\n\t\t//For each reference dimension\n\t\tfor(var i=0;i<references.length;i++){\n\t\t\tvar ref = references[i];\n\t\t\tif(ref)\n\t\t\t\tthis._alignSingleDimension(signals2D,ref);\n\t\t}\n\t},\n\n\t_alignSingleDimension: function(signals2D, references){\n\t\t//For each 2D signal\n\t\tvar center = 0, width = 0, i, j;\n\t\tfor(i=0;i<signals2D.length;i++){\n\t\t\tvar signal2D = signals2D[i];\n\t\t\t//For each reference 1D signal\n\t\t\tfor(j=0;j<references.length;j++){\n\t\t\t\tcenter = (references[j].startX+references[j].stopX)/2;\n\t\t\t\twidth = Math.abs(references[j].startX-references[j].stopX)/2;\n\t\t\t\tif(signal2D.nucleusX==references[j].nucleus){\n\t\t\t\t\t//The 2D peak overlaps with the 1D signal\n\t\t\t\t\tif(Math.abs(signal2D.shiftX-center)<=width){\n\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif(signal2D.nucleusY==references[j].nucleus){\n\t\t\t\t\tif(Math.abs(signal2D.shiftY-center)<=width){\n\t\t\t\t\t\tsignal2D._highlight.push(references[j]._highlight[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n};\n\nmodule.exports = PeakOptimizer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakOptimizer.js\n ** module id = 52\n ** module chunks = 0\n **/","'use strict';\n\nvar SimpleClustering={\n\n\t/*This function returns the cluster list for a given connectivity matrix.\n\t*To improve the performance, the connectivity(square and symmetric) matrix \n\t*is given as a single vector containing  the upper diagonal of the matrix\n\t*Note: This algorithm is O(n*n) complexity. I wonder if there is something better. \n\t*acastillo\n\t*/\n\tfullClusterGenerator:function(conn){\n\t\tvar nRows = Math.sqrt(conn.length*2+0.25)-0.5;\n\t\t//console.log(\"nRows: \"+nRows+\" - \"+conn.length);\n\t\tvar clusterList = [];\n\t\tvar available = new Array(nRows);\n\t\tvar remaining = nRows, i=0;\n\t\tvar cluster = [];\n\t\t//Mark all the elements as available\n\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\tavailable[i]=1;\n\t\t}\n\t\tvar nextAv=-1;\n\t\tvar toInclude = [];\n\t\twhile(remaining>0){\n\t\t\tif(toInclude.length===0){\n\t\t\t\t//If there is no more elements to include. Start a new cluster\n\t\t\t\tcluster = new Array(nRows);\n\t\t\t\tfor(i=nRows-1;i>=0;i--)\n\t\t\t\t\tcluster[i]=0;\n\t\t\t\tclusterList.push(cluster);\n\t\t    \tfor(nextAv = nRows-1;available[nextAv]==0;nextAv--){};\n\t\t    }\n\t\t    else{\n\t\t    \tnextAv=toInclude.splice(0,1);\n\t\t    }\n\t\t    //console.log(\"row: \"+nextAv);\n\t\t    cluster[nextAv]=1;\n\t\t    available[nextAv]=0;\n\t\t    remaining--;\n\t\t    //Copy the next available row\n\t\t    var row = new Array(nRows);\n\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\tvar c=Math.max(nextAv,i);\n\t\t\t\tvar r=Math.min(nextAv,i);\n\t\t\t\t//The element in the conn matrix\n\t\t\t\t//console.log(\"index: \"+r*(2*nRows-r-1)/2+c)\n\t\t\t\trow[i]=conn[r*(2*nRows-r-1)/2+c];\n\t\t\t\t//console.log(\"col: \"+i+\":\"+row[i]);\n\t\t\t\t//There is new elements to include in this row?\n\t\t\t\t//Then, include it to the current cluster\n\t\t\t\tif(row[i]==1&&available[i]==1&&cluster[i]==0){\n\t\t\t\t\ttoInclude.push(i);\n\t\t\t\t\tcluster[i]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn clusterList;\n\t}\n}\n\nmodule.exports = SimpleClustering;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/SimpleClustering.js\n ** module id = 53\n ** module chunks = 0\n **/","'use strict';\n/**\n * This library formats a set of nmr1D signals to the ACS format.\n * Created by acastillo on 3/11/15. p\n */\nvar ACS=ACS || {};\nACS.formater =(function() {\n    var acsString=\"\";\n    var parenthesis=\"\";\n    var spectro=\"\";\n    var rangeForMultiplet=false;\n\n    function fromNMRSignal1D2ACS(spectrum, options){\n        acsString=\"\";\n        parenthesis=\"\";\n        spectro=\"\";\n        var solvent = null;\n        if(options&&options.solvent)\n            solvent = options.solvent;\n        //options.rangeForMultiplet=false;\n        if(options&&options.rangeForMultiplet!=undefined)\n            rangeForMultiplet = options.rangeForMultiplet;\n\n        if(options&&options.ascending){\n            spectrum.sort(function(a,b){\n                return b.delta1- a.delta1\n            });\n        }\n        else{\n            spectrum.sort(function(a,b){\n                return a.delta1- b.delta1\n            });\n        }\n\n        //console.log(\"Range1: \"+options.rangeForMultiplet);\n\n        spectrum.type=\"NMR SPEC\";\n        if (spectrum[0][\"nucleus\"]==\"1H\") {\n            formatAcs_default(spectrum, false, 2, 1, solvent);\n        } else if (spectrum[0][\"nucleus\"]==\"13C\") {\n            formatAcs_default(spectrum, false, 1, 0, solvent);\n        }\n\n        if (acsString.length>0) acsString+=\".\";\n\n        return acsString;\n    }\n\n    /*function formatAcs_default_IR(spectra, ascending, decimalValue, smw) {\n     appendSeparator();\n     appendSpectroInformation(spectra);\n     if (spectra[\"peakLabels\"]) {\n     var numberPeakLabels=spectra[\"peakLabels\"].length;\n     var minIntensity= 9999999;\n     var maxIntensity=-9999999;\n     for (var i=0; i<numberPeakLabels; i++) {\n     if (spectra[\"peakLabels\"][i].intensity<minIntensity) minIntensity=spectra[\"peakLabels\"][i].intensity;\n     if (spectra[\"peakLabels\"][i].intensity>maxIntensity) maxIntensity=spectra[\"peakLabels\"][i].intensity;\n     }\n     for (var i=0; i<numberPeakLabels; i++) {\n     if (ascending) {\n     var peakLabel=spectra[\"peakLabels\"][i];\n     } else {\n     var peakLabel=spectra[\"peakLabels\"][numberPeakLabels-i-1];\n     }\n     if (peakLabel) {\n     appendSeparator();\n     appendValue(peakLabel,decimalValue);\n     if (smw) { // we need to add small / medium / strong\n     if (peakLabel.intensity<((maxIntensity-minIntensity)/3+minIntensity)) acsString+=\" (s)\";\n     else if (peakLabel.intensity>(maxIntensity-(maxIntensity-minIntensity)/3)) acsString+=\" (w)\";\n     else acsString+=\" (m)\";\n     }\n     }\n     }\n     }\n     }*/\n\n    function formatAcs_default(spectra, ascending, decimalValue, decimalJ, solvent) {\n        appendSeparator();\n        appendSpectroInformation(spectra, solvent);\n        var numberSmartPeakLabels=spectra.length;\n        //console.log(\"SP \"+spectra);\n        //console.log(\"# \"+numberSmartPeakLabels);\n        for (var i=0; i<numberSmartPeakLabels; i++) {\n            if (ascending) {\n                var signal=spectra[i];\n            } else {\n                var signal=spectra[numberSmartPeakLabels-i-1];\n            }\n            if (signal) {\n                //console.log(\"X2X\"+i+JSON.stringify(signal));\n                appendSeparator();\n                appendDelta(signal,decimalValue);\n                appendParenthesis(signal,decimalJ);\n                //console.log(\"S2S\"+i);\n            }\n        }\n    }\n\n    function appendSpectroInformation(spectrum, solvent) {\n        if (spectrum.type==\"NMR SPEC\") {\n            if (spectrum[0].nucleus) {\n                acsString+=formatNucleus(spectrum[0].nucleus);\n            }\n            acsString+=\" NMR\";\n            if ((solvent) || (spectrum[0].observe)) {\n                acsString+=\" (\";\n                if (spectrum[0].observe) {\n                    acsString+=(spectrum[0].observe*1).toFixed(0)+\" MHz\";\n                    if (solvent) acsString+=\", \";\n                }\n                if (solvent) {\n                    acsString+=formatMF(solvent);\n                }\n                acsString+=\")\";\n            }\n            acsString+=\" δ \";\n        } else if (spectrum.type==\"IR\") {\n            acsString+=\" IR \";\n        } else if (spectrum.type==\"MASS\") {\n            acsString+=\" MASS \";\n        }\n    }\n\n    function appendDelta(line, nbDecimal) {\n        //console.log(\"appendDelta1\");\n        var startX = 0,stopX=0,delta1=0;\n        if(line.startX){\n            if((typeof line.startX)==\"string\"){\n                startX=parseFloat(line.startX);\n            }\n            else\n                startX=line.startX;\n        }\n        if(line.stopX){\n            if((typeof line.stopX)==\"string\"){\n                stopX=parseFloat(line.stopX);\n            }\n            else\n                stopX=line.stopX;\n        }\n        if(line.delta1){\n            if((typeof line.delta1)==\"string\"){\n                delta1=parseFloat(line.delta1);\n            }\n            else\n                delta1=line.delta1;\n\n        }\n        //console.log(\"Range2: \"+rangeForMultiplet+\" \"+line.multiplicity);\n        if (line.asymmetric===true||(line.multiplicity==\"m\"&&rangeForMultiplet===true)) {//Is it massive??\n            if (line.startX&&line.stopX) {\n                if (startX<stopX) {\n                    acsString+=startX.toFixed(nbDecimal)+\"-\"+stopX.toFixed(nbDecimal);\n                } else {\n                    acsString+=stopX.toFixed(nbDecimal)+\"-\"+startX.toFixed(nbDecimal);\n                }\n            } else {\n                if(line.delta1)\n                    acsString+=delta1.toFixed(nbDecimal);\n            }\n        }\n        else{\n            if(line.delta1)\n                acsString+=delta1.toFixed(nbDecimal);\n            else{\n                if(line.startX&&line.stopX){\n                    acsString+=((startX+stopX)/2).toFixed(nbDecimal);\n                }\n            }\n        }\n    }\n\n    function appendValue(line, nbDecimal) {\n        if (line.xPosition) {\n            acsString+=line.xPosition.toFixed(nbDecimal);\n        }\n    }\n\n    function appendParenthesis(line, nbDecimal) {\n        //console.log(\"appendParenthesis1\");\n        // need to add assignment - coupling - integration\n        parenthesis=\"\";\n        appendMultiplicity(line);\n        appendIntegration(line);\n        appendCoupling(line,nbDecimal);\n        appendAssignment(line);\n\n\n        if (parenthesis.length>0) {\n            acsString+=\" (\"+parenthesis+\")\";\n        }\n        //console.log(\"appendParenthesis2\");\n    }\n\n    function appendIntegration(line) {\n        if (line.pubIntegration) {\n            appendParenthesisSeparator();\n            parenthesis+=line.pubIntegration;\n        } else if (line.integralData) {\n            appendParenthesisSeparator();\n            parenthesis+=line.integralData.value.toFixed(0)+\" H\";\n        }\n    }\n\n    function appendAssignment(line) {\n        if (line.pubAssignment) {\n            appendParenthesisSeparator();\n            parenthesis+=formatAssignment(line.pubAssignment);\n        }\n        else{\n            if (line.assignment) {\n                appendParenthesisSeparator();\n                parenthesis+=formatAssignment(line.assignment);\n            }\n        }\n    }\n\n    function appendMultiplicity(line) {\n        if (line.pubMultiplicity) {\n            appendParenthesisSeparator();\n            parenthesis+=line.pubMultiplicity;\n        } else if (line.multiplicity) {\n            appendParenthesisSeparator();\n            parenthesis+=line.multiplicity;\n        }\n    }\n\n    function appendCoupling(line, nbDecimal) {\n        if (line.nmrJs) {\n            var j=\"<i>J</i> = \";\n            for (var i=0; i<line.nmrJs.length; i++) {\n                var coupling=line.nmrJs[i].coupling;\n                if (j.length>11) j+=\", \";\n                j+=coupling.toFixed(nbDecimal);\n            }\n            appendParenthesisSeparator();\n            parenthesis+=j+\" Hz\";\n        }\n\n    }\n\n    function formatAssignment(assignment) {\n        assignment=assignment.replace(/([0-9])/g,\"<sub>$1</sub>\");\n        assignment=assignment.replace(/\\\"([^\\\"]*)\\\"/g,\"<i>$1</i>\");\n        return assignment;\n    }\n\n    function formatMF(mf) {\n        mf=mf.replace(/([0-9])/g,\"<sub>$1</sub>\");\n        return mf;\n    }\n\n    function formatNucleus(nucleus) {\n        nucleus=nucleus.replace(/([0-9])/g,\"<sup>$1</sup>\");\n        return nucleus;\n    }\n\n    function appendSeparator() {\n        if ((acsString.length>0) && (! acsString.match(/ $/))) {\n            acsString+=\", \";\n        }\n    }\n\n    function appendParenthesisSeparator() {\n        if ((parenthesis.length>0) && (! parenthesis.match(\", $\"))) parenthesis+=\", \";\n    }\n\n    function fromACS2NMRSignal1D(acsString){\n        return JSON.parse(SDAPI.AcsParserAsJSONString(acsString));\n    }\n\n    return {\n        toACS:fromNMRSignal1D2ACS,\n        toNMRSignal:fromACS2NMRSignal1D\n    }\n})();\n\nmodule.exports=ACS;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/AcsParser.js\n ** module id = 54\n ** module chunks = 0\n **/"],"sourceRoot":""}