{"version":3,"sources":["webpack:///spectra-data/webpack/universalModuleDefinition","webpack:///spectra-data/spectra-data.min.js","webpack:///spectra-data/webpack/bootstrap e2fce5ddd2eefc356596","webpack:///spectra-data/./src/index.js","webpack:///spectra-data/./src/SD.js","webpack:///spectra-data/./~/ml-stat/array.js","webpack:///spectra-data/./~/jcampconverter/src/index.js","webpack:///spectra-data/./src/NMR.js","webpack:///spectra-data/./src/PeakPicking.js","webpack:///spectra-data/./src/JAnalyzer.js","webpack:///spectra-data/./~/ml-gsd/src/index.js","webpack:///spectra-data/./~/ml-gsd/src/optimize.js","webpack:///spectra-data/./~/ml-gsd/~/ml-optimize-lorentzian/src/index.js","webpack:///spectra-data/./~/ml-gsd/~/ml-optimize-lorentzian/~/ml-curve-fitting/src/index.js","webpack:///spectra-data/./~/ml-gsd/~/ml-optimize-lorentzian/~/ml-curve-fitting/src/LM.js","webpack:///spectra-data/./~/ml-matrix/src/index.js","webpack:///spectra-data/./~/ml-matrix/src/matrix.js","webpack:///spectra-data/./~/ml-matrix/src/decompositions.js","webpack:///spectra-data/./~/ml-matrix/src/dc/svd.js","webpack:///spectra-data/./~/ml-matrix/src/dc/util.js","webpack:///spectra-data/./~/ml-matrix/src/dc/evd.js","webpack:///spectra-data/./~/ml-matrix/src/dc/lu.js","webpack:///spectra-data/./~/ml-matrix/src/dc/qr.js","webpack:///spectra-data/./~/ml-matrix/src/dc/cholesky.js","webpack:///spectra-data/./~/ml-gsd/~/ml-optimize-lorentzian/~/ml-curve-fitting/src/algebra.js","webpack:///spectra-data/./~/ml-gsd/src/gsd.js","webpack:///spectra-data/./src/NMR2D.js","webpack:///spectra-data/./src/PeakPicking2D.js","webpack:///spectra-data/./~/ml-fft/src/index.js","webpack:///spectra-data/./~/ml-fft/src/FFTUtils.js","webpack:///spectra-data/./~/ml-fft/src/fftlib.js","webpack:///spectra-data/./src/PeakOptimizer.js","webpack:///spectra-data/./src/SimpleClustering.js","webpack:///spectra-data/./src/AcsParser.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","SD","NMR","NMR2D","ACS","JAnalyzer","sd","activeElement","DATACLASS_XY","DATACLASS_PEAK","TYPE_NMR_SPECTRUM","TYPE_NMR_FID","TYPE_IR","TYPE_RAMAN","TYPE_UV","TYPE_MASS","TYPE_HPLC","TYPE_GC","TYPE_CD","TYPE_2DNMR_SPECTRUM","TYPE_2DNMR_FID","TYPE_XY_DEC","TYPE_XY_INC","TYPE_IV","StatArray","JcampConverter","fromJcamp","jcamp","options","xy","spectrum","convert","prototype","setActiveElement","nactiveSpectrum","getActiveElement","getXUnits","getSpectrum","xUnit","getYUnits","yUnit","getNbPoints","i","getSpectrumData","y","length","getFirstX","spectra","firstX","getLastX","lastX","getFirstY","firstY","getLastY","lastY","setDataClass","dataClass","isPeaktable","isXYdata","isDataClassPeak","isDataClassXY","setDataType","dataType","getDataType","data","getNbSubSpectra","getXData","x","getYData","getX","getY","getXYData","getTitle","title","setTitle","newTitle","getMinY","min","getMaxY","max","getMinMaxY","minMax","getNoiseLevel","mean","stddev","averageDeviations","Array","Math","abs","sort","getNMRPeakThreshold","getNucleus","arrayPointToUnits","doublePoint","unitsToArrayPoint","inValue","round","getDeltaX","midPoint","currentArrayPoint","upperLimit","lowerLimit","floor","setMinMax","factor","setMin","currentMin","setMax","YShift","value","shift","globalShift","fillWith","from","to","tmp","start","end","suppressZone","splice","simplePeakPicking","parameters","getMaxPeak","getSpectraDataY","index","getSpectraDataX","getParamDouble","name","defvalue","info","getParamString","getParamInt","putParam","getArea","i0","ie","area","getVector","nPoints","direction","reversed","winPoints","xwin","ywin","is2D","values","Infinity","l","sum","geometricMean","pow","logGeometricMean","lnsum","log","grandMean","means","samples","n","truncatedMean","percent","inPlace","slice","k","contraHarmonicMean","order","r1","r2","standardDeviation","unbiased","sqrt","variance","standardError","median","alreadySorted","half","quartiles","quart","q1","ceil","q2","q3","theMean","theVariance","pooledStandardDeviation","pooledVariance","vari","mode","itemCount","itemArray","count","indexOf","maxValue","maxIndex","covariance","vector1","vector2","mean1","mean2","cov","skewness","s2","s3","dev","m2","m3","g","a","b","kurtosis","s4","m4","v","entropy","eps","weightedMean","weights","weightedStandardDeviation","weightedVariance","z","w","center","result","standardize","standardDev","cumulativeSum","array","getConverter","convertToFloatArray","stringArray","floatArray","parseFloat","keepRecordsRegExp","ldr","dataLabel","dataValue","ldrs","ii","position","endLine","infos","Date","ntuples","profiling","logs","push","action","time","split","replace","substring","trim","toUpperCase","xIndex","yIndex","firstVariable","secondVariable","symbol","first","last","vardim","nbPoints","xFactor","yFactor","units","datatable","deltaX","twoD","observeFrequency","xType","indirectFrequency","shiftOffsetNum","shiftOffsetVal","varname","vartype","varform","yType","page","pageValue","pageSymbol","pageSymbolIndex","unit","prepareSpectrum","match","parseXYData","parsePeakTable","isMSField","convertMSFieldToLabel","Object","keys","newNtuples","key","j","add2D","keepSpectra","toLowerCase","addGCMS","newData","GC_MS_FIELDS","existingGCMSFields","label","gcms","gc","ms","jj","currentData","lines","removeCommentRegExp","peakTableSplitRegExp","lastDif","ascii","currentX","currentY","xyDataSplitRegExp","DEBUG","firstPoint","expectedCurrentX","charCodeAt","String","fromCharCode","dup","convertTo3DZ","noise","minZ","maxZ","ySize","xSize","minX","maxX","minY","maxY","zData","contourLines","generateContourLines","pAx","pAy","pBx","pBy","lineZValue","contourLevels","nbLevels","povarHeight","Float32Array","isOver","nbSubSpectra","nbPovars","x0","xN","dx","y0","yN","dy","level","contourLevel","side","exp","zValue","iSubSpectra","povar","segments","input","useWorker","postToWorker","worker","createWorker","Promise","resolve","stamp","now","random","stamps","postMessage","workerURL","URL","createObjectURL","Blob","toString","type","Worker","revokeObjectURL","addEventListener","event","output","PeakPicking","create","constructor","dim","getSolventName","observeFrequencyX","nucleus","addNoise","SNR","addSpectraDatas","spec2","factor1","factor2","autoscale","autoBaseline","fourierTransform","postFourierTransform","ph1corr","zeroFilling","nPointsX","nPointsY","haarWhittakerBaselineCorrection","waveletScale","whittakerLambda","whittakerBaselineCorrection","ranges","brukerSpectra","apodization","functionName","lineBroadening","echoAntiechoFilter","SNVFilter","powerFilter","power","console","warn","logarithmFilter","base","correlationFilter","func","phaseCorrection","phi0","phi1","automaticPhase","useBrukerPhase","nmrPeakDetection","peakPicking","toJcamp","impurities","maxJ","nH","clean","realTop","thresholdFactor","compile","integral","nHi","noiseLevel","peakList","gsd","minMaxRatio","broadRatio","smoothY","optimize","clearList","signals","detectSignals","integralData","compilePattern","maskPattern","multiplicity","peaksO","peaks","peakR","intensity","width","peaksComp","nbPeaks","peaks1","newSignals","updateIntegrals","delta1","threshold","sampling","rowWise","ic","more","nL","updateLimits","signal","nbPeaks0","toRemove","sumIntegral","sumObserved","integralType","cs","frequency","signal1D","prevPeak","rangeX","spectrumIntegral","startX","stopX","pattern","observe","peak","labelPeaks","solvent","column","nImpurities","nPeaks","scores","diff","score","gamma","impurityID","prevImp","maxIntensity","prevIndex","candidates","impuritiesPeaks","updateScore","mul","indexMin","thisJ1","thisJ2","thisJ3","thisJ4","createSignals","pascalTriangle","patterns","symRatio","maxErrorIter1","maxErrorIter2","symRank","symmetrizeChoiseBest","asymmetric","P1","n2","maxFlagged","Jc","normalize","validPattern","getRanges","JSON","stringify","heights","getNextCombination","numbering","nFlagged","u","jSum","idealPattern","updateSignal","mask2","abstractPattern","tol","cont","newNmrJs","coupling","nmrJs","hsum","lng","ok","currentIndex","active","maxError","iteration","symRank1","symmetrize","tmpPeaks","tmpMask","mask","symRank2","avg","ratio","avgWidth","left","right","middle","error","heightSum","diffL","diffR","chemicalShift","isNaN","symFactor","weight","newSumHeights","dxi","parse","norm","norm2","sampleFunction","lastIndex","sampleX","sampleY","sign","delta","mid","stop","optimizePeaks","fnType","groups","groupPeaks","group","limits","opts","optPeaks","Opt","optimizeGaussianSum","optimizeLorentzianSum","optPeak","optimizeSingleGaussian","optimizeSingleLorentzian","sumOfLorentzians","t","p2","cols","rows","Matrix","zeros","singleLorentzian","columns","singleGaussian","xy2","parseData","y_data","dot","consts","dt","p_init","p_min","p_max","p_fit","LM","math","nbSeries","SizeException","algebra","y_dat","dp","tensor_parameter","Npar","Npnt","p_old","y_old","X2","X2_old","J","length_t","length_y_dat","multiply","transpose","prnt","MaxIter","epsilon_1","epsilon_4","lambda_0","lambda_UP_fac","lambda_DN_fac","Update_Type","dp_array","idx","Nfit","weight_sq","ones","dotMultiply","lm_matx","JtWJ","JtWdy","Chi_sq","y_hat","lambda","diag","nu","h","solve","add","eye","hidx","p_try","delta_y","subtract","X2_try","JtWdy_th","alpha","inv","mat","rho","dX2","apply","lm_FD_J","ps","clone","del","y1","dotDivide","lm_Broyden_J","h_t","div","Jt","Decompositions","DC","arr","nRows","nColumns","matrix","newInstance","isArray","TypeError","RangeError","defineProperty","writable","__proto__","Asplice","Aconcat","concat","from1DArray","newRows","newColumns","rowVector","columnVector","vector","empty","fill","rand","indices","stack","arg1","isMatrix","arguments","r","current","setRow","expand","expansion","checkMatrix","klass","get","checkRowIndex","checkColumnIndex","checkDimensions","otherMatrix","callback","to2DArray","to1DArray","copy","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","set","rowIndex","columnIndex","neg","mulS","addS","addM","sub","subS","subM","mulM","divS","divM","getRow","getRowVector","removeRow","addRow","swapRows","row1","row2","temp","getColumn","getColumnVector","setColumn","removeColumn","addColumn","swapColumns","column1","column2","row","checkRowVector","checkColumnVector","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","size","prod","other","mmul","Bcolj","Arowi","s","sortRows","compareFunction","sortColumns","subMatrix","startRow","endRow","startColumn","endColumn","newMatrix","subMatrixRow","X","subMatrixColumn","trace","inverse","leftHandSide","rightHandSide","LuDecomposition","QrDecomposition","SingularValueDecomposition","EigenvalueDecomposition","CholeskyDecomposition","SVD","EVD","LU","QR","CHO","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","swapped","aux","ks","f","sn","kase","scale","sp","spm1","epm1","sk","ek","U","V","e","work","nct","nrt","hypotenuse","pp","iter",{"end":{"file":"spectra-data.min.js","comments_before":[],"nlb":false,"endpos":219538,"endcol":18,"endline":6318,"pos":219529,"col":9,"line":6318,"value":"condition","type":"name","_comments_dumped":true},"start":{"file":"spectra-data.min.js","comments_before":[],"nlb":false,"endpos":219538,"endcol":18,"endline":6318,"pos":219529,"col":9,"line":6318,"value":"condition","type":"name","_comments_dumped":true},"name":"condition"},"condition","rank","diagonal","leftSingularVectors","rightSingularVectors","diagonalMatrix","Y","scols","Ls","VL","vrows","urows","VLU","solveForDiagonal","vcols","ucols","Error","d","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c2","c3","el1","tst1","low","high","nn","ra","sa","vr","vi","notlast","cdivres","exshift","q","cdiv","xr","xi","yr","yi","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","LUrowi","LUcolj","kmax","lu","pivotVector","pivotSign","isSingular","col","determinant","lowerTriangularFactor","upperTriangularFactor","pivotPermutationVector","qr","rdiag","nrm","Rdiag","isFullRank","orthogonalFactor","dimension","positiveDefinite","Lrowj","Lrowk","L","leftTriangularFactor","B","A","dotPow","undefined","maxCriteria","dY","ddY","maxDdy","minddY","intervals","lastMax","lastMin","broadMask","realTopDetection","possible","inter","linewidth","height","broadLines","Number","MAX_VALUE","maxI","isPartOf","fitted","beta","currentPoint","log10","PeakPicking2D","isHomoNuclear","observeFrequencyY","getZUnits","getDeltaY","nmrPeakDetection2D","findPeaks2D","_highlight","lib","PeakOptimizer","SimpleClustering","FFTUtils","smallFilter","getLoGnStdDevNMR","spectraData","isHomonuclear","iCol","nStdDev","convolutedSpectrum","convoluteWithLoG","peaksMC1","findPeaks2DLoG","peaksMax1","findPeaks2DMax","enhanceSymmetry","createSignals2D","inputSpectrum","nCols","ftSpectrum","fft2DArray","ftFilterData","iRow","ir","ftRows","ftCols","convolute2DI","ifft2DArray","bitmask","nbDetectedPoints","iStart","extractArea","rowI","colI","peakListMax","tmpIndex","peakPoints","scanBitmask","nValues","xAverage","yAverage","zSum","NEGATIVE_INFINITY","pt","minmax","newPeak","tolerance","bf1","bf2","connectivity","clusters","fullClusterGenerator","iCluster","nucleusX","nucleusY","resolutionX","resolutionY","peaks2D","shiftX","shiftY","sumZ","jPeak","FFT","ft","tempTransform","init","tmpCols","re","im","bt","finalTransform","tmpRows","indexB","iRow0","iRow1","iRow2","iRow3","fft1d","reconstructTwoRealFFT","realTransform1","realTransform2","rm","rp","ip","ftSignal","ftFilter","convolute","kernel","version","release","date","_n","_bitrev","_cstb","core","_initArray","_makeBitReversalTable","_makeCosSinTable","fft","ifft1d","bt1d","fft2d","tre","tim","x1","x2","y2","ifft2d","ik","wr","wi","n4","Uint32Array","Float64Array","_paddingZero","n8","n2p4","sin","PI","dc","ds","apis","ifft","diagonalError","toleranceX","toleranceY","properties","initializeProperties","hits","exist","checkCrossPeaks","completeMissingIfNeeded","toReturn","thisSignal","thisProp","addedPeaks","newSignal","tmpProp","diagX","diagY","updateProperties","cross","crossPeaksX","crossPeaksY","symmetricSearch","distanceTo","signalsProperties","toImage","conn","clusterList","available","remaining","cluster","nextAv","toInclude","formater","fromNMRSignal1D2ACS","acsString","parenthesis","spectro","rangeForMultiplet","formatAcs_default","ascending","decimalValue","decimalJ","appendSeparator","appendSpectroInformation","numberSmartPeakLabels","appendDelta","appendParenthesis","formatNucleus","toFixed","formatMF","line","nbDecimal","appendMultiplicity","appendIntegration","appendCoupling","appendAssignment","pubIntegration","appendParenthesisSeparator","pubAssignment","formatAssignment","assignment","pubMultiplicity","mf","fromACS2NMRSignal1D","SDAPI","AcsParserAsJSONString","toACS","toNMRSignal"],"mappings":"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","file":"spectra-data.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectraData\"] = factory();\n\telse\n\t\troot[\"spectraData\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"spectraData\"] = factory();\n\telse\n\t\troot[\"spectraData\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\texports.SD = __webpack_require__(1);\n\texports.NMR = __webpack_require__(4);\n\texports.NMR2D = __webpack_require__(23);\n\texports.ACS = __webpack_require__(30);\n\texports.JAnalyzer = __webpack_require__(6);\n\t//exports.SD2 = require('/SD2');\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// small note on the best way to define array\n\t// http://jsperf.com/lp-array-and-loops/2\n\t\n\tvar StatArray = __webpack_require__(2);\n\tvar JcampConverter=__webpack_require__(3);\n\t\n\tfunction SD(sd) {\n\t    this.sd=sd;\n\t    this.activeElement=0;\n\t\n\t    this.DATACLASS_XY = 1;\n\t    this.DATACLASS_PEAK = 2;\n\t\n\t    this.TYPE_NMR_SPECTRUM = 'NMR Spectrum';\n\t    this.TYPE_NMR_FID = 'NMR FID';\n\t    this.TYPE_IR = 'IR';\n\t    this.TYPE_RAMAN = 'RAMAN';\n\t    this.TYPE_UV = 'UV';\n\t    this.TYPE_MASS = 'MASS';\n\t    this.TYPE_HPLC = 'HPLC';\n\t    this.TYPE_GC = 'GC';\n\t    this.TYPE_CD = 'CD';\n\t    this.TYPE_2DNMR_SPECTRUM = 'nD NMR SPECTRUM';\n\t    this.TYPE_2DNMR_FID = 'nD NMR FID';\n\t    this.TYPE_XY_DEC = 'XY DEC';\n\t    this.TYPE_XY_INC= 'XY INC';\n\t    this.TYPE_IV = 'IV';\n\t}\n\t\n\tSD.fromJcamp = function(jcamp, options) {\n\t    options = options ||{};\n\t    if(typeof options.xy ===\"undefined\")\n\t        options.xy=true;\n\t\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new SD(spectrum);\n\t}\n\t\n\t\n\t/**\n\t * @function setActiveElement(nactiveSpectrum);\n\t * This function sets the nactiveSpectrum sub-spectrum as active\n\t * \n\t */\n\tSD.prototype.setActiveElement = function(nactiveSpectrum){\n\t    this.activeElement=nactiveSpectrum;\n\t}\n\t\n\t/**\n\t * @function getActiveElement();\n\t * This function returns the index of the active sub-spectrum.\n\t */\n\tSD.prototype.getActiveElement = function(){\n\t    return this.activeElement;\n\t}\n\t/**\n\t * This function returns the units of the independent dimension.\n\t * @returns {xUnit|*|M.xUnit}\n\t */\n\tSD.prototype.getXUnits = function(){\n\t    return this.getSpectrum().xUnit;\n\t}\n\t\n\t/**\n\t * * This function returns the units of the dependent variable.\n\t * @returns {yUnit|*|M.yUnit}\n\t */\n\tSD.prototype.getYUnits = function(){\n\t    return this.getSpectrum().yUnit;\n\t}\n\t\n\t/**\n\t*   Returns the number of points in the current spectrum\n\t*/\n\tSD.prototype.getNbPoints=function(i){\n\t    return this.getSpectrumData(i).y.length;\n\t}\n\t\n\t/**\n\t * Return the first value of the direct dimension\n\t */\n\tSD.prototype.getFirstX=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].firstX;\n\t}\n\t\n\t/**\n\t * Return the last value of the direct dimension\n\t */\n\tSD.prototype.getLastX=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].lastX;\n\t}\n\t\n\t/**\n\t * Return the first value of the direct dimension\n\t */\n\tSD.prototype.getFirstY=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].firstY;\n\t}\n\t\n\t/**\n\t * Return the first value of the direct dimension\n\t */\n\tSD.prototype.getLastY = function(i){\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].lastY;\n\t}\n\t\n\tSD.prototype.setDataClass = function(dataClass){\n\t    if(dataClass==this.DATACLASS_PEAK) {\n\t        this.getSpectrum().isPeaktable = true;\n\t        this.getSpectrum().isXYdata = false;\n\t    }\n\t    if(dataClass==this.DATACLASS_XY){\n\t        this.getSpectrum().isXYdata = true;\n\t        this.getSpectrum().isPeaktable = false;\n\t    }\n\t}\n\t\n\t/**\n\t * @function isDataClassPeak();\n\t * Is this a PEAKTABLE spectrum?\n\t */\n\tSD.prototype.isDataClassPeak = function(){\n\t    if(this.getSpectrum().isPeaktable)\n\t        return  this.getSpectrum().isPeaktable;\n\t    return false;\n\t}\n\t\n\t/**\n\t * @function isDataClassXY();\n\t * Is this a XY spectrum?\n\t */\n\tSD.prototype.isDataClassXY = function(){\n\t    if(this.getSpectrum().isXYdata)\n\t        return  this.getSpectrum().isXYdata;\n\t    return false\n\t}\n\t\n\tSD.prototype.setDataType = function(dataType){\n\t    this.getSpectrum().dataType=dataType;\n\t}\n\t\n\tSD.prototype.getDataType = function(){\n\t    return this.getSpectrum().dataType;\n\t}\n\t\n\t/**\n\t* Return the i-th sub-spectra in the current spectrum\n\t*/\n\tSD.prototype.getSpectrumData=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i].data[0];\n\t}\n\t\n\t/**\n\t * Return the i-th sub-spectra in the current spectrum\n\t */\n\tSD.prototype.getSpectrum=function(i) {\n\t    i=i||this.activeElement;\n\t    return this.sd.spectra[i];\n\t}\n\t\n\t/**\n\t * Returns the number of sub-spectra in this object\n\t */\n\tSD.prototype.getNbSubSpectra=function(){\n\t    return this.sd.spectra.length;\n\t}\n\t\n\t\n\t/**\n\t *   Returns an array containing the x values of the spectrum\n\t */\n\tSD.prototype.getXData=function(i){\n\t    return this.getSpectrumData(i).x;\n\t}\n\t\n\t/**\n\t * @function getYData();\n\t * This function returns a double array containing the values of the intensity for the current sub-spectrum.\n\t */\n\tSD.prototype.getYData=function(i){\n\t    return this.getSpectrumData(i).y;\n\t}\n\t\n\tSD.prototype.getX=function(i){\n\t    return this.getXData()[i];\n\t}\n\t\n\tSD.prototype.getY=function(i){\n\t    return this.getYData()[i];\n\t}\n\t\n\t/**\n\t * @function getXYData();\n\t * To get a 2 dimensional array with the x and y of this spectraData( Only for 1D spectra).\n\t * Returns a double[2][nbPoints] where the first row contains the x values and the second row the y values.\n\t */\n\tSD.prototype.getXYData=function(i){\n\t    return [this.getXData(i),this.getYData(i)];\n\t}\n\t\n\tSD.prototype.getTitle=function(i) {\n\t    return this.getSpectrum(i).title;\n\t}\n\t\n\t/**\n\t * @function setTitle(newTitle);\n\t * To set the title of this spectraData.\n\t * @param newTitle The new title\n\t */\n\tSD.prototype.setTitle=function(newTitle,i) {\n\t    this.getSpectrum(i).title=newTitle;\n\t}\n\t\n\t/**\n\t * @function getMinY(i)\n\t * This function returns the minimal value of Y\n\t */\n\tSD.prototype.getMinY=function(i) {\n\t    return  StatArray.min(this.getYData(i));\n\t}\n\t\n\t/**\n\t * @function getMaxY(i)\n\t * This function returns the maximal value of Y\n\t */\n\tSD.prototype.getMaxY=function(i) {\n\t    return  StatArray.max(this.getYData(i));\n\t}\n\t\n\t/**\n\t * @function getMinMax(i)\n\t */\n\tSD.prototype.getMinMaxY=function(i) {\n\t    return  StatArray.minMax(this.getYData(i));\n\t}\n\t\n\t\n\t/**\n\t* Get the noise threshold level of the current spectrum. It uses median instead of the mean\n\t*/\n\tSD.prototype.getNoiseLevel=function(){\n\t    var mean = 0,stddev=0;\n\t    var y = this.getYData();\n\t    var length = this.getNbPoints(),i=0;\n\t    for(i = 0; i < length; i++){\n\t        mean+=y[i];\n\t    }\n\t    mean/=this.getNbPoints();\n\t    var averageDeviations = new Array(length);\n\t    for (i = 0; i < length; i++)\n\t        averageDeviations[i] = Math.abs(y[i] - mean);\n\t    averageDeviations.sort();\n\t    if (length % 2 == 1) {\n\t        stddev = averageDeviations[(length-1)/2] / 0.6745;\n\t    } else {\n\t        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n\t    }\n\t\n\t    return stddev*this.getNMRPeakThreshold(this.getNucleus(1));\n\t}\n\t\n\t\n\t/**\n\t* Return the xValue for the given index\n\t*/\n\tSD.prototype.arrayPointToUnits=function(doublePoint){\n\t    return (this.getFirstX() - (doublePoint* (this.getFirstX() - this.getLastX()) / (this.getNbPoints()-1)));\n\t}\n\t\n\t/**\n\t * Returns the index-value for the data array corresponding to a X-value in\n\t * units for the element of spectraData to which it is linked (spectraNb).\n\t * This method makes use of spectraData.getFirstX(), spectraData.getLastX()\n\t * and spectraData.getNbPoints() to derive the return value if it of data class XY\n\t * It performs a binary search if the spectrum is a peak table\n\t *\n\t * @param inValue\n\t *            (value in Units to be converted)\n\t * @return an integer representing the index value of the inValue\n\t */\n\tSD.prototype.unitsToArrayPoint=function(inValue){\n\t    if (this.isDataClassXY()) {\n\t        return Math.round((this.getFirstX() - inValue) * (-1.0 / this.getDeltaX()));\n\t    } else if (this.isDataClassPeak())\n\t    {\n\t        var currentArrayPoint = 0,upperLimit=this.getNbPoints()-1, lowerLimit=0, midPoint;\n\t        //If inverted scale\n\t        if(this.getFirstX()>this.getLastX()){\n\t            upperLimit=0;\n\t            lowerLimit=this.getNbPoints()-1;\n\t\n\t            if(inValue>this.getFirstX())\n\t                return this.getNbPoints();\n\t            if(inValue<this.getLastX())\n\t                return -1;\n\t        }\n\t        else{\n\t            if(inValue<this.getFirstX())\n\t                return -1;\n\t            if(inValue>this.getLastX())\n\t                return this.getNbPoints();\n\t        }\n\t\n\t        while (Math.abs(upperLimit-lowerLimit) > 1)\n\t        {\n\t            midPoint=Math.round(Math.floor((upperLimit+lowerLimit)/2));\n\t            //x=this.getX(midPoint);\n\t            if(this.getX(midPoint)==inValue)\n\t                return midPoint;\n\t            if(this.getX(midPoint)>inValue)\n\t                upperLimit=midPoint;\n\t            else\n\t                lowerLimit=midPoint;\n\t        }\n\t        currentArrayPoint=lowerLimit;\n\t        if(Math.abs(this.getX(lowerLimit)-inValue)>Math.abs(this.getX(upperLimit)-inValue))\n\t            currentArrayPoint=upperLimit;\n\t        return currentArrayPoint;\n\t    } else {\n\t        return 0;\n\t    }\n\t}\n\t\n\t\n\t\n\t/**\n\t* Returns the separation between 2 consecutive points in the spectra domain\n\t*/\n\tSD.prototype.getDeltaX=function(){\n\t    return (this.getLastX()-this.getFirstX()) / (this.getNbPoints()-1);\n\t}\n\t\n\t/**\n\t * @function setMinMax(min,max)\n\t * This function scales the values of Y between the min and max parameters\n\t * @param min   Minimum desired value for Y\n\t * @param max   Maximum desired value for Y\n\t */\n\tSD.prototype.setMinMax=function(min,max) {\n\t    var y = this.getYData();\n\t    var minMax = StatArray.minMax(y);\n\t    var factor = (max - min)/(minMax.max-minMax.min);\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]=(y[i]-minMax.min)*factor+min;\n\t    }\n\t}\n\t\n\t/**\n\t * @function setMin(min)\n\t * This function scales the values of Y to fit the min parameter\n\t * @param min   Minimum desired value for Y\n\t */\n\tSD.prototype.setMin=function(min) {\n\t    var y = this.getYData();\n\t    var currentMin = StatArray.min(y);\n\t    var factor = min/currentMin;\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]*=factor;\n\t    }\n\t}\n\t\n\t/**\n\t * @function setMax(max)\n\t * This function scales the values of Y to fit the max parameter\n\t * @param max   Maximum desired value for Y\n\t */\n\tSD.prototype.setMax=function(max) {\n\t    var y = this.getYData();\n\t    var currentMin = StatArray.max(y);\n\t    var factor = max/currentMin;\n\t    for(var i=0;i< y.length;i++){\n\t        y[i]*=factor;\n\t    }\n\t}\n\t\n\t/**\n\t * @function YShift(value)\n\t * This function shifts the values of Y\n\t * @param value Distance of the shift\n\t */\n\tSD.prototype.YShift=function(value) {\n\t    var y = this.getSpectrumData().y;\n\t    var length = this.getNbPoints(),i=0;\n\t    for(i=0;i<length;i++){\n\t        y[i]+=value;\n\t    }\n\t    this.getSpectrum().firstY+=value;\n\t    this.getSpectrum().lastY+=value;\n\t}\n\t\n\t/**\n\t * @function shift(globalShift)\n\t * This function shift the given spectraData. After this function is applied, all the peaks in the\n\t * spectraData will be found at xi+globalShift\n\t * @param globalShift\n\t */\n\tSD.prototype.shift=function(globalShift) {\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        var x = this.getSpectrumData().x;\n\t        var length = this.getNbPoints(),i=0;\n\t        for(i=0;i<length;i++){\n\t            x[i]+=globalShift;\n\t        }\n\t\n\t        this.getSpectrum().firstX+=globalShift;\n\t        this.getSpectrum().lastX+=globalShift;\n\t    }\n\t\n\t}\n\t\n\t/**\n\t * @function fillWith(from, to, value)\n\t * This function fills a zone of the spectrum with the given value.\n\t * @param from\n\t * @param to\n\t * @param fillWith\n\t */\n\tSD.prototype.fillWith=function(from, to, value) {\n\t    var tmp, start, end, x, y;\n\t    if(from > to) {\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t    }\n\t\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        x = this.getXData();\n\t        y = this.getYData();\n\t        start = this.unitsToArrayPoint(from);\n\t        end = this.unitsToArrayPoint(to);\n\t        if(start > end){\n\t            tmp = start;\n\t            start = end;\n\t            end = tmp;\n\t        }\n\t        if(start<0)\n\t            start=0;\n\t        if(end>=this.getNbPoints)\n\t            end=this.getNbPoints-1;\n\t        for(i=start;i<=end;i++){\n\t                y[i]=value;\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * @function suppressZone(from, to)\n\t * This function suppress a zone from the given spectraData within the given x range.\n\t * Returns a spectraData of type PEAKDATA without peaks in the given region\n\t * @param from\n\t * @param to\n\t */\n\tSD.prototype.suppressZone=function(from, to) {\n\t    var tmp, start, end, x, y;\n\t    if(from > to) {\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t    }\n\t\n\t    for(var i=0;i<this.getNbSubSpectra();i++){\n\t        this.setActiveElement(i);\n\t        x = this.getXData();\n\t        y = this.getYData();\n\t        start = this.unitsToArrayPoint(from);\n\t        end = this.unitsToArrayPoint(to);\n\t        if(start > end){\n\t            tmp = start;\n\t            start = end;\n\t            end = tmp;\n\t        }\n\t        if(start<0)\n\t            start=0;\n\t        if(end>=this.getNbPoints)\n\t            end=this.getNbPoints-1;\n\t        for(i=end;i>=start;i--){\n\t            y.splice(i,1);\n\t            x.splice(i,1);\n\t        }\n\t    }\n\t    this.setDataClass(this.DATACLASS_PEAK);\n\t}\n\t\n\t\n\t/**\n\t * @function peakPicking(parameters)\n\t * This function performs a simple peak detection in a spectraData. The parameters that can be specified are:\n\t * Returns a two dimensional array of double specifying [x,y] of the detected peaks.\n\t * @option from:    Lower limit.\n\t * @option to:      Upper limit.\n\t * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n\t * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n\t * @option resolution: The maximum resolution of the spectrum for considering peaks.\n\t * @option yInverted: Is it a Y inverted spectrum?(like an IR spectrum)\n\t * @option smooth: A function for smoothing the spectraData before the detection. If your are dealing with\n\t * experimental spectra, smoothing will make the algorithm less prune to false positives.\n\t */\n\tSD.prototype.simplePeakPicking=function(parameters) {\n\t    //@TODO implements this filter\n\t}\n\t\n\t/**\n\t * @function getMaxPeak();\n\t * Get the maximum peak\n\t */\n\tSD.prototype.getMaxPeak = function(){\n\t    var y = this.getSpectraDataY();\n\t    var max=y[0], index=0;\n\t    for(var i=0;i< y.length;i++){\n\t        if(max<y[i]){\n\t            max = y[i];\n\t            index=i;\n\t        }\n\t    }\n\t    return [this.getSpectraDataX()[index],max];\n\t}\n\t\n\t/**\n\t * @function getParamDouble(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t */\n\tSD.prototype.getParamDouble = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value;\n\t}\n\t\n\t/**\n\t * @function getParamString(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t */\n\tSD.prototype.getParamString = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value+\"\";\n\t}\n\t\n\t/**\n\t * @function getParamInt(name, defvalue);\n\t * Get the value of the parameter\n\t * @param  name The parameter name\n\t * @param  defvalue The default value\n\t */\n\tSD.prototype.getParamInt = function(name, defvalue){\n\t    var value = this.sd.info[name];\n\t    if(!value)\n\t        value = defvalue;\n\t    return value;\n\t}\n\t\n\t/**\n\t * Return the y elements of the current spectrum\n\t * @returns {*}\n\t */\n\t\n\tSD.prototype.getSpectraDataX = function(){\n\t    return this.getYData();\n\t}\n\t\n\t/**\n\t * Return the x elements of the current spectrum\n\t * @returns {*}\n\t */\n\tSD.prototype.getSpectraDataX = function(){\n\t    return this.getXData();\n\t}\n\t\n\t/**\n\t * Set a new parameter to this spectrum\n\t * @param name\n\t * @param value\n\t */\n\tSD.prototype.putParam = function(name, value){\n\t    this.sd.info[name]=value;\n\t}\n\t\n\t/**\n\t * This function returns the area under the spectrum in the given window\n\t */\n\tSD.prototype.getArea = function(from, to){\n\t    var i0 = this.unitsToArrayPoint(from);\n\t    var ie = this.unitsToArrayPoint(to);\n\t    var area = 0;\n\t    if(i0>ie){\n\t        var tmp = i0;\n\t        i0 = ie;\n\t        ie = tmp;\n\t    }\n\t    i0=i0<0?0:i0;\n\t    ie=ie>=this.getNbPoints()?this.getNbPoints()-1:ie;\n\t    for(var i=i0;i<ie;i++){\n\t        area+= this.getY(i);\n\t    }\n\t    return area*Math.abs(this.getDeltaX());\n\t},\n\t\n\t/**\n\t * Returns a equally spaced vector within the given window.\n\t * @param from\n\t * @param to\n\t * @param nPoints\n\t * @returns {*}\n\t */\n\tSD.prototype.getVector = function(from, to, nPoints){\n\t    var x = this.getSpectraDataX();\n\t    var y = this.getSpectraDataY();\n\t    var result = [];\n\t    var start = 0, end = x.length- 1,direction=1;\n\t    var reversed = false;\n\t\n\t    if(x[0]>x[1]){\n\t        direction = -1;\n\t        start= x.length-1;\n\t        end = 0;\n\t    }\n\t\n\t    if(from > to){\n\t        var tmp = from;\n\t        from = to;\n\t        to = tmp;\n\t        reversed = true;\n\t    }\n\t\n\t    if(x[end]>from||x[start]>to)\n\t        return [];\n\t\n\t    while(x[start]<from){start+=direction;}\n\t\n\t    if(x[end]>to){\n\t        var end = start;\n\t        while(x[end]<to){end+=direction;}\n\t    }\n\t    var winPoints = Math.abs(end-start)+1;\n\t    var xwin = new Array(winPoints), ywin = new Array(winPoints);\n\t    var index = 0;\n\t    if(direction==-1)\n\t        index=winPoints-1;\n\t    var i=start-direction;\n\t    do{\n\t        i+=direction;\n\t        xwin[index]=x[i];\n\t        ywin[index]=y[i];\n\t        index+=direction;\n\t    }while(i!=end);\n\t\n\t    return [xwin,ywin];\n\t}\n\t\n\t/**\n\t * @function is2D();\n\t * Is it a 2D spectrum?\n\t */\n\tSD.prototype.is2D = function(){\n\t    return false;\n\t}\n\t\n\t\n\tmodule.exports = SD;\n\t\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\t\n\tfunction max(values) {\n\t    var max = -Infinity, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return max;\n\t}\n\t\n\tfunction min(values) {\n\t    var min = Infinity, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t    }\n\t    return min;\n\t}\n\t\n\tfunction minMax(values) {\n\t    var min = Infinity,\n\t        max = -Infinity,\n\t        l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return {\n\t        min: min,\n\t        max: max\n\t    };\n\t}\n\t\n\tfunction mean(values) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i];\n\t    return sum / l;\n\t}\n\t\n\tfunction geometricMean(values) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum *= values[i];\n\t    return Math.pow(sum, 1 / l);\n\t}\n\t\n\tfunction logGeometricMean(values) {\n\t    var lnsum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        lnsum += Math.log(values[i]);\n\t    return lnsum / l;\n\t}\n\t\n\tfunction grandMean(means, samples) {\n\t    var sum = 0, n = 0, l = means.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += samples[i] * means[i];\n\t        n += samples[i];\n\t    }\n\t    return sum / n;\n\t}\n\t\n\tfunction truncatedMean(values, percent, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    values = inPlace ? values : values.slice();\n\t    values.sort();\n\t\n\t    var l = values.length;\n\t    var k = Math.floor(l * percent);\n\t\n\t    var sum = 0;\n\t    for (var i = k; i < l - k; i++)\n\t        sum += values[i];\n\t\n\t    return sum / (l - 2 * k);\n\t}\n\t\n\tfunction contraHarmonicMean(values, order) {\n\t    if (typeof(order) === 'undefined') order = 1;\n\t    var r1 = 0, r2 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        r1 += Math.pow(values[i], order + 1);\n\t        r2 += Math.pow(values[i], order);\n\t    }\n\t    return r1 / r2;\n\t}\n\t\n\tfunction standardDeviation(values, unbiased) {\n\t    return Math.sqrt(variance(values, unbiased));\n\t}\n\t\n\tfunction standardError(values) {\n\t    return standardDeviation(values) / Math.sqrt(values.length);\n\t}\n\t\n\tfunction median(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort();\n\t    }\n\t\n\t    var l = values.length;\n\t    var half = Math.floor(l / 2);\n\t    if (l % 2 === 0)\n\t        return (values[half - 1] + values[half]) * 0.5;\n\t    return values[half];\n\t}\n\t\n\tfunction quartiles(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort();\n\t    }\n\t\n\t    var quart = values.length / 4;\n\t    var q1 = values[Math.ceil(quart) - 1];\n\t    var q2 = median(values, true);\n\t    var q3 = values[Math.ceil(quart * 3) - 1];\n\t\n\t    return {q1: q1, q2: q2, q3: q3};\n\t}\n\t\n\tfunction variance(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = mean(values);\n\t    var theVariance = 0, l = values.length;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var x = values[i] - theMean;\n\t        theVariance += x * x;\n\t    }\n\t\n\t    if (unbiased)\n\t        return theVariance / (l - 1);\n\t    else\n\t        return theVariance / l;\n\t}\n\t\n\tfunction pooledStandardDeviation(samples, unbiased) {\n\t    return Math.sqrt(pooledVariance(samples, unbiased));\n\t}\n\t\n\tfunction pooledVariance(samples, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var sum = 0;\n\t    var length = 0, l = samples.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var values = samples[i];\n\t        var vari = variance(values);\n\t\n\t        sum += (values.length - 1) * vari;\n\t\n\t        if (unbiased)\n\t            length += values.length - 1;\n\t        else\n\t            length += values.length;\n\t    }\n\t    return sum / length;\n\t}\n\t\n\tfunction mode(values) {\n\t    var l = values.length,\n\t        itemCount = new Array(l),\n\t        i;\n\t    for (i = 0; i < l; i++) {\n\t        itemCount[i] = 0;\n\t    }\n\t    var itemArray = new Array(l);\n\t    var count = 0;\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var index = itemArray.indexOf(values[i]);\n\t        if (index >= 0)\n\t            itemCount[index]++;\n\t        else {\n\t            itemArray[count] = values[i];\n\t            itemCount[count] = 1;\n\t            count++;\n\t        }\n\t    }\n\t\n\t    var maxValue = 0, maxIndex = 0;\n\t    for (i = 0; i < count; i++) {\n\t        if (itemCount[i] > maxValue) {\n\t            maxValue = itemCount[i];\n\t            maxIndex = i;\n\t        }\n\t    }\n\t\n\t    return itemArray[maxIndex];\n\t}\n\t\n\tfunction covariance(vector1, vector2, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var mean1 = mean(vector1);\n\t    var mean2 = mean(vector2);\n\t\n\t    if (vector1.length !== vector2.length)\n\t        throw \"Vectors do not have the same dimensions\";\n\t\n\t    var cov = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var x = vector1[i] - mean1;\n\t        var y = vector2[i] - mean2;\n\t        cov += x * y;\n\t    }\n\t\n\t    if (unbiased)\n\t        return cov / (l - 1);\n\t    else\n\t        return cov / l;\n\t}\n\t\n\tfunction skewness(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = mean(values);\n\t\n\t    var s2 = 0, s3 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s3 += dev * dev * dev;\n\t    }\n\t    var m2 = s2 / l;\n\t    var m3 = s3 / l;\n\t\n\t    var g = m3 / (Math.pow(m2, 3 / 2.0));\n\t    if (unbiased) {\n\t        var a = Math.sqrt(l * (l - 1));\n\t        var b = l - 2;\n\t        return (a / b) * g;\n\t    }\n\t    else {\n\t        return g;\n\t    }\n\t}\n\t\n\tfunction kurtosis(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = mean(values);\n\t    var n = values.length, s2 = 0, s4 = 0;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s4 += dev * dev * dev * dev;\n\t    }\n\t    var m2 = s2 / n;\n\t    var m4 = s4 / n;\n\t\n\t    if (unbiased) {\n\t        var v = s2 / (n - 1);\n\t        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t        var b = s4 / (v * v);\n\t        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t\n\t        return a * b - 3 * c;\n\t    }\n\t    else {\n\t        return m4 / (m2 * m2) - 3;\n\t    }\n\t}\n\t\n\tfunction entropy(values, eps) {\n\t    if (typeof(eps) === 'undefined') eps = 0;\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * Math.log(values[i] + eps);\n\t    return -sum;\n\t}\n\t\n\tfunction weightedMean(values, weights) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * weights[i];\n\t    return sum;\n\t}\n\t\n\tfunction weightedStandardDeviation(values, weights) {\n\t    return Math.sqrt(weightedVariance(values, weights));\n\t}\n\t\n\tfunction weightedVariance(values, weights) {\n\t    var theMean = weightedMean(values, weights);\n\t    var vari = 0, l = values.length;\n\t    var a = 0, b = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var z = values[i] - theMean;\n\t        var w = weights[i];\n\t\n\t        vari += w * (z * z);\n\t        b += w;\n\t        a += w * w;\n\t    }\n\t\n\t    return vari * (b / (b * b - a));\n\t}\n\t\n\tfunction center(values, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    var result = values;\n\t    if (!inPlace)\n\t        result = values.slice();\n\t\n\t    var theMean = mean(result), l = result.length;\n\t    for (var i = 0; i < l; i++)\n\t        result[i] -= theMean;\n\t}\n\t\n\tfunction standardize(values, standardDev, inPlace) {\n\t    if (typeof(standardDev) === 'undefined') standardDev = standardDeviation(values);\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t    var l = values.length;\n\t    var result = inPlace ? values : new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        result[i] = values[i] / standardDev;\n\t    return result;\n\t}\n\t\n\tfunction cumulativeSum(array) {\n\t    var l = array.length;\n\t    var result = new Array(l);\n\t    result[0] = array[0];\n\t    for (var i = 1; i < l; i++)\n\t        result[i] = result[i - 1] + array[i];\n\t    return result;\n\t}\n\t\n\tmodule.exports = {\n\t    min: min,\n\t    max: max,\n\t    minMax: minMax,\n\t    mean: mean,\n\t    geometricMean: geometricMean,\n\t    logGeometricMean: logGeometricMean,\n\t    grandMean: grandMean,\n\t    truncatedMean: truncatedMean,\n\t    contraHarmonicMean: contraHarmonicMean,\n\t    standardDeviation: standardDeviation,\n\t    standardError: standardError,\n\t    median: median,\n\t    quartiles: quartiles,\n\t    variance: variance,\n\t    pooledStandardDeviation: pooledStandardDeviation,\n\t    pooledVariance: pooledVariance,\n\t    mode: mode,\n\t    covariance: covariance,\n\t    skewness: skewness,\n\t    kurtosis: kurtosis,\n\t    entropy: entropy,\n\t    weightedMean: weightedMean,\n\t    weightedStandardDeviation: weightedStandardDeviation,\n\t    weightedVariance: weightedVariance,\n\t    center: center,\n\t    standardize: standardize,\n\t    cumulativeSum: cumulativeSum\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction getConverter() {\n\t\n\t    // the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\n\t    var xyDataSplitRegExp = /[,\\t \\+-]*(?=[^\\d,\\t \\.])|[ \\t]+(?=[\\d+\\.-])/;\n\t    var removeCommentRegExp = /\\$\\$.*/;\n\t    var peakTableSplitRegExp = /[,\\t ]+/;\n\t    var DEBUG = false;\n\t\n\t    var GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\t\n\t    function convertToFloatArray(stringArray) {\n\t        var l = stringArray.length;\n\t        var floatArray = new Array(l);\n\t        for (var i = 0; i < l; i++) {\n\t            floatArray[i] = parseFloat(stringArray[i]);\n\t        }\n\t        return floatArray;\n\t    }\n\t\n\t    /*\n\t     options.keepSpectra: keep the original spectra for a 2D\n\t     options.xy: true // create x / y array instead of a 1D array\n\t     options.keepRecordsRegExp: which fields do we keep\n\t     */\n\t\n\t    function convert(jcamp, options) {\n\t        options = options || {};\n\t\n\t        var keepRecordsRegExp=/^[A-Z]+$/;\n\t        if (options.keepRecordsRegExp) keepRecordsRegExp=options.keepRecordsRegExp;\n\t\n\t        var start = new Date();\n\t\n\t        var ntuples = {},\n\t            ldr,\n\t            dataLabel,\n\t            dataValue,\n\t            ldrs,\n\t            i, ii, position, endLine, infos;\n\t\n\t        var result = {};\n\t        result.profiling = [];\n\t        result.logs = [];\n\t        var spectra = [];\n\t        result.spectra = spectra;\n\t        result.info = {};\n\t        var spectrum = {};\n\t\n\t        if (!(typeof jcamp === 'string')) return result;\n\t        // console.time('start');\n\t\n\t        if (result.profiling) result.profiling.push({action: 'Before split to LDRS', time: new Date() - start});\n\t\n\t        ldrs = jcamp.split(/[\\r\\n]+##/);\n\t\n\t        if (result.profiling) result.profiling.push({action: 'Split to LDRS', time: new Date() - start});\n\t\n\t        if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\t\n\t        for (i = 0, ii = ldrs.length; i < ii; i++) {\n\t            ldr = ldrs[i];\n\t            // This is a new LDR\n\t            position = ldr.indexOf('=');\n\t            if (position > 0) {\n\t                dataLabel = ldr.substring(0, position);\n\t                dataValue = ldr.substring(position + 1).trim();\n\t            } else {\n\t                dataLabel = ldr;\n\t                dataValue = '';\n\t            }\n\t            dataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\t\n\t            if (dataLabel === 'DATATABLE') {\n\t                endLine = dataValue.indexOf('\\n');\n\t                if (endLine === -1) endLine = dataValue.indexOf('\\r');\n\t                if (endLine > 0) {\n\t                    var xIndex = -1;\n\t                    var yIndex = -1;\n\t                    // ##DATA TABLE= (X++(I..I)), XYDATA\n\t                    // We need to find the variables\n\t\n\t                    infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n\t                    if (infos[0].indexOf('++') > 0) {\n\t                        var firstVariable = infos[0].replace(/.*\\(([a-zA-Z0-9]+)\\+\\+.*/, '$1');\n\t                        var secondVariable = infos[0].replace(/.*\\.\\.([a-zA-Z0-9]+).*/, '$1');\n\t                        xIndex = ntuples.symbol.indexOf(firstVariable);\n\t                        yIndex = ntuples.symbol.indexOf(secondVariable);\n\t                    }\n\t\n\t                    if (xIndex === -1) xIndex = 0;\n\t                    if (yIndex === -1) yIndex = 0;\n\t\n\t                    if (ntuples.first) {\n\t                        if (ntuples.first.length > xIndex) spectrum.firstX = ntuples.first[xIndex];\n\t                        if (ntuples.first.length > yIndex) spectrum.firstY = ntuples.first[yIndex];\n\t                    }\n\t                    if (ntuples.last) {\n\t                        if (ntuples.last.length > xIndex) spectrum.lastX = ntuples.last[xIndex];\n\t                        if (ntuples.last.length > yIndex) spectrum.lastY = ntuples.last[yIndex];\n\t                    }\n\t                    if (ntuples.vardim && ntuples.vardim.length > xIndex) {\n\t                        spectrum.nbPoints = ntuples.vardim[xIndex];\n\t                    }\n\t                    if (ntuples.factor) {\n\t                        if (ntuples.factor.length > xIndex) spectrum.xFactor = ntuples.factor[xIndex];\n\t                        if (ntuples.factor.length > yIndex) spectrum.yFactor = ntuples.factor[yIndex];\n\t                    }\n\t                    if (ntuples.units) {\n\t                        if (ntuples.units.length > xIndex) spectrum.xUnit = ntuples.units[xIndex];\n\t                        if (ntuples.units.length > yIndex) spectrum.yUnit = ntuples.units[yIndex];\n\t                    }\n\t                    spectrum.datatable = infos[0];\n\t                    if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n\t                        dataLabel = 'PEAKTABLE';\n\t                    } else if (infos[1] && (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)) {\n\t                        dataLabel = 'XYDATA';\n\t                        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n\t                    }\n\t                }\n\t            }\n\t\n\t\n\t            if (dataLabel === 'TITLE') {\n\t                spectrum.title = dataValue;\n\t            } else if (dataLabel === 'DATATYPE') {\n\t                spectrum.dataType = dataValue;\n\t                if (dataValue.indexOf('nD') > -1) {\n\t                    result.twoD = true;\n\t                }\n\t            } else if (dataLabel === 'XUNITS') {\n\t                spectrum.xUnit = dataValue;\n\t            } else if (dataLabel === 'YUNITS') {\n\t                spectrum.yUnit = dataValue;\n\t            } else if (dataLabel === 'FIRSTX') {\n\t                spectrum.firstX = parseFloat(dataValue);\n\t            } else if (dataLabel === 'LASTX') {\n\t                spectrum.lastX = parseFloat(dataValue);\n\t            } else if (dataLabel === 'FIRSTY') {\n\t                spectrum.firstY = parseFloat(dataValue);\n\t            } else if (dataLabel === 'NPOINTS') {\n\t                spectrum.nbPoints = parseFloat(dataValue);\n\t            } else if (dataLabel === 'XFACTOR') {\n\t                spectrum.xFactor = parseFloat(dataValue);\n\t            } else if (dataLabel === 'YFACTOR') {\n\t                spectrum.yFactor = parseFloat(dataValue);\n\t            } else if (dataLabel === 'DELTAX') {\n\t                spectrum.deltaX = parseFloat(dataValue);\n\t            } else if (dataLabel === '.OBSERVEFREQUENCY' || dataLabel === '$SFO1') {\n\t                if (!spectrum.observeFrequency) spectrum.observeFrequency = parseFloat(dataValue);\n\t            } else if (dataLabel === '.OBSERVENUCLEUS') {\n\t                if (!spectrum.xType) result.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n\t            } else if (dataLabel === '$SFO2') {\n\t                if (!result.indirectFrequency) result.indirectFrequency = parseFloat(dataValue);\n\t\n\t            } else if (dataLabel === '$OFFSET') {   // OFFSET for Bruker spectra\n\t                result.shiftOffsetNum = 0;\n\t                if (!result.shiftOffsetVal)  result.shiftOffsetVal = parseFloat(dataValue);\n\t            } else if (dataLabel === '$REFERENCEPOINT') {   // OFFSET for Varian spectra\n\t\n\t\n\t                // if we activate this part it does not work for ACD specmanager\n\t                //         } else if (dataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n\t                //                 var parts = dataValue.split(/ *, */);\n\t                //                 result.shiftOffsetNum = parseInt(parts[2].trim());\n\t                //                 result.shiftOffsetVal = parseFloat(parts[3].trim());\n\t            } else if (dataLabel === 'VARNAME') {\n\t                ntuples.varname = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'SYMBOL') {\n\t                ntuples.symbol = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'VARTYPE') {\n\t                ntuples.vartype = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'VARFORM') {\n\t                ntuples.varform = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'VARDIM') {\n\t                ntuples.vardim = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'UNITS') {\n\t                ntuples.units = dataValue.split(/[, \\t]{2,}/);\n\t            } else if (dataLabel === 'FACTOR') {\n\t                ntuples.factor = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'FIRST') {\n\t                ntuples.first = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'LAST') {\n\t                ntuples.last = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'MIN') {\n\t                ntuples.min = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === 'MAX') {\n\t                ntuples.max = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n\t            } else if (dataLabel === '.NUCLEUS') {\n\t                if (result.twoD) {\n\t                    result.yType = dataValue.split(/[, \\t]{2,}/)[0];\n\t                }\n\t            } else if (dataLabel === 'PAGE') {\n\t                spectrum.page = dataValue.trim();\n\t                spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n\t                spectrum.pageSymbol = spectrum.page.replace(/=.*/, '');\n\t                var pageSymbolIndex = ntuples.symbol.indexOf(spectrum.pageSymbol);\n\t                var unit = '';\n\t                if (ntuples.units && ntuples.units[pageSymbolIndex]) {\n\t                    unit = ntuples.units[pageSymbolIndex];\n\t                }\n\t                if (result.indirectFrequency && unit !== 'PPM') {\n\t                    spectrum.pageValue /= result.indirectFrequency;\n\t                }\n\t            } else if (dataLabel === 'RETENTIONTIME') {\n\t                spectrum.pageValue = parseFloat(dataValue);\n\t            } else if (dataLabel === 'XYDATA') {\n\t                prepareSpectrum(result, spectrum);\n\t                // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n\t                if (dataValue.match(/.*\\+\\+.*/)) {\n\t                    parseXYData(spectrum, dataValue, result);\n\t                } else {\n\t                    parsePeakTable(spectrum, dataValue, result);\n\t                }\n\t                spectra.push(spectrum);\n\t                spectrum = {};\n\t            } else if (dataLabel === 'PEAKTABLE') {\n\t                prepareSpectrum(result, spectrum);\n\t                parsePeakTable(spectrum, dataValue, result);\n\t                spectra.push(spectrum);\n\t                spectrum = {};\n\t            } else if (isMSField(dataLabel)) {\n\t                spectrum[convertMSFieldToLabel(dataLabel)] = dataValue;\n\t            } else if (dataLabel.match(keepRecordsRegExp)) {\n\t                result.info[dataLabel] = dataValue.trim();\n\t            }\n\t        }\n\t\n\t        // Currently disabled\n\t        //    if (options && options.lowRes) addLowRes(spectra,options);\n\t\n\t        if (result.profiling) result.profiling.push({action: 'Finished parsing', time: new Date() - start});\n\t\n\t        if (Object.keys(ntuples).length>0) {\n\t            var newNtuples=[];\n\t            var keys=Object.keys(ntuples);\n\t            for (var i=0; i<keys.length; i++) {\n\t                var key=keys[i];\n\t                var values=ntuples[key];\n\t                for (var j=0; j<values.length; j++) {\n\t                    if (! newNtuples[j]) newNtuples[j]={};\n\t                    newNtuples[j][key]=values[j];\n\t                }\n\t            }\n\t            result.ntuples=newNtuples;\n\t        }\n\t\n\t        if (result.twoD) {\n\t            add2D(result);\n\t            if (result.profiling) result.profiling.push({\n\t                action: 'Finished countour plot calculation',\n\t                time: new Date() - start\n\t            });\n\t            if (!options.keepSpectra) {\n\t                delete result.spectra;\n\t            }\n\t        }\n\t\n\t\n\t        // maybe it is a GC (HPLC) / MS. In this case we add a new format\n\t        if (spectra.length > 1 && (! spectra[0].dataType || spectra[0].dataType.toLowerCase().match(/.*mass./))) {\n\t            addGCMS(result);\n\t            if (result.profiling) result.profiling.push({\n\t                action: 'Finished GCMS calculation',\n\t                time: new Date() - start\n\t            });\n\t        }\n\t\n\t\n\t        if (options.xy) { // the spectraData should not be a oneD array but an object with x and y\n\t            if (spectra.length > 0) {\n\t                for (var i=0; i<spectra.length; i++) {\n\t                    var spectrum=spectra[i];\n\t                    if (spectrum.data.length>0) {\n\t                        for (var j=0; j<spectrum.data.length; j++) {\n\t                            var data=spectrum.data[j];\n\t                            var newData={x:Array(data.length/2), y:Array(data.length/2)};\n\t                            for (var k=0; k<data.length; k=k+2) {\n\t                                newData.x[k/2]=data[k];\n\t                                newData.y[k/2]=data[k+1];\n\t                            }\n\t                            spectrum.data[j]=newData;\n\t                        }\n\t\n\t                    }\n\t\n\t                }\n\t            }\n\t        }\n\t\n\t        if (result.profiling) {\n\t            result.profiling.push({action: 'Total time', time: new Date() - start});\n\t        }\n\t\n\t        //   console.log(result);\n\t        //    console.log(JSON.stringify(spectra));\n\t        return result;\n\t\n\t    }\n\t\n\t\n\t    function convertMSFieldToLabel(value) {\n\t        return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n\t    }\n\t\n\t    function isMSField(dataLabel) {\n\t        for (var i = 0; i < GC_MS_FIELDS.length; i++) {\n\t            if (dataLabel === GC_MS_FIELDS[i]) return true;\n\t        }\n\t        return false;\n\t    }\n\t\n\t    function addGCMS(result) {\n\t        var spectra = result.spectra;\n\t        var existingGCMSFields = [];\n\t        var i;\n\t        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n\t            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n\t            if (spectra[0][label]) {\n\t                existingGCMSFields.push(label);\n\t            }\n\t        }\n\t        if (existingGCMSFields.length===0) return;\n\t        var gcms = {};\n\t        gcms.gc = {};\n\t        gcms.ms = [];\n\t        for (i = 0; i < existingGCMSFields.length; i++) {\n\t            gcms.gc[existingGCMSFields[i]] = [];\n\t        }\n\t        for (i = 0; i < spectra.length; i++) {\n\t            var spectrum = spectra[i];\n\t            for (var j = 0; j < existingGCMSFields.length; j++) {\n\t                gcms.gc[existingGCMSFields[j]].push(spectrum.pageValue);\n\t                gcms.gc[existingGCMSFields[j]].push(parseFloat(spectrum[existingGCMSFields[j]]));\n\t            }\n\t          if (spectrum.data) gcms.ms[i] = spectrum.data[0];\n\t\n\t        }\n\t        result.gcms = gcms;\n\t    }\n\t\n\t    function prepareSpectrum(result, spectrum) {\n\t        if (!spectrum.xFactor) spectrum.xFactor = 1;\n\t        if (!spectrum.yFactor) spectrum.yFactor = 1;\n\t        if (spectrum.observeFrequency) {\n\t            if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n\t                spectrum.xUnit = 'PPM';\n\t                spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n\t                spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n\t                spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n\t                spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n\t            }\n\t        }\n\t        if (result.shiftOffsetVal) {\n\t            var shift = spectrum.firstX - result.shiftOffsetVal;\n\t            spectrum.firstX = spectrum.firstX - shift;\n\t            spectrum.lastX = spectrum.lastX - shift;\n\t        }\n\t    }\n\t\n\t    function parsePeakTable(spectrum, value, result) {\n\t        spectrum.isPeaktable=true;\n\t        var i, ii, j, jj, values;\n\t        var currentData = [];\n\t        spectrum.data = [currentData];\n\t\n\t        // counts for around 20% of the time\n\t        var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\t\n\t        var k = 0;\n\t        for (i = 1, ii = lines.length; i < ii; i++) {\n\t            values = lines[i].trim().replace(removeCommentRegExp, '').split(peakTableSplitRegExp);\n\t            if (values.length % 2 === 0) {\n\t                for (j = 0, jj = values.length; j < jj; j = j + 2) {\n\t                    // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n\t                    currentData[k++] = (parseFloat(values[j]) * spectrum.xFactor);\n\t                    currentData[k++] = (parseFloat(values[j + 1]) * spectrum.yFactor);\n\t                }\n\t            } else {\n\t                result.logs.push('Format error: ' + values);\n\t            }\n\t        }\n\t    }\n\t\n\t    function parseXYData(spectrum, value, result) {\n\t        // we check if deltaX is defined otherwise we calculate it\n\t        if (!spectrum.deltaX) {\n\t            spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n\t        }\n\t\n\t        spectrum.isXYdata=true;\n\t\n\t        var currentData = [];\n\t        spectrum.data = [currentData];\n\t\n\t        var currentX = spectrum.firstX;\n\t        var currentY = spectrum.firstY;\n\t        var lines = value.split(/[\\r\\n]+/);\n\t        var lastDif, values, ascii, expectedY;\n\t        values = [];\n\t        for (var i = 1, ii = lines.length; i < ii; i++) {\n\t            //var previousValues=JSON.parse(JSON.stringify(values));\n\t            values = lines[i].trim().replace(removeCommentRegExp, '').split(xyDataSplitRegExp);\n\t            if (values.length > 0) {\n\t                if (DEBUG) {\n\t                    if (!spectrum.firstPoint) {\n\t                        spectrum.firstPoint = parseFloat(values[0]);\n\t                    }\n\t                    var expectedCurrentX = parseFloat(values[0] - spectrum.firstPoint) * spectrum.xFactor + spectrum.firstX;\n\t                    if ((lastDif || lastDif === 0)) {\n\t                        expectedCurrentX += spectrum.deltaX;\n\t                    }\n\t                    result.logs.push('Checking X value: currentX: ' + currentX + ' - expectedCurrentX: ' + expectedCurrentX);\n\t                }\n\t                for (var j = 1, jj = values.length; j < jj; j++) {\n\t                    if (j === 1 && (lastDif || lastDif === 0)) {\n\t                        lastDif = null; // at the beginning of each line there should be the full value X / Y so the diff is always undefined\n\t                        // we could check if we have the expected Y value\n\t                        ascii = values[j].charCodeAt(0);\n\t\n\t                        if (false) { // this code is just to check the jcamp DIFDUP and the next line repeat of Y value\n\t                            // + - . 0 1 2 3 4 5 6 7 8 9\n\t                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n\t                                expectedY = parseFloat(values[j]);\n\t                            } else\n\t                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n\t                            if ((ascii > 63) && (ascii < 74)) {\n\t                                // we could use parseInt but parseFloat is faster at least in Chrome\n\t                                expectedY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n\t                            } else\n\t                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n\t                            if ((ascii > 96) && (ascii < 106)) {\n\t                                // we could use parseInt but parseFloat is faster at least in Chrome\n\t                                expectedY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n\t                            }\n\t                            if (expectedY !== currentY) {\n\t                                result.logs.push('Y value check error: Found: ' + expectedY + ' - Current: ' + currentY);\n\t                                result.logs.push('Previous values: ' + previousValues.length);\n\t                                result.logs.push(previousValues);\n\t                            }\n\t                        }\n\t                    } else {\n\t                        if (values[j].length > 0) {\n\t                            ascii = values[j].charCodeAt(0);\n\t                            // + - . 0 1 2 3 4 5 6 7 8 9\n\t                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n\t                                lastDif = null;\n\t                                currentY = parseFloat(values[j]);\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n\t                            if ((ascii > 63) && (ascii < 74)) {\n\t                                lastDif = null;\n\t                                currentY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n\t                            if ((ascii > 96) && (ascii < 106)) {\n\t                                lastDif = null;\n\t                                currentY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t\n\t\n\t\n\t                            // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n\t                            if (((ascii > 82) && (ascii < 91)) || (ascii === 115)) {\n\t                                var dup = parseFloat(String.fromCharCode(ascii - 34) + values[j].substring(1)) - 1;\n\t                                if (ascii === 115) {\n\t                                    dup = parseFloat('9' + values[j].substring(1)) - 1;\n\t                                }\n\t                                for (var l = 0; l < dup; l++) {\n\t                                    if (lastDif) {\n\t                                        currentY = currentY + lastDif;\n\t                                    }\n\t                                    currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                    currentX += spectrum.deltaX;\n\t                                }\n\t                            } else\n\t                            // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n\t                            if (ascii === 37) {\n\t                                lastDif = parseFloat('0' + values[j].substring(1));\n\t                                currentY += lastDif;\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else if ((ascii > 73) && (ascii < 83)) {\n\t                                lastDif = parseFloat(String.fromCharCode(ascii - 25) + values[j].substring(1));\n\t                                currentY += lastDif;\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            } else\n\t                            // negative DIF digits j k l m n o p q r (ascii 106-114)\n\t                            if ((ascii > 105) && (ascii < 115)) {\n\t                                lastDif = -parseFloat(String.fromCharCode(ascii - 57) + values[j].substring(1));\n\t                                currentY += lastDif;\n\t                                currentData.push(currentX, currentY * spectrum.yFactor);;\n\t                                currentX += spectrum.deltaX;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t    }\n\t\n\t    function convertTo3DZ(spectra) {\n\t        var noise = 0;\n\t        var minZ = spectra[0].data[0][0];\n\t        var maxZ = minZ;\n\t        var ySize = spectra.length;\n\t        var xSize = spectra[0].data[0].length / 2;\n\t        var z = new Array(ySize);\n\t        for (var i = 0; i < ySize; i++) {\n\t            z[i] = new Array(xSize);\n\t            for (var j = 0; j < xSize; j++) {\n\t                z[i][j] = spectra[i].data[0][j * 2 + 1];\n\t                if (z[i][j] < minZ) minZ = spectra[i].data[0][j * 2 + 1];\n\t                if (z[i][j] > maxZ) maxZ = spectra[i].data[0][j * 2 + 1];\n\t                if (i !== 0 && j !== 0) {\n\t                    noise += Math.abs(z[i][j] - z[i][j - 1]) + Math.abs(z[i][j] - z[i - 1][j]);\n\t                }\n\t            }\n\t        }\n\t        return {\n\t            z: z,\n\t            minX: spectra[0].data[0][0],\n\t            maxX: spectra[0].data[0][spectra[0].data[0].length - 2],\n\t            minY: spectra[0].pageValue,\n\t            maxY: spectra[ySize - 1].pageValue,\n\t            minZ: minZ,\n\t            maxZ: maxZ,\n\t            noise: noise / ((ySize - 1) * (xSize - 1) * 2)\n\t        };\n\t\n\t    }\n\t\n\t    function add2D(result) {\n\t        var zData = convertTo3DZ(result.spectra);\n\t        result.contourLines = generateContourLines(zData);\n\t        delete zData.z;\n\t        result.minMax = zData;\n\t    }\n\t\n\t\n\t    function generateContourLines(zData, options) {\n\t        //console.time('generateContourLines');\n\t        var noise = zData.noise;\n\t        var z = zData.z;\n\t        var contourLevels = [];\n\t        var nbLevels = 7;\n\t        var povarHeight = new Float32Array(4);\n\t        var isOver = [];\n\t        var nbSubSpectra = z.length;\n\t        var nbPovars = z[0].length;\n\t        var pAx, pAy, pBx, pBy;\n\t\n\t        var x0 = zData.minX;\n\t        var xN = zData.maxX;\n\t        var dx = (xN - x0) / (nbPovars - 1);\n\t        var y0 = zData.minY;\n\t        var yN = zData.maxY;\n\t        var dy = (yN - y0) / (nbSubSpectra - 1);\n\t        var minZ = zData.minZ;\n\t        var maxZ = zData.maxZ;\n\t\n\t        //System.out.prvarln('y0 '+y0+' yN '+yN);\n\t        // -------------------------\n\t        // Povars attribution\n\t        //\n\t        // 0----1\n\t        // |  / |\n\t        // | /  |\n\t        // 2----3\n\t        //\n\t        // ---------------------d------\n\t\n\t        var lineZValue;\n\t        for (var level = 0; level < nbLevels * 2; level++) { // multiply by 2 for positif and negatif\n\t            var contourLevel = {};\n\t            contourLevels.push(contourLevel);\n\t            var side = level % 2;\n\t            if (side === 0) {\n\t                lineZValue = (maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) + 5 * noise;\n\t            } else {\n\t                lineZValue = -(maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) - 5 * noise;\n\t            }\n\t            var lines = [];\n\t            contourLevel.zValue = lineZValue;\n\t            contourLevel.lines = lines;\n\t\n\t            if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\t\n\t            for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n\t                for (var povar = 0; povar < nbPovars - 1; povar++) {\n\t                    povarHeight[0] = z[iSubSpectra][povar];\n\t                    povarHeight[1] = z[iSubSpectra][povar + 1];\n\t                    povarHeight[2] = z[(iSubSpectra + 1)][povar];\n\t                    povarHeight[3] = z[(iSubSpectra + 1)][(povar + 1)];\n\t\n\t                    for (var i = 0; i < 4; i++) {\n\t                        isOver[i] = (povarHeight[i] > lineZValue);\n\t                    }\n\t\n\t                    // Example povar0 is over the plane and povar1 and\n\t                    // povar2 are below, we find the varersections and add\n\t                    // the segment\n\t                    if (isOver[0] !== isOver[1] && isOver[0] !== isOver[2]) {\n\t                        pAx = povar + (lineZValue - povarHeight[0]) / (povarHeight[1] - povarHeight[0]);\n\t                        pAy = iSubSpectra;\n\t                        pBx = povar;\n\t                        pBy = iSubSpectra + (lineZValue - povarHeight[0]) / (povarHeight[2] - povarHeight[0]);\n\t                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                    }\n\t                    if (isOver[3] !== isOver[1] && isOver[3] !== isOver[2]) {\n\t                        pAx = povar + 1;\n\t                        pAy = iSubSpectra + 1 - (lineZValue - povarHeight[3]) / (povarHeight[1] - povarHeight[3]);\n\t                        pBx = povar + 1 - (lineZValue - povarHeight[3]) / (povarHeight[2] - povarHeight[3]);\n\t                        pBy = iSubSpectra + 1;\n\t                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                    }\n\t                    // test around the diagonal\n\t                    if (isOver[1] !== isOver[2]) {\n\t                        pAx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n\t                        pAy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n\t                        if (isOver[1] !== isOver[0]) {\n\t                            pBx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[0] - povarHeight[1]);\n\t                            pBy = iSubSpectra;\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                        if (isOver[2] !== isOver[0]) {\n\t                            pBx = povar;\n\t                            pBy = iSubSpectra + 1 - (lineZValue - povarHeight[2]) / (povarHeight[0] - povarHeight[2]);\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                        if (isOver[1] !== isOver[3]) {\n\t                            pBx = povar + 1;\n\t                            pBy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[3] - povarHeight[1]);\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                        if (isOver[2] !== isOver[3]) {\n\t                            pBx = povar + (lineZValue - povarHeight[2]) / (povarHeight[3] - povarHeight[2]);\n\t                            pBy = iSubSpectra + 1;\n\t                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        // console.timeEnd('generateContourLines');\n\t        return {\n\t            minX: zData.minX,\n\t            maxX: zData.maxX,\n\t            minY: zData.minY,\n\t            maxY: zData.maxY,\n\t            segments: contourLevels\n\t        };\n\t        //return contourLevels;\n\t    }\n\t\n\t\n\t    function addLowRes(spectra, options) {\n\t        var spectrum;\n\t        var averageX, averageY;\n\t        var targetNbPoints = options.lowRes;\n\t        var highResData;\n\t        for (var i = 0; i < spectra.length; i++) {\n\t            spectrum = spectra[i];\n\t            // we need to find the current higher resolution\n\t            if (spectrum.data.length > 0) {\n\t                highResData = spectrum.data[0];\n\t                for (var j = 1; j < spectrum.data.length; j++) {\n\t                    if (spectrum.data[j].length > highResData.length) {\n\t                        highResData = spectrum.data[j];\n\t                    }\n\t                }\n\t\n\t                if (targetNbPoints > (highResData.length / 2)) return;\n\t                var i, ii;\n\t                var lowResData = [];\n\t                var modulo = Math.ceil(highResData.length / (targetNbPoints * 2));\n\t                for (i = 0, ii = highResData.length; i < ii; i = i + 2) {\n\t                    if (i % modulo === 0) {\n\t                        lowResData.push(highResData[i], highResData[i + 1])\n\t                    }\n\t                }\n\t                spectrum.data.push(lowResData);\n\t            }\n\t        }\n\t    }\n\t\n\t    return convert;\n\t\n\t}\n\t\n\tvar convert = getConverter();\n\t\n\tfunction JcampConverter(input, options, useWorker) {\n\t    if (typeof options === 'boolean') {\n\t        useWorker = options;\n\t        options = {};\n\t    }\n\t    if (useWorker) {\n\t        return postToWorker(input, options);\n\t    } else {\n\t        return convert(input, options);\n\t    }\n\t}\n\t\n\tvar stamps = {},\n\t    worker;\n\t\n\tfunction postToWorker(input, options) {\n\t    if (!worker) {\n\t        createWorker();\n\t    }\n\t    return new Promise(function (resolve) {\n\t        var stamp = Date.now() + '' + Math.random();\n\t        stamps[stamp] = resolve;\n\t        worker.postMessage({stamp: stamp, input: input, options: options});\n\t    });\n\t}\n\t\n\tfunction createWorker() {\n\t    var workerURL = URL.createObjectURL(new Blob([\n\t        'var getConverter =' + getConverter.toString() + ';var convert = getConverter(); onmessage = function (event) { postMessage({stamp: event.data.stamp, output: convert(event.data.input, event.data.options)}); };'\n\t    ], {type: 'application/javascript'}));\n\t    worker = new Worker(workerURL);\n\t    URL.revokeObjectURL(workerURL);\n\t    worker.addEventListener('message', function (event) {\n\t        var stamp = event.data.stamp;\n\t        if (stamps[stamp]) {\n\t            stamps[stamp](event.data.output);\n\t        }\n\t    });\n\t}\n\t\n\tmodule.exports = {\n\t    convert: JcampConverter\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar SD = __webpack_require__(1);\n\tvar PeakPicking = __webpack_require__(5);\n\tvar JcampConverter=__webpack_require__(3);\n\t\n\tfunction NMR(sd) {\n\t    SD.call(this, sd); // Héritage\n\t}\n\t\n\tNMR.prototype = Object.create(SD.prototype);\n\tNMR.prototype.constructor = NMR;\n\t\n\tNMR.fromJcamp = function(jcamp,options) {\n\t    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new NMR(spectrum);\n\t}\n\t\n\t/**\n\t* Return the observed nucleus \n\t*/\n\tNMR.prototype.getNucleus=function(dim){\n\t    if(!dim||dim==0)\n\t        return this.sd.xType;\n\t    else{\n\t        return \"\";\n\t    }\n\t}\n\t\n\t/**\n\t* Returns the solvent name\n\t*/\n\tNMR.prototype.getSolventName=function(){\n\t    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]||\"\").replace(\"<\",\"\").replace(\">\",\"\");\n\t}\n\t\n\t//Returns the observe frequency in the direct dimension\n\tNMR.prototype.observeFrequencyX=function(){\n\t    return this.sd.spectra[0].observeFrequency;\n\t}\n\t\n\t/**\n\t* Returns the noise factor depending on the nucleus.\n\t*/\n\tNMR.prototype.getNMRPeakThreshold=function(nucleus) {\n\t    if (nucleus == \"1H\")\n\t        return 3.0;\n\t    if (nucleus ==\"13C\")\n\t        return 5.0;\n\t    return 1.0;\n\t}\n\t\n\t\n\t    \n\t/**\n\t * @function addNoise(SNR)\n\t * This function adds white noise to the the given spectraData. The intensity of the noise is \n\t * calculated from the given signal to noise ratio.\n\t * @param SNR Signal to noise ratio\n\t */\n\t NMR.prototype.addNoise=function(SNR) {\n\t     //@TODO Implement addNoise filter\n\t}\n\t\n\t\n\t/**\n\t * @function addSpectraDatas(spec2,factor1,factor2,autoscale )   \n\t *  This filter performs a linear combination of two spectraDatas.\n\t * A=spec1\n\t * B=spec2\n\t * After to apply this filter you will get:\n\t *      A=A*factor1+B*factor2\n\t * if autoscale is set to 'true' then you will obtain:\n\t *  A=A*factor1+B*k*factor2\n\t * Where the k is a factor such that the maximum peak in A is equal to the maximum peak in spectraData2 \n\t * @param spec2 spectraData2\n\t * @param factor1 linear factor for spec1\n\t * @param factor2 linear factor for spec2\n\t * @param autoscale Auto-adjust scales before combine the spectraDatas\n\t * @example spec1 = addSpectraDatas(spec1,spec2,1,-1, false) This subtract spec2 from spec1\n\t*/\n\tNMR.prototype.addSpectraDatas=function(spec2,factor1,factor2,autoscale ) {\n\t    //@TODO Implement addSpectraDatas filter\n\t}\n\t\n\t/**\n\t * @function autoBaseline()\n\t * Automatically corrects the base line of a given spectraData. After this process the spectraData\n\t * should have meaningful integrals.\n\t */\n\tNMR.prototype.autoBaseline=function( ) {\n\t    //@TODO Implement autoBaseline filter\n\t}\n\t\n\t/**\n\t * @function fourierTransform()\n\t * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n\t */\n\tNMR.prototype.fourierTransform=function( ) {\n\t    //@TODO Implement fourierTransform filter\n\t}\n\t\n\t/**\n\t * @function postFourierTransform(ph1corr)\n\t * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained \n\t * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra \n\t * filter could not find the correct number of points to perform a circular shift.\n\t * The actual problem is that not all of the spectra has the necessary parameters for use only one method for \n\t * correcting the problem of the Bruker digital filters.\n\t * @param spectraData A fourier transformed spectraData.\n\t * @param ph1corr Phase 1 correction value in radians.\n\t */\n\tNMR.prototype.postFourierTransform=function(ph1corr) {\n\t    //@TODO Implement postFourierTransform filter\n\t}\n\t\n\t/**\n\t * @function zeroFilling(nPointsX [,nPointsY])\n\t * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one \n\t * could increase artificially the spectral resolution.\n\t * @param nPointsX Number of new zero points in the direct dimension\n\t * @param nPointsY Number of new zero points in the indirect dimension\n\t */\n\tNMR.prototype.zeroFilling=function(nPointsX, nPointsY) {\n\t    //@TODO Implement zeroFilling filter\n\t}\n\t\n\t/**\n\t * @function  haarWhittakerBaselineCorrection(waveletScale,whittakerLambda)\n\t * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n\t * The needed parameters are the wavelet scale and the lambda used in the whittaker smoother.\n\t * @param waveletScale To be described\n\t * @param whittakerLambda To be described\n\t */\n\tNMR.prototype.haarWhittakerBaselineCorrection=function(waveletScale,whittakerLambda) {\n\t    //@TODO Implement haarWhittakerBaselineCorrection filter\n\t}\n\t\n\t/**\n\t * @function whittakerBaselineCorrection(whittakerLambda,ranges)\n\t * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n\t * The needed parameters are the Wavelet scale and the lambda used in the Whittaker smoother.\n\t * @param waveletScale To be described\n\t * @param whittakerLambda To be described\n\t * @param ranges A string containing the ranges of no signal.\n\t */\n\tNMR.prototype.whittakerBaselineCorrection=function(whittakerLambda,ranges) {\n\t    //@TODO Implement whittakerBaselineCorrection filter\n\t}\n\t\n\t/**\n\t * @function brukerSpectra(options)\n\t * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that \n\t * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the \n\t * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n\t * @option DECIM: Acquisition parameter\n\t * @option DSPFVS: Acquisition parameter\n\t */\n\tNMR.prototype.brukerSpectra=function(options) {\n\t    //@TODO Implement brukerSpectra filter\n\t}\n\t\n\t/**\n\t * @function apodization(functionName, lineBroadening)\n\t * Apodization of a spectraData object.\n\t * @param spectraData An spectraData of type NMR_FID\n\t * @param functionName Valid values for functionsName are\n\t *  Exponential, exp\n\t *  Hamming, hamming\n\t *  Gaussian, gauss\n\t *  TRAF, traf\n\t *  Sine Bell, sb\n\t *  Sine Bell Squared, sb2\n\t * @param lineBroadening The parameter LB should either be a line broadening factor in Hz \n\t * or alternatively an angle given by degrees for sine bell functions and the like.\n\t * @example SD.apodization(, lineBroadening)\n\t */\n\tNMR.prototype.apodization=function(functionName, lineBroadening) {\n\t    //@TODO Implement apodization filter\n\t}\n\t\n\t/**\n\t * @function echoAntiechoFilter();\n\t * That decodes an Echo-Antiecho 2D spectrum.\n\t */\n\tNMR.prototype.echoAntiechoFilter=function() {\n\t    //@TODO Implement echoAntiechoFilter filter\n\t}\n\t\n\t/**\n\t * @function SNVFilter()\n\t * This function apply a Standard Normal Variate Transformation over the given spectraData. Mainly used for IR spectra.\n\t */\n\tNMR.prototype.SNVFilter=function() {\n\t    //@TODO Implement SNVFilter\n\t}\n\t\n\t/**\n\t * @function powerFilter(power)\n\t * This function applies a power to all the Y values.<br>If the power is less than 1 and the spectrum has negative values, it will be shifted so that the lowest value is zero \n\t * @param   power   The power to apply\n\t */\n\tNMR.prototype.powerFilter=function(power) {\n\t    var minY=this.getMinY();\n\t    if(power<1 && minY<0){\n\t        this.YShift(-1*minY);\n\t        console.warn(\"SD.powerFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n\t    }\n\t    //@TODO Implement powerFilter\n\t}\n\t\n\t/**\n\t * @function logarithmFilter(base)\n\t * This function applies a log to all the Y values.<br>If the spectrum has negative or zero values, it will be shifted so that the lowest value is 1 \n\t * @param   base    The base to use\n\t */\n\tNMR.prototype.logarithmFilter=function(base) {\n\t    var minY=this.getMinY();\n\t    if(minY<=0){\n\t        this.YShift((-1*minY)+1);\n\t        console.warn(\"SD.logarithmFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n\t    }\n\t   //@TODO Implement logarithmFilter filter\n\t}\n\t\n\t\n\t/**\n\t * @function correlationFilter(func) \n\t * This function correlates the given spectraData with the given vector func. The correlation\n\t * operation (*) is defined as:\n\t * \n\t *                    __ inf\n\t *  c(x)=f(x)(*)g(x)= \\        f(x)*g(x+i)\n\t *                   ./    \n\t *                    -- i=-inf\n\t * @param func A double array containing the function to correlates the spectraData\n\t * @example var smoothedSP = SD.correlationFilter(spectraData,[1,1]) returns a smoothed version of the\n\t * given spectraData. \n\t */\n\tNMR.prototype.correlationFilter=function(func) {\n\t    //@TODO Implement correlationFilter filter\n\t}\n\t\n\t/**\n\t * @function  phaseCorrection(phi0, phi1)\n\t * Applies the phase correction (phi0,phi1) to a Fourier transformed spectraData. The angles must be given in radians.\n\t * @param phi0 Zero order phase correction\n\t * @param phi1 One order phase correction\n\t*/\n\tNMR.prototype.phaseCorrection=function(phi0, phi1) {\n\t    //@TODO Implement phaseCorrection filter\n\t}\n\t\n\t/**\n\t * @function automaticPhase() \n\t * This function determines automatically the correct parameters phi0 and phi1 for a phaseCorrection\n\t * function and applies it.\n\t */ \n\tNMR.prototype.automaticPhase=function() {\n\t    //@TODO Implement automaticPhase filter\n\t}\n\t\n\t/**\n\t *  @function useBrukerPhase()\n\t *  This function extract the parameters of the phaseCorrection from the jcamp-dx parameters\n\t *  if the spectrum was acquired in Bruker spectrometers . Basically it will look for the parameters\n\t *  $PHC0 and $PHC1, and will use it to call the phaseCorrection function.\n\t */\n\tNMR.prototype.useBrukerPhase=function() {\n\t   //@TODO Implement useBrukerPhase filter\n\t}\n\t\n\t/**\n\t * @function nmrPeakDetection(parameters);\n\t * This function process the given spectraData and tries to determine the NMR signals. Returns an NMRSignal1D array containing all the detected 1D-NMR Signals\n\t * @param parameters A JSONObject containing the optional parameters:\n\t * @option fromX:   Lower limit.\n\t * @option toX:     Upper limit.\n\t * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n\t * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n\t */\n\tNMR.prototype.nmrPeakDetection=function(parameters) {\n\t    return PeakPicking.peakPicking(this, parameters);\n\t}\n\t\n\t/**\n\t * @function toJcamp(options)\n\t * This function creates a String that represents the given spectraData in the format JCAM-DX 5.0\n\t * The X,Y data can be compressed using one of the methods described in: \n\t * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\", \n\t *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n\t * @option encode: ['FIX','SQZ','DIF','DIFDUP','CVS','PAC'] (Default: 'FIX')\n\t * @option yfactor: The YFACTOR. It allows to compress the data by removing digits from the ordinate. (Default: 1)\n\t * @option type: [\"NTUPLES\", \"SIMPLE\"] (Default: \"SIMPLE\")\n\t * @option keep: A set of user defined parameters of the given SpectraData to be stored in the jcamp.\n\t * @example SD.toJcamp(spectraData,{encode:'DIFDUP',yfactor:0.01,type:\"SIMPLE\",keep:['#batchID','#url']});\n\t */ \n\tNMR.prototype.toJcamp=function(options) {\n\t     //@TODO Implement toJcamp filter\n\t     return \"NOT ImplementED\"\n\t}\n\t\n\t\n\tmodule.exports = NMR;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Implementation of the peak pickig method described by Cobas in:\n\t * A new approach to improving automated analysis of proton NMR spectra\n\t * through Global Spectral Deconvolution (GSD)\n\t * http://www.spectroscopyeurope.com/images/stories/ColumnPDFs/TD_23_1.pdf\n\t */\n\tvar JAnalyzer = __webpack_require__(6);\n\t/*var LM = require('ml-curve-fitting');\n\tvar Matrix = LM.Matrix;\n\tvar math = Matrix.algebra;*/\n\tvar peakPicking = __webpack_require__(7);\n\t\n\tvar PeakPicking={\n\t    impurities:[],\n\t    maxJ:20,\n\t\n\t    peakPicking:function(spectrum, options){\n\t        options = options||{nH:10, clean:true, realTop:false, thresholdFactor:1, compile:true, integral:0}\n\t\n\t        var nH=options.nH||10;\n\t        var i, j, nHi, sum;\n\t        //options.realTop = options.realTop||false;\n\t        //options.thresholdFactor = options.thresholdFactor || 1;\n\t        //options.compile = options.compile || false;\n\t        //options.clean = options.clean || false;\n\t        //var tmp = spectrum.clone();\n\t\n\t        var noiseLevel = Math.abs(spectrum.getNoiseLevel())*(options.thresholdFactor||1);\n\t        var data = spectrum.getXYData();\n\t        //var peakList = this.GSD(spectrum, noiseLevel);\n\t        //peakList = Opt.optimizeLorentzianSum(peakList);//this.optmizeSpectrum(peakList,spectrum,noiseLevel);\n\t        var peakList = peakPicking.gsd(data[0],data[1], {noiseLevel: noiseLevel, minMaxRatio:0.01, broadRatio:0.0025,smoothY:true});\n\t        peakList = peakPicking.optimize(peakList,data[0],data[1],3,\"lorentzian\");\n\t        //console.log(noiseLevel);\n\t        peakList = this.clearList(peakList,noiseLevel);\n\t        var signals = this.detectSignals(peakList, spectrum, nH, options.integral||0);\n\t        //console.log(JSON.stringify(signals));\n\t        //Remove all the signals with small integral\n\t        if(options.clean||false){\n\t            for(var i=signals.length-1;i>=0;i--){\n\t                if(signals[i].integralData.value<0.5) {\n\t                    signals.splice(i, 1);\n\t                }\n\t            }\n\t        }\n\t        if(options.compile||false){\n\t            for(i=0;i<signals.length;i++){\n\t                //console.log(\"Sum \"+signals[i].integralData.value);\n\t                JAnalyzer.compilePattern(signals[i]);\n\t                if(signals[i].maskPattern&&signals[i].multiplicity!=\"m\"\n\t                    && signals[i].multiplicity!=\"\"){\n\t                    //Create a new signal with the removed peaks\n\t                    nHi = 0;\n\t                    sum=0;\n\t                    var peaksO = [];\n\t                    for(j=signals[i].maskPattern.length-1;j>=0;j--){\n\t                        sum+=this.area(signals[i].peaks[j]);\n\t\n\t                        if(signals[i].maskPattern[j]===false) {\n\t                            var peakR = signals[i].peaks.splice(j)[0];\n\t                            peaksO.push({x:peakR.x,y:peakR.intensity,width:peakR.width});\n\t                            signals[i].maskPattern.splice(j);\n\t                            signals[i].peaksComp.splice(j);\n\t                            signals[i].nbPeaks--;\n\t                            nHi+=this.area(peakR);\n\t                        }\n\t                    }\n\t                    if(peaksO.length>0){\n\t                        nHi=nHi*signals[i].integralData.value/sum;\n\t                        signals[i].integralData.value-=nHi;\n\t                        var peaks1 = [];\n\t                        for(var j=peaksO.length-1;j>=0;j--)\n\t                            peaks1.push(peaksO[j]);\n\t                        var newSignals = this.detectSignals(peaks1, spectrum, nHi, options.integral||0);\n\t                        for(j=0;j<newSignals.length;j++)\n\t                            signals.push(newSignals[j]);\n\t                    }\n\t                }\n\t            }\n\t            //console.log(signals);\n\t            this.updateIntegrals(signals, nH);\n\t        }\n\t        signals.sort(function(a,b){\n\t            return a.delta1- b.delta1\n\t        });\n\t\n\t        //Remove all the signals with small integral\n\t        if(options.clean||false){\n\t            for(var i=signals.length-1;i>=0;i--){\n\t                if(signals[i].integralData.value<0.5) {\n\t                    signals.splice(i, 1);\n\t                }\n\t            }\n\t        }\n\t\n\t        return signals;\n\t\n\t        /*var frequency = spectrum.observeFrequencyX();//getParamDouble(\"$BF1\",400);\n\t        var imp = this.labelPeaks(peakList, solvent, frequency);\n\t        return [peakList,imp];\n\t        */\n\t        //return createSignals(peakList,nH);\n\t    },\n\t\n\t    clearList:function(peakList, threshold){\n\t        for(var i=peakList.length-1;i>=0;i--){\n\t            if(Math.abs(peakList[i].y)<threshold){\n\t                peakList.splice(i,1);\n\t            }\n\t        }\n\t        return peakList;\n\t    },\n\t\n\t\n\t    /**\n\t     * This method implements a non linear sampling of the spectrum. The point close to\n\t     * the critic points are more sampled than the other ones.\n\t     * @param spectrum\n\t     * @param peaks\n\t     * @param rowWise\n\t     */\n\t    sampling: function(spectrum, peaks, rowWise){\n\t        var i0, ie, ic,i, j,nbPoints;\n\t        var xy = []\n\t        if(i0>ie){\n\t            var tmp = i0;\n\t            i0 = ie;\n\t            ie = tmp;\n\t        }\n\t        //Non linear sampling for each peak.\n\t        for(i=0;i<peaks.length;i++){\n\t            var more = true;\n\t            var nL = 4;\n\t            while(more) {\n\t                i0 = spectrum.unitsToArrayPoint(peaks[i][0] - peaks[i][2] * nL);\n\t                ie = spectrum.unitsToArrayPoint(peaks[i][0] + peaks[i][2] * nL);\n\t                ic = spectrum.unitsToArrayPoint(peaks[i][0]);\n\t                if (i0 > ie) {\n\t                    tmp = i0;\n\t                    i0 = ie;\n\t                    ie = tmp;\n\t                }\n\t                i0 = i0 < 0 ? 0 : i0;\n\t                ie = ie >= spectrum.getNbPoints() ? spectrum.getNbPoints() - 1 : ie;\n\t\n\t                if (ie - i0 < 10) {\n\t                    for (j = i0; j <= ie; j++) {\n\t                        xy.push([spectrum.getX(j), spectrum.getY(j)]);\n\t                    }\n\t                    more = false;\n\t                }\n\t                else {\n\t                    xy.push([spectrum.getX(i0), spectrum.getY(i0)]);\n\t                    xy.push([spectrum.getX(ie), spectrum.getY(ie)]);\n\t                    if (nL > 0.5) {\n\t                        nL -= 0.5;\n\t                    }\n\t                    else {\n\t                        nL /= 2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        //console.log(xy);\n\t        xy.sort(function(a,b){\n\t            return a[0]-b[0];\n\t        });\n\t        //console.log(\"XX \"+xy.length);\n\t        var x=[],y=[];\n\t        var index =0;\n\t        if(rowWise){\n\t            x=[xy[0][0]],y=[xy[0][1]];\n\t            for(i=1;i<xy.length;i++){\n\t                if(x[index]!=xy[i][0]){\n\t                    x.push(xy[i][0]);\n\t                    y.push(xy[i][1]);\n\t                    index++;\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            x=[[xy[0][0]]],y=[[xy[0][1]]];\n\t            for(i=1;i<xy.length;i++){\n\t                if(x[index][0]!=xy[i][0]){\n\t                    x.push([xy[i][0]]);\n\t                    y.push([xy[i][1]]);\n\t                    index++;\n\t                }\n\t            }\n\t        }\n\t        return [x,y];\n\t\n\t    },\n\t\n\t    getVector: function(spectrum, from, to, rowWise){\n\t        var i0 = spectrum.unitsToArrayPoint(from);\n\t        var ie = spectrum.unitsToArrayPoint(to);\n\t        var x = [];\n\t        var y = [];\n\t        if(i0>ie){\n\t            var tmp = i0;\n\t            i0 = ie;\n\t            ie = tmp;\n\t        }\n\t        i0=i0<0?0:i0;\n\t        ie=ie>=spectrum.getNbPoints()?spectrum.getNbPoints()-1:ie;\n\t        for(var i=i0;i<ie;i+=10){\n\t            if(rowWise){\n\t                y.push(spectrum.getY(i));\n\t                x.push(spectrum.getX(i));\n\t            }\n\t            else{\n\t                y.push([spectrum.getY(i)]);\n\t                x.push([spectrum.getX(i)]);\n\t            }\n\t        }\n\t        return [x,y];\n\t    },\n\t\n\t\n\t\n\t    updateLimits : function(signal){\n\t        if(signal.multiplicity!=\"m\" && signal.multiplicity!=\"\"){\n\t            //Remove the integral of the removed peaks\n\t            var peaksO = signal.peaks;\n\t            var nbPeaks0 = peaksO.length, index = 0, factor = 0, toRemove = 0;\n\t\n\t            for(var i=0;i<nbPeaks0;i++){\n\t                if(signal.maskPattern[i]===false)\n\t                    toRemove+=this.area(peaksO[i]);\n\t                factor+= this.area(peaksO[i]);\n\t            }\n\t            factor=signal.integralData.value/factor;\n\t            signal.integralData.value-=toRemove*factor;\n\t        }\n\t        return signal.integralData.value;\n\t    },\n\t\n\t    updateIntegrals : function(signals, nH){\n\t        var sumIntegral = 0,i,sumObserved=0;\n\t        for(i=0;i<signals.length;i++){\n\t            sumObserved+=Math.round(signals[i].integralData.value);\n\t        }\n\t        if(sumObserved!=nH){\n\t\n\t            sumIntegral=nH/sumObserved;\n\t            for(i=0;i<signals.length;i++){\n\t                signals[i].integralData.value*=sumIntegral;\n\t            }\n\t        }\n\t    },\n\t\n\t    /*\n\t     {\n\t     \"nbPeaks\":1,\"multiplicity\":\"\",\"units\":\"PPM\",\"startX\":3.43505,\"assignment\":\"\",\n\t     \"pattern\":\"s\",\"stopX\":3.42282,\"observe\":400.08,\"asymmetric\":false,\n\t     \"delta1\":3.42752,\n\t     \"integralData\":{\"to\":3.43505,\"value\":590586504,\"from\":3.42282},\n\t     \"nucleus\":\"1H\",\n\t     \"peaks\":[{\"intensity\":60066147,\"x\":3.42752}]\n\t     }\n\t     */\n\t    detectSignals: function(peakList, spectrum, nH, integralType){\n\t        var frequency = spectrum.observeFrequencyX();\n\t        var signals = [];\n\t        var signal1D = {};\n\t        var prevPeak = {x:100000,y:0,width:0},peaks=null;\n\t        var rangeX = 16/frequency;//Peaks withing this range are considered to belongs to the same signal1D\n\t        var spectrumIntegral = 0,cs,sum, i,j;\n\t        //console.log(\"RangeX \"+rangeX);\n\t        for(i=0;i<peakList.length;i++){\n\t            //console.log(peakList[i]);\n\t            if(Math.abs(peakList[i].x-prevPeak.x)>rangeX){\n\t                //console.log(typeof peakList[i].x+\" \"+typeof peakList[i].width);\n\t                signal1D = {\"nbPeaks\":1,\"units\":\"PPM\",\n\t                    \"startX\":peakList[i].x+peakList[i].width,\n\t                    \"stopX\":peakList[i].x-peakList[i].width,\n\t                    \"multiplicity\":\"\",\"pattern\":\"\",\n\t                    \"observe\":frequency,\"nucleus\":\"1H\",\n\t                    \"integralData\":{\"from\":peakList[i].x-peakList[i].width*3,\n\t                                    \"to\":peakList[i].x+peakList[i].width*3\n\t                                    //\"value\":this.area(peakList[i])\n\t                    },\n\t                    \"peaks\":[]};\n\t                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n\t                signals.push(signal1D);\n\t                //spectrumIntegral+=this.area(peakList[i]);\n\t            }\n\t            else{\n\t                var tmp = peakList[i].x-peakList[i].width;\n\t                signal1D.stopX = Math.min(signal1D.stopX,tmp);\n\t                tmp = peakList[i].x+peakList[i].width;\n\t                signal1D.stopX = Math.max(signal1D.stopX,tmp);\n\t                signal1D.nbPeaks++;\n\t                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n\t                //signal1D.integralData.value+=this.area(peakList[i]);\n\t                signal1D.integralData.from = Math.min(signal1D.integralData.from, peakList[i].x-peakList[i].width*3);\n\t                signal1D.integralData.to = Math.max(signal1D.integralData.to,peakList[i].x+peakList[i].width*3);\n\t                //spectrumIntegral+=this.area(peakList[i]);\n\t            }\n\t            prevPeak = peakList[i];\n\t        }\n\t        //Normalize the integral to the normalization parameter and calculate cs\n\t        for(i=0;i<signals.length;i++){\n\t            peaks = signals[i].peaks;\n\t            var integral = signals[i].integralData;\n\t            cs = 0;\n\t            sum = 0;\n\t            for(var j=0;j<peaks.length;j++){\n\t                cs+=peaks[j].x*this.area(peaks[j]);//.intensity;\n\t                sum+=this.area(peaks[j]);\n\t            }\n\t            signals[i].delta1 = cs/sum;\n\t\n\t            if(integralType==0)\n\t                integral.value = sum;\n\t            else {\n\t                integral.value=spectrum.getArea(integral.from,integral.to);//*nH/spectrumIntegral;\n\t            }\n\t            spectrumIntegral+=integral.value;\n\t\n\t        }\n\t        for(var i=0;i<signals.length;i++){\n\t            //console.log(integral.value);\n\t            var integral = signals[i].integralData;\n\t            integral.value*=nH/spectrumIntegral;\n\t        }\n\t\n\t        return signals;\n\t    },\n\t\n\t    area: function(peak){\n\t        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n\t    },\n\t    /**\n\t     This function tries to determine which peaks belongs to common laboratory solvents\n\t     as trace impurities from DOI:10.1021/jo971176v. The only parameter of the table is\n\t     the solvent name.\n\t     */\n\t    labelPeaks:function(peakList, solvent, frequency){\n\t        var column = 0;\n\t        //console.log(this.impurities[0]);\n\t        for(column=4;column<this.impurities.length;column++){\n\t            //console.log(\"sss\".contains);\n\t            if(this.impurities[0][column].indexOf(solvent)>=0){\n\t                break;\n\t            }\n\t        }\n\t        //console.log(\"labelPeaks \"+column);\n\t        var nImpurities = this.impurities.length-1;\n\t        var nPeaks = peakList.length;\n\t        //Scores matrix\n\t        //console.log(nImpurities);\n\t        var scores = new Array(nImpurities);\n\t        var max = 0, diff=0, score=0;\n\t        var gamma = 0.2;//ppm\n\t        var impurityID=-1;\n\t        var prevImp = \"\";\n\t        var maxIntensity = 0,i;\n\t        for(var j=nPeaks-1;j>=0;j--){\n\t            if(peakList[j][1]>maxIntensity)\n\t                maxIntensity = peakList[j][1];\n\t        }\n\t\n\t        for(i=nImpurities-1;i>=0;i--){\n\t            if(this.impurities[i+1][0]!=prevImp){\n\t                impurityID++;\n\t                prevImp=this.impurities[i+1][0];\n\t            }\n\t\n\t            //impID, max, maxIndex, average\n\t            scores[i]=[impurityID,this.impurities[i+1][2],\n\t                this.impurities[i+1][3],0,[],0];\n\t            max = 0;\n\t            for(var j=nPeaks-1;j>=0;j--){\n\t                diff = 10000;//Big numnber\n\t                if(this.impurities[i+1][column]>0)\n\t                    diff = Math.abs(peakList[j][0]-this.impurities[i+1][column]);\n\t                if(diff<gamma*3){\n\t                    score=this.score(diff,gamma);\n\t                    if(score>max){\n\t                        max=score;\n\t                        scores[i][3]=max;\n\t                        scores[i][4]=[j];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        //Calculate the average score for each impurity set of signals\n\t        var prevIndex = -1, sum=0, count = 0;\n\t        var candidates=[];\n\t        var impuritiesPeaks = [];\n\t        var i=nImpurities-1;\n\t        while(i>=-1){\n\t            if(i==-1||scores[i][0]!=prevIndex&&prevIndex!=-1){\n\t                if(prevIndex!=-1){\n\t                    scores[i+1][5]=sum/count;\n\t                    //Now, lets chech the multiplicities\n\t                    if(scores[i+1][5]>0.9){\n\t                        //console.log(scores[i+1][0]+\" SS \");\n\t                        score=this.updateScore(candidates, peakList, maxIntensity, frequency);\n\t                        if(score>0.9){\n\t                            //console.log(candidates);\n\t                            //TODO: Remove peaks and add it do impuritiesPeaks\n\t                            for(var j=0;j<candidates.length;j++){\n\t                                for(var k=candidates[j][4].length-1;k>=0;k--){\n\t                                    impuritiesPeaks.push(peakList[candidates[j][4][k]]);\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t                if(i>=0){\n\t                    prevIndex=scores[i][0];\n\t                    sum=scores[i][3];\n\t                    count=1;\n\t                    candidates=[scores[i]];\n\t                }\n\t\n\t            }else{\n\t                prevIndex=scores[i][0];\n\t                candidates.push(scores[i]);\n\t                sum+=scores[i][3];\n\t                count++;\n\t            }\n\t            i--;\n\t        }\n\t        //console.log(impuritiesPeaks.length);\n\t\n\t        return impuritiesPeaks;\n\t    },\n\t    /**\n\t     Updates the score that a given impurity is present in the current spectrum. In this part I would expect\n\t     to have into account the multiplicity of the signal. Also the relative intensity of the signals.\n\t     THIS IS the KEY part of the algorithm!!!!!!!!!\n\t     */\n\t    updateScore:function(candidates, peakList, maxIntensity, frequency){\n\t        //You may do it to avoid this part.\n\t        //return 1;\n\t\n\t        //Check the multiplicity\n\t        var mul = \"\";\n\t        var j = 0,index, k, maxJppm=this.maxJ/frequency;\n\t        var min=0, indexMin=0, score=0;\n\t        for(var i=candidates.length-1;i>=0;i--){\n\t            mul = candidates[i][1];\n\t            j = candidates[i][2];\n\t            //console.log(candidates[i][4]);\n\t            index = candidates[i][4][0];\n\t            //console.log(peakList[index][0]+\" \"+mul+\" \"+j+\" \"+index);\n\t            //I guess we should try to identify the pattern in the nearby.\n\t            if(mul.indexOf(\"sep\")>=0){\n\t                if(peakList[index][1]>maxIntensity*0.33){\n\t                    candidates.splice(i,1);//Not a candidate anymore.\n\t                }\n\t            }else{\n\t                if(mul.indexOf(\"s\")>=0||mul.indexOf(\"X\")>=0){\n\t                    k=index-1;\n\t                    min=peakList[index][1];\n\t                    indexMin=index;\n\t                    while(k>=0&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n\t                        if(peakList[k][1]<min){\n\t                            min=peakList[k][1];\n\t                            indexMin=k;\n\t                        }\n\t                        k--;\n\t                    }\n\t                    k=index+1;\n\t                    while(k<peakList.length&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n\t                        if(peakList[k][1]<min){\n\t                            min=peakList[k][1];\n\t                            indexMin=k;\n\t                        }\n\t                        k++;\n\t                    }\n\t                    candidates[i][4][0]=indexMin;\n\t                    score+=1;\n\t                }\n\t            }\n\t            if(mul.indexOf(\"d\")>=0){\n\t                if(index>0&&index<peakList.length-1){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index-1][0])*frequency-j);\n\t                    if(thisJ1<2||thisJ2<2||thisJ3<2){\n\t                        if(thisJ1<thisJ2){\n\t                            if(thisJ1<thisJ3){\n\t                                candidates[i][4]=[index-1,index];\n\t                                score+=1;\n\t                            }\n\t                            else{\n\t                                candidates[i][4]=[index-1,index+1];\n\t                                score+=1;\n\t                            }\n\t                        }\n\t                        else{\n\t                            if(thisJ2<thisJ3){\n\t                                candidates[i][4]=[index,index+1];\n\t                                score+=1;\n\t                            }\n\t                            else{\n\t                                candidates[i][4]=[index-1,index+1];\n\t                                score+=1;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            if(mul.indexOf(\"t\")>=0){\n\t                //console.log(\"here\");\n\t                if(index>0&&index<peakList.length-1){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ4 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index+2][0])*frequency-j);\n\t                    //console.log(\"XX \"+thisJ1+\" \"+thisJ2);\n\t                    if(thisJ1<2){\n\t                        candidates[i][4]=[index-1, index];\n\t                        score+=0.5;\n\t                    }\n\t                    if(thisJ2<2){\n\t                        candidates[i][4].push(index+1);\n\t                        score+=0.5;\n\t                    }\n\t                    if(thisJ3<2){\n\t                        candidates[i][4].push(index+2);\n\t                        score+=0.5;\n\t                    }\n\t\n\t                }\n\t            }\n\t            if(mul.indexOf(\"q\")>=0){\n\t                if(index>1&&index<peakList.length-2){\n\t                    var thisJ1 = Math.abs(Math.abs(peakList[index-2][0]-peakList[index-1][0])*frequency-j);\n\t                    var thisJ2 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n\t                    var thisJ4= Math.abs(Math.abs(peakList[index+2][0]-peakList[index+1][0])*frequency-j);\n\t                    if(thisJ1<2){\n\t                        candidates[i][4].push(index-2);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ2<2){\n\t                        candidates[i][4].push(index-1);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ3<2){\n\t                        candidates[i][4].push(index+1);\n\t                        score+=0.25;\n\t                    }\n\t                    if(thisJ4<2){\n\t                        candidates[i][4].push(index+2);\n\t                        score+=0.25;\n\t                    }\n\t                }\n\t            }\n\t\n\t\n\t        }\n\t\n\t        //console.log(score/candidates.length+ \" -> \"+candidates);\n\t        //Lets remove the candidates to be impurities.\n\t        //It would be equivalent to mark the peaks as valid again\n\t        if(score/candidates.length < 0.5){\n\t            for(var i=candidates.length-1;i>=0;i--){\n\t                candidates.splice(i,1);\n\t            }\n\t            return 0;\n\t        }\n\t        //Check the relative intensity\n\t        return 1;\n\t    },\n\t\n\t    score:function(value, gamma){\n\t        return Math.exp(-Math.pow(value/gamma,2)/2.0);\n\t    },\n\t    /**\n\t     This function joint all the nearby peaks into single signals. We may try to\n\t     determine the J-couplings and the multiplicity here.\n\t     */\n\t    createSignals:function(){\n\t\n\t    }\n\t\n\t}\n\t\n\tmodule.exports = PeakPicking;\n\t\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This library implements the J analyser described by Cobas et al in the paper:\n\t * A two-stage approach to automatic determination of 1H NMR coupling constants\n\t * Created by acastillo on 4/5/15.\n\t */\n\tvar JAnalyzer = {\n\t    pascalTriangle : [[0],[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]],\n\t    patterns: [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"],\n\t    symRatio : 1.5,\n\t    maxErrorIter1 : 2.5,//Hz\n\t    maxErrorIter2 : 1,//Hz\n\t    DEBUG : false,\n\t\n\t    /**\n\t     * The compilation process implements at the first stage a normalization procedure described by Golotvin et al.\n\t     * embedding in peak-component-counting method described by Hoyes et al.\n\t     * @param signal\n\t     */\n\t    compilePattern : function(signal){\n\t        if(this.DEBUG)console.log(\"Debugin...\");\n\t\n\t        signal.multiplicity=\"m\";//By default the multiplicity is massive\n\t        // 1.1 symmetrize\n\t        // It will add a set of peaks(signal.peaksComp) to the signal that will be used during\n\t        // the compilation process. The unit of those peaks will be in Hz\n\t        signal.symRank = this.symmetrizeChoiseBest(signal,this.maxErrorIter1,1);\n\t        signal.asymmetric = true;\n\t       // console.log(signal.delta1+\" \"+signal.symRank);\n\t        //Is the signal symmetric?\n\t        if(signal.symRank>=0.95&&signal.peaksComp.length<32){\n\t            if(this.DEBUG)console.log(signal.delta1+ \" nbPeaks \"+signal.peaksComp.length);\n\t            signal.asymmetric = false;\n\t            var i,j,min,max,k=1,P1,Jc=[],n2,maxFlagged;\n\t            //Loop over the possible number of coupling contributing to the multiplet\n\t            for(var n=0;n<9;n++){\n\t                if(this.DEBUG)console.log(\"Trying \"+n+\" couplings\");\n\t                //1.2 Normalize. It makes a deep copy of the peaks before to modify them.\n\t                peaks = this.normalize(signal,n);\n\t                //signal.peaksCompX = peaks;\n\t                var validPattern = false;//It will change to true, when we find the good patter\n\t                //Lets check if the signal could be a singulet.\n\t                if(peaks.length == 1 && n === 0){\n\t                    validPattern=true;\n\t                }\n\t                else{\n\t                    if(peaks.length <= 1){\n\t                        continue;\n\t                    }\n\t                }\n\t                // 1.3 Establish a range for the Heights Hi [peaks.intensity*0.85,peaks.intensity*1.15];\n\t                var ranges = this.getRanges(peaks);\n\t                n2 = Math.pow(2,n);\n\t\n\t                if(this.DEBUG){\n\t                    console.log(\"ranges: \"+JSON.stringify(ranges));\n\t                    console.log(\"Target sum: \"+n2);\n\t                }\n\t\n\t                // 1.4 Find a combination of integer heights Hi, one from each Si, that sums to 2^n.\n\t                var heights = null;\n\t                while(!validPattern&&(heights = this.getNextCombination(ranges, n2))!==null){\n\t\n\t                    if(this.DEBUG){\n\t                        console.log(\"Possible pattern found with \"+n+\" couplings!!!\");\n\t                        console.log(heights);\n\t                    }\n\t                    // 2.1 Number the components of the multiplet consecutively from 1 to 2n,\n\t                    //starting at peak 1\n\t                    var numbering = new Array(heights.length);\n\t                    k=1;\n\t                    for(i=0;i<heights.length;i++){\n\t                        numbering[i]=new Array(heights[i]);\n\t                        for(j=0;j<heights[i];j++){\n\t                            numbering[i][j]=k++;\n\t                        }\n\t                    }\n\t                    if(this.DEBUG){\n\t                        console.log(\"Numbering: \"+JSON.stringify(numbering));\n\t                    }\n\t                    Jc = []; //The array to store the detected j-coupling\n\t                    // 2.2 Set j = 1; J1 = P2 - P1. Flag components 1 and 2 as accounted for.\n\t                    j=1;\n\t                    Jc.push(peaks[1].x-peaks[0].x);\n\t                    P1 = peaks[0].x;\n\t                    numbering[0].splice(0,1);//Flagged\n\t                    numbering[1].splice(0,1);//Flagged\n\t                    k=1;\n\t                    var nFlagged = 2;\n\t                    maxFlagged = Math.pow(2,n)-1;\n\t                    while(Jc.length<n&&nFlagged<maxFlagged&&k<peaks.length){\n\t                        if(this.DEBUG){\n\t                            console.log(\"New Jc\"+JSON.stringify(Jc));\n\t                            console.log(\"Aval. numbering \"+JSON.stringify(numbering));\n\t                        }\n\t                        // 4.1. Increment j. Set k to the number of the first unflagged component.\n\t                        j++;\n\t                        while(k<peaks.length&&numbering[k].length===0){\n\t                            k++;\n\t                        }\n\t                        if(k<peaks.length){\n\t                            // 4.2 Jj = Pk - P1.\n\t                            Jc.push(peaks[k].x-peaks[0].x);\n\t                            //Flag component k and, for each sum of the...\n\t                            numbering[k].splice(0,1);//Flageed\n\t                            nFlagged++;\n\t                            //Flag the other components of the multiplet\n\t                            for(var u=2;u<=j;u++){\n\t                                //TODO improve those loops\n\t                                var jSum = 0;\n\t                                for(i=0;i<u;i++){\n\t                                    jSum+=Jc[i];\n\t                                }\n\t                                for(i=1;i<numbering.length;i++){\n\t                                    //Maybe 0.25 Hz is too much?\n\t                                    if(Math.abs(peaks[i].x-(P1+jSum))<0.25){\n\t                                        numbering[i].splice(0,1);//Flageed\n\t                                        nFlagged++;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                    //Calculate the ideal patter by using the extracted j-couplings\n\t                    var pattern = this.idealPattern(Jc);\n\t                    //Compare the ideal pattern with the proposed intensities.\n\t                    // All the intensities have to match to accept the multiplet\n\t                    validPattern = true;\n\t                    for(i=0;i<pattern.length;i++){\n\t                        if(pattern[i].intensity != heights[i])\n\t                            validPattern = false;\n\t                    }\n\t                    //More verbosity of the process\n\t                    if(this.DEBUG){\n\t                        console.log(\"Jc \"+JSON.stringify(Jc));\n\t                        console.log(\"Heights \"+JSON.stringify(heights));\n\t                        console.log(\"pattern \"+JSON.stringify(pattern));\n\t                        console.log(\"Valid? \"+validPattern);\n\t                    }\n\t                }\n\t                //If we found a valid pattern we should inform about the pattern.\n\t                if(validPattern){\n\t                    this.updateSignal(signal,Jc);\n\t                }\n\t            }\n\t        }\n\t\n\t        //Before to return, change the units of peaksComp from Hz to PPM again\n\t        for(i=0;i<signal.peaksComp.length;i++){\n\t            signal.peaksComp[i].x/=signal.observe;\n\t        }\n\t    },\n\t\n\t    updateSignal : function(signal, Jc){\n\t        //Update the limits of the signal\n\t        var peaks = signal.peaksComp;//Always in Hz\n\t        var nbPeaks = peaks.length;\n\t        signal.startX=peaks[0].x/signal.observe+peaks[0].width;\n\t        signal.stopX=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width;\n\t        signal.integralData.to=peaks[0].x/signal.observe+peaks[0].width*3;\n\t        signal.integralData.from=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width*3;\n\t\n\t        //Compile the pattern and format the constant couplings\n\t        signal.maskPattern = signal.mask2;\n\t        signal.multiplicity = this.abstractPattern(signal,Jc);\n\t        signal.pattern=signal.multiplicity;//Our library depends on this parameter, but it is old\n\t        //console.log(signal);\n\t        if(this.DEBUG)\n\t            console.log(\"Final j-couplings: \"+JSON.stringify(Jc));\n\t    },\n\t\n\t    /**\n\t     * Returns the multiplet in the compact format\n\t     */\n\t    abstractPattern : function(signal,Jc){\n\t        var tol = 0.05,i, pattern = \"\", cont = 1;\n\t        var newNmrJs = [];\n\t        if(Jc&&Jc.length>0){\n\t            Jc.sort(function(a,b){\n\t                return a-b;\n\t            });\n\t            for(i=0;i<Jc.length-1;i++){\n\t                if(Math.abs(Jc[i]-Jc[i+1])<tol){\n\t                    cont++;\n\t                }\n\t                else{\n\t                    newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n\t                    pattern+=this.patterns[cont];\n\t                    cont=1;\n\t                }\n\t            }\n\t            newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n\t            pattern+=this.patterns[cont];\n\t            signal.nmrJs =  newNmrJs;\n\t        }\n\t        else{\n\t            pattern=\"s\";\n\t            if(Math.abs(signal.startX-signal.stopX)*signal.observe>16){\n\t                pattern=\"bs\"\n\t            }\n\t        }\n\t        return pattern;\n\t    },\n\t\n\t    /**\n\t     *This function creates an ideal pattern from the given J-couplings\n\t     */\n\t    idealPattern : function(Jc){\n\t        var hsum = Math.pow(2,Jc.length),i,j;\n\t        var pattern = [{x:0,intensity:hsum}];\n\t        //To split the initial height\n\t        for(i=0;i<Jc.length;i++){\n\t            for(j=pattern.length-1;j>=0;j--){\n\t                pattern.push({x:pattern[j].x+Jc[i]/2,\n\t                    intensity:pattern[j].intensity/2});\n\t                pattern[j].x = pattern[j].x-Jc[i]/2;\n\t                pattern[j].intensity = pattern[j].intensity/2;\n\t            }\n\t        }\n\t        //To sum the heights in the same positions\n\t        pattern.sort(function compare(a,b) { return a.x-b.x});\n\t        for(j=pattern.length-2;j>=0;j--){\n\t            if(Math.abs(pattern[j].x-pattern[j+1].x)<0.1){\n\t                pattern[j].intensity+= pattern[j+1].intensity\n\t                pattern.splice(j+1,1);\n\t            }\n\t        }\n\t        return pattern;\n\t    },\n\t\n\t    /**\n\t     * Find a combination of integer heights Hi, one from each Si, that sums to 2n.\n\t     */\n\t    getNextCombination : function(ranges, value){\n\t        var half = Math.ceil(ranges.values.length/2), lng = ranges.values.length;\n\t        var sum = 0,i;\n\t        while(sum!=value){\n\t            //Update the indexes to point at the next possible combination\n\t            ok = false;\n\t            var leftIndex = 0;\n\t            while(!ok){\n\t                ok = true;\n\t                ranges.currentIndex[ranges.active]++;\n\t                if(ranges.currentIndex[ranges.active]>=ranges.values[ranges.active].length){\n\t                    //In this case, there is no more possible combinations\n\t                    if(ranges.active+1==half){\n\t                        return null;\n\t                    }\n\t                    else{\n\t                        //If this happens we need to try the next active peak\n\t                        ranges.currentIndex[ranges.active]=0;\n\t                        ok=false;\n\t                        ranges.active++;\n\t                    }\n\t                }\n\t                else{\n\t                    ranges.active=0;\n\t                }\n\t            }\n\t            // Sum the heights for this combination\n\t            sum=0;\n\t            for(i=0;i<half;i++){\n\t                sum+= ranges.values[i][ranges.currentIndex[i]]*2;\n\t            }\n\t            if(ranges.values.length%2!==0){\n\t                sum-= ranges.values[half-1][ranges.currentIndex[half-1]];\n\t            }\n\t            if(this.DEBUG){\n\t                console.log(ranges.currentIndex);\n\t                console.log(sum+\" \"+value);\n\t            }\n\t        }\n\t        //If the sum is equal to the expected value, fill the array to return\n\t        if(sum==value){\n\t            var heights = new Array(lng);\n\t            for(i=0;i<half;i++){\n\t                heights[i] = ranges.values[i][ranges.currentIndex[i]];\n\t                heights[lng-i-1] = ranges.values[i][ranges.currentIndex[i]];\n\t            }\n\t            return heights;\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /**\n\t     * This function generates the possible values that each peak can contribute\n\t     * to the multiplet.\n\t     * @param peaks\n\t     * @returns {{values: Array, currentIndex: Array, active: number}}\n\t     */\n\t    getRanges : function(peaks){\n\t        var ranges = new Array(peaks.length);\n\t        var currentIndex = new Array(peaks.length);\n\t        var min,max;\n\t        ranges[0] = [1];\n\t        ranges[peaks.length-1] = [1];\n\t        currentIndex[0]=-1;\n\t        currentIndex[peaks.length-1] = 0;\n\t        for(var i=1;i<peaks.length-1;i++){\n\t            min = Math.round(peaks[i].intensity*0.85);\n\t            max = Math.round(peaks[i].intensity*1.15);\n\t            ranges[i] =[];\n\t            for(var j=min;j<=max;j++){\n\t                ranges[i].push(j);\n\t            }\n\t            currentIndex[i]=0;\n\t        }\n\t        return {values:ranges, currentIndex:currentIndex, active:0};\n\t    },\n\t    /**\n\t     * Performs a symmetrization of the signal by using different aproximations to the center.\n\t     * It will return the result of the symmetrization that removes less peaks from the signal\n\t     * @param signal\n\t     * @param maxError\n\t     * @param iteration\n\t     * @returns {*}\n\t     */\n\t    symmetrizeChoiseBest : function(signal,maxError,iteration){\n\t        var symRank1 = this.symmetrize(signal,maxError,iteration);\n\t        var tmpPeaks = signal.peaksComp;\n\t        var tmpMask = signal.mask;\n\t        var cs = signal.delta1;\n\t        signal.delta1 = (signal.peaks[0].x+signal.peaks[signal.peaks.length-1].x)/2;\n\t        var symRank2 = this.symmetrize(signal,maxError,iteration);\n\t        if(signal.peaksComp.length>tmpPeaks.length)\n\t            return symRank2;\n\t        else{\n\t            signal.delta1 = cs;\n\t            signal.peaksComp = tmpPeaks;\n\t            signal.mask = tmpMask;\n\t            return symRank1;\n\t        }\n\t\n\t    },\n\t    /**\n\t     * This function will return a set of symmetric peaks that will\n\t     * be the enter point for the patter compilation process.\n\t     */\n\t    symmetrize : function(signal, maxError, iteration){\n\t        //Before to symmetrize we need to keep only the peaks that possibly conforms the multiplete\n\t        var max, min, avg, ratio, avgWidth;\n\t        var peaks = new Array(signal.peaks.length);\n\t        //Make a deep copy of the peaks and convert PPM ot HZ\n\t        for(j=0;j<peaks.length;j++){\n\t            peaks[j]= {x:signal.peaks[j].x*signal.observe,\n\t                intensity:signal.peaks[j].intensity,\n\t                width:signal.peaks[j].width};\n\t        }\n\t        //Join the peaks that are closer than 0.25 Hz\n\t        for(j=peaks.length-2;j>=0;j--){\n\t            if(Math.abs(peaks[j].x-peaks[j+1].x)<0.25){\n\t                peaks[j].x = (peaks[j].x*peaks[j].intensity+peaks[j+1].x*peaks[j+1].intensity);\n\t                peaks[j].intensity = peaks[j].intensity+peaks[j+1].intensity;\n\t                peaks[j].x/=peaks[j].intensity;\n\t                peaks[j].intensity/=2;\n\t                peaks[j].width+=peaks[j+1].width;\n\t                peaks.splice(j+1,1);\n\t            }\n\t        }\n\t        signal.peaksComp = peaks;\n\t        var nbPeaks = peaks.length;\n\t        var mask = new Array(nbPeaks);\n\t        signal.mask = mask;\n\t        var left=0, right=peaks.length-1, cs = signal.delta1*signal.observe, middle = [(peaks[0].x+peaks[nbPeaks-1].x)/2,1];\n\t        maxError = this.error(Math.abs(cs-middle[0]));\n\t        var heightSum = 0;\n\t        //We try to symmetrize the extreme peaks. We consider as candidates for symmetricing those which have\n\t        //ratio smaller than 3\n\t        for(var i=0;i<nbPeaks;i++){\n\t            mask[i]= true;\n\t            heightSum+=signal.peaks[i].intensity;\n\t        }\n\t\n\t        while(left<=right){\n\t            mask[left] = true;\n\t            mask[right] = true;\n\t            if(left==right){\n\t                if(nbPeaks>2&&Math.abs(peaks[left].x-cs)>maxError){\n\t                    mask[left] = false;\n\t                }\n\t            }\n\t            else{\n\t                max = Math.max(peaks[left].intensity,peaks[right].intensity);\n\t                min = Math.min(peaks[left].intensity,peaks[right].intensity);\n\t                ratio = max/min;\n\t                if(ratio>this.symRatio){\n\t                    if(peaks[left].intensity==min){\n\t                        mask[left] = false;\n\t                        right++;\n\t                    }\n\t                    else{\n\t                        mask[right] = false;\n\t                        left--;\n\t                    }\n\t                }\n\t                else{\n\t                    var diffL = Math.abs(peaks[left].x-cs);\n\t                    var diffR = Math.abs(peaks[right].x-cs);\n\t\n\t                    if(Math.abs(diffL-diffR)<maxError){\n\t                        //avg = (peaks[left].intensity+peaks[right].intensity)/2;\n\t                        avg = Math.min(peaks[left].intensity,peaks[right].intensity);\n\t                        avgWidth = Math.min(peaks[left].width,peaks[right].width);\n\t                        peaks[left].intensity=peaks[right].intensity=avg;\n\t                        peaks[left].width=peaks[right].width=avgWidth;\n\t                        middle=[middle[0]+((peaks[right].x+peaks[left].x)/2), middle[1]+1];\n\t                    }\n\t                    else{\n\t                        if(Math.max(diffL,diffR)==diffR){\n\t                            mask[right] = false;\n\t                            left--;\n\t                        }\n\t                        else{\n\t                            mask[left] = false;\n\t                            right++;\n\t                        }\n\t                    }\n\t                    if(this.DEBUG){\n\t                        console.log(\"MaxError: \"+maxError+\" \"+middle[0]+\" \"+middle[1]);\n\t                        console.log(iteration+\" CS: \"+cs+\" Hz \"+cs/signal.observe+\" PPM\");\n\t                        console.log(\"Middle: \"+(middle[0]/middle[1])+\" Hz \"+(middle[0]/middle[1])/signal.observe+\" PPM\");\n\t                        console.log(diffL+ \" \"+diffR);\n\t                        console.log(Math.abs(diffL-diffR));\n\t                        console.log(JSON.stringify(peaks));\n\t                        console.log(JSON.stringify(mask));\n\t                    }\n\t                }\n\t            }\n\t            left++;\n\t            right--;\n\t            //Only alter cs if it is the first iteration of the sym process.\n\t            if(iteration==1){\n\t                cs = this.chemicalShift(peaks, mask);\n\t                //There is not more available peaks\n\t                if(isNaN(cs)){ return 0;}\n\t            }\n\t            maxError = this.error(Math.abs(cs-middle[0]/middle[1]));\n\t        }\n\t        //To remove the weak peaks and recalculate the cs\n\t        for(i=nbPeaks-1;i>=0;i--){\n\t            if(mask[i]===false){\n\t                peaks.splice(i,1);\n\t            }\n\t        }\n\t        cs = this.chemicalShift(peaks);\n\t        if(isNaN(cs)){ return 0;}\n\t        signal.delta1 = cs/signal.observe;\n\t        //Now, the peak should be symmetric in heights, but we need to know if it is symmetric in x\n\t        var symFactor = 0,weight = 0;\n\t        if(peaks.length>1){\n\t            for(i=Math.ceil(peaks.length/2)-1;i>=0;i--){\n\t                symFactor+=(3+Math.min(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))\n\t                /(3+Math.max(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))*peaks[i].intensity;\n\t                weight+=peaks[i].intensity;\n\t            }\n\t            symFactor/=weight;\n\t        }\n\t        else{\n\t            if(peaks.length==1)\n\t                symFactor=1;\n\t        }\n\t        var newSumHeights = 0;\n\t        for(i=0;i<peaks.length;i++){\n\t            newSumHeights+=peaks[i].intensity;\n\t        }\n\t        symFactor-=(heightSum-newSumHeights)/heightSum*0.12; //Removed peaks penalty\n\t        if(this.DEBUG){\n\t            console.log(\"Penalty \"+(heightSum-newSumHeights)/heightSum*0.12);\n\t            console.log(\"cs: \"+(cs/signal.observe)+\" symFactor: \"+symFactor);\n\t        }\n\t        //Sometimes we need a second opinion after the first symmetrization.\n\t        if(symFactor>0.8&&symFactor<0.97&&iteration<2){\n\t            return this.symmetrize(signal, this.maxErrorIter2, 2);\n\t        }{\n\t            //Center the given pattern at cs and symmetrize x\n\t            if(peaks.length>1) {\n\t                var weight = 0, dxi;\n\t                for (i = Math.ceil(peaks.length / 2) - 1; i >= 0; i--) {\n\t                    dxi = (peaks[i].x - peaks[peaks.length - 1 - i].x)/2.0;\n\t                    peaks[i].x =cs+dxi;\n\t                    peaks[peaks.length - 1 - i].x=cs-dxi;\n\t                }\n\t            }\n\t        }\n\t        return symFactor;\n\t    },\n\t\n\t    error : function(value){\n\t        var maxError = value*2.5;\n\t        if(maxError<0.75)\n\t            maxError = 0.75;\n\t        if(maxError > 3)\n\t            maxError = 3;\n\t        return maxError;\n\t    },\n\t    /**\n\t     * 2 stages normalizarion of the peaks heights to Math.pow(2,n).\n\t     * Creates a new mask with the peaks that could contribute to the multiplete\n\t     * @param signal\n\t     * @param n\n\t     * @returns {*}\n\t     */\n\t    normalize : function(signal, n){\n\t        //Perhaps this is slow\n\t        var peaks = JSON.parse(JSON.stringify(signal.peaksComp));\n\t        var norm = 0,norm2=0,i;//Math.pow(2,n);\n\t        for(i=0;i<peaks.length;i++){\n\t            norm+= peaks[i].intensity;\n\t        }\n\t        norm=Math.pow(2,n)/norm;\n\t        signal.mask2 = JSON.parse(JSON.stringify(signal.mask));\n\t        //console.log(\"Mask0 \"+JSON.stringify(signal.mask2));\n\t        var index=signal.mask2.length-1;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            peaks[i].intensity*= norm;\n\t            while(index>=0&&signal.mask2[index]===false)\n\t                index--;\n\t            if(peaks[i].intensity<0.75){\n\t                if(this.DEBUG)\n\t                    console.log(\"Peak \"+i+\" does not seem to belong to this multiplet \"+peaks[i].intensity);\n\t                peaks.splice(i,1);\n\t                signal.mask2[index]=false;\n\t            }\n\t            else{\n\t                norm2+= peaks[i].intensity;\n\t            }\n\t            index--;\n\t        }\n\t        norm2=Math.pow(2,n)/norm2;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            peaks[i].intensity*= norm2;\n\t        }\n\t        //console.log(\"Mask1 \"+JSON.stringify(signal.mask2));\n\t        if(this.DEBUG) console.log(JSON.stringify(peaks));\n\t        return peaks;\n\t    },\n\t\n\t    /**\n\t     * Calculates the chemical shift as the weighted sum of the peaks\n\t     * @param peaks\n\t     * @param mask\n\t     * @returns {number}\n\t     */\n\t    chemicalShift : function(peaks, mask){\n\t        var sum=0,cs= 0, i, area;\n\t        if(mask){\n\t            for(i=0;i<peaks.length;i++){\n\t                //console.log(mask[i]);\n\t                if(mask[i]===true){\n\t                    area = this.area(peaks[i]);\n\t                    sum+=area;\n\t                    cs+=area*peaks[i].x;\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            for(i=0;i<peaks.length;i++){\n\t                area = this.area(peaks[i]);\n\t                sum+=area;\n\t                cs+=area*peaks[i].x;\n\t            }\n\t        }\n\t        return cs/sum;\n\t    },\n\t\n\t    area: function(peak){\n\t        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n\t    }\n\t}\n\t\n\tmodule.exports = JAnalyzer;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\tmodule.exports.optimize = __webpack_require__(8);\n\tmodule.exports.gsd = __webpack_require__(22);\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 9/6/15.\n\t */\n\tvar Opt = __webpack_require__(9);\n\t\n\tfunction sampleFunction(from, to, x, y, lastIndex){\n\t    var nbPoints = x.length;\n\t    var sampleX = [];\n\t    var sampleY = [];\n\t    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n\t    if(direction==-1){\n\t        lastIndex[0]= x.length-1;\n\t    }\n\t\n\t    var delta = Math.abs(to-from)/2;\n\t    var mid = (from+to)/2;\n\t    var stop = false;\n\t    var index = lastIndex[0];\n\t    while(!stop&&index<nbPoints&&index>=0){\n\t        if(Math.abs(x[index]-mid)<=delta){\n\t            sampleX.push(x[index]);\n\t            sampleY.push(y[index]);\n\t            index+=direction;\n\t        }\n\t        //It is outside the range.\n\t        else{\n\t\n\t            if(Math.sign(mid-x[index])==1){\n\t                //We'll reach the mid going in the current direction\n\t                index+=direction;\n\t            }\n\t            else{\n\t                //There is not more peaks in the current range\n\t                stop=true;\n\t            }\n\t        }\n\t        //console.log(sampleX);\n\t    }\n\t    lastIndex[0]=index;\n\t    return [sampleX, sampleY];\n\t}\n\t\n\tfunction optimizePeaks(peakList,x,y,n, fnType){\n\t    var i, j, lastIndex=[0];\n\t    var groups = groupPeaks(peakList,n);\n\t    var result = [];\n\t    var factor = 1;\n\t    if(fnType==\"gaussian\")\n\t        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n\t    for(i=0;i<groups.length;i++){\n\t        var peaks = groups[i].group;\n\t        if(peaks.length>1){\n\t            //Multiple peaks\n\t            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n\t            //console.log(\"here1\");\n\t            //console.log(groups[i].limits);\n\t            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n\t            //console.log(sampling);\n\t            if(sampling[0].length>5){\n\t                var error = peaks[0].width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                var optPeaks = [];\n\t                if(fnType==\"gaussian\")\n\t                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                for(j=0;j<optPeaks.length;j++){\n\t                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            //Single peak\n\t            peaks = peaks[0];\n\t            var sampling = sampleFunction(peaks.x-n*peaks.width,\n\t                peaks.x+n*peaks.width,x,y,lastIndex);\n\t            //console.log(\"here2\");\n\t            //console.log(groups[i].limits);\n\t            if(sampling[0].length>5){\n\t                var error = peaks.width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n\t                var optPeak = [];\n\t                if(fnType==\"gaussian\")\n\t                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n\t            }\n\t        }\n\t\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction groupPeaks(peakList,nL){\n\t    var group = [];\n\t    var groups = [];\n\t    var i, j;\n\t    var limits = [peakList[0].x,nL*peakList[0].width];\n\t    var upperLimit, lowerLimit;\n\t    //Merge forward\n\t    for(i=0;i<peakList.length;i++){\n\t        //If the 2 things overlaps\n\t        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n\t            //Add the peak to the group\n\t            group.push(peakList[i]);\n\t            //Update the group limits\n\t            upperLimit = limits[0]+limits[1];\n\t            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n\t                upperLimit = peakList[i].x+nL*peakList[i].width;\n\t            }\n\t            lowerLimit = limits[0]-limits[1];\n\t            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n\t                lowerLimit = peakList[i].x-nL*peakList[i].width;\n\t            }\n\t            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t        }\n\t        else{\n\t            groups.push({limits:limits,group:group});\n\t            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n\t            group=[peakList[i]];\n\t            limits = [peakList[i].x,nL*peakList[i].width];\n\t        }\n\t    }\n\t    groups.push({limits:limits,group:group});\n\t    //Merge backward\n\t    for(i =groups.length-2;i>=0;i--){\n\t        //The groups overlaps\n\t        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n\t            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n\t            for(j=0;j<groups[i+1].group.length;j++){\n\t                groups[i].group.push(groups[i+1].group[j]);\n\t            }\n\t            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n\t            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n\t                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n\t            }\n\t            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n\t            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n\t                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n\t            }\n\t            //console.log(limits);\n\t            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t            groups.splice(i+1,1);\n\t        }\n\t    }\n\t    return groups;\n\t}\n\t\n\tmodule.exports=optimizePeaks;\n\t\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar LM = __webpack_require__(10);\n\tvar math = LM.Matrix.algebra;\n\tvar Matrix = __webpack_require__(12);\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfLorentzians(t,p,c){\n\t    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        p2 = Math.pow(p[i+nL*2][0]/2,2);\n\t        factor = p[i+nL][0]*p2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfGaussians(t,p,c){\n\t    var nL = p.length/3,factor,i, j, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t/**\n\t * Single 4 parameter lorentzian function\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleLorentzian(t,p,c){\n\t    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Single 3 parameter gaussian function\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters [mean, height, std]\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleGaussian(t,p,c){\n\t    var factor2 = p[2][0]*p[2][0]/2;\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleLorentzian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];\n\t    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t\n\t    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t\n\t\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t\n\t}\n\t\n\t/**\n\t * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleGaussian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];                         // optional vector of constants\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t\n\t    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n\t    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\t\n\t    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t}\n\t\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeLorentzianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = 1;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n\t        p_min[i+nL][0] = 0;\n\t        p_min[i+2*nL][0] = group[i].width/4;\n\t\n\t        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n\t        p_max[i+nL][0] = 1.5;\n\t        p_max[i+2*nL][0] = group[i].width*4;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t\n\t    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n\t    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n\t    p_fit=p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeGaussianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.rows,i;\n\t\n\t    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n\t    for(i=0;i<nbPoints;i++){\n\t        weight[i][0]=k;///(y_data[i][0]);\n\t        //weight[i][0]=k*(2-y_data[i][0]);\n\t    }\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n\t    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = group[i].y/maxY;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;\n\t        p_min[i+nL][0] = group[i].y*0.8/maxY;\n\t        p_min[i+2*nL][0] = group[i].width/2;\n\t\n\t        p_max[i][0] = group[i].x+dt;\n\t        p_max[i+nL][0] = group[i].y*1.2/maxY;\n\t        p_max[i+2*nL][0] = group[i].width*2;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t    //console.log(t);\n\t    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t/**\n\t *\n\t * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n\t * @param xy\n\t * @returns {*[]}\n\t */\n\tfunction parseData(xy){\n\t    var nbSeries = xy.length;\n\t    var t = null;\n\t    var y_data = null, x,y;\n\t    var maxY = 0, i,j;\n\t\n\t    if(nbSeries==2){\n\t        //Looks like row wise matrix [x,y]\n\t        var nbPoints = xy[0].length;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else{\n\t            t = new Matrix(nbPoints,1);\n\t            y_data = new Matrix(nbPoints,1);\n\t            x = xy[0];\n\t            y = xy[1];\n\t            if(typeof x[0] === \"number\"){\n\t                for(i=0;i<nbPoints;i++){\n\t                    t[i][0]=x[i];\n\t                    y_data[i][0]=y[i];\n\t                    if(y[i]>maxY)\n\t                        maxY = y[i];\n\t                }\n\t            }\n\t            else{\n\t                //It is a colum matrix\n\t                if(typeof x[0] === \"object\"){\n\t                    for(i=0;i<nbPoints;i++){\n\t                        t[i][0]=x[i][0];\n\t                        y_data[i][0]=y[i][0];\n\t                        if(y[i][0]>maxY)\n\t                            maxY = y[i][0];\n\t                    }\n\t                }\n\t\n\t            }\n\t\n\t        }\n\t    }\n\t    else{\n\t        //Looks like a column wise matrix [[x],[y]]\n\t        var nbPoints = nbSeries;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else {\n\t            t = new Matrix(nbPoints, 1);\n\t            y_data = new Matrix(nbPoints, 1);\n\t            for (i = 0; i < nbPoints; i++) {\n\t                t[i][0] = xy[i][0];\n\t                y_data[i][0] = xy[i][1];\n\t                if(y_data[i][0]>maxY)\n\t                    maxY = y_data[i][0];\n\t            }\n\t        }\n\t    }\n\t    for (i = 0; i < nbPoints; i++) {\n\t        y_data[i][0]/=maxY;\n\t    }\n\t    return [t,y_data,maxY];\n\t}\n\t\n\tfunction sizeException(nbPoints) {\n\t    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n\t}\n\t\n\tmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\n\tmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\n\tmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\n\tmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\n\tmodule.exports.singleGaussian = singleGaussian;\n\tmodule.exports.singleLorentzian = singleLorentzian;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(11);\n\tmodule.exports.Matrix = __webpack_require__(12);\n\tmodule.exports.Matrix.algebra = __webpack_require__(21);\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/5/15.\n\t */\n\tvar Matrix = __webpack_require__(12);\n\tvar math = __webpack_require__(21);\n\t\n\tvar DEBUG = false;\n\t/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n\t ----------  INPUT  VARIABLES  -----------\n\t func   = function of n independent variables, 't', and m parameters, 'p',\n\t returning the simulated model: y_hat = func(t,p,c)\n\t p      = n-vector of initial guess of parameter values\n\t t      = m-vectors or matrix of independent variables (used as arg to func)\n\t y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n\t weight = weighting vector for least squares fit ( weight >= 0 ) ...\n\t inverse of the standard measurement errors\n\t Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n\t dp     = fractional increment of 'p' for numerical derivatives\n\t dp(j)>0 central differences calculated\n\t dp(j)<0 one sided 'backwards' differences calculated\n\t dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t Default:  0.001;\n\t p_min  = n-vector of lower bounds for parameter values\n\t p_max  = n-vector of upper bounds for parameter values\n\t c      = an optional matrix of values passed to func(t,p,c)\n\t opts   = vector of algorithmic parameters\n\t parameter    defaults    meaning\n\t opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n\t opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n\t opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n\t opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n\t opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n\t opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n\t opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n\t opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n\t opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n\t opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n\t 2: Quadratic update\n\t 3: Nielsen's lambda update equations\n\t\n\t ----------  OUTPUT  VARIABLES  -----------\n\t p       = least-squares optimal estimate of the parameter values\n\t X2      = Chi squared criteria\n\t sigma_p = asymptotic standard error of the parameters\n\t sigma_y = asymptotic standard error of the curve-fit\n\t corr    = correlation matrix of the parameters\n\t R_sq    = R-squared cofficient of multiple determination\n\t cvg_hst = convergence history\n\t\n\t Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n\t modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n\t using references by\n\t Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n\t Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n\t Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n\t Mathworks        optimization toolbox reference manual\n\t K. Madsen, H.B., Nielsen, and O. Tingleff\n\t http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n\t */\n\tvar LM = {\n\t\n\t    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\t\n\t        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\t\n\t        var iteration  = 0;\t\t\t// iteration counter\n\t        //func_calls = 0;\t\t\t// running count of function evaluations\n\t\n\t        if((typeof p[0])!=\"object\"){\n\t            for(var i=0;i< p.length;i++){\n\t                p[i]=[p[i]];\n\t            }\n\t\n\t        }\n\t        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n\t        var i,k;\n\t        var eps = 2^-52;\n\t        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n\t        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n\t        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n\t        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n\t        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var J =  Matrix.zeros(Npnt,Npar);\n\t\n\t\n\t        if (t.length != y_dat.length) {\n\t            console.log('lm.m error: the length of t must equal the length of y_dat');\n\t\n\t            length_t = t.length;\n\t            length_y_dat = y_dat.length;\n\t            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n\t            if (!tensor_parameter) {\n\t                return;\n\t            }\n\t        }\n\t\n\t        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n\t        dp = dp || 0.001;\n\t        p_min   = p_min || math.multiply(Math.abs(p),-100);\n\t        p_max   = p_max || math.multiply(Math.abs(p),100);\n\t        c = c || 1;\n\t        // Algorithmic Paramters\n\t        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n\t        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\t\n\t        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n\t        var MaxIter       = opts[1];\t// maximum number of iterations\n\t        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n\t        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n\t        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n\t        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n\t        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n\t        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n\t        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n\t        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n\t        // 2: Quadratic update\n\t        // 3: Nielsen's lambda update equations\n\t\n\t        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\t\n\t\n\t        if(!dp.length || dp.length == 1){\n\t            var dp_array = new Array(Npar);\n\t            for(var i=0;i<Npar;i++)\n\t                dp_array[i]=[dp];\n\t            dp=dp_array;\n\t        }\n\t\n\t        // indices of the parameters to be fit\n\t        var idx   = [];\n\t        for(i=0;i<dp.length;i++){\n\t            if(dp[i][0]!=0){\n\t                idx.push(i);\n\t            }\n\t        }\n\t\n\t        var Nfit = idx.length;\t\t\t// number of parameters to fit\n\t        var stop = false;\t\t\t\t// termination flag\n\t\n\t        var weight_sq = null;\n\t        //console.log(weight);\n\t        if ( !weight.length || weight.length < Npnt )\t{\n\t            // squared weighting vector\n\t            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n\t            //console.log(\"weight[0] \"+typeof weight[0]);\n\t            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n\t            weight_sq = math.dotMultiply(tmp,tmp);\n\t        }\n\t        else{\n\t            //weight_sq = (weight(:)).^2;\n\t            weight_sq = math.dotMultiply(weight,weight);\n\t        }\n\t\n\t\n\t        // initialize Jacobian with finite difference calculation\n\t        //console.log(\"J \"+weight_sq);\n\t        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        //console.log(JtWJ);\n\t\n\t        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n\t            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n\t            console.log(' *** epsilon_1 = ', epsilon_1);\n\t            stop = true;\n\t        }\n\t\n\t\n\t        switch(Update_Type){\n\t            case 1: // Marquardt: init'l lambda\n\t                lambda  = lambda_0;\n\t                break;\n\t            default:    // Quadratic and Nielsen\n\t                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n\t                nu=2;\n\t        }\n\t        //console.log(X2);\n\t        X2_old = X2; // previous value of X2\n\t        //console.log(MaxIter+\" \"+Npar);\n\t        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n\t        var h = null;\n\t        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n\t            iteration = iteration + 1;\n\t            // incremental change in parameters\n\t            switch(Update_Type){\n\t                case 1:\t\t\t\t\t// Marquardt\n\t                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n\t                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n\t                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n\t                    break;\n\t                default:\t\t\t\t\t// Quadratic and Nielsen\n\t                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\t\n\t                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n\t            }\n\t\n\t            /*for(var k=0;k< h.length;k++){\n\t             h[k]=[h[k]];\n\t             }*/\n\t            //console.log(\"h \"+h);\n\t            //h=math.matrix(h);\n\t            //  big = max(abs(h./p)) > 2;\n\t            //this is a big step\n\t            // --- Are parameters [p+h] much better than [p] ?\n\t            var hidx = new Array(idx.length);\n\t            for(k=0;k<idx.length;k++){\n\t                hidx[k]=h[idx[k]];\n\t            }\n\t            var p_try = math.add(p, hidx);// update the [idx] elements\n\t\n\t            for(k=0;k<p_try.length;k++){\n\t                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n\t            }\n\t            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\t\n\t            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n\t            //func_calls = func_calls + 1;\n\t            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\t\n\t            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t\n\t            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n\t                //    One step of quadratic line update in the h direction for minimum X2\n\t                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n\t                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t\n\t                h = math.multiply(alpha, h);\n\t                for(var k=0;k<idx.length;k++){\n\t                    hidx[k]=h[idx[k]];\n\t                }\n\t\n\t                p_try = math.add(p ,hidx);                     // update only [idx] elements\n\t                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\t\n\t                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n\t                // func_calls = func_calls + 1;\n\t                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n\t                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n\t            }\n\t\n\t            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n\t            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n\t            //console.log(\"rho \"+rho);\n\t            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n\t                //console.log(\"Here\");\n\t                dX2 = X2 - X2_old;\n\t                X2_old = X2;\n\t                p_old = p;\n\t                y_old = y_hat;\n\t                p = p_try;\t\t\t// accept p_try\n\t\n\t                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n\t                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                // decrease lambda ==> Gauss-Newton method\n\t\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t\t// Nielsen\n\t                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n\t                        nu = 2;\n\t                        break;\n\t                }\n\t            }\n\t            else {\t\t\t\t\t// it IS NOT better\n\t                X2 = X2_old;\t\t\t// do not accept p_try\n\t                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n\t                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n\t                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                }\n\t\n\t                // increase lambda  ==> gradient descent method\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t// Nielsen\n\t                        lambda = lambda * nu;\n\t                        nu = 2 * nu;\n\t                        break;\n\t                }\n\t            }\n\t        }// --- End of Main Loop\n\t\n\t        // --- convergence achieved, find covariance and confidence intervals\n\t\n\t        // equal weights for paramter error analysis\n\t        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\t\n\t        weight_sq.apply(function(i,j){\n\t            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n\t        });\n\t        //console.log(weight_sq);\n\t        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n\t        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t\n\t        /*if nargout > 2\t\t\t\t// standard error of parameters\n\t         covar = inv(JtWJ);\n\t         sigma_p = sqrt(diag(covar));\n\t         end\n\t\n\t         if nargout > 3\t\t\t\t// standard error of the fit\n\t         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n\t         sigma_y = zeros(Npnt,1);\n\t         for i=1:Npnt\n\t         sigma_y(i) = J(i,:) * covar * J(i,:)';\n\t         end\n\t         sigma_y = sqrt(sigma_y);\n\t         end\n\t\n\t         if nargout > 4\t\t\t\t// parameter correlation matrix\n\t         corr = covar ./ [sigma_p*sigma_p'];\n\t         end\n\t\n\t         if nargout > 5\t\t\t\t// coefficient of multiple determination\n\t         R_sq = corrcoef([y_dat y_hat]);\n\t         R_sq = R_sq(1,2).^2;\n\t         end\n\t\n\t         if nargout > 6\t\t\t\t// convergence history\n\t         cvg_hst = cvg_hst(1:iteration,:);\n\t         end*/\n\t\n\t        // endfunction  # ---------------------------------------------------------- LM\n\t\n\t        return { p:p, X2:X2};\n\t    },\n\t\n\t    lm_FD_J:function(func,t,p,y,dp,c) {\n\t        // J = lm_FD_J(func,t,p,y,{dp},{c})\n\t        //\n\t        // partial derivatives (Jacobian) dy/dp for use with lm.m\n\t        // computed via Finite Differences\n\t        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n\t        // -------- INPUT VARIABLES ---------\n\t        // func = function of independent variables, 't', and parameters, 'p',\n\t        //        returning the simulated model: y_hat = func(t,p,c)\n\t        // t  = m-vector of independent variables (used as arg to func)\n\t        // p  = n-vector of current parameter values\n\t        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n\t        // dp = fractional increment of p for numerical derivatives\n\t        //      dp(j)>0 central differences calculated\n\t        //      dp(j)<0 one sided differences calculated\n\t        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //      Default:  0.001;\n\t        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t        var m = y.length;\t\t\t// number of data points\n\t        var n = p.length;\t\t\t// number of parameters\n\t\n\t        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\t\n\t        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n\t        //var ps = $.extend(true, [], p);\n\t        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\t\n\t        for (var j = 0;j < n; j++) {\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n\t            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t\n\t            if (del[j] != 0){\n\t                y1 = func(t, p, c);\n\t                //func_calls = func_calls + 1;\n\t                if (dp[j][0] < 0) {\t\t// backwards difference\n\t                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n\t                    //console.log(del[j]);\n\t                    //console.log(y);\n\t                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t                    //console.log(column);\n\t                }\n\t                else{\n\t                    p[j][0] = ps[j][0] - del[j];\n\t                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n\t                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t\n\t                }\t\t\t// central difference, additional func call\n\t            }\n\t\n\t            p[j] = ps[j];\t\t// restore p(j)\n\t\n\t        }\n\t        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n\t        return J;\n\t\n\t    },\n\t\n\t    // endfunction # -------------------------------------------------- LM_FD_J\n\t    lm_Broyden_J: function(p_old,y_old,J,p,y){\n\t        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n\t        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n\t        //---------- INPUT VARIABLES -------\n\t        // p_old = previous set of parameters\n\t        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n\t        // J  = current version of the Jacobian matrix\n\t        // p     = current  set of parameters\n\t        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t        //console.log(p+\" X \"+ p_old)\n\t        var h  = math.subtract(p, p_old);\n\t\n\t        //console.log(\"hhh \"+h);\n\t        var h_t = math.transpose(h);\n\t        h_t.div(math.multiply(h_t,h));\n\t\n\t        //console.log(h_t);\n\t        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n\t        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n\t        return J;\n\t        // endfunction # ---------------------------------------------- LM_Broyden_J\n\t    },\n\t\n\t    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n\t        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n\t        //\n\t        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n\t        // and calculate the Chi-squared error function, Chi_sq\n\t        // Used by Levenberg-Marquard algorithm, lm.m\n\t        // -------- INPUT VARIABLES ---------\n\t        // func   = function ofpn independent variables, p, and m parameters, p,\n\t        //         returning the simulated model: y_hat = func(t,p,c)\n\t        // t      = m-vectors or matrix of independent variables (used as arg to func)\n\t        // p_old  = n-vector of previous parameter values\n\t        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n\t        // dX2    = previous change in Chi-squared criteria\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t        // p      = n-vector of current  parameter values\n\t        // y_dat  = n-vector of data to be fit by func(t,p,c)\n\t        // weight_sq = square of the weighting vector for least squares fit ...\n\t        //\t    inverse of the standard measurement errors\n\t        // dp     = fractional increment of 'p' for numerical derivatives\n\t        //          dp(j)>0 central differences calculated\n\t        //          dp(j)<0 one sided differences calculated\n\t        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //          Default:  0.001;\n\t        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n\t        // JtWdy   = linearized fitting vector\n\t        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n\t        // y_hat  = model evaluated with parameters 'p'\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t\n\t        var Npnt = y_dat.length;\t\t// number of data points\n\t        var Npar = p.length;\t\t// number of parameters\n\t\n\t        dp = dp || 0.001;\n\t\n\t\n\t        //var JtWJ = new Matrix.zeros(Npar);\n\t        //var JtWdy  = new Matrix.zeros(Npar,1);\n\t\n\t        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n\t        //func_calls = func_calls + 1;\n\t        //console.log(J);\n\t        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n\t            //console.log(\"Par\");\n\t            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n\t        }\n\t        else{\n\t            //console.log(\"ImPar\");\n\t            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n\t        }\n\t        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n\t        //console.log(delta_y[0][0]);\n\t        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n\t        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n\t        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n\t        var Jt = math.transpose(J);\n\t\n\t        //console.log(weight_sq);\n\t\n\t        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\t\n\t        //JtWdy = J' * ( weight_sq .* delta_y );\n\t        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\t\n\t\n\t        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n\t        // endfunction  # ------------------------------------------------------ LM_MATX\n\t    }\n\t\n\t\n\t\n\t};\n\t\n\tmodule.exports = LM;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(13);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(14);\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(15);\n\tvar EigenvalueDecomposition = __webpack_require__(17);\n\tvar LuDecomposition = __webpack_require__(18);\n\tvar QrDecomposition = __webpack_require__(19);\n\tvar CholeskyDecomposition = __webpack_require__(20);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\tvar hypotenuse = __webpack_require__(16).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\tvar hypotenuse = __webpack_require__(16).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\tvar hypotenuse = __webpack_require__(16).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(13);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/24/15.\n\t */\n\t/**\n\t * Non in-place function definitions, compatible with mathjs code *\n\t */\n\t\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(12);\n\t\n\tfunction matrix(A,B){\n\t    return new Matrix(A,B);\n\t}\n\t\n\tfunction ones(rows, cols){\n\t    return Matrix.ones(rows,cols);\n\t}\n\t\n\tfunction eye(rows, cols){\n\t    return Matrix.eye(rows, cols);\n\t}\n\t\n\tfunction zeros(rows, cols){\n\t    return Matrix.zeros(rows, cols);\n\t}\n\t\n\tfunction random(rows, cols){\n\t    return Matrix.rand(rows,cols);\n\t}\n\t\n\tfunction transpose(A){\n\t    if(typeof A == 'number')\n\t        return A;\n\t    var result = A.clone();\n\t    return result.transpose();\n\t}\n\t\n\tfunction add(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A+B;\n\t    if(typeof A == 'number')\n\t        return this.add(B,A);\n\t\n\t    var result = A.clone();\n\t    return result.add(B);\n\t\n\t}\n\t\n\tfunction subtract(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A-B;\n\t    if(typeof A == 'number')\n\t        return this.subtract(B,A);\n\t    var result = A.clone();\n\t    return result.sub(B);\n\t}\n\t\n\tfunction multiply(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A*B;\n\t    if(typeof A == 'number')\n\t        return this.multiply(B,A);\n\t\n\t    var result = A.clone();\n\t\n\t    if(typeof B === 'number')\n\t        result.mul(B);\n\t    else\n\t        result = result.mmul(B);\n\t\n\t    if(result.rows==1&&result.columns==1)\n\t        return result[0][0];\n\t    else\n\t        return result;\n\t\n\t}\n\t\n\tfunction dotMultiply(A, B){\n\t    var result = A.clone();\n\t    return result.mul(B);\n\t}\n\t\n\tfunction dotDivide(A, B){\n\t    var result = A.clone();\n\t    return result.div(B);\n\t}\n\t\n\tfunction diag(A){\n\t    var diag = null;\n\t    var rows = A.rows, cols = A.columns, j, r;\n\t    //It is an array\n\t    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n\t        if(A[0]&&A[0].length){\n\t            rows = A.length;\n\t            cols = A[0].length;\n\t            r = Math.min(rows,cols);\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j][j];\n\t            }\n\t        }\n\t        else{\n\t            cols = A.length;\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j];\n\t            }\n\t        }\n\t\n\t    }\n\t    if(rows == 1){\n\t        diag = Matrix.zeros(cols, cols);\n\t        for (j = 0; j < cols; j++) {\n\t            diag[j][j]=A[0][j];\n\t        }\n\t    }\n\t    else{\n\t        if(rows>0 && cols > 0){\n\t            r = Math.min(rows,cols);\n\t            diag = new Array(r);\n\t            for (j = 0; j < r; j++) {\n\t                diag[j] = A[j][j];\n\t            }\n\t        }\n\t    }\n\t    return diag;\n\t}\n\t\n\tfunction min(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.min(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] < B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction max(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.max(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] > B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction sqrt(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.sqrt(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction abs(A){\n\t    if(typeof A==='number' )\n\t        return Math.abs(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.abs(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction exp(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.exp(A[i][j]);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction dotPow(A, b){\n\t    if(typeof A==='number' )\n\t        return Math.pow(A,b);\n\t    //console.log(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.pow(A[i][j],b);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction solve(A, B){\n\t    return A.solve(B);\n\t}\n\t\n\tfunction inv(A){\n\t    if(typeof A ===\"number\")\n\t        return 1/A;\n\t    return A.inverse();\n\t}\n\t\n\tmodule.exports = {\n\t    transpose:transpose,\n\t    add:add,\n\t    subtract:subtract,\n\t    multiply:multiply,\n\t    dotMultiply:dotMultiply,\n\t    dotDivide:dotDivide,\n\t    diag:diag,\n\t    min:min,\n\t    max:max,\n\t    solve:solve,\n\t    inv:inv,\n\t    sqrt:sqrt,\n\t    exp:exp,\n\t    dotPow:dotPow,\n\t    abs:abs,\n\t    matrix:matrix,\n\t    ones:ones,\n\t    zeros:zeros,\n\t    random:random,\n\t    eye:eye\n\t};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Opt = __webpack_require__(9);\n\t\n\tfunction gsd(x, y, options){\n\t    var options=Object.create(options || {});\n\t    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n\t    if (options.broadRatio===undefined) options.broadRatio=0.00;\n\t    if (options.noiseLevel===undefined) options.noiseLevel=0;\n\t    if (options.maxCriteria===undefined) options.maxCriteria=true;\n\t    if (options.smoothY===undefined) options.smoothY=true;\n\t\n\t\n\t    if (options.noiseLevel>0) {\n\t        y=[].concat(y);\n\t        for (var i=0; i<y.length; i++){\n\t            if(Math.abs(y[i])<options.noiseLevel) {\n\t                y[i]=0;\n\t            }\n\t        }\n\t    }\n\t\n\t    // fill convolution frequency axis\n\t    var X = [];//x[2:(x.length-2)];\n\t\n\t    // fill Savitzky-Golay polynomes\n\t    var size= x.length-4;\n\t    var Y = new Array(size);\n\t    var dY = new Array(size);\n\t    var ddY = new Array(size);\n\t    //var dX = new Array(size);\n\t    var dx = x[1]-x[0];\n\t\n\t    for (var j = 2; j < size+2; j++) {\n\t        dx = x[j]-x[j-1];\n\t        if(options.smoothY)\n\t            Y[j-2]=(1/35.0)*(-3*y[j-2] + 12*y[j-1] + 17*y[j] + 12*y[j+1] - 3*y[j+2]);\n\t        else\n\t            Y[j-2]=y[j];\n\t        X[j-2]=x[j];\n\t        dY[j-2]=(1/(12*dx))*(y[j-2] - 8*y[j-1] + 8*y[j+1] - y[j+2]);\n\t        ddY[j-2]=(1/(7*dx*dx))*(2*y[j-2] - y[j-1] - 2*y[j] - y[j+1] + 2*y[j+2]);\n\t    }\n\t\n\t    var maxDdy=0;\n\t    var maxY = 0;\n\t    //console.log(Y.length);\n\t    for (var i = 0; i < Y.length ; i++){\n\t        if(Math.abs(ddY[i])>maxDdy){\n\t            maxDdy = Math.abs(ddY[i]);\n\t        }\n\t        if(Math.abs(Y[i])>maxY){\n\t            maxY = Math.abs(Y[i]);\n\t        }\n\t    }\n\t    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n\t    var minddY = [];\n\t    var intervals = [];\n\t    var lastMax = null;\n\t    var lastMin = null;\n\t    var broadMask = new Array();\n\t    //console.log(dx);\n\t    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n\t    for (var i = 1; i < Y.length -1 ; i++){\n\t        //console.log(dY[i]);\n\t        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n\t            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n\t            lastMin = X[i];\n\t            //console.log(\"min \"+lastMin);\n\t            if(dx>0&&lastMax!=null){\n\t                intervals.push( [lastMax , lastMin] );\n\t            }\n\t        }\n\t\n\t        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n\t            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n\t            lastMax = X[i];\n\t            //console.log(\"max \"+lastMax);\n\t            if(dx<0&&lastMin!=null){\n\t                intervals.push( [lastMax , lastMin] );\n\t            }\n\t        }\n\t\n\t        if(options.maxCriteria){\n\t            if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n\t                minddY.push( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n\t                if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n\t                    broadMask.push(false);\n\t                }\n\t                else{\n\t                    broadMask.push(true);\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            if ((ddY[i] > ddY[i-1]) && (ddY[i] > ddY[i+1])) {\n\t                minddY.push( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n\t                if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n\t                    broadMask.push(false);\n\t                }\n\t                else{\n\t                    broadMask.push(true);\n\t                }\n\t            }\n\t        }\n\t\n\t    }\n\t    realTopDetection(minddY,X,Y);\n\t    //console.log(intervals);\n\t    //console.log(minddY.length);\n\t    var signals = [];\n\t\n\t    for (var j = 0; j < minddY.length; j++){\n\t        var f = minddY[j];\n\t        var frequency = f[0];\n\t        var possible = [];\n\t        for (var k=0; k<intervals.length; k++){\n\t            var i = intervals[k];\n\t            if(Math.abs(frequency-(i[0]+i[1])/2)<Math.abs(i[0]-i[1])/2)\n\t                possible.push(i);\n\t        }\n\t        //console.log(\"possible \"+possible.length);\n\t        if (possible.length > 0)\n\t            if (possible.length == 1)\n\t            {\n\t                var inter = possible[0];\n\t                var linewidth = Math.abs(inter[1] - inter[0]);\n\t                var height = f[1];\n\t                //console.log(height);\n\t                if (Math.abs(height) > options.minMaxRatio*maxY) {\n\t                    signals.push({\n\t                        x: frequency,\n\t                        y: height,\n\t                        width: linewidth//*widthCorrection\n\t                    })\n\t                }\n\t            }\n\t            else\n\t            {\n\t                //TODO: nested peaks\n\t                // console.log(\"Nested \"+possible);\n\t            }\n\t    }\n\t    if(options.broadRatio>0){\n\t        var broadLines=[[Number.MAX_VALUE,0,0]];\n\t        //Optimize the possible broad lines\n\t        var max=0, maxI=0,count=0;\n\t        var candidates = [],broadLinesS=[];\n\t        var isPartOf = false;\n\t\n\t        for(var i=broadLines.length-1;i>0;i--){\n\t            //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n\t            if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\t\n\t                candidates.push(broadLines[i]);\n\t                if(broadLines[i][1]>max){\n\t                    max = broadLines[i][1];\n\t                    maxI = i;\n\t                }\n\t                count++;\n\t            }\n\t            else{\n\t                isPartOf = true;\n\t                if(count>30){ // TODO, an options ?\n\t                    isPartOf = false;\n\t                    //for(var j=0;j<signals.length;j++){\n\t                    //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n\t                    //       isPartOf = true;\n\t                    //    }\n\t                    //console.log(\"Was part of \"+isPartOf);\n\t                }\n\t                if(isPartOf){\n\t                    for(var j=0;j<candidates.length;j++){\n\t                        signals.push([candidates[j][0], candidates[j][1], dx]);\n\t                    }\n\t                }\n\t                else{\n\t                    var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n\t                        width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n\t                        []);\n\t                    //console.log(fitted);\n\t                    signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n\t                }\n\t                candidates = [];\n\t                max = 0;\n\t                maxI = 0;\n\t                count = 0;\n\t            }\n\t        }\n\t    }\n\t\n\t    signals.sort(function (a, b) {\n\t        return a.x - b.x;\n\t    });\n\t\n\t\n\t    return signals;\n\t}\n\t\n\tfunction realTopDetection(peakList, x, y){\n\t    var listP = [];\n\t    var alpha, beta, gamma, p,currentPoint;\n\t    for(var j=0;j<peakList.length;j++){\n\t        currentPoint = peakList[j][2];\n\t        //The detected peak could be moved 1 or 2 unit to left or right.\n\t        if(y[currentPoint-1]>=y[currentPoint-2]\n\t            &&y[currentPoint-1]>=y[currentPoint]) {\n\t            currentPoint--;\n\t        }\n\t        else{\n\t            if(y[currentPoint+1]>=y[currentPoint]\n\t                &&y[currentPoint+1]>=y[currentPoint+2]) {\n\t                currentPoint++;\n\t            }\n\t            else{\n\t                if(y[currentPoint-2]>=y[currentPoint-3]\n\t                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n\t                    currentPoint-=2;\n\t                }\n\t                else{\n\t                    if(y[currentPoint+2]>=y[currentPoint+1]\n\t                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n\t                        currentPoint+=2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n\t            &&y[currentPoint]>=y[currentPoint-1]\n\t            &&y[currentPoint]>=y[currentPoint+1]) {\n\t            alpha = 20 * Math.log10(y[currentPoint - 1]);\n\t            beta = 20 * Math.log10(y[currentPoint]);\n\t            gamma = 20 * Math.log10(y[currentPoint + 1]);\n\t            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n\t\n\t            peakList[j][0] = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n\t            peakList[j][1] = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n\t                - [currentPoint + 1]) * p;//signal.peaks[j].intensity);\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports=gsd;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar SD = __webpack_require__(1);\n\tvar PeakPicking2D = __webpack_require__(24);\n\tvar JcampConverter=__webpack_require__(3);\n\t\n\tfunction NMR2D(sd) {\n\t    SD.call(this, sd); // Héritage\n\t}\n\t\n\tNMR2D.prototype = Object.create(SD.prototype);\n\tNMR2D.prototype.constructor = NMR2D;\n\t\n\tNMR2D.fromJcamp = function(jcamp,options) {\n\t    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n\t    var spectrum= JcampConverter.convert(jcamp,options);\n\t    return new NMR2D(spectrum);\n\t}\n\t\n\tNMR2D.prototype.isHomoNuclear=function(){\n\t    return this.sd.xType==this.sd.yType;\n\t}\n\t\n\t//Returns the observe frequency in the direct dimension\n\tNMR2D.prototype.observeFrequencyX=function(){\n\t    return this.sd.spectra[0].observeFrequency;\n\t}\n\t\n\t//Returns the observe frequency in the indirect dimension\n\tNMR2D.prototype.observeFrequencyY=function(){\n\t    return this.sd.indirectFrequency;\n\t}\n\t\n\t/**\n\t * Returns the solvent name\n\t */\n\tNMR2D.prototype.getSolventName=function(){\n\t    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]).replace(\"<\",\"\").replace(\">\",\"\");\n\t}\n\t\n\t/**\n\t * This function returns the units of the direct dimension. It overrides the SD getXUnits function\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getXUnits = function(){\n\t    return this.sd.ntuples[1].units;\n\t}\n\t/**\n\t * This function returns the units of the indirect dimension. It overrides the SD getYUnits function\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getYUnits = function(){\n\t    return this.sd.ntuples[0].units;\n\t}\n\t/**\n\t * Returns the units of the dependent variable\n\t * @returns {ntuples.units|*|b.units}\n\t */\n\tNMR2D.prototype.getZUnits = function(){\n\t    return this.sd.ntuples[2].units;\n\t}\n\t/**\n\t * Overwrite this function. Now, the Y axe refers to the indirect dimension\n\t * @returns {sd.minMax.maxY}\n\t */\n\tNMR2D.prototype.getLastY = function(){\n\t    return this.sd.minMax.maxY;\n\t}\n\t/**\n\t * * Overwrite this function. Now, the Y axe refers to the indirect dimension\n\t * @returns {sd.minMax.minY}\n\t */\n\tNMR2D.prototype.getFirstY = function(){\n\t    return this.sd.minMax.minY;\n\t}\n\t\n\t//Returns the separation between 2 consecutive points in the indirect domain\n\tNMR2D.prototype.getDeltaY=function(){\n\t    return ( this.getLastY()-this.getFirstY()) / (this.getNbSubSpectra()-1);\n\t}\n\t\n\t/**\n\t * @function nmrPeakDetection2D(options)\n\t * This function process the given spectraData and tries to determine the NMR signals. \n\t + Returns an NMRSignal2D array containing all the detected 2D-NMR Signals\n\t * @param\toptions:+Object\t\t\tObject containing the options\n\t * @option\tthresholdFactor:number\tA factor to scale the automatically determined noise threshold.\n\t * @returns\t+Object\tset of NMRSignal2D\n\t */\n\tNMR2D.prototype.nmrPeakDetection2D=function(options){\n\t    options = options||{};\n\t    if(!options.thresholdFactor)\n\t        options.thresholdFactor=1;\n\t    var id = Math.round(Math.random()*255);\n\t    if(!options.id){\n\t        id=options.id;\n\t    }\n\t    var peakList = PeakPicking2D.findPeaks2D(this, options.thresholdFactor);\n\t\n\t    //lets add an unique ID for each peak.\n\t    for(var i=0;i<peakList.length;i++){\n\t        peakList[i]._highlight=[id+\"_\"+i];\n\t    }\n\t    return peakList;\n\t}\n\t\n\t/**\n\t* Returns the noise factor depending on the nucleus.\n\t*/\n\tNMR2D.prototype.getNMRPeakThreshold=function(nucleus) {\n\t    if (nucleus == \"1H\")\n\t        return 3.0;\n\t    if (nucleus ==\"13C\")\n\t        return 5.0;\n\t    return 1.0;\n\t}\n\t\n\t/**\n\t* Returns the nucleus in the specified dimension\n\t*/\n\tNMR2D.prototype.getNucleus=function(dim){\n\t    if(dim==1)\n\t        return this.sd.xType;\n\t    if(dim==2)\n\t        return this.sd.yType;\n\t    return this.sd.xType;\n\t}\n\t\n\tmodule.exports = NMR2D;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lib = __webpack_require__(25);\n\tvar PeakOptimizer = __webpack_require__(28);\n\tvar SimpleClustering =  __webpack_require__(29);\n\tvar StatArray = __webpack_require__(2);\n\tvar FFTUtils = lib.FFTUtils;\n\t\n\tvar PeakPicking2D= {\n\t    DEBUG : false,\n\t    smallFilter : [\n\t        [0, 0, 1, 2, 2, 2, 1, 0, 0],\n\t        [0, 1, 4, 7, 7, 7, 4, 1, 0],\n\t        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n\t        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n\t        [2, 7, 0, -23, -40, -23, 0, 7, 2],\n\t        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n\t        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n\t        [0, 1, 3, 7, 7, 7, 3, 1, 0],\n\t        [0, 0, 1, 2, 2, 2, 1, 0, 0]],\n\t\n\t\n\t    //How noisy is the spectrum depending on the kind of experiment.\n\t    getLoGnStdDevNMR : function(spectraData) {\n\t    if (spectraData.isHomoNuclear())\n\t        return 1.5\n\t    else\n\t        return 3;\n\t    },\n\t\n\t    findPeaks2D : function(spectraData, thresholdFactor){\n\t        if(thresholdFactor==0)\n\t            thresholdFactor=1;\n\t        if(thresholdFactor<0)\n\t            thresholdFactor=-thresholdFactor;\n\t        var nbPoints = spectraData.getNbPoints();\n\t        var nbSubSpectra = spectraData.getNbSubSpectra();\n\t\n\t        var data = new Array(nbPoints * nbSubSpectra);\n\t        //var data = new Array(nbPoints * nbSubSpectra/2);\n\t\n\t        var isHomonuclear = spectraData.isHomoNuclear();\n\t\n\t        //var sum = new Array(nbPoints);\n\t\n\t        for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra; iSubSpectra++) {\n\t            var spectrum = spectraData.getYData(iSubSpectra);\n\t            for (var iCol = 0; iCol < nbPoints; iCol++) {\n\t                if(isHomonuclear){\n\t                    data[iSubSpectra * nbPoints + iCol] =(spectrum[iCol]>0?spectrum[iCol]:0);\n\t                }\n\t                else{\n\t                    data[iSubSpectra * nbPoints + iCol] =Math.abs(spectrum[iCol]);\n\t                }\n\t            }\n\t        }\n\t\n\t        var nStdDev = this.getLoGnStdDevNMR(spectraData);\n\t        if(isHomonuclear){\n\t            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n\t            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);//)1.5);\n\t            var peaksMax1 = this.findPeaks2DMax(data, convolutedSpectrum, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);//2.0);\n\t            for(var i=0;i<peaksMC1.length;i++)\n\t                peaksMax1.push(peaksMC1[i]);\n\t            //console.log(peaksMax1);\n\t            return PeakOptimizer.enhanceSymmetry(this.createSignals2D(peaksMax1,spectraData,24));\n\t\n\t        }\n\t        else{\n\t            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n\t            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);\n\t            //Peak2D[] peaksMC1 = PeakPicking2D.findPeaks2DMax(data, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);\n\t            //Remove peaks with less than 3% of the intensity of the highest peak\n\t            return this.createSignals2D(PeakOptimizer.clean(peaksMC1, 0.05), spectraData,24);\n\t        }\n\t\n\t    },\n\t    /**\n\t     Calculates the 1st derivative of the 2D matrix, using the LoG kernel approximation\n\t     */\n\t    convoluteWithLoG : function(inputSpectrum, nRows, nCols){\n\t        var ftSpectrum = new Array(nCols * nRows);\n\t        for (var i = nRows * nCols-1; i >=0; i--){\n\t            ftSpectrum[i] = inputSpectrum[i];\n\t        }\n\t\n\t        ftSpectrum = FFTUtils.fft2DArray(ftSpectrum, nRows, nCols);\n\t\n\t        var dim = this.smallFilter.length;\n\t        var ftFilterData = new Array(nCols * nRows);\n\t        for(var i=nCols * nRows-1;i>=0;i--){\n\t            ftFilterData[i]=0;\n\t        }\n\t\n\t        var iRow, iCol;\n\t        var shift = (dim - 1) / 2;\n\t        //console.log(dim);\n\t        for (var ir = 0; ir < dim; ir++) {\n\t            iRow = (ir - shift + nRows) % nRows;\n\t            for (var ic = 0; ic < dim; ic++) {\n\t                iCol = (ic - shift + nCols) % nCols;\n\t                ftFilterData[iRow * nCols + iCol] = this.smallFilter[ir][ic];\n\t            }\n\t        }\n\t\n\t        ftFilterData = FFTUtils.fft2DArray(ftFilterData, nRows, nCols);\n\t\n\t        var ftRows = nRows * 2;\n\t        var ftCols = nCols / 2 + 1;\n\t        FFTUtils.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\t\n\t        return  FFTUtils.ifft2DArray(ftSpectrum, ftRows, ftCols);\n\t    },\n\t    /**\n\t     Detects all the 2D-peaks in the given spectrum based on center of mass logic.\n\t     */\n\t    findPeaks2DLoG : function(inputSpectrum, convolutedSpectrum, nRows, nCols, nStdDev) {\n\t        var threshold = 0;\n\t        for(var i=nCols*nRows-2;i>=0;i--)\n\t            threshold+=Math.pow(convolutedSpectrum[i]-convolutedSpectrum[i+1],2);\n\t        threshold=-Math.sqrt(threshold);\n\t        threshold*=nStdDev/nRows;\n\t\n\t        var bitmask = new Array(nCols * nRows);\n\t        for(var i=nCols * nRows-1;i>=0;i--){\n\t            bitmask[i]=0;\n\t        }\n\t        var nbDetectedPoints = 0;\n\t        var lasti=-1;\n\t        for (var i = convolutedSpectrum.length-1; i >=0 ; i--) {\n\t            if (convolutedSpectrum[i] < threshold) {\n\t                bitmask[i] = 1;\n\t                nbDetectedPoints++;\n\t            }\n\t        }\n\t        var iStart = 0;\n\t        //int ranges = 0;\n\t        var peakList = [];\n\t\n\t        while (nbDetectedPoints != 0) {\n\t            for (iStart; iStart < bitmask.length && bitmask[iStart]==0; iStart++){};\n\t            //\n\t            if (iStart == bitmask.length)\n\t                break;\n\t\n\t            nbDetectedPoints -= this.extractArea(inputSpectrum, convolutedSpectrum,\n\t                bitmask, iStart, nRows, nCols, peakList, threshold);\n\t        }\n\t\n\t        if (peakList.length > 0&&this.DEBUG) {\n\t            console.log(\"No peak found\");\n\t        }\n\t        return peakList;\n\t    },\n\t    /**\n\t     Detects all the 2D-peaks in the given spectrum based on the Max logic.\n\t     */\n\t    findPeaks2DMax : function(inputSpectrum, cs, nRows, nCols, nStdDev) {\n\t        var threshold = 0;\n\t        for(var i=nCols*nRows-2;i>=0;i--)\n\t            threshold+=Math.pow(cs[i]-cs[i+1],2);\n\t        threshold=-Math.sqrt(threshold);\n\t        threshold*=nStdDev/nRows;\n\t\n\t        var rowI,colI;\n\t        var peakListMax = [];\n\t        var tmpIndex = 0;\n\t        for (var i = 0; i < cs.length; i++) {\n\t            if (cs[i] < threshold) {\n\t                //It is a peak?\n\t                rowI=Math.floor(i/nCols);\n\t                colI=i%nCols;\n\t                //Verifies if this point is a peak;\n\t                if(rowI>0&&rowI+1<nRows&&colI+1<nCols&&colI>0){\n\t                    //It is the minimum in the same row\n\t                    if(cs[i]<cs[i+1]&&cs[i]<cs[i-1]){\n\t                        //It is the minimum in the previous row\n\t                        tmpIndex=(rowI-1)*nCols+colI;\n\t                        if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t                            //It is the minimum in the next row\n\t                            tmpIndex=(rowI+1)*nCols+colI;\n\t                            if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n\t                                peakListMax.push({x:colI,y:rowI,z:inputSpectrum[i]});\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return peakListMax;\n\t    },\n\t    /*\n\t     This function detects the peaks\n\t     */\n\t    extractArea : function(spectrum, convolutedSpectrum, bitmask, iStart,\n\t                                                   nRows, nCols, peakList, threshold) {\n\t        var iRow = Math.floor(iStart / nCols);\n\t        var iCol = iStart % nCols;\n\t        var peakPoints =[];\n\t        //console.log(iStart+\" \"+iRow+\" \"+iCol);\n\t        // scanBitmask(bitmask, convolutedSpectrum, nRows, nCols, iRow, iCol,\n\t        // peakPoints);\n\t        this.scanBitmask(bitmask, nRows, nCols, iRow, iCol, peakPoints);\n\t        //console.log(\"extractArea.lng \"+peakPoints.length);\n\t        var x = new Array(peakPoints.length);\n\t        var y = new Array(peakPoints.length);\n\t        var z = new Array(peakPoints.length);\n\t        var nValues = peakPoints.length;\n\t        var xAverage = 0.0;\n\t        var yAverage = 0.0;\n\t        var zSum = 0.0;\n\t        if (nValues >= 9) {\n\t            if (this.DEBUG)\n\t                console.log(\"nValues=\" + nValues);\n\t            var maxValue = Number.NEGATIVE_INFINITY;\n\t            var maxIndex = -1;\n\t            for (var i = 0; i < nValues; i++) {\n\t                var pt = (peakPoints.splice(0,1))[0];\n\t                x[i] = pt[0];\n\t                y[i] = pt[1];\n\t                z[i] = spectrum[pt[1] * nCols + pt[0]];\n\t                xAverage += x[i] * z[i];\n\t                yAverage += y[i] * z[i];\n\t                zSum += z[i];\n\t                if (z[i] > maxValue) {\n\t                    maxValue = z[i];\n\t                    maxIndex = i;\n\t                }\n\t            }\n\t            if (maxIndex != -1) {\n\t                xAverage /= zSum;\n\t                yAverage /= zSum;\n\t                var newPeak = {x:xAverage, y:yAverage, z:zSum};\n\t                var minmax;\n\t                minmax =StatArray.minMax(x);\n\t                newPeak.minX=minmax.min;\n\t                newPeak.maxX=minmax.max;\n\t                minmax = StatArray.minMax(y);\n\t                newPeak.minY=minmax.min;\n\t                newPeak.maxY=minmax.max;\n\t                peakList.push(newPeak);\n\t            }\n\t        }\n\t        return nValues;\n\t    },\n\t    /*\n\t     Return all the peaks(x,y points) that composes a signal.\n\t     */\n\t    scanBitmask : function(bitmask, nRows, nCols, iRow, iCol, peakPoints) {\n\t        //console.log(nRows+\" \"+iRow+\" \"+nCols+\" \"+iCol);\n\t        if (iRow < 0 || iCol < 0 || iCol == nCols || iRow == nRows)\n\t            return;\n\t        if (bitmask[iRow * nCols + iCol]) {\n\t            bitmask[iRow * nCols + iCol] = 0;\n\t            peakPoints.push([iCol, iRow]);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow + 1, iCol, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow - 1, iCol, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol + 1, peakPoints);\n\t            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol - 1, peakPoints);\n\t        }\n\t    },\n\t    /**\n\t     This function converts a set of 2D-peaks in 2D-signals. Each signal could be composed\n\t     of many 2D-peaks, and it has some additional information related to the NMR spectrum.\n\t     */\n\t    createSignals2D : function(peaks, spectraData, tolerance){\n\t        //console.log(peaks.length);\n\t        var signals=[];\n\t        var nbSubSpectra = spectraData.getNbSubSpectra();\n\t\n\t        var bf1=spectraData.observeFrequencyX();\n\t        var bf2=spectraData.observeFrequencyY();\n\t\n\t        var firstY = spectraData.getFirstY();\n\t        var lastY = spectraData.getLastY();\n\t        var dy = spectraData.getDeltaY();\n\t\n\t        //console.log(firstY+\" \"+lastY+\" \"+dy+\" \"+nbSubSpectra);\n\t        //spectraData.setActiveElement(0);\n\t        var noValid=0;\n\t        for (var i = peaks.length-1; i >=0 ; i--) {\n\t            //console.log(peaks[i].x+\" \"+spectraData.arrayPointToUnits(peaks[i].x));\n\t            //console.log(peaks[i].y+\" \"+(firstY + dy * (peaks[i].y)));\n\t            peaks[i].x=(spectraData.arrayPointToUnits(peaks[i].x));\n\t            peaks[i].y=(firstY + dy * (peaks[i].y));\n\t\n\t            //console.log(peaks[i])\n\t            //Still having problems to correctly detect peaks on those areas. So I'm removing everything there.\n\t            if(peaks[i].y<-1||peaks[i].y>=210){\n\t                peaks.splice(i,1);\n\t            }\n\t        }\n\t        //console.log(peaks);\n\t        //The connectivity matrix is an square and symmetric matrix, so we'll only store the upper diagonal in an\n\t        //array like form\n\t        var connectivity = [];\n\t        var tmp=0;\n\t        tolerance*=tolerance;\n\t        //console.log(tolerance);\n\t        for (var i = 0; i < peaks.length; i++) {\n\t            for (var j = i; j < peaks.length; j++) {\n\t                tmp=Math.pow((peaks[i].x-peaks[j].x)*bf1,2)+Math.pow((peaks[i].y-peaks[j].y)*bf2,2);\n\t                //Console.log(peaks[i].getX()+\" \"+peaks[j].getX()+\" \"+tmp);\n\t                if(tmp<tolerance){//30*30Hz We cannot distinguish peaks with less than 20 Hz of separation\n\t                    connectivity.push(1);\n\t                }\n\t                else{\n\t                    connectivity.push(0);\n\t                }\n\t            }\n\t        }\n\t\n\t        //console.log(connectivity);\n\t\n\t        var clusters = SimpleClustering.fullClusterGenerator(connectivity);\n\t\n\t        //console.log(clusters)\n\t\n\t        var signals = [];\n\t        if (peaks != null) {\n\t            var xValue, yValue;\n\t            for (var iCluster = 0; iCluster < clusters.length; iCluster++) {\n\t                var signal={nucleusX:spectraData.getNucleus(1),nucleusY:spectraData.getNucleus(2)};\n\t                signal.resolutionX=( spectraData.getLastX()-spectraData.getFirstX()) / spectraData.getNbPoints();\n\t                signal.resolutionY=dy;\n\t                var peaks2D = [];\n\t                signal.shiftX = 0;\n\t                signal.shiftY = 0;\n\t                var sumZ = 0;\n\t                for(var jPeak = clusters[iCluster].length-1;jPeak>=0;jPeak--){\n\t                    if(clusters[iCluster][jPeak]==1){\n\t                        peaks2D.push(peaks[jPeak]);\n\t                        signal.shiftX+=peaks[jPeak].x*peaks[jPeak].z;\n\t                        signal.shiftY+=peaks[jPeak].y*peaks[jPeak].z;\n\t                        sumZ+=peaks[jPeak].z;\n\t                    }\n\t                }\n\t                signal.shiftX/=sumZ;\n\t                signal.shiftY/=sumZ;\n\t                signal.peaks = peaks2D;\n\t                signals.push(signal);\n\t            }\n\t        }\n\t        //console.log(signals);\n\t        return signals;\n\t    }\n\t}\n\t\n\tmodule.exports = PeakPicking2D;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.FFTUtils = __webpack_require__(26);\n\texports.FFT = __webpack_require__(27);\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar FFT = __webpack_require__(27);\n\t\n\tvar FFTUtils= {\n\t    DEBUG : false,\n\t\n\t    /**\n\t     * Calculates the inverse of a 2D Fourier transform\n\t     *\n\t     * @param ft\n\t     * @param ftRows\n\t     * @param ftCols\n\t     * @return\n\t     */\n\t    ifft2DArray : function(ft, ftRows, ftCols){\n\t        var tempTransform = new Array(ftRows * ftCols);\n\t        var nRows = ftRows / 2;\n\t        var nCols = (ftCols - 1) * 2;\n\t        // reverse transform columns\n\t        FFT.init(nRows);\n\t        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n\t        for (var iCol = 0; iCol < ftCols; iCol++) {\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tmpCols.re[iRow] = ft[(iRow * 2) * ftCols + iCol];\n\t                tmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];\n\t            }\n\t            //Unnormalized inverse transform\n\t            FFT.bt(tmpCols.re, tmpCols.im);\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tempTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t                tempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t            }\n\t        }\n\t\n\t        // reverse row transform\n\t        var finalTransform = new Array(nRows * nCols);\n\t        FFT.init(nCols);\n\t        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n\t        var scale = nCols * nRows;\n\t        for (var iRow = 0; iRow < ftRows; iRow += 2) {\n\t            tmpRows.re[0] = tempTransform[iRow * ftCols];\n\t            tmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];\n\t            for (var iCol = 1; iCol < ftCols; iCol++) {\n\t                tmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];\n\t                tmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];\n\t                tmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];\n\t                tmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];\n\t            }\n\t            //Unnormalized inverse transform\n\t            FFT.bt(tmpRows.re, tmpRows.im);\n\t\n\t            var indexB = (iRow / 2) * nCols;\n\t            for (var iCol = nCols - 1; iCol >= 0; iCol--) {\n\t                finalTransform[indexB + iCol] = tmpRows.re[iCol] / scale;\n\t            }\n\t        }\n\t        return finalTransform;\n\t    },\n\t    /**\n\t     * Calculates the fourier transform of a matrix of size (nRows,nCols) It is\n\t     * assumed that both nRows and nCols are a power of two\n\t     *\n\t     * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the\n\t     * even rows contain the real part and the odd rows the imaginary part of the\n\t     * transform\n\t     * @param data\n\t     * @param nRows\n\t     * @param nCols\n\t     * @return\n\t     */\n\t    fft2DArray:function(data, nRows, nCols) {\n\t        var ftCols = (nCols / 2 + 1);\n\t        var ftRows = nRows * 2;\n\t        var tempTransform = new Array(ftRows * ftCols);\n\t        FFT.init(nCols);\n\t        // transform rows\n\t        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n\t        var row1 = {re: new Array(nCols), im: new Array(nCols)}\n\t        var row2 = {re: new Array(nCols), im: new Array(nCols)}\n\t        var index, iRow0, iRow1, iRow2, iRow3;\n\t        for (var iRow = 0; iRow < nRows / 2; iRow++) {\n\t            index = (iRow * 2) * nCols;\n\t            tmpRows.re = data.slice(index, index + nCols);\n\t\n\t            index = (iRow * 2 + 1) * nCols;\n\t            tmpRows.im = data.slice(index, index + nCols);\n\t\n\t            FFT.fft1d(tmpRows.re, tmpRows.im);\n\t\n\t            this.reconstructTwoRealFFT(tmpRows, row1, row2);\n\t            //Now lets put back the result into the output array\n\t            iRow0 = (iRow * 4) * ftCols;\n\t            iRow1 = (iRow * 4 + 1) * ftCols;\n\t            iRow2 = (iRow * 4 + 2) * ftCols;\n\t            iRow3 = (iRow * 4 + 3) * ftCols;\n\t            for (var k = ftCols - 1; k >= 0; k--) {\n\t                tempTransform[iRow0 + k] = row1.re[k];\n\t                tempTransform[iRow1 + k] = row1.im[k];\n\t                tempTransform[iRow2 + k] = row2.re[k];\n\t                tempTransform[iRow3 + k] = row2.im[k];\n\t            }\n\t        }\n\t\n\t        //console.log(tempTransform);\n\t        row1 = null;\n\t        row2 = null;\n\t        // transform columns\n\t        var finalTransform = new Array(ftRows * ftCols);\n\t        FFT.init(nRows);\n\t        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n\t        for (var iCol = ftCols - 1; iCol >= 0; iCol--) {\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                tmpCols.re[iRow] = tempTransform[(iRow * 2) * ftCols + iCol];\n\t                tmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];\n\t            }\n\t            FFT.fft1d(tmpCols.re, tmpCols.im);\n\t            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n\t                finalTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n\t                finalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n\t            }\n\t        }\n\t\n\t        //console.log(finalTransform);\n\t        return finalTransform;\n\t\n\t    },\n\t    /**\n\t     *\n\t     * @param fourierTransform\n\t     * @param realTransform1\n\t     * @param realTransform2\n\t     *\n\t     * Reconstructs the individual Fourier transforms of two simultaneously\n\t     * transformed series. Based on the Symmetry relationships (the asterisk\n\t     * denotes the complex conjugate)\n\t     *\n\t     * F_{N-n} = F_n^{*} for a purely real f transformed to F\n\t     *\n\t     * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G\n\t     *\n\t     */\n\t    reconstructTwoRealFFT:function(fourierTransform, realTransform1, realTransform2) {\n\t        var length = fourierTransform.re.length;\n\t\n\t        // the components n=0 are trivial\n\t        realTransform1.re[0] = fourierTransform.re[0];\n\t        realTransform1.im[0] = 0.0;\n\t        realTransform2.re[0] = fourierTransform.im[0];\n\t        realTransform2.im[0] = 0.0;\n\t        var rm, rp, im, ip, j;\n\t        for (var i = length / 2; i > 0; i--) {\n\t            j = length - i;\n\t            rm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);\n\t            rp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);\n\t            im = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);\n\t            ip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);\n\t            realTransform1.re[i] = rp;\n\t            realTransform1.im[i] = im;\n\t            realTransform1.re[j] = rp;\n\t            realTransform1.im[j] = -im;\n\t            realTransform2.re[i] = ip;\n\t            realTransform2.im[i] = -rm;\n\t            realTransform2.re[j] = ip;\n\t            realTransform2.im[j] = rm;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * In place version of convolute 2D\n\t     *\n\t     * @param ftSignal\n\t     * @param ftFilter\n\t     * @param ftRows\n\t     * @param ftCols\n\t     * @return\n\t     */\n\t    convolute2DI:function(ftSignal, ftFilter, ftRows, ftCols) {\n\t        var re, im;\n\t        for (var iRow = 0; iRow < ftRows / 2; iRow++) {\n\t            for (var iCol = 0; iCol < ftCols; iCol++) {\n\t                //\n\t                re = ftSignal[(iRow * 2) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2) * ftCols + iCol]\n\t                - ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2 + 1) * ftCols + iCol];\n\t                im = ftSignal[(iRow * 2) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2 + 1) * ftCols + iCol]\n\t                + ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n\t                * ftFilter[(iRow * 2) * ftCols + iCol];\n\t                //\n\t                ftSignal[(iRow * 2) * ftCols + iCol] = re;\n\t                ftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;\n\t            }\n\t        }\n\t    },\n\t    /**\n\t     *\n\t     * @param data\n\t     * @param kernel\n\t     * @param nRows\n\t     * @param nCols\n\t     * @returns {*}\n\t     */\n\t    convolute:function(data, kernel, nRows, nCols){\n\t        var ftSpectrum = new Array(nCols * nRows);\n\t        for (var i = 0; i<nRows * nCols; i++){\n\t            ftSpectrum[i] = data[i];\n\t        }\n\t\n\t        ftSpectrum = this.fft2DArray(ftSpectrum, nRows, nCols);\n\t\n\t        var dim = kernel.length;\n\t        var ftFilterData = new Array(nCols * nRows);\n\t        for(var i=0;i<nCols * nRows;i++){\n\t            ftFilterData[i]=0;\n\t        }\n\t\n\t        var iRow, iCol;\n\t        var shift = (dim - 1) / 2;\n\t        //console.log(dim);\n\t        for (var ir = 0; ir < dim; ir++) {\n\t            iRow = (ir - shift + nRows) % nRows;\n\t            for (var ic = 0; ic < dim; ic++) {\n\t                iCol = (ic - shift + nCols) % nCols;\n\t                ftFilterData[iRow * nCols + iCol] = kernel[ir][ic];\n\t            }\n\t        }\n\t\n\t        ftFilterData = this.fft2DArray(ftFilterData, nRows, nCols);\n\t\n\t        var ftRows = nRows * 2;\n\t        var ftCols = nCols / 2 + 1;\n\t        this.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\t\n\t        return  this.ifft2DArray(ftSpectrum, ftRows, ftCols);\n\t    }\n\t}\n\t\n\tmodule.exports = FFTUtils;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Fast Fourier Transform module\n\t * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n\t */\n\tvar FFT = (function(){\n\t  var FFT;  \n\t  \n\t  if(true) {\n\t    FFT = exports;   // for CommonJS\n\t  } else {\n\t    FFT = {};\n\t  }\n\t  \n\t  var version = {\n\t    release: '0.3.0',\n\t    date: '2013-03'\n\t  };\n\t  FFT.toString = function() {\n\t    return \"version \" + version.release + \", released \" + version.date;\n\t  };\n\t\n\t  // core operations\n\t  var _n = 0,          // order\n\t      _bitrev = null,  // bit reversal table\n\t      _cstb = null;    // sin/cos table\n\t\n\t  var core = {\n\t    init : function(n) {\n\t      if(n !== 0 && (n & (n - 1)) === 0) {\n\t        _n = n;\n\t        core._initArray();\n\t        core._makeBitReversalTable();\n\t        core._makeCosSinTable();\n\t      } else {\n\t        throw new Error(\"init: radix-2 required\");\n\t      }\n\t    },\n\t    // 1D-FFT\n\t    fft1d : function(re, im) {\n\t      core.fft(re, im, 1);\n\t    },\n\t    // 1D-IFFT\n\t    ifft1d : function(re, im) {\n\t      var n = 1/_n;\n\t      core.fft(re, im, -1);\n\t      for(var i=0; i<_n; i++) {\n\t        re[i] *= n;\n\t        im[i] *= n;\n\t      }\n\t    },\n\t     // 1D-IFFT\n\t    bt1d : function(re, im) {\n\t      core.fft(re, im, -1);\n\t    },\n\t    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n\t    fft2d : function(re, im) {\n\t      var tre = [],\n\t          tim = [],\n\t          i = 0;\n\t      // x-axis\n\t      for(var y=0; y<_n; y++) {\n\t        i = y*_n;\n\t        for(var x1=0; x1<_n; x1++) {\n\t          tre[x1] = re[x1 + i];\n\t          tim[x1] = im[x1 + i];\n\t        }\n\t        core.fft1d(tre, tim);\n\t        for(var x2=0; x2<_n; x2++) {\n\t          re[x2 + i] = tre[x2];\n\t          im[x2 + i] = tim[x2];\n\t        }\n\t      }\n\t      // y-axis\n\t      for(var x=0; x<_n; x++) {\n\t        for(var y1=0; y1<_n; y1++) {\n\t          i = x + y1*_n;\n\t          tre[y1] = re[i];\n\t          tim[y1] = im[i];\n\t        }\n\t        core.fft1d(tre, tim);\n\t        for(var y2=0; y2<_n; y2++) {\n\t          i = x + y2*_n;\n\t          re[i] = tre[y2];\n\t          im[i] = tim[y2];\n\t        }\n\t      }\n\t    },\n\t    // 2D-IFFT\n\t    ifft2d : function(re, im) {\n\t      var tre = [],\n\t          tim = [],\n\t          i = 0;\n\t      // x-axis\n\t      for(var y=0; y<_n; y++) {\n\t        i = y*_n;\n\t        for(var x1=0; x1<_n; x1++) {\n\t          tre[x1] = re[x1 + i];\n\t          tim[x1] = im[x1 + i];\n\t        }\n\t        core.ifft1d(tre, tim);\n\t        for(var x2=0; x2<_n; x2++) {\n\t          re[x2 + i] = tre[x2];\n\t          im[x2 + i] = tim[x2];\n\t        }\n\t      }\n\t      // y-axis\n\t      for(var x=0; x<_n; x++) {\n\t        for(var y1=0; y1<_n; y1++) {\n\t          i = x + y1*_n;\n\t          tre[y1] = re[i];\n\t          tim[y1] = im[i];\n\t        }\n\t        core.ifft1d(tre, tim);\n\t        for(var y2=0; y2<_n; y2++) {\n\t          i = x + y2*_n;\n\t          re[i] = tre[y2];\n\t          im[i] = tim[y2];\n\t        }\n\t      }\n\t    },\n\t    // core operation of FFT\n\t    fft : function(re, im, inv) {\n\t      var d, h, ik, m, tmp, wr, wi, xr, xi,\n\t          n4 = _n >> 2;\n\t      // bit reversal\n\t      for(var l=0; l<_n; l++) {\n\t        m = _bitrev[l];\n\t        if(l < m) {\n\t          tmp = re[l];\n\t          re[l] = re[m];\n\t          re[m] = tmp;\n\t          tmp = im[l];\n\t          im[l] = im[m];\n\t          im[m] = tmp;\n\t        }\n\t      }\n\t      // butterfly operation\n\t      for(var k=1; k<_n; k<<=1) {\n\t        h = 0;\n\t        d = _n/(k << 1);\n\t        for(var j=0; j<k; j++) {\n\t          wr = _cstb[h + n4];\n\t          wi = inv*_cstb[h];\n\t          for(var i=j; i<_n; i+=(k<<1)) {\n\t            ik = i + k;\n\t            xr = wr*re[ik] + wi*im[ik];\n\t            xi = wr*im[ik] - wi*re[ik];\n\t            re[ik] = re[i] - xr;\n\t            re[i] += xr;\n\t            im[ik] = im[i] - xi;\n\t            im[i] += xi;\n\t          }\n\t          h += d;\n\t        }\n\t      }\n\t    },\n\t    // initialize the array (supports TypedArray)\n\t    _initArray : function() {\n\t      if(typeof Uint32Array !== 'undefined') {\n\t        _bitrev = new Uint32Array(_n);\n\t      } else {\n\t        _bitrev = [];\n\t      }\n\t      if(typeof Float64Array !== 'undefined') {\n\t        _cstb = new Float64Array(_n*1.25);\n\t      } else {\n\t        _cstb = [];\n\t      }\n\t    },\n\t    // zero padding\n\t    _paddingZero : function() {\n\t      // TODO\n\t    },\n\t    // makes bit reversal table\n\t    _makeBitReversalTable : function() {\n\t      var i = 0,\n\t          j = 0,\n\t          k = 0;\n\t      _bitrev[0] = 0;\n\t      while(++i < _n) {\n\t        k = _n >> 1;\n\t        while(k <= j) {\n\t          j -= k;\n\t          k >>= 1;\n\t        }\n\t        j += k;\n\t        _bitrev[i] = j;\n\t      }\n\t    },\n\t    // makes trigonometiric function table\n\t    _makeCosSinTable : function() {\n\t      var n2 = _n >> 1,\n\t          n4 = _n >> 2,\n\t          n8 = _n >> 3,\n\t          n2p4 = n2 + n4,\n\t          t = Math.sin(Math.PI/_n),\n\t          dc = 2*t*t,\n\t          ds = Math.sqrt(dc*(2 - dc)),\n\t          c = _cstb[n4] = 1,\n\t          s = _cstb[0] = 0;\n\t      t = 2*dc;\n\t      for(var i=1; i<n8; i++) {\n\t        c -= dc;\n\t        dc += t*c;\n\t        s += ds;\n\t        ds -= t*s;\n\t        _cstb[i] = s;\n\t        _cstb[n4 - i] = c;\n\t      }\n\t      if(n8 !== 0) {\n\t        _cstb[n8] = Math.sqrt(0.5);\n\t      }\n\t      for(var j=0; j<n4; j++) {\n\t        _cstb[n2 - j]  = _cstb[j];\n\t      }\n\t      for(var k=0; k<n2p4; k++) {\n\t        _cstb[k + n2] = -_cstb[k];\n\t      }\n\t    }\n\t  };\n\t  // aliases (public APIs)\n\t  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n\t  for(var i=0; i<apis.length; i++) {\n\t    FFT[apis[i]] = core[apis[i]];\n\t  }\n\t  FFT.bt = core.bt1d;\n\t  FFT.fft = core.fft1d;\n\t  FFT.ifft = core.ifft1d;\n\t  \n\t  return FFT;\n\t}).call(this);\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\tvar PeakOptimizer={\n\t\tdiagonalError:0.05,\n\t\ttolerance:0.05,\n\t\tDEBUG:false,\n\t    toleranceX : 0.025,\n\t    toleranceY : 0.5,\n\t\n\t    clean: function(peaks, threshold){\n\t        var max = Number.NEGATIVE_INFINITY;\n\t        var i,peak;\n\t        //double min = Double.MAX_VALUE;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            if(Math.abs(peaks[i].z)>max)\n\t                max=Math.abs(peaks[i].z);\n\t        }\n\t        max*=threshold;\n\t        for(i=peaks.length-1;i>=0;i--){\n\t            if(Math.abs(peaks[i].z)<max)\n\t                peaks.splice(i,1);\n\t        }\n\t        return peaks;\n\t    },\n\t\t\n\t\tenhanceSymmetry: function(signals){\n\t\t\t\n\t\t\tvar properties = this.initializeProperties(signals);\n\t\t\tvar output = signals;\n\t\n\t\t\tif(this.DEBUG)\n\t\t\t\tconsole.log(\"Before optimization size: \"+output.size());\n\t\t\t\n\t\t\t//First step of the optimization: Symmetry validation\n\t\t\tvar i,hits,index;\n\t\t\tvar signal;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tsignal = output[i];\n\t\t\t\tif(signal.peaks.length>1)\n\t\t\t\t\tproperties[i][1]++;\n\t\t\t\tif(properties[i][0]==1){\n\t\t\t\t\tindex = this.exist(output, properties, signal,-1,true);\n\t\t\t\t\tif(index>=0){\n\t\t\t\t\t\tproperties[i][1]+=2;\n\t\t\t\t\t\tproperties[index][1]+=2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Second step of the optimization: Diagonal image existence\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tsignal = output[i];\n\t\t\t\tif(properties[i][0]==0){\n\t\t\t\t\thits = this.checkCrossPeaks(output, properties, signal, true);\n\t\t\t\t\tproperties[i][1]+=hits;\n\t\t\t\t\t//checkCrossPeaks(output, properties, signal, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Now, each peak have a score between 0 and 4, we can complete the patterns which\n\t\t\t//contains peaks with high scores, and finally, we can remove peaks with scores 0 and 1\n\t\t\tvar count = 0;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]!==0&&properties[i][1]>2){\n\t\t\t\t\tcount++;\n\t\t\t\t\tcount+=this.completeMissingIfNeeded(output,properties,output[i],properties[i]);\n\t\t\t\t}\n\t\t\t\tif(properties[i][1]>=2&&properties[i][0]===0)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tif(this.DEBUG)\n\t\t\t\tconsole.log(\"After optimization size: \"+count);\n\t\t\tvar  toReturn = new Array(count);\n\t\t\tcount--;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]!==0&&properties[i][1]>2\n\t\t\t\t\t\t||properties[i][0]===0&&properties[i][1]>1){\n\t\t\t\t\ttoReturn[count--]=output[i];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"Removed \"+i+\" \"+output[i].peaks.length);\n\t\t\t\t}\n\t\t\t\t//if(properties.get(i)[1]>=2)\n\t\t\t\t//\ttoReturn[count--]=output.get(i);\n\t\t\t}\n\t\t\treturn toReturn;\n\t\t},\n\t\t\n\t\tcompleteMissingIfNeeded: function(output, properties, thisSignal, thisProp) {\n\t\t\t//Check for symmetry\n\t\t\tvar index = this.exist(output, properties, thisSignal,-thisProp[0],true);\n\t\t\tvar addedPeaks=0;\n\t\t\tvar newSignal = null, tmpProp=null;\n\t\t\tif(index<0){//If this signal have no a symmetry image, we have to include it\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftX,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [-thisProp[0],thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\t//Check for diagonal peaks\n\t\t\tvar j=0;\n\t\t\tvar diagX=false, diagY=false;\n\t\t\tvar signal;\n\t\t\tfor(j=output.length-1;j>=0;j--){\n\t\t\t\tsignal = output[j];\n\t\t\t\tif(properties[j][0]===0){\n\t\t\t\t\tif(Math.abs(signal.shiftX-thisSignal.shiftX)<this.diagonalError)\n\t\t\t\t\t\tdiagX=true;\n\t\t\t\t\tif(Math.abs(signal.shiftY-thisSignal.shiftY)<this.diagonalError)\n\t\t\t\t\t\tdiagY=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(diagX===false){\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftX;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftX,y:thisSignal.shiftX,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\tif(diagY===false){\n\t\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\t\tnewSignal.shiftY=thisSignal.shiftY;\n\t\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftY,z:1}];\n\t\t\t\toutput.push(newSignal);\n\t\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\t\tproperties.push(tmpProp);\n\t\t\t\taddedPeaks++;\n\t\t\t}\n\t\t\treturn addedPeaks;\n\t\t\t\n\t\t},\n\t\t\n\t\t//Check for any diagonal peak that match this cross peak\n\t\tcheckCrossPeaks: function(output, properties, signal, updateProperties) {\n\t\t\tvar hits = 0, i=0, shift=signal.shiftX*4;\n\t\t\tvar crossPeaksX = [],crossPeaksY = [];\n\t\t\tvar cross;\n\t\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\t\tcross = output[i];\n\t\t\t\tif(properties[i][0]!==0){\n\t\t\t\t\tif(Math.abs(cross.shiftX-signal.shiftX)<this.diagonalError){\n\t\t\t\t\t\thits++;\n\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\tcrossPeaksX.push(i);\n\t\t\t\t\t\tshift+=cross.shiftX;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(Math.abs(cross.shiftY-signal.shiftY)<this.diagonalError){\n\t\t\t\t\t\t\thits++;\n\t\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\t\tcrossPeaksY.push(i);\n\t\t\t\t\t\t\tshift+=cross.shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//Update found crossPeaks and diagonal peak\n\t\t\tshift/=(crossPeaksX.length+crossPeaksY.length+4);\n\t\t\tif(crossPeaksX.length>0){\n\t\t\t\tfor( i=crossPeaksX.length-1;i>=0;i--){\n\t\t\t\t\toutput[crossPeaksX[i]].shiftX=shift;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(crossPeaksY.length>0){\n\t\t\t\tfor( i=crossPeaksY.length-1;i>=0;i--){\n\t\t\t\t\toutput[crossPeaksY[i]].shiftY=shift;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsignal.shiftX=shift;\n\t\t\tsignal.shiftY=shift;\n\t\t\treturn hits;\n\t\t},\n\t\n\t\texist: function(output, properties, signal, type, symmetricSearch) {\n\t\t\tfor(var i=output.length-1;i>=0;i--){\n\t\t\t\tif(properties[i][0]==type){\n\t\t\t\t\tif(this.distanceTo(signal, output[i], symmetricSearch)<this.tolerance){\n\t\t\t\t\t\tif(!symmetricSearch){\n\t\t\t\t\t\t\tvar shiftX=(output[i].shiftX+signal.shiftX)/2.0;\n\t\t\t\t\t\t\tvar shiftY=(output[i].shiftY+signal.shiftY)/2.0;\n\t\t\t\t\t\t\toutput[i].shiftX=shiftX;\n\t\t\t\t\t\t\toutput[i].shiftY=shiftY;\n\t\t\t\t\t\t\tsignal.shiftX=shiftX;\n\t\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tvar shiftX=signal.shiftX;\n\t\t\t\t\t\t\tvar shiftY=output[i].shiftX;\n\t\t\t\t\t\t\toutput[i].shiftY=shiftX;\n\t\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\t/**\n\t\t * We try to determine the position of each signal within the spectrum matrix.\n\t\t * Peaks could be of 3 types: upper diagonal, diagonal or under diagonal 1,0,-1\n\t\t * respectively.\n\t\t * @param Signals\n\t\t * @return A matrix containing the properties of each signal\n\t\t */\n\t\tinitializeProperties: function(signals){\n\t\t\tvar signalsProperties = new Array(signals.length);\n\t\t\tfor(var i=signals.length-1;i>=0;i--){\n\t\t\t\tsignalsProperties[i]=[0,0];\n\t\t\t\t//We check if it is a diagonal peak\n\t\t\t\tif(Math.abs(signals[i].shiftX-signals[i].shiftY)<=this.diagonalError){\n\t\t\t\t\tsignalsProperties[i][1]=1;\n\t\t\t\t\t//We adjust the x and y value to be symmetric.\n\t\t\t\t\t//In general chemical shift in the direct dimension is better than in the other one,\n\t\t\t\t\t//so, we believe more to the shiftX than to the shiftY.\n\t\t\t\t\tvar shift = (signals[i].shiftX*2+signals[i].shiftY)/3.0;\n\t\t\t\t\tsignals[i].shiftX=shift;\n\t\t\t\t\tsignals[i].shiftY=shift;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(signals[i].shiftX-signals[i].shiftY>0)\n\t\t\t\t\t\tsignalsProperties[i][0]=1;\n\t\t\t\t\telse\n\t\t\t\t\t\tsignalsProperties[i][0]=-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn signalsProperties;\n\t\t},\n\t\t\n\t\t/**\n\t\t * This function calculates the distance between 2 nmr signals . If toImage is true, \n\t\t * it will interchange x by y in the distance calculation for the second signal.\n\t\t */\n\t\tdistanceTo: function(a, b, toImage){\n\t\t\tif(!toImage){\n\t\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftX, 2)\n\t\t\t\t\t\t+Math.pow(a.shiftY-b.shiftY, 2));\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftY, 2)\n\t\t\t\t\t\t+Math.pow(a.shiftY-b.shiftX, 2));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tmodule.exports = PeakOptimizer;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\tvar SimpleClustering={\n\t\n\t\t/*This function returns the cluster list for a given connectivity matrix.\n\t\t*To improve the performance, the connectivity(square and symmetric) matrix \n\t\t*is given as a single vector containing  the upper diagonal of the matrix\n\t\t*Note: This algorithm is O(n*n) complexity. I wonder if there is something better. \n\t\t*acastillo\n\t\t*/\n\t\tfullClusterGenerator:function(conn){\n\t\t\tvar nRows = Math.sqrt(conn.length*2+0.25)-0.5;\n\t\t\t//console.log(\"nRows: \"+nRows+\" - \"+conn.length);\n\t\t\tvar clusterList = [];\n\t\t\tvar available = new Array(nRows);\n\t\t\tvar remaining = nRows, i=0;\n\t\t\tvar cluster = [];\n\t\t\t//Mark all the elements as available\n\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\tavailable[i]=1;\n\t\t\t}\n\t\t\tvar nextAv=-1;\n\t\t\tvar toInclude = [];\n\t\t\twhile(remaining>0){\n\t\t\t\tif(toInclude.length===0){\n\t\t\t\t\t//If there is no more elements to include. Start a new cluster\n\t\t\t\t\tcluster = new Array(nRows);\n\t\t\t\t\tfor(i=nRows-1;i>=0;i--)\n\t\t\t\t\t\tcluster[i]=0;\n\t\t\t\t\tclusterList.push(cluster);\n\t\t\t    \tfor(nextAv = nRows-1;available[nextAv]==0;nextAv--){};\n\t\t\t    }\n\t\t\t    else{\n\t\t\t    \tnextAv=toInclude.splice(0,1);\n\t\t\t    }\n\t\t\t    //console.log(\"row: \"+nextAv);\n\t\t\t    cluster[nextAv]=1;\n\t\t\t    available[nextAv]=0;\n\t\t\t    remaining--;\n\t\t\t    //Copy the next available row\n\t\t\t    var row = new Array(nRows);\n\t\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\t\tvar c=Math.max(nextAv,i);\n\t\t\t\t\tvar r=Math.min(nextAv,i);\n\t\t\t\t\t//The element in the conn matrix\n\t\t\t\t\t//console.log(\"index: \"+r*(2*nRows-r-1)/2+c)\n\t\t\t\t\trow[i]=conn[r*(2*nRows-r-1)/2+c];\n\t\t\t\t\t//console.log(\"col: \"+i+\":\"+row[i]);\n\t\t\t\t\t//There is new elements to include in this row?\n\t\t\t\t\t//Then, include it to the current cluster\n\t\t\t\t\tif(row[i]==1&&available[i]==1&&cluster[i]==0){\n\t\t\t\t\t\ttoInclude.push(i);\n\t\t\t\t\t\tcluster[i]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn clusterList;\n\t\t}\n\t}\n\t\n\tmodule.exports = SimpleClustering;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This library formats a set of nmr1D signals to the ACS format.\n\t * Created by acastillo on 3/11/15. p\n\t */\n\tvar ACS=ACS || {};\n\tACS.formater =(function() {\n\t    var acsString=\"\";\n\t    var parenthesis=\"\";\n\t    var spectro=\"\";\n\t    rangeForMultiplet=false;\n\t\n\t    function fromNMRSignal1D2ACS(spectrum, options){\n\t        acsString=\"\";\n\t        parenthesis=\"\";\n\t        spectro=\"\";\n\t        var solvent = null;\n\t        if(options&&options.solvent)\n\t            solvent = options.solvent;\n\t        //options.rangeForMultiplet=false;\n\t        if(options&&options.rangeForMultiplet!=undefined)\n\t            rangeForMultiplet = options.rangeForMultiplet;\n\t\n\t        //console.log(\"Range1: \"+options.rangeForMultiplet);\n\t\n\t        spectrum.type=\"NMR SPEC\";\n\t        if (spectrum[0][\"nucleus\"]==\"1H\") {\n\t            formatAcs_default(spectrum, false, 2, 1, solvent);\n\t        } else if (spectrum[0][\"nucleus\"]==\"13C\") {\n\t            formatAcs_default(spectrum, false, 1, 0, solvent);\n\t        }\n\t\n\t        if (acsString.length>0) acsString+=\".\";\n\t\n\t        return acsString;\n\t    }\n\t\n\t    /*function formatAcs_default_IR(spectra, ascending, decimalValue, smw) {\n\t     appendSeparator();\n\t     appendSpectroInformation(spectra);\n\t     if (spectra[\"peakLabels\"]) {\n\t     var numberPeakLabels=spectra[\"peakLabels\"].length;\n\t     var minIntensity= 9999999;\n\t     var maxIntensity=-9999999;\n\t     for (var i=0; i<numberPeakLabels; i++) {\n\t     if (spectra[\"peakLabels\"][i].intensity<minIntensity) minIntensity=spectra[\"peakLabels\"][i].intensity;\n\t     if (spectra[\"peakLabels\"][i].intensity>maxIntensity) maxIntensity=spectra[\"peakLabels\"][i].intensity;\n\t     }\n\t     for (var i=0; i<numberPeakLabels; i++) {\n\t     if (ascending) {\n\t     var peakLabel=spectra[\"peakLabels\"][i];\n\t     } else {\n\t     var peakLabel=spectra[\"peakLabels\"][numberPeakLabels-i-1];\n\t     }\n\t     if (peakLabel) {\n\t     appendSeparator();\n\t     appendValue(peakLabel,decimalValue);\n\t     if (smw) { // we need to add small / medium / strong\n\t     if (peakLabel.intensity<((maxIntensity-minIntensity)/3+minIntensity)) acsString+=\" (s)\";\n\t     else if (peakLabel.intensity>(maxIntensity-(maxIntensity-minIntensity)/3)) acsString+=\" (w)\";\n\t     else acsString+=\" (m)\";\n\t     }\n\t     }\n\t     }\n\t     }\n\t     }*/\n\t\n\t    function formatAcs_default(spectra, ascending, decimalValue, decimalJ, solvent) {\n\t        appendSeparator();\n\t        appendSpectroInformation(spectra, solvent);\n\t        var numberSmartPeakLabels=spectra.length;\n\t        //console.log(\"SP \"+spectra);\n\t        //console.log(\"# \"+numberSmartPeakLabels);\n\t        for (var i=0; i<numberSmartPeakLabels; i++) {\n\t            if (ascending) {\n\t                var signal=spectra[i];\n\t            } else {\n\t                var signal=spectra[numberSmartPeakLabels-i-1];\n\t            }\n\t            if (signal) {\n\t                //console.log(\"X2X\"+i+JSON.stringify(signal));\n\t                appendSeparator();\n\t                appendDelta(signal,decimalValue);\n\t                appendParenthesis(signal,decimalJ);\n\t                //console.log(\"S2S\"+i);\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendSpectroInformation(spectrum, solvent) {\n\t        if (spectrum.type==\"NMR SPEC\") {\n\t            if (spectrum[0].nucleus) {\n\t                acsString+=formatNucleus(spectrum[0].nucleus);\n\t            }\n\t            acsString+=\" NMR\";\n\t            if ((solvent) || (spectrum[0].observe)) {\n\t                acsString+=\" (\";\n\t                if (spectrum[0].observe) {\n\t                    acsString+=(spectrum[0].observe*1).toFixed(0)+\" MHz\";\n\t                    if (solvent) acsString+=\", \";\n\t                }\n\t                if (solvent) {\n\t                    acsString+=formatMF(solvent);\n\t                }\n\t                acsString+=\")\";\n\t            }\n\t            acsString+=\" δ \";\n\t        } else if (spectrum.type==\"IR\") {\n\t            acsString+=\" IR \";\n\t        } else if (spectrum.type==\"MASS\") {\n\t            acsString+=\" MASS \";\n\t        }\n\t    }\n\t\n\t    function appendDelta(line, nbDecimal) {\n\t        //console.log(\"appendDelta1\");\n\t        var startX = 0,stopX=0,delta1=0;\n\t        if(line.startX){\n\t            if((typeof line.startX)==\"string\"){\n\t                startX=parseFloat(line.startX);\n\t            }\n\t            else\n\t                startX=line.startX;\n\t        }\n\t        if(line.stopX){\n\t            if((typeof line.stopX)==\"string\"){\n\t                stopX=parseFloat(line.stopX);\n\t            }\n\t            else\n\t                stopX=line.stopX;\n\t        }\n\t        if(line.delta1){\n\t            if((typeof line.delta1)==\"string\"){\n\t                delta1=parseFloat(line.delta1);\n\t            }\n\t            else\n\t                delta1=line.delta1;\n\t\n\t        }\n\t        //console.log(\"Range2: \"+rangeForMultiplet+\" \"+line.multiplicity);\n\t        if (line.asymmetric===true||(line.multiplicity==\"m\"&&rangeForMultiplet===true)) {//Is it massive??\n\t            if (line.startX&&line.stopX) {\n\t                if (startX<stopX) {\n\t                    acsString+=startX.toFixed(nbDecimal)+\"-\"+stopX.toFixed(nbDecimal);\n\t                } else {\n\t                    acsString+=stopX.toFixed(nbDecimal)+\"-\"+startX.toFixed(nbDecimal);\n\t                }\n\t            } else {\n\t                if(line.delta1)\n\t                    acsString+=delta1.toFixed(nbDecimal);\n\t            }\n\t        }\n\t        else{\n\t            if(line.delta1)\n\t                acsString+=delta1.toFixed(nbDecimal);\n\t            else{\n\t                if(line.startX&&line.stopX){\n\t                    acsString+=((startX+stopX)/2).toFixed(nbDecimal);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendValue(line, nbDecimal) {\n\t        if (line.xPosition) {\n\t            acsString+=line.xPosition.toFixed(nbDecimal);\n\t        }\n\t    }\n\t\n\t    function appendParenthesis(line, nbDecimal) {\n\t        //console.log(\"appendParenthesis1\");\n\t        // need to add assignment - coupling - integration\n\t        parenthesis=\"\";\n\t        appendMultiplicity(line);\n\t        appendIntegration(line);\n\t        appendCoupling(line,nbDecimal);\n\t        appendAssignment(line);\n\t\n\t\n\t        if (parenthesis.length>0) {\n\t            acsString+=\" (\"+parenthesis+\")\";\n\t        }\n\t        //console.log(\"appendParenthesis2\");\n\t    }\n\t\n\t    function appendIntegration(line) {\n\t        if (line.pubIntegration) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.pubIntegration;\n\t        } else if (line.integralData) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.integralData.value.toFixed(0)+\" H\";\n\t        }\n\t    }\n\t\n\t    function appendAssignment(line) {\n\t        if (line.pubAssignment) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=formatAssignment(line.pubAssignment);\n\t        }\n\t        else{\n\t            if (line.assignment) {\n\t                appendParenthesisSeparator();\n\t                parenthesis+=formatAssignment(line.assignment);\n\t            }\n\t        }\n\t    }\n\t\n\t    function appendMultiplicity(line) {\n\t        if (line.pubMultiplicity) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.pubMultiplicity;\n\t        } else if (line.multiplicity) {\n\t            appendParenthesisSeparator();\n\t            parenthesis+=line.multiplicity;\n\t        }\n\t    }\n\t\n\t    function appendCoupling(line, nbDecimal) {\n\t        if (line.nmrJs) {\n\t            var j=\"<i>J</i> = \";\n\t            for (var i=0; i<line.nmrJs.length; i++) {\n\t                var coupling=line.nmrJs[i].coupling;\n\t                if (j.length>11) j+=\", \";\n\t                j+=coupling.toFixed(nbDecimal);\n\t            }\n\t            appendParenthesisSeparator();\n\t            parenthesis+=j+\" Hz\";\n\t        }\n\t\n\t    }\n\t\n\t    function formatAssignment(assignment) {\n\t        assignment=assignment.replace(/([0-9])/g,\"<sub>$1</sub>\");\n\t        assignment=assignment.replace(/\\\"([^\\\"]*)\\\"/g,\"<i>$1</i>\");\n\t        return assignment;\n\t    }\n\t\n\t    function formatMF(mf) {\n\t        mf=mf.replace(/([0-9])/g,\"<sub>$1</sub>\");\n\t        return mf;\n\t    }\n\t\n\t    function formatNucleus(nucleus) {\n\t        nucleus=nucleus.replace(/([0-9])/g,\"<sup>$1</sup>\");\n\t        return nucleus;\n\t    }\n\t\n\t    function appendSeparator() {\n\t        if ((acsString.length>0) && (! acsString.match(/ $/))) {\n\t            acsString+=\", \";\n\t        }\n\t    }\n\t\n\t    function appendParenthesisSeparator() {\n\t        if ((parenthesis.length>0) && (! parenthesis.match(\", $\"))) parenthesis+=\", \";\n\t    }\n\t\n\t    function fromACS2NMRSignal1D(acsString){\n\t        return JSON.parse(SDAPI.AcsParserAsJSONString(acsString));\n\t    }\n\t\n\t    return {\n\t        toACS:fromNMRSignal1D2ACS,\n\t        toNMRSignal:fromACS2NMRSignal1D\n\t    }\n\t})();\n\t\n\tmodule.exports=ACS;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** spectra-data.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e2fce5ddd2eefc356596\n **/","'use strict';\n\n\nexports.SD = require('./SD');\nexports.NMR = require('./NMR');\nexports.NMR2D = require('./NMR2D');\nexports.ACS = require('./AcsParser');\nexports.JAnalyzer = require('./JAnalyzer');\n//exports.SD2 = require('/SD2');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","// small note on the best way to define array\n// http://jsperf.com/lp-array-and-loops/2\n\nvar StatArray = require('ml-stat/array');\nvar JcampConverter=require(\"jcampconverter\");\n\nfunction SD(sd) {\n    this.sd=sd;\n    this.activeElement=0;\n\n    this.DATACLASS_XY = 1;\n    this.DATACLASS_PEAK = 2;\n\n    this.TYPE_NMR_SPECTRUM = 'NMR Spectrum';\n    this.TYPE_NMR_FID = 'NMR FID';\n    this.TYPE_IR = 'IR';\n    this.TYPE_RAMAN = 'RAMAN';\n    this.TYPE_UV = 'UV';\n    this.TYPE_MASS = 'MASS';\n    this.TYPE_HPLC = 'HPLC';\n    this.TYPE_GC = 'GC';\n    this.TYPE_CD = 'CD';\n    this.TYPE_2DNMR_SPECTRUM = 'nD NMR SPECTRUM';\n    this.TYPE_2DNMR_FID = 'nD NMR FID';\n    this.TYPE_XY_DEC = 'XY DEC';\n    this.TYPE_XY_INC= 'XY INC';\n    this.TYPE_IV = 'IV';\n}\n\nSD.fromJcamp = function(jcamp, options) {\n    options = options ||{};\n    if(typeof options.xy ===\"undefined\")\n        options.xy=true;\n\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new SD(spectrum);\n}\n\n\n/**\n * @function setActiveElement(nactiveSpectrum);\n * This function sets the nactiveSpectrum sub-spectrum as active\n * \n */\nSD.prototype.setActiveElement = function(nactiveSpectrum){\n    this.activeElement=nactiveSpectrum;\n}\n\n/**\n * @function getActiveElement();\n * This function returns the index of the active sub-spectrum.\n */\nSD.prototype.getActiveElement = function(){\n    return this.activeElement;\n}\n/**\n * This function returns the units of the independent dimension.\n * @returns {xUnit|*|M.xUnit}\n */\nSD.prototype.getXUnits = function(){\n    return this.getSpectrum().xUnit;\n}\n\n/**\n * * This function returns the units of the dependent variable.\n * @returns {yUnit|*|M.yUnit}\n */\nSD.prototype.getYUnits = function(){\n    return this.getSpectrum().yUnit;\n}\n\n/**\n*   Returns the number of points in the current spectrum\n*/\nSD.prototype.getNbPoints=function(i){\n    return this.getSpectrumData(i).y.length;\n}\n\n/**\n * Return the first value of the direct dimension\n */\nSD.prototype.getFirstX=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].firstX;\n}\n\n/**\n * Return the last value of the direct dimension\n */\nSD.prototype.getLastX=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].lastX;\n}\n\n/**\n * Return the first value of the direct dimension\n */\nSD.prototype.getFirstY=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].firstY;\n}\n\n/**\n * Return the first value of the direct dimension\n */\nSD.prototype.getLastY = function(i){\n    i=i||this.activeElement;\n    return this.sd.spectra[i].lastY;\n}\n\nSD.prototype.setDataClass = function(dataClass){\n    if(dataClass==this.DATACLASS_PEAK) {\n        this.getSpectrum().isPeaktable = true;\n        this.getSpectrum().isXYdata = false;\n    }\n    if(dataClass==this.DATACLASS_XY){\n        this.getSpectrum().isXYdata = true;\n        this.getSpectrum().isPeaktable = false;\n    }\n}\n\n/**\n * @function isDataClassPeak();\n * Is this a PEAKTABLE spectrum?\n */\nSD.prototype.isDataClassPeak = function(){\n    if(this.getSpectrum().isPeaktable)\n        return  this.getSpectrum().isPeaktable;\n    return false;\n}\n\n/**\n * @function isDataClassXY();\n * Is this a XY spectrum?\n */\nSD.prototype.isDataClassXY = function(){\n    if(this.getSpectrum().isXYdata)\n        return  this.getSpectrum().isXYdata;\n    return false\n}\n\nSD.prototype.setDataType = function(dataType){\n    this.getSpectrum().dataType=dataType;\n}\n\nSD.prototype.getDataType = function(){\n    return this.getSpectrum().dataType;\n}\n\n/**\n* Return the i-th sub-spectra in the current spectrum\n*/\nSD.prototype.getSpectrumData=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i].data[0];\n}\n\n/**\n * Return the i-th sub-spectra in the current spectrum\n */\nSD.prototype.getSpectrum=function(i) {\n    i=i||this.activeElement;\n    return this.sd.spectra[i];\n}\n\n/**\n * Returns the number of sub-spectra in this object\n */\nSD.prototype.getNbSubSpectra=function(){\n    return this.sd.spectra.length;\n}\n\n\n/**\n *   Returns an array containing the x values of the spectrum\n */\nSD.prototype.getXData=function(i){\n    return this.getSpectrumData(i).x;\n}\n\n/**\n * @function getYData();\n * This function returns a double array containing the values of the intensity for the current sub-spectrum.\n */\nSD.prototype.getYData=function(i){\n    return this.getSpectrumData(i).y;\n}\n\nSD.prototype.getX=function(i){\n    return this.getXData()[i];\n}\n\nSD.prototype.getY=function(i){\n    return this.getYData()[i];\n}\n\n/**\n * @function getXYData();\n * To get a 2 dimensional array with the x and y of this spectraData( Only for 1D spectra).\n * Returns a double[2][nbPoints] where the first row contains the x values and the second row the y values.\n */\nSD.prototype.getXYData=function(i){\n    return [this.getXData(i),this.getYData(i)];\n}\n\nSD.prototype.getTitle=function(i) {\n    return this.getSpectrum(i).title;\n}\n\n/**\n * @function setTitle(newTitle);\n * To set the title of this spectraData.\n * @param newTitle The new title\n */\nSD.prototype.setTitle=function(newTitle,i) {\n    this.getSpectrum(i).title=newTitle;\n}\n\n/**\n * @function getMinY(i)\n * This function returns the minimal value of Y\n */\nSD.prototype.getMinY=function(i) {\n    return  StatArray.min(this.getYData(i));\n}\n\n/**\n * @function getMaxY(i)\n * This function returns the maximal value of Y\n */\nSD.prototype.getMaxY=function(i) {\n    return  StatArray.max(this.getYData(i));\n}\n\n/**\n * @function getMinMax(i)\n */\nSD.prototype.getMinMaxY=function(i) {\n    return  StatArray.minMax(this.getYData(i));\n}\n\n\n/**\n* Get the noise threshold level of the current spectrum. It uses median instead of the mean\n*/\nSD.prototype.getNoiseLevel=function(){\n    var mean = 0,stddev=0;\n    var y = this.getYData();\n    var length = this.getNbPoints(),i=0;\n    for(i = 0; i < length; i++){\n        mean+=y[i];\n    }\n    mean/=this.getNbPoints();\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort();\n    if (length % 2 == 1) {\n        stddev = averageDeviations[(length-1)/2] / 0.6745;\n    } else {\n        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n    }\n\n    return stddev*this.getNMRPeakThreshold(this.getNucleus(1));\n}\n\n\n/**\n* Return the xValue for the given index\n*/\nSD.prototype.arrayPointToUnits=function(doublePoint){\n    return (this.getFirstX() - (doublePoint* (this.getFirstX() - this.getLastX()) / (this.getNbPoints()-1)));\n}\n\n/**\n * Returns the index-value for the data array corresponding to a X-value in\n * units for the element of spectraData to which it is linked (spectraNb).\n * This method makes use of spectraData.getFirstX(), spectraData.getLastX()\n * and spectraData.getNbPoints() to derive the return value if it of data class XY\n * It performs a binary search if the spectrum is a peak table\n *\n * @param inValue\n *            (value in Units to be converted)\n * @return an integer representing the index value of the inValue\n */\nSD.prototype.unitsToArrayPoint=function(inValue){\n    if (this.isDataClassXY()) {\n        return Math.round((this.getFirstX() - inValue) * (-1.0 / this.getDeltaX()));\n    } else if (this.isDataClassPeak())\n    {\n        var currentArrayPoint = 0,upperLimit=this.getNbPoints()-1, lowerLimit=0, midPoint;\n        //If inverted scale\n        if(this.getFirstX()>this.getLastX()){\n            upperLimit=0;\n            lowerLimit=this.getNbPoints()-1;\n\n            if(inValue>this.getFirstX())\n                return this.getNbPoints();\n            if(inValue<this.getLastX())\n                return -1;\n        }\n        else{\n            if(inValue<this.getFirstX())\n                return -1;\n            if(inValue>this.getLastX())\n                return this.getNbPoints();\n        }\n\n        while (Math.abs(upperLimit-lowerLimit) > 1)\n        {\n            midPoint=Math.round(Math.floor((upperLimit+lowerLimit)/2));\n            //x=this.getX(midPoint);\n            if(this.getX(midPoint)==inValue)\n                return midPoint;\n            if(this.getX(midPoint)>inValue)\n                upperLimit=midPoint;\n            else\n                lowerLimit=midPoint;\n        }\n        currentArrayPoint=lowerLimit;\n        if(Math.abs(this.getX(lowerLimit)-inValue)>Math.abs(this.getX(upperLimit)-inValue))\n            currentArrayPoint=upperLimit;\n        return currentArrayPoint;\n    } else {\n        return 0;\n    }\n}\n\n\n\n/**\n* Returns the separation between 2 consecutive points in the spectra domain\n*/\nSD.prototype.getDeltaX=function(){\n    return (this.getLastX()-this.getFirstX()) / (this.getNbPoints()-1);\n}\n\n/**\n * @function setMinMax(min,max)\n * This function scales the values of Y between the min and max parameters\n * @param min   Minimum desired value for Y\n * @param max   Maximum desired value for Y\n */\nSD.prototype.setMinMax=function(min,max) {\n    var y = this.getYData();\n    var minMax = StatArray.minMax(y);\n    var factor = (max - min)/(minMax.max-minMax.min);\n    for(var i=0;i< y.length;i++){\n        y[i]=(y[i]-minMax.min)*factor+min;\n    }\n}\n\n/**\n * @function setMin(min)\n * This function scales the values of Y to fit the min parameter\n * @param min   Minimum desired value for Y\n */\nSD.prototype.setMin=function(min) {\n    var y = this.getYData();\n    var currentMin = StatArray.min(y);\n    var factor = min/currentMin;\n    for(var i=0;i< y.length;i++){\n        y[i]*=factor;\n    }\n}\n\n/**\n * @function setMax(max)\n * This function scales the values of Y to fit the max parameter\n * @param max   Maximum desired value for Y\n */\nSD.prototype.setMax=function(max) {\n    var y = this.getYData();\n    var currentMin = StatArray.max(y);\n    var factor = max/currentMin;\n    for(var i=0;i< y.length;i++){\n        y[i]*=factor;\n    }\n}\n\n/**\n * @function YShift(value)\n * This function shifts the values of Y\n * @param value Distance of the shift\n */\nSD.prototype.YShift=function(value) {\n    var y = this.getSpectrumData().y;\n    var length = this.getNbPoints(),i=0;\n    for(i=0;i<length;i++){\n        y[i]+=value;\n    }\n    this.getSpectrum().firstY+=value;\n    this.getSpectrum().lastY+=value;\n}\n\n/**\n * @function shift(globalShift)\n * This function shift the given spectraData. After this function is applied, all the peaks in the\n * spectraData will be found at xi+globalShift\n * @param globalShift\n */\nSD.prototype.shift=function(globalShift) {\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        var x = this.getSpectrumData().x;\n        var length = this.getNbPoints(),i=0;\n        for(i=0;i<length;i++){\n            x[i]+=globalShift;\n        }\n\n        this.getSpectrum().firstX+=globalShift;\n        this.getSpectrum().lastX+=globalShift;\n    }\n\n}\n\n/**\n * @function fillWith(from, to, value)\n * This function fills a zone of the spectrum with the given value.\n * @param from\n * @param to\n * @param fillWith\n */\nSD.prototype.fillWith=function(from, to, value) {\n    var tmp, start, end, x, y;\n    if(from > to) {\n        var tmp = from;\n        from = to;\n        to = tmp;\n    }\n\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        x = this.getXData();\n        y = this.getYData();\n        start = this.unitsToArrayPoint(from);\n        end = this.unitsToArrayPoint(to);\n        if(start > end){\n            tmp = start;\n            start = end;\n            end = tmp;\n        }\n        if(start<0)\n            start=0;\n        if(end>=this.getNbPoints)\n            end=this.getNbPoints-1;\n        for(i=start;i<=end;i++){\n                y[i]=value;\n        }\n    }\n}\n\n/**\n * @function suppressZone(from, to)\n * This function suppress a zone from the given spectraData within the given x range.\n * Returns a spectraData of type PEAKDATA without peaks in the given region\n * @param from\n * @param to\n */\nSD.prototype.suppressZone=function(from, to) {\n    var tmp, start, end, x, y;\n    if(from > to) {\n        var tmp = from;\n        from = to;\n        to = tmp;\n    }\n\n    for(var i=0;i<this.getNbSubSpectra();i++){\n        this.setActiveElement(i);\n        x = this.getXData();\n        y = this.getYData();\n        start = this.unitsToArrayPoint(from);\n        end = this.unitsToArrayPoint(to);\n        if(start > end){\n            tmp = start;\n            start = end;\n            end = tmp;\n        }\n        if(start<0)\n            start=0;\n        if(end>=this.getNbPoints)\n            end=this.getNbPoints-1;\n        for(i=end;i>=start;i--){\n            y.splice(i,1);\n            x.splice(i,1);\n        }\n    }\n    this.setDataClass(this.DATACLASS_PEAK);\n}\n\n\n/**\n * @function peakPicking(parameters)\n * This function performs a simple peak detection in a spectraData. The parameters that can be specified are:\n * Returns a two dimensional array of double specifying [x,y] of the detected peaks.\n * @option from:    Lower limit.\n * @option to:      Upper limit.\n * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n * @option resolution: The maximum resolution of the spectrum for considering peaks.\n * @option yInverted: Is it a Y inverted spectrum?(like an IR spectrum)\n * @option smooth: A function for smoothing the spectraData before the detection. If your are dealing with\n * experimental spectra, smoothing will make the algorithm less prune to false positives.\n */\nSD.prototype.simplePeakPicking=function(parameters) {\n    //@TODO implements this filter\n}\n\n/**\n * @function getMaxPeak();\n * Get the maximum peak\n */\nSD.prototype.getMaxPeak = function(){\n    var y = this.getSpectraDataY();\n    var max=y[0], index=0;\n    for(var i=0;i< y.length;i++){\n        if(max<y[i]){\n            max = y[i];\n            index=i;\n        }\n    }\n    return [this.getSpectraDataX()[index],max];\n}\n\n/**\n * @function getParamDouble(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n */\nSD.prototype.getParamDouble = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value;\n}\n\n/**\n * @function getParamString(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n */\nSD.prototype.getParamString = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value+\"\";\n}\n\n/**\n * @function getParamInt(name, defvalue);\n * Get the value of the parameter\n * @param  name The parameter name\n * @param  defvalue The default value\n */\nSD.prototype.getParamInt = function(name, defvalue){\n    var value = this.sd.info[name];\n    if(!value)\n        value = defvalue;\n    return value;\n}\n\n/**\n * Return the y elements of the current spectrum\n * @returns {*}\n */\n\nSD.prototype.getSpectraDataX = function(){\n    return this.getYData();\n}\n\n/**\n * Return the x elements of the current spectrum\n * @returns {*}\n */\nSD.prototype.getSpectraDataX = function(){\n    return this.getXData();\n}\n\n/**\n * Set a new parameter to this spectrum\n * @param name\n * @param value\n */\nSD.prototype.putParam = function(name, value){\n    this.sd.info[name]=value;\n}\n\n/**\n * This function returns the area under the spectrum in the given window\n */\nSD.prototype.getArea = function(from, to){\n    var i0 = this.unitsToArrayPoint(from);\n    var ie = this.unitsToArrayPoint(to);\n    var area = 0;\n    if(i0>ie){\n        var tmp = i0;\n        i0 = ie;\n        ie = tmp;\n    }\n    i0=i0<0?0:i0;\n    ie=ie>=this.getNbPoints()?this.getNbPoints()-1:ie;\n    for(var i=i0;i<ie;i++){\n        area+= this.getY(i);\n    }\n    return area*Math.abs(this.getDeltaX());\n},\n\n/**\n * Returns a equally spaced vector within the given window.\n * @param from\n * @param to\n * @param nPoints\n * @returns {*}\n */\nSD.prototype.getVector = function(from, to, nPoints){\n    var x = this.getSpectraDataX();\n    var y = this.getSpectraDataY();\n    var result = [];\n    var start = 0, end = x.length- 1,direction=1;\n    var reversed = false;\n\n    if(x[0]>x[1]){\n        direction = -1;\n        start= x.length-1;\n        end = 0;\n    }\n\n    if(from > to){\n        var tmp = from;\n        from = to;\n        to = tmp;\n        reversed = true;\n    }\n\n    if(x[end]>from||x[start]>to)\n        return [];\n\n    while(x[start]<from){start+=direction;}\n\n    if(x[end]>to){\n        var end = start;\n        while(x[end]<to){end+=direction;}\n    }\n    var winPoints = Math.abs(end-start)+1;\n    var xwin = new Array(winPoints), ywin = new Array(winPoints);\n    var index = 0;\n    if(direction==-1)\n        index=winPoints-1;\n    var i=start-direction;\n    do{\n        i+=direction;\n        xwin[index]=x[i];\n        ywin[index]=y[i];\n        index+=direction;\n    }while(i!=end);\n\n    return [xwin,ywin];\n}\n\n/**\n * @function is2D();\n * Is it a 2D spectrum?\n */\nSD.prototype.is2D = function(){\n    return false;\n}\n\n\nmodule.exports = SD;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/SD.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction max(values) {\n    var max = -Infinity, l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n}\n\nfunction min(values) {\n    var min = Infinity, l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n}\n\nfunction minMax(values) {\n    var min = Infinity,\n        max = -Infinity,\n        l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\nfunction mean(values) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i];\n    return sum / l;\n}\n\nfunction geometricMean(values) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum *= values[i];\n    return Math.pow(sum, 1 / l);\n}\n\nfunction logGeometricMean(values) {\n    var lnsum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        lnsum += Math.log(values[i]);\n    return lnsum / l;\n}\n\nfunction grandMean(means, samples) {\n    var sum = 0, n = 0, l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n}\n\nfunction truncatedMean(values, percent, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    values = inPlace ? values : values.slice();\n    values.sort();\n\n    var l = values.length;\n    var k = Math.floor(l * percent);\n\n    var sum = 0;\n    for (var i = k; i < l - k; i++)\n        sum += values[i];\n\n    return sum / (l - 2 * k);\n}\n\nfunction contraHarmonicMean(values, order) {\n    if (typeof(order) === 'undefined') order = 1;\n    var r1 = 0, r2 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += Math.pow(values[i], order + 1);\n        r2 += Math.pow(values[i], order);\n    }\n    return r1 / r2;\n}\n\nfunction standardDeviation(values, unbiased) {\n    return Math.sqrt(variance(values, unbiased));\n}\n\nfunction standardError(values) {\n    return standardDeviation(values) / Math.sqrt(values.length);\n}\n\nfunction median(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort();\n    }\n\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0)\n        return (values[half - 1] + values[half]) * 0.5;\n    return values[half];\n}\n\nfunction quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort();\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n}\n\nfunction variance(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = mean(values);\n    var theVariance = 0, l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased)\n        return theVariance / (l - 1);\n    else\n        return theVariance / l;\n}\n\nfunction pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(pooledVariance(samples, unbiased));\n}\n\nfunction pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n}\n\nfunction mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n}\n\nfunction covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = mean(vector1);\n    var mean2 = mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n}\n\nfunction skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n}\n\nfunction kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n}\n\nfunction entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n}\n\nfunction weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n}\n\nfunction weightedStandardDeviation(values, weights) {\n    return Math.sqrt(weightedVariance(values, weights));\n}\n\nfunction weightedVariance(values, weights) {\n    var theMean = weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n}\n\nfunction center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n}\n\nfunction standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n}\n\nfunction cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n}\n\nmodule.exports = {\n    min: min,\n    max: max,\n    minMax: minMax,\n    mean: mean,\n    geometricMean: geometricMean,\n    logGeometricMean: logGeometricMean,\n    grandMean: grandMean,\n    truncatedMean: truncatedMean,\n    contraHarmonicMean: contraHarmonicMean,\n    standardDeviation: standardDeviation,\n    standardError: standardError,\n    median: median,\n    quartiles: quartiles,\n    variance: variance,\n    pooledStandardDeviation: pooledStandardDeviation,\n    pooledVariance: pooledVariance,\n    mode: mode,\n    covariance: covariance,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    entropy: entropy,\n    weightedMean: weightedMean,\n    weightedStandardDeviation: weightedStandardDeviation,\n    weightedVariance: weightedVariance,\n    center: center,\n    standardize: standardize,\n    cumulativeSum: cumulativeSum\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/array.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nfunction getConverter() {\n\n    // the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\n    var xyDataSplitRegExp = /[,\\t \\+-]*(?=[^\\d,\\t \\.])|[ \\t]+(?=[\\d+\\.-])/;\n    var removeCommentRegExp = /\\$\\$.*/;\n    var peakTableSplitRegExp = /[,\\t ]+/;\n    var DEBUG = false;\n\n    var GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\n    function convertToFloatArray(stringArray) {\n        var l = stringArray.length;\n        var floatArray = new Array(l);\n        for (var i = 0; i < l; i++) {\n            floatArray[i] = parseFloat(stringArray[i]);\n        }\n        return floatArray;\n    }\n\n    /*\n     options.keepSpectra: keep the original spectra for a 2D\n     options.xy: true // create x / y array instead of a 1D array\n     options.keepRecordsRegExp: which fields do we keep\n     */\n\n    function convert(jcamp, options) {\n        options = options || {};\n\n        var keepRecordsRegExp=/^[A-Z]+$/;\n        if (options.keepRecordsRegExp) keepRecordsRegExp=options.keepRecordsRegExp;\n\n        var start = new Date();\n\n        var ntuples = {},\n            ldr,\n            dataLabel,\n            dataValue,\n            ldrs,\n            i, ii, position, endLine, infos;\n\n        var result = {};\n        result.profiling = [];\n        result.logs = [];\n        var spectra = [];\n        result.spectra = spectra;\n        result.info = {};\n        var spectrum = {};\n\n        if (!(typeof jcamp === 'string')) return result;\n        // console.time('start');\n\n        if (result.profiling) result.profiling.push({action: 'Before split to LDRS', time: new Date() - start});\n\n        ldrs = jcamp.split(/[\\r\\n]+##/);\n\n        if (result.profiling) result.profiling.push({action: 'Split to LDRS', time: new Date() - start});\n\n        if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\n        for (i = 0, ii = ldrs.length; i < ii; i++) {\n            ldr = ldrs[i];\n            // This is a new LDR\n            position = ldr.indexOf('=');\n            if (position > 0) {\n                dataLabel = ldr.substring(0, position);\n                dataValue = ldr.substring(position + 1).trim();\n            } else {\n                dataLabel = ldr;\n                dataValue = '';\n            }\n            dataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\n            if (dataLabel === 'DATATABLE') {\n                endLine = dataValue.indexOf('\\n');\n                if (endLine === -1) endLine = dataValue.indexOf('\\r');\n                if (endLine > 0) {\n                    var xIndex = -1;\n                    var yIndex = -1;\n                    // ##DATA TABLE= (X++(I..I)), XYDATA\n                    // We need to find the variables\n\n                    infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n                    if (infos[0].indexOf('++') > 0) {\n                        var firstVariable = infos[0].replace(/.*\\(([a-zA-Z0-9]+)\\+\\+.*/, '$1');\n                        var secondVariable = infos[0].replace(/.*\\.\\.([a-zA-Z0-9]+).*/, '$1');\n                        xIndex = ntuples.symbol.indexOf(firstVariable);\n                        yIndex = ntuples.symbol.indexOf(secondVariable);\n                    }\n\n                    if (xIndex === -1) xIndex = 0;\n                    if (yIndex === -1) yIndex = 0;\n\n                    if (ntuples.first) {\n                        if (ntuples.first.length > xIndex) spectrum.firstX = ntuples.first[xIndex];\n                        if (ntuples.first.length > yIndex) spectrum.firstY = ntuples.first[yIndex];\n                    }\n                    if (ntuples.last) {\n                        if (ntuples.last.length > xIndex) spectrum.lastX = ntuples.last[xIndex];\n                        if (ntuples.last.length > yIndex) spectrum.lastY = ntuples.last[yIndex];\n                    }\n                    if (ntuples.vardim && ntuples.vardim.length > xIndex) {\n                        spectrum.nbPoints = ntuples.vardim[xIndex];\n                    }\n                    if (ntuples.factor) {\n                        if (ntuples.factor.length > xIndex) spectrum.xFactor = ntuples.factor[xIndex];\n                        if (ntuples.factor.length > yIndex) spectrum.yFactor = ntuples.factor[yIndex];\n                    }\n                    if (ntuples.units) {\n                        if (ntuples.units.length > xIndex) spectrum.xUnit = ntuples.units[xIndex];\n                        if (ntuples.units.length > yIndex) spectrum.yUnit = ntuples.units[yIndex];\n                    }\n                    spectrum.datatable = infos[0];\n                    if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n                        dataLabel = 'PEAKTABLE';\n                    } else if (infos[1] && (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)) {\n                        dataLabel = 'XYDATA';\n                        spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n                    }\n                }\n            }\n\n\n            if (dataLabel === 'TITLE') {\n                spectrum.title = dataValue;\n            } else if (dataLabel === 'DATATYPE') {\n                spectrum.dataType = dataValue;\n                if (dataValue.indexOf('nD') > -1) {\n                    result.twoD = true;\n                }\n            } else if (dataLabel === 'XUNITS') {\n                spectrum.xUnit = dataValue;\n            } else if (dataLabel === 'YUNITS') {\n                spectrum.yUnit = dataValue;\n            } else if (dataLabel === 'FIRSTX') {\n                spectrum.firstX = parseFloat(dataValue);\n            } else if (dataLabel === 'LASTX') {\n                spectrum.lastX = parseFloat(dataValue);\n            } else if (dataLabel === 'FIRSTY') {\n                spectrum.firstY = parseFloat(dataValue);\n            } else if (dataLabel === 'NPOINTS') {\n                spectrum.nbPoints = parseFloat(dataValue);\n            } else if (dataLabel === 'XFACTOR') {\n                spectrum.xFactor = parseFloat(dataValue);\n            } else if (dataLabel === 'YFACTOR') {\n                spectrum.yFactor = parseFloat(dataValue);\n            } else if (dataLabel === 'DELTAX') {\n                spectrum.deltaX = parseFloat(dataValue);\n            } else if (dataLabel === '.OBSERVEFREQUENCY' || dataLabel === '$SFO1') {\n                if (!spectrum.observeFrequency) spectrum.observeFrequency = parseFloat(dataValue);\n            } else if (dataLabel === '.OBSERVENUCLEUS') {\n                if (!spectrum.xType) result.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n            } else if (dataLabel === '$SFO2') {\n                if (!result.indirectFrequency) result.indirectFrequency = parseFloat(dataValue);\n\n            } else if (dataLabel === '$OFFSET') {   // OFFSET for Bruker spectra\n                result.shiftOffsetNum = 0;\n                if (!result.shiftOffsetVal)  result.shiftOffsetVal = parseFloat(dataValue);\n            } else if (dataLabel === '$REFERENCEPOINT') {   // OFFSET for Varian spectra\n\n\n                // if we activate this part it does not work for ACD specmanager\n                //         } else if (dataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n                //                 var parts = dataValue.split(/ *, */);\n                //                 result.shiftOffsetNum = parseInt(parts[2].trim());\n                //                 result.shiftOffsetVal = parseFloat(parts[3].trim());\n            } else if (dataLabel === 'VARNAME') {\n                ntuples.varname = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'SYMBOL') {\n                ntuples.symbol = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'VARTYPE') {\n                ntuples.vartype = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'VARFORM') {\n                ntuples.varform = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'VARDIM') {\n                ntuples.vardim = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'UNITS') {\n                ntuples.units = dataValue.split(/[, \\t]{2,}/);\n            } else if (dataLabel === 'FACTOR') {\n                ntuples.factor = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'FIRST') {\n                ntuples.first = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'LAST') {\n                ntuples.last = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'MIN') {\n                ntuples.min = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === 'MAX') {\n                ntuples.max = convertToFloatArray(dataValue.split(/[, \\t]{2,}/));\n            } else if (dataLabel === '.NUCLEUS') {\n                if (result.twoD) {\n                    result.yType = dataValue.split(/[, \\t]{2,}/)[0];\n                }\n            } else if (dataLabel === 'PAGE') {\n                spectrum.page = dataValue.trim();\n                spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n                spectrum.pageSymbol = spectrum.page.replace(/=.*/, '');\n                var pageSymbolIndex = ntuples.symbol.indexOf(spectrum.pageSymbol);\n                var unit = '';\n                if (ntuples.units && ntuples.units[pageSymbolIndex]) {\n                    unit = ntuples.units[pageSymbolIndex];\n                }\n                if (result.indirectFrequency && unit !== 'PPM') {\n                    spectrum.pageValue /= result.indirectFrequency;\n                }\n            } else if (dataLabel === 'RETENTIONTIME') {\n                spectrum.pageValue = parseFloat(dataValue);\n            } else if (dataLabel === 'XYDATA') {\n                prepareSpectrum(result, spectrum);\n                // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n                if (dataValue.match(/.*\\+\\+.*/)) {\n                    parseXYData(spectrum, dataValue, result);\n                } else {\n                    parsePeakTable(spectrum, dataValue, result);\n                }\n                spectra.push(spectrum);\n                spectrum = {};\n            } else if (dataLabel === 'PEAKTABLE') {\n                prepareSpectrum(result, spectrum);\n                parsePeakTable(spectrum, dataValue, result);\n                spectra.push(spectrum);\n                spectrum = {};\n            } else if (isMSField(dataLabel)) {\n                spectrum[convertMSFieldToLabel(dataLabel)] = dataValue;\n            } else if (dataLabel.match(keepRecordsRegExp)) {\n                result.info[dataLabel] = dataValue.trim();\n            }\n        }\n\n        // Currently disabled\n        //    if (options && options.lowRes) addLowRes(spectra,options);\n\n        if (result.profiling) result.profiling.push({action: 'Finished parsing', time: new Date() - start});\n\n        if (Object.keys(ntuples).length>0) {\n            var newNtuples=[];\n            var keys=Object.keys(ntuples);\n            for (var i=0; i<keys.length; i++) {\n                var key=keys[i];\n                var values=ntuples[key];\n                for (var j=0; j<values.length; j++) {\n                    if (! newNtuples[j]) newNtuples[j]={};\n                    newNtuples[j][key]=values[j];\n                }\n            }\n            result.ntuples=newNtuples;\n        }\n\n        if (result.twoD) {\n            add2D(result);\n            if (result.profiling) result.profiling.push({\n                action: 'Finished countour plot calculation',\n                time: new Date() - start\n            });\n            if (!options.keepSpectra) {\n                delete result.spectra;\n            }\n        }\n\n\n        // maybe it is a GC (HPLC) / MS. In this case we add a new format\n        if (spectra.length > 1 && (! spectra[0].dataType || spectra[0].dataType.toLowerCase().match(/.*mass./))) {\n            addGCMS(result);\n            if (result.profiling) result.profiling.push({\n                action: 'Finished GCMS calculation',\n                time: new Date() - start\n            });\n        }\n\n\n        if (options.xy) { // the spectraData should not be a oneD array but an object with x and y\n            if (spectra.length > 0) {\n                for (var i=0; i<spectra.length; i++) {\n                    var spectrum=spectra[i];\n                    if (spectrum.data.length>0) {\n                        for (var j=0; j<spectrum.data.length; j++) {\n                            var data=spectrum.data[j];\n                            var newData={x:Array(data.length/2), y:Array(data.length/2)};\n                            for (var k=0; k<data.length; k=k+2) {\n                                newData.x[k/2]=data[k];\n                                newData.y[k/2]=data[k+1];\n                            }\n                            spectrum.data[j]=newData;\n                        }\n\n                    }\n\n                }\n            }\n        }\n\n        if (result.profiling) {\n            result.profiling.push({action: 'Total time', time: new Date() - start});\n        }\n\n        //   console.log(result);\n        //    console.log(JSON.stringify(spectra));\n        return result;\n\n    }\n\n\n    function convertMSFieldToLabel(value) {\n        return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n    }\n\n    function isMSField(dataLabel) {\n        for (var i = 0; i < GC_MS_FIELDS.length; i++) {\n            if (dataLabel === GC_MS_FIELDS[i]) return true;\n        }\n        return false;\n    }\n\n    function addGCMS(result) {\n        var spectra = result.spectra;\n        var existingGCMSFields = [];\n        var i;\n        for (i = 0; i < GC_MS_FIELDS.length; i++) {\n            var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n            if (spectra[0][label]) {\n                existingGCMSFields.push(label);\n            }\n        }\n        if (existingGCMSFields.length===0) return;\n        var gcms = {};\n        gcms.gc = {};\n        gcms.ms = [];\n        for (i = 0; i < existingGCMSFields.length; i++) {\n            gcms.gc[existingGCMSFields[i]] = [];\n        }\n        for (i = 0; i < spectra.length; i++) {\n            var spectrum = spectra[i];\n            for (var j = 0; j < existingGCMSFields.length; j++) {\n                gcms.gc[existingGCMSFields[j]].push(spectrum.pageValue);\n                gcms.gc[existingGCMSFields[j]].push(parseFloat(spectrum[existingGCMSFields[j]]));\n            }\n          if (spectrum.data) gcms.ms[i] = spectrum.data[0];\n\n        }\n        result.gcms = gcms;\n    }\n\n    function prepareSpectrum(result, spectrum) {\n        if (!spectrum.xFactor) spectrum.xFactor = 1;\n        if (!spectrum.yFactor) spectrum.yFactor = 1;\n        if (spectrum.observeFrequency) {\n            if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n                spectrum.xUnit = 'PPM';\n                spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n                spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n                spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n                spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n            }\n        }\n        if (result.shiftOffsetVal) {\n            var shift = spectrum.firstX - result.shiftOffsetVal;\n            spectrum.firstX = spectrum.firstX - shift;\n            spectrum.lastX = spectrum.lastX - shift;\n        }\n    }\n\n    function parsePeakTable(spectrum, value, result) {\n        spectrum.isPeaktable=true;\n        var i, ii, j, jj, values;\n        var currentData = [];\n        spectrum.data = [currentData];\n\n        // counts for around 20% of the time\n        var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\n        var k = 0;\n        for (i = 1, ii = lines.length; i < ii; i++) {\n            values = lines[i].trim().replace(removeCommentRegExp, '').split(peakTableSplitRegExp);\n            if (values.length % 2 === 0) {\n                for (j = 0, jj = values.length; j < jj; j = j + 2) {\n                    // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n                    currentData[k++] = (parseFloat(values[j]) * spectrum.xFactor);\n                    currentData[k++] = (parseFloat(values[j + 1]) * spectrum.yFactor);\n                }\n            } else {\n                result.logs.push('Format error: ' + values);\n            }\n        }\n    }\n\n    function parseXYData(spectrum, value, result) {\n        // we check if deltaX is defined otherwise we calculate it\n        if (!spectrum.deltaX) {\n            spectrum.deltaX = (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n        }\n\n        spectrum.isXYdata=true;\n\n        var currentData = [];\n        spectrum.data = [currentData];\n\n        var currentX = spectrum.firstX;\n        var currentY = spectrum.firstY;\n        var lines = value.split(/[\\r\\n]+/);\n        var lastDif, values, ascii, expectedY;\n        values = [];\n        for (var i = 1, ii = lines.length; i < ii; i++) {\n            //var previousValues=JSON.parse(JSON.stringify(values));\n            values = lines[i].trim().replace(removeCommentRegExp, '').split(xyDataSplitRegExp);\n            if (values.length > 0) {\n                if (DEBUG) {\n                    if (!spectrum.firstPoint) {\n                        spectrum.firstPoint = parseFloat(values[0]);\n                    }\n                    var expectedCurrentX = parseFloat(values[0] - spectrum.firstPoint) * spectrum.xFactor + spectrum.firstX;\n                    if ((lastDif || lastDif === 0)) {\n                        expectedCurrentX += spectrum.deltaX;\n                    }\n                    result.logs.push('Checking X value: currentX: ' + currentX + ' - expectedCurrentX: ' + expectedCurrentX);\n                }\n                for (var j = 1, jj = values.length; j < jj; j++) {\n                    if (j === 1 && (lastDif || lastDif === 0)) {\n                        lastDif = null; // at the beginning of each line there should be the full value X / Y so the diff is always undefined\n                        // we could check if we have the expected Y value\n                        ascii = values[j].charCodeAt(0);\n\n                        if (false) { // this code is just to check the jcamp DIFDUP and the next line repeat of Y value\n                            // + - . 0 1 2 3 4 5 6 7 8 9\n                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n                                expectedY = parseFloat(values[j]);\n                            } else\n                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n                            if ((ascii > 63) && (ascii < 74)) {\n                                // we could use parseInt but parseFloat is faster at least in Chrome\n                                expectedY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n                            } else\n                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n                            if ((ascii > 96) && (ascii < 106)) {\n                                // we could use parseInt but parseFloat is faster at least in Chrome\n                                expectedY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n                            }\n                            if (expectedY !== currentY) {\n                                result.logs.push('Y value check error: Found: ' + expectedY + ' - Current: ' + currentY);\n                                result.logs.push('Previous values: ' + previousValues.length);\n                                result.logs.push(previousValues);\n                            }\n                        }\n                    } else {\n                        if (values[j].length > 0) {\n                            ascii = values[j].charCodeAt(0);\n                            // + - . 0 1 2 3 4 5 6 7 8 9\n                            if ((ascii === 43) || (ascii === 45) || (ascii === 46) || ((ascii > 47) && (ascii < 58))) {\n                                lastDif = null;\n                                currentY = parseFloat(values[j]);\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n                            // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n                            if ((ascii > 63) && (ascii < 74)) {\n                                lastDif = null;\n                                currentY = parseFloat(String.fromCharCode(ascii - 16) + values[j].substring(1));\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n                            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n                            if ((ascii > 96) && (ascii < 106)) {\n                                lastDif = null;\n                                currentY = -parseFloat(String.fromCharCode(ascii - 48) + values[j].substring(1));\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n\n\n\n                            // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n                            if (((ascii > 82) && (ascii < 91)) || (ascii === 115)) {\n                                var dup = parseFloat(String.fromCharCode(ascii - 34) + values[j].substring(1)) - 1;\n                                if (ascii === 115) {\n                                    dup = parseFloat('9' + values[j].substring(1)) - 1;\n                                }\n                                for (var l = 0; l < dup; l++) {\n                                    if (lastDif) {\n                                        currentY = currentY + lastDif;\n                                    }\n                                    currentData.push(currentX, currentY * spectrum.yFactor);;\n                                    currentX += spectrum.deltaX;\n                                }\n                            } else\n                            // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n                            if (ascii === 37) {\n                                lastDif = parseFloat('0' + values[j].substring(1));\n                                currentY += lastDif;\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else if ((ascii > 73) && (ascii < 83)) {\n                                lastDif = parseFloat(String.fromCharCode(ascii - 25) + values[j].substring(1));\n                                currentY += lastDif;\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            } else\n                            // negative DIF digits j k l m n o p q r (ascii 106-114)\n                            if ((ascii > 105) && (ascii < 115)) {\n                                lastDif = -parseFloat(String.fromCharCode(ascii - 57) + values[j].substring(1));\n                                currentY += lastDif;\n                                currentData.push(currentX, currentY * spectrum.yFactor);;\n                                currentX += spectrum.deltaX;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n\n    function convertTo3DZ(spectra) {\n        var noise = 0;\n        var minZ = spectra[0].data[0][0];\n        var maxZ = minZ;\n        var ySize = spectra.length;\n        var xSize = spectra[0].data[0].length / 2;\n        var z = new Array(ySize);\n        for (var i = 0; i < ySize; i++) {\n            z[i] = new Array(xSize);\n            for (var j = 0; j < xSize; j++) {\n                z[i][j] = spectra[i].data[0][j * 2 + 1];\n                if (z[i][j] < minZ) minZ = spectra[i].data[0][j * 2 + 1];\n                if (z[i][j] > maxZ) maxZ = spectra[i].data[0][j * 2 + 1];\n                if (i !== 0 && j !== 0) {\n                    noise += Math.abs(z[i][j] - z[i][j - 1]) + Math.abs(z[i][j] - z[i - 1][j]);\n                }\n            }\n        }\n        return {\n            z: z,\n            minX: spectra[0].data[0][0],\n            maxX: spectra[0].data[0][spectra[0].data[0].length - 2],\n            minY: spectra[0].pageValue,\n            maxY: spectra[ySize - 1].pageValue,\n            minZ: minZ,\n            maxZ: maxZ,\n            noise: noise / ((ySize - 1) * (xSize - 1) * 2)\n        };\n\n    }\n\n    function add2D(result) {\n        var zData = convertTo3DZ(result.spectra);\n        result.contourLines = generateContourLines(zData);\n        delete zData.z;\n        result.minMax = zData;\n    }\n\n\n    function generateContourLines(zData, options) {\n        //console.time('generateContourLines');\n        var noise = zData.noise;\n        var z = zData.z;\n        var contourLevels = [];\n        var nbLevels = 7;\n        var povarHeight = new Float32Array(4);\n        var isOver = [];\n        var nbSubSpectra = z.length;\n        var nbPovars = z[0].length;\n        var pAx, pAy, pBx, pBy;\n\n        var x0 = zData.minX;\n        var xN = zData.maxX;\n        var dx = (xN - x0) / (nbPovars - 1);\n        var y0 = zData.minY;\n        var yN = zData.maxY;\n        var dy = (yN - y0) / (nbSubSpectra - 1);\n        var minZ = zData.minZ;\n        var maxZ = zData.maxZ;\n\n        //System.out.prvarln('y0 '+y0+' yN '+yN);\n        // -------------------------\n        // Povars attribution\n        //\n        // 0----1\n        // |  / |\n        // | /  |\n        // 2----3\n        //\n        // ---------------------d------\n\n        var lineZValue;\n        for (var level = 0; level < nbLevels * 2; level++) { // multiply by 2 for positif and negatif\n            var contourLevel = {};\n            contourLevels.push(contourLevel);\n            var side = level % 2;\n            if (side === 0) {\n                lineZValue = (maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) + 5 * noise;\n            } else {\n                lineZValue = -(maxZ - 5 * noise) * Math.exp(level / 2 - nbLevels) - 5 * noise;\n            }\n            var lines = [];\n            contourLevel.zValue = lineZValue;\n            contourLevel.lines = lines;\n\n            if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\n            for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n                for (var povar = 0; povar < nbPovars - 1; povar++) {\n                    povarHeight[0] = z[iSubSpectra][povar];\n                    povarHeight[1] = z[iSubSpectra][povar + 1];\n                    povarHeight[2] = z[(iSubSpectra + 1)][povar];\n                    povarHeight[3] = z[(iSubSpectra + 1)][(povar + 1)];\n\n                    for (var i = 0; i < 4; i++) {\n                        isOver[i] = (povarHeight[i] > lineZValue);\n                    }\n\n                    // Example povar0 is over the plane and povar1 and\n                    // povar2 are below, we find the varersections and add\n                    // the segment\n                    if (isOver[0] !== isOver[1] && isOver[0] !== isOver[2]) {\n                        pAx = povar + (lineZValue - povarHeight[0]) / (povarHeight[1] - povarHeight[0]);\n                        pAy = iSubSpectra;\n                        pBx = povar;\n                        pBy = iSubSpectra + (lineZValue - povarHeight[0]) / (povarHeight[2] - povarHeight[0]);\n                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                    }\n                    if (isOver[3] !== isOver[1] && isOver[3] !== isOver[2]) {\n                        pAx = povar + 1;\n                        pAy = iSubSpectra + 1 - (lineZValue - povarHeight[3]) / (povarHeight[1] - povarHeight[3]);\n                        pBx = povar + 1 - (lineZValue - povarHeight[3]) / (povarHeight[2] - povarHeight[3]);\n                        pBy = iSubSpectra + 1;\n                        lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                    }\n                    // test around the diagonal\n                    if (isOver[1] !== isOver[2]) {\n                        pAx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n                        pAy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[2] - povarHeight[1]);\n                        if (isOver[1] !== isOver[0]) {\n                            pBx = povar + 1 - (lineZValue - povarHeight[1]) / (povarHeight[0] - povarHeight[1]);\n                            pBy = iSubSpectra;\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                        if (isOver[2] !== isOver[0]) {\n                            pBx = povar;\n                            pBy = iSubSpectra + 1 - (lineZValue - povarHeight[2]) / (povarHeight[0] - povarHeight[2]);\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                        if (isOver[1] !== isOver[3]) {\n                            pBx = povar + 1;\n                            pBy = iSubSpectra + (lineZValue - povarHeight[1]) / (povarHeight[3] - povarHeight[1]);\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                        if (isOver[2] !== isOver[3]) {\n                            pBx = povar + (lineZValue - povarHeight[2]) / (povarHeight[3] - povarHeight[2]);\n                            pBy = iSubSpectra + 1;\n                            lines.push(pAx * dx + x0, pAy * dy + y0, pBx * dx + x0, pBy * dy + y0);\n                        }\n                    }\n                }\n            }\n        }\n        // console.timeEnd('generateContourLines');\n        return {\n            minX: zData.minX,\n            maxX: zData.maxX,\n            minY: zData.minY,\n            maxY: zData.maxY,\n            segments: contourLevels\n        };\n        //return contourLevels;\n    }\n\n\n    function addLowRes(spectra, options) {\n        var spectrum;\n        var averageX, averageY;\n        var targetNbPoints = options.lowRes;\n        var highResData;\n        for (var i = 0; i < spectra.length; i++) {\n            spectrum = spectra[i];\n            // we need to find the current higher resolution\n            if (spectrum.data.length > 0) {\n                highResData = spectrum.data[0];\n                for (var j = 1; j < spectrum.data.length; j++) {\n                    if (spectrum.data[j].length > highResData.length) {\n                        highResData = spectrum.data[j];\n                    }\n                }\n\n                if (targetNbPoints > (highResData.length / 2)) return;\n                var i, ii;\n                var lowResData = [];\n                var modulo = Math.ceil(highResData.length / (targetNbPoints * 2));\n                for (i = 0, ii = highResData.length; i < ii; i = i + 2) {\n                    if (i % modulo === 0) {\n                        lowResData.push(highResData[i], highResData[i + 1])\n                    }\n                }\n                spectrum.data.push(lowResData);\n            }\n        }\n    }\n\n    return convert;\n\n}\n\nvar convert = getConverter();\n\nfunction JcampConverter(input, options, useWorker) {\n    if (typeof options === 'boolean') {\n        useWorker = options;\n        options = {};\n    }\n    if (useWorker) {\n        return postToWorker(input, options);\n    } else {\n        return convert(input, options);\n    }\n}\n\nvar stamps = {},\n    worker;\n\nfunction postToWorker(input, options) {\n    if (!worker) {\n        createWorker();\n    }\n    return new Promise(function (resolve) {\n        var stamp = Date.now() + '' + Math.random();\n        stamps[stamp] = resolve;\n        worker.postMessage({stamp: stamp, input: input, options: options});\n    });\n}\n\nfunction createWorker() {\n    var workerURL = URL.createObjectURL(new Blob([\n        'var getConverter =' + getConverter.toString() + ';var convert = getConverter(); onmessage = function (event) { postMessage({stamp: event.data.stamp, output: convert(event.data.input, event.data.options)}); };'\n    ], {type: 'application/javascript'}));\n    worker = new Worker(workerURL);\n    URL.revokeObjectURL(workerURL);\n    worker.addEventListener('message', function (event) {\n        var stamp = event.data.stamp;\n        if (stamps[stamp]) {\n            stamps[stamp](event.data.output);\n        }\n    });\n}\n\nmodule.exports = {\n    convert: JcampConverter\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/jcampconverter/src/index.js\n ** module id = 3\n ** module chunks = 0\n **/","var SD = require('./SD');\nvar PeakPicking = require('./PeakPicking');\nvar JcampConverter=require(\"jcampconverter\");\n\nfunction NMR(sd) {\n    SD.call(this, sd); // Héritage\n}\n\nNMR.prototype = Object.create(SD.prototype);\nNMR.prototype.constructor = NMR;\n\nNMR.fromJcamp = function(jcamp,options) {\n    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new NMR(spectrum);\n}\n\n/**\n* Return the observed nucleus \n*/\nNMR.prototype.getNucleus=function(dim){\n    if(!dim||dim==0)\n        return this.sd.xType;\n    else{\n        return \"\";\n    }\n}\n\n/**\n* Returns the solvent name\n*/\nNMR.prototype.getSolventName=function(){\n    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]||\"\").replace(\"<\",\"\").replace(\">\",\"\");\n}\n\n//Returns the observe frequency in the direct dimension\nNMR.prototype.observeFrequencyX=function(){\n    return this.sd.spectra[0].observeFrequency;\n}\n\n/**\n* Returns the noise factor depending on the nucleus.\n*/\nNMR.prototype.getNMRPeakThreshold=function(nucleus) {\n    if (nucleus == \"1H\")\n        return 3.0;\n    if (nucleus ==\"13C\")\n        return 5.0;\n    return 1.0;\n}\n\n\n    \n/**\n * @function addNoise(SNR)\n * This function adds white noise to the the given spectraData. The intensity of the noise is \n * calculated from the given signal to noise ratio.\n * @param SNR Signal to noise ratio\n */\n NMR.prototype.addNoise=function(SNR) {\n     //@TODO Implement addNoise filter\n}\n\n\n/**\n * @function addSpectraDatas(spec2,factor1,factor2,autoscale )   \n *  This filter performs a linear combination of two spectraDatas.\n * A=spec1\n * B=spec2\n * After to apply this filter you will get:\n *      A=A*factor1+B*factor2\n * if autoscale is set to 'true' then you will obtain:\n *  A=A*factor1+B*k*factor2\n * Where the k is a factor such that the maximum peak in A is equal to the maximum peak in spectraData2 \n * @param spec2 spectraData2\n * @param factor1 linear factor for spec1\n * @param factor2 linear factor for spec2\n * @param autoscale Auto-adjust scales before combine the spectraDatas\n * @example spec1 = addSpectraDatas(spec1,spec2,1,-1, false) This subtract spec2 from spec1\n*/\nNMR.prototype.addSpectraDatas=function(spec2,factor1,factor2,autoscale ) {\n    //@TODO Implement addSpectraDatas filter\n}\n\n/**\n * @function autoBaseline()\n * Automatically corrects the base line of a given spectraData. After this process the spectraData\n * should have meaningful integrals.\n */\nNMR.prototype.autoBaseline=function( ) {\n    //@TODO Implement autoBaseline filter\n}\n\n/**\n * @function fourierTransform()\n * Fourier transforms the given spectraData (Note. no 2D handling yet) this spectraData have to be of type NMR_FID or 2DNMR_FID\n */\nNMR.prototype.fourierTransform=function( ) {\n    //@TODO Implement fourierTransform filter\n}\n\n/**\n * @function postFourierTransform(ph1corr)\n * This filter makes an phase 1 correction that corrects the problem of the spectra that has been obtained \n * on spectrometers using the Bruker digital filters. This method is used in cases when the BrukerSpectra \n * filter could not find the correct number of points to perform a circular shift.\n * The actual problem is that not all of the spectra has the necessary parameters for use only one method for \n * correcting the problem of the Bruker digital filters.\n * @param spectraData A fourier transformed spectraData.\n * @param ph1corr Phase 1 correction value in radians.\n */\nNMR.prototype.postFourierTransform=function(ph1corr) {\n    //@TODO Implement postFourierTransform filter\n}\n\n/**\n * @function zeroFilling(nPointsX [,nPointsY])\n * This function increase the size of the spectrum, filling the new positions with zero values. Doing it one \n * could increase artificially the spectral resolution.\n * @param nPointsX Number of new zero points in the direct dimension\n * @param nPointsY Number of new zero points in the indirect dimension\n */\nNMR.prototype.zeroFilling=function(nPointsX, nPointsY) {\n    //@TODO Implement zeroFilling filter\n}\n\n/**\n * @function  haarWhittakerBaselineCorrection(waveletScale,whittakerLambda)\n * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n * The needed parameters are the wavelet scale and the lambda used in the whittaker smoother.\n * @param waveletScale To be described\n * @param whittakerLambda To be described\n */\nNMR.prototype.haarWhittakerBaselineCorrection=function(waveletScale,whittakerLambda) {\n    //@TODO Implement haarWhittakerBaselineCorrection filter\n}\n\n/**\n * @function whittakerBaselineCorrection(whittakerLambda,ranges)\n * Applies a baseline correction as described in J Magn Resonance 183 (2006) 145-151 10.1016/j.jmr.2006.07.013\n * The needed parameters are the Wavelet scale and the lambda used in the Whittaker smoother.\n * @param waveletScale To be described\n * @param whittakerLambda To be described\n * @param ranges A string containing the ranges of no signal.\n */\nNMR.prototype.whittakerBaselineCorrection=function(whittakerLambda,ranges) {\n    //@TODO Implement whittakerBaselineCorrection filter\n}\n\n/**\n * @function brukerSpectra(options)\n * This filter applies a circular shift(phase 1 correction in the time domain) to an NMR FID spectrum that \n * have been obtained on spectrometers using the Bruker digital filters. The amount of shift depends on the \n * parameters DECIM and DSPFVS. This spectraData have to be of type NMR_FID\n * @option DECIM: Acquisition parameter\n * @option DSPFVS: Acquisition parameter\n */\nNMR.prototype.brukerSpectra=function(options) {\n    //@TODO Implement brukerSpectra filter\n}\n\n/**\n * @function apodization(functionName, lineBroadening)\n * Apodization of a spectraData object.\n * @param spectraData An spectraData of type NMR_FID\n * @param functionName Valid values for functionsName are\n *  Exponential, exp\n *  Hamming, hamming\n *  Gaussian, gauss\n *  TRAF, traf\n *  Sine Bell, sb\n *  Sine Bell Squared, sb2\n * @param lineBroadening The parameter LB should either be a line broadening factor in Hz \n * or alternatively an angle given by degrees for sine bell functions and the like.\n * @example SD.apodization(, lineBroadening)\n */\nNMR.prototype.apodization=function(functionName, lineBroadening) {\n    //@TODO Implement apodization filter\n}\n\n/**\n * @function echoAntiechoFilter();\n * That decodes an Echo-Antiecho 2D spectrum.\n */\nNMR.prototype.echoAntiechoFilter=function() {\n    //@TODO Implement echoAntiechoFilter filter\n}\n\n/**\n * @function SNVFilter()\n * This function apply a Standard Normal Variate Transformation over the given spectraData. Mainly used for IR spectra.\n */\nNMR.prototype.SNVFilter=function() {\n    //@TODO Implement SNVFilter\n}\n\n/**\n * @function powerFilter(power)\n * This function applies a power to all the Y values.<br>If the power is less than 1 and the spectrum has negative values, it will be shifted so that the lowest value is zero \n * @param   power   The power to apply\n */\nNMR.prototype.powerFilter=function(power) {\n    var minY=this.getMinY();\n    if(power<1 && minY<0){\n        this.YShift(-1*minY);\n        console.warn(\"SD.powerFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n    }\n    //@TODO Implement powerFilter\n}\n\n/**\n * @function logarithmFilter(base)\n * This function applies a log to all the Y values.<br>If the spectrum has negative or zero values, it will be shifted so that the lowest value is 1 \n * @param   base    The base to use\n */\nNMR.prototype.logarithmFilter=function(base) {\n    var minY=this.getMinY();\n    if(minY<=0){\n        this.YShift((-1*minY)+1);\n        console.warn(\"SD.logarithmFilter: The spectrum had negative values and was automatically shifted before applying the function.\");\n    }\n   //@TODO Implement logarithmFilter filter\n}\n\n\n/**\n * @function correlationFilter(func) \n * This function correlates the given spectraData with the given vector func. The correlation\n * operation (*) is defined as:\n * \n *                    __ inf\n *  c(x)=f(x)(*)g(x)= \\        f(x)*g(x+i)\n *                   ./    \n *                    -- i=-inf\n * @param func A double array containing the function to correlates the spectraData\n * @example var smoothedSP = SD.correlationFilter(spectraData,[1,1]) returns a smoothed version of the\n * given spectraData. \n */\nNMR.prototype.correlationFilter=function(func) {\n    //@TODO Implement correlationFilter filter\n}\n\n/**\n * @function  phaseCorrection(phi0, phi1)\n * Applies the phase correction (phi0,phi1) to a Fourier transformed spectraData. The angles must be given in radians.\n * @param phi0 Zero order phase correction\n * @param phi1 One order phase correction\n*/\nNMR.prototype.phaseCorrection=function(phi0, phi1) {\n    //@TODO Implement phaseCorrection filter\n}\n\n/**\n * @function automaticPhase() \n * This function determines automatically the correct parameters phi0 and phi1 for a phaseCorrection\n * function and applies it.\n */ \nNMR.prototype.automaticPhase=function() {\n    //@TODO Implement automaticPhase filter\n}\n\n/**\n *  @function useBrukerPhase()\n *  This function extract the parameters of the phaseCorrection from the jcamp-dx parameters\n *  if the spectrum was acquired in Bruker spectrometers . Basically it will look for the parameters\n *  $PHC0 and $PHC1, and will use it to call the phaseCorrection function.\n */\nNMR.prototype.useBrukerPhase=function() {\n   //@TODO Implement useBrukerPhase filter\n}\n\n/**\n * @function nmrPeakDetection(parameters);\n * This function process the given spectraData and tries to determine the NMR signals. Returns an NMRSignal1D array containing all the detected 1D-NMR Signals\n * @param parameters A JSONObject containing the optional parameters:\n * @option fromX:   Lower limit.\n * @option toX:     Upper limit.\n * @option threshold: The minimum intensity to consider a peak as a signal, expressed as a percentage of the highest peak. \n * @option stdev: Number of standard deviation of the noise for the threshold calculation if a threshold is not specified.\n */\nNMR.prototype.nmrPeakDetection=function(parameters) {\n    return PeakPicking.peakPicking(this, parameters);\n}\n\n/**\n * @function toJcamp(options)\n * This function creates a String that represents the given spectraData in the format JCAM-DX 5.0\n * The X,Y data can be compressed using one of the methods described in: \n * \"JCAMP-DX. A STANDARD FORMAT FOR THE EXCHANGE OF ION MOBILITY SPECTROMETRY DATA\", \n *  http://www.iupac.org/publications/pac/pdf/2001/pdf/7311x1765.pdf\n * @option encode: ['FIX','SQZ','DIF','DIFDUP','CVS','PAC'] (Default: 'FIX')\n * @option yfactor: The YFACTOR. It allows to compress the data by removing digits from the ordinate. (Default: 1)\n * @option type: [\"NTUPLES\", \"SIMPLE\"] (Default: \"SIMPLE\")\n * @option keep: A set of user defined parameters of the given SpectraData to be stored in the jcamp.\n * @example SD.toJcamp(spectraData,{encode:'DIFDUP',yfactor:0.01,type:\"SIMPLE\",keep:['#batchID','#url']});\n */ \nNMR.prototype.toJcamp=function(options) {\n     //@TODO Implement toJcamp filter\n     return \"NOT ImplementED\"\n}\n\n\nmodule.exports = NMR;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/NMR.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\n * Implementation of the peak pickig method described by Cobas in:\n * A new approach to improving automated analysis of proton NMR spectra\n * through Global Spectral Deconvolution (GSD)\n * http://www.spectroscopyeurope.com/images/stories/ColumnPDFs/TD_23_1.pdf\n */\nvar JAnalyzer = require('./JAnalyzer');\n/*var LM = require('ml-curve-fitting');\nvar Matrix = LM.Matrix;\nvar math = Matrix.algebra;*/\nvar peakPicking = require(\"ml-gsd\");\n\nvar PeakPicking={\n    impurities:[],\n    maxJ:20,\n\n    peakPicking:function(spectrum, options){\n        options = options||{nH:10, clean:true, realTop:false, thresholdFactor:1, compile:true, integral:0}\n\n        var nH=options.nH||10;\n        var i, j, nHi, sum;\n        //options.realTop = options.realTop||false;\n        //options.thresholdFactor = options.thresholdFactor || 1;\n        //options.compile = options.compile || false;\n        //options.clean = options.clean || false;\n        //var tmp = spectrum.clone();\n\n        var noiseLevel = Math.abs(spectrum.getNoiseLevel())*(options.thresholdFactor||1);\n        var data = spectrum.getXYData();\n        //var peakList = this.GSD(spectrum, noiseLevel);\n        //peakList = Opt.optimizeLorentzianSum(peakList);//this.optmizeSpectrum(peakList,spectrum,noiseLevel);\n        var peakList = peakPicking.gsd(data[0],data[1], {noiseLevel: noiseLevel, minMaxRatio:0.01, broadRatio:0.0025,smoothY:true});\n        peakList = peakPicking.optimize(peakList,data[0],data[1],3,\"lorentzian\");\n        //console.log(noiseLevel);\n        peakList = this.clearList(peakList,noiseLevel);\n        var signals = this.detectSignals(peakList, spectrum, nH, options.integral||0);\n        //console.log(JSON.stringify(signals));\n        //Remove all the signals with small integral\n        if(options.clean||false){\n            for(var i=signals.length-1;i>=0;i--){\n                if(signals[i].integralData.value<0.5) {\n                    signals.splice(i, 1);\n                }\n            }\n        }\n        if(options.compile||false){\n            for(i=0;i<signals.length;i++){\n                //console.log(\"Sum \"+signals[i].integralData.value);\n                JAnalyzer.compilePattern(signals[i]);\n                if(signals[i].maskPattern&&signals[i].multiplicity!=\"m\"\n                    && signals[i].multiplicity!=\"\"){\n                    //Create a new signal with the removed peaks\n                    nHi = 0;\n                    sum=0;\n                    var peaksO = [];\n                    for(j=signals[i].maskPattern.length-1;j>=0;j--){\n                        sum+=this.area(signals[i].peaks[j]);\n\n                        if(signals[i].maskPattern[j]===false) {\n                            var peakR = signals[i].peaks.splice(j)[0];\n                            peaksO.push({x:peakR.x,y:peakR.intensity,width:peakR.width});\n                            signals[i].maskPattern.splice(j);\n                            signals[i].peaksComp.splice(j);\n                            signals[i].nbPeaks--;\n                            nHi+=this.area(peakR);\n                        }\n                    }\n                    if(peaksO.length>0){\n                        nHi=nHi*signals[i].integralData.value/sum;\n                        signals[i].integralData.value-=nHi;\n                        var peaks1 = [];\n                        for(var j=peaksO.length-1;j>=0;j--)\n                            peaks1.push(peaksO[j]);\n                        var newSignals = this.detectSignals(peaks1, spectrum, nHi, options.integral||0);\n                        for(j=0;j<newSignals.length;j++)\n                            signals.push(newSignals[j]);\n                    }\n                }\n            }\n            //console.log(signals);\n            this.updateIntegrals(signals, nH);\n        }\n        signals.sort(function(a,b){\n            return a.delta1- b.delta1\n        });\n\n        //Remove all the signals with small integral\n        if(options.clean||false){\n            for(var i=signals.length-1;i>=0;i--){\n                if(signals[i].integralData.value<0.5) {\n                    signals.splice(i, 1);\n                }\n            }\n        }\n\n        return signals;\n\n        /*var frequency = spectrum.observeFrequencyX();//getParamDouble(\"$BF1\",400);\n        var imp = this.labelPeaks(peakList, solvent, frequency);\n        return [peakList,imp];\n        */\n        //return createSignals(peakList,nH);\n    },\n\n    clearList:function(peakList, threshold){\n        for(var i=peakList.length-1;i>=0;i--){\n            if(Math.abs(peakList[i].y)<threshold){\n                peakList.splice(i,1);\n            }\n        }\n        return peakList;\n    },\n\n\n    /**\n     * This method implements a non linear sampling of the spectrum. The point close to\n     * the critic points are more sampled than the other ones.\n     * @param spectrum\n     * @param peaks\n     * @param rowWise\n     */\n    sampling: function(spectrum, peaks, rowWise){\n        var i0, ie, ic,i, j,nbPoints;\n        var xy = []\n        if(i0>ie){\n            var tmp = i0;\n            i0 = ie;\n            ie = tmp;\n        }\n        //Non linear sampling for each peak.\n        for(i=0;i<peaks.length;i++){\n            var more = true;\n            var nL = 4;\n            while(more) {\n                i0 = spectrum.unitsToArrayPoint(peaks[i][0] - peaks[i][2] * nL);\n                ie = spectrum.unitsToArrayPoint(peaks[i][0] + peaks[i][2] * nL);\n                ic = spectrum.unitsToArrayPoint(peaks[i][0]);\n                if (i0 > ie) {\n                    tmp = i0;\n                    i0 = ie;\n                    ie = tmp;\n                }\n                i0 = i0 < 0 ? 0 : i0;\n                ie = ie >= spectrum.getNbPoints() ? spectrum.getNbPoints() - 1 : ie;\n\n                if (ie - i0 < 10) {\n                    for (j = i0; j <= ie; j++) {\n                        xy.push([spectrum.getX(j), spectrum.getY(j)]);\n                    }\n                    more = false;\n                }\n                else {\n                    xy.push([spectrum.getX(i0), spectrum.getY(i0)]);\n                    xy.push([spectrum.getX(ie), spectrum.getY(ie)]);\n                    if (nL > 0.5) {\n                        nL -= 0.5;\n                    }\n                    else {\n                        nL /= 2;\n                    }\n                }\n            }\n        }\n        //console.log(xy);\n        xy.sort(function(a,b){\n            return a[0]-b[0];\n        });\n        //console.log(\"XX \"+xy.length);\n        var x=[],y=[];\n        var index =0;\n        if(rowWise){\n            x=[xy[0][0]],y=[xy[0][1]];\n            for(i=1;i<xy.length;i++){\n                if(x[index]!=xy[i][0]){\n                    x.push(xy[i][0]);\n                    y.push(xy[i][1]);\n                    index++;\n                }\n            }\n        }\n        else{\n            x=[[xy[0][0]]],y=[[xy[0][1]]];\n            for(i=1;i<xy.length;i++){\n                if(x[index][0]!=xy[i][0]){\n                    x.push([xy[i][0]]);\n                    y.push([xy[i][1]]);\n                    index++;\n                }\n            }\n        }\n        return [x,y];\n\n    },\n\n    getVector: function(spectrum, from, to, rowWise){\n        var i0 = spectrum.unitsToArrayPoint(from);\n        var ie = spectrum.unitsToArrayPoint(to);\n        var x = [];\n        var y = [];\n        if(i0>ie){\n            var tmp = i0;\n            i0 = ie;\n            ie = tmp;\n        }\n        i0=i0<0?0:i0;\n        ie=ie>=spectrum.getNbPoints()?spectrum.getNbPoints()-1:ie;\n        for(var i=i0;i<ie;i+=10){\n            if(rowWise){\n                y.push(spectrum.getY(i));\n                x.push(spectrum.getX(i));\n            }\n            else{\n                y.push([spectrum.getY(i)]);\n                x.push([spectrum.getX(i)]);\n            }\n        }\n        return [x,y];\n    },\n\n\n\n    updateLimits : function(signal){\n        if(signal.multiplicity!=\"m\" && signal.multiplicity!=\"\"){\n            //Remove the integral of the removed peaks\n            var peaksO = signal.peaks;\n            var nbPeaks0 = peaksO.length, index = 0, factor = 0, toRemove = 0;\n\n            for(var i=0;i<nbPeaks0;i++){\n                if(signal.maskPattern[i]===false)\n                    toRemove+=this.area(peaksO[i]);\n                factor+= this.area(peaksO[i]);\n            }\n            factor=signal.integralData.value/factor;\n            signal.integralData.value-=toRemove*factor;\n        }\n        return signal.integralData.value;\n    },\n\n    updateIntegrals : function(signals, nH){\n        var sumIntegral = 0,i,sumObserved=0;\n        for(i=0;i<signals.length;i++){\n            sumObserved+=Math.round(signals[i].integralData.value);\n        }\n        if(sumObserved!=nH){\n\n            sumIntegral=nH/sumObserved;\n            for(i=0;i<signals.length;i++){\n                signals[i].integralData.value*=sumIntegral;\n            }\n        }\n    },\n\n    /*\n     {\n     \"nbPeaks\":1,\"multiplicity\":\"\",\"units\":\"PPM\",\"startX\":3.43505,\"assignment\":\"\",\n     \"pattern\":\"s\",\"stopX\":3.42282,\"observe\":400.08,\"asymmetric\":false,\n     \"delta1\":3.42752,\n     \"integralData\":{\"to\":3.43505,\"value\":590586504,\"from\":3.42282},\n     \"nucleus\":\"1H\",\n     \"peaks\":[{\"intensity\":60066147,\"x\":3.42752}]\n     }\n     */\n    detectSignals: function(peakList, spectrum, nH, integralType){\n        var frequency = spectrum.observeFrequencyX();\n        var signals = [];\n        var signal1D = {};\n        var prevPeak = {x:100000,y:0,width:0},peaks=null;\n        var rangeX = 16/frequency;//Peaks withing this range are considered to belongs to the same signal1D\n        var spectrumIntegral = 0,cs,sum, i,j;\n        //console.log(\"RangeX \"+rangeX);\n        for(i=0;i<peakList.length;i++){\n            //console.log(peakList[i]);\n            if(Math.abs(peakList[i].x-prevPeak.x)>rangeX){\n                //console.log(typeof peakList[i].x+\" \"+typeof peakList[i].width);\n                signal1D = {\"nbPeaks\":1,\"units\":\"PPM\",\n                    \"startX\":peakList[i].x+peakList[i].width,\n                    \"stopX\":peakList[i].x-peakList[i].width,\n                    \"multiplicity\":\"\",\"pattern\":\"\",\n                    \"observe\":frequency,\"nucleus\":\"1H\",\n                    \"integralData\":{\"from\":peakList[i].x-peakList[i].width*3,\n                                    \"to\":peakList[i].x+peakList[i].width*3\n                                    //\"value\":this.area(peakList[i])\n                    },\n                    \"peaks\":[]};\n                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n                signals.push(signal1D);\n                //spectrumIntegral+=this.area(peakList[i]);\n            }\n            else{\n                var tmp = peakList[i].x-peakList[i].width;\n                signal1D.stopX = Math.min(signal1D.stopX,tmp);\n                tmp = peakList[i].x+peakList[i].width;\n                signal1D.stopX = Math.max(signal1D.stopX,tmp);\n                signal1D.nbPeaks++;\n                signal1D.peaks.push({x:peakList[i].x,\"intensity\":peakList[i].y, width:peakList[i].width});\n                //signal1D.integralData.value+=this.area(peakList[i]);\n                signal1D.integralData.from = Math.min(signal1D.integralData.from, peakList[i].x-peakList[i].width*3);\n                signal1D.integralData.to = Math.max(signal1D.integralData.to,peakList[i].x+peakList[i].width*3);\n                //spectrumIntegral+=this.area(peakList[i]);\n            }\n            prevPeak = peakList[i];\n        }\n        //Normalize the integral to the normalization parameter and calculate cs\n        for(i=0;i<signals.length;i++){\n            peaks = signals[i].peaks;\n            var integral = signals[i].integralData;\n            cs = 0;\n            sum = 0;\n            for(var j=0;j<peaks.length;j++){\n                cs+=peaks[j].x*this.area(peaks[j]);//.intensity;\n                sum+=this.area(peaks[j]);\n            }\n            signals[i].delta1 = cs/sum;\n\n            if(integralType==0)\n                integral.value = sum;\n            else {\n                integral.value=spectrum.getArea(integral.from,integral.to);//*nH/spectrumIntegral;\n            }\n            spectrumIntegral+=integral.value;\n\n        }\n        for(var i=0;i<signals.length;i++){\n            //console.log(integral.value);\n            var integral = signals[i].integralData;\n            integral.value*=nH/spectrumIntegral;\n        }\n\n        return signals;\n    },\n\n    area: function(peak){\n        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n    },\n    /**\n     This function tries to determine which peaks belongs to common laboratory solvents\n     as trace impurities from DOI:10.1021/jo971176v. The only parameter of the table is\n     the solvent name.\n     */\n    labelPeaks:function(peakList, solvent, frequency){\n        var column = 0;\n        //console.log(this.impurities[0]);\n        for(column=4;column<this.impurities.length;column++){\n            //console.log(\"sss\".contains);\n            if(this.impurities[0][column].indexOf(solvent)>=0){\n                break;\n            }\n        }\n        //console.log(\"labelPeaks \"+column);\n        var nImpurities = this.impurities.length-1;\n        var nPeaks = peakList.length;\n        //Scores matrix\n        //console.log(nImpurities);\n        var scores = new Array(nImpurities);\n        var max = 0, diff=0, score=0;\n        var gamma = 0.2;//ppm\n        var impurityID=-1;\n        var prevImp = \"\";\n        var maxIntensity = 0,i;\n        for(var j=nPeaks-1;j>=0;j--){\n            if(peakList[j][1]>maxIntensity)\n                maxIntensity = peakList[j][1];\n        }\n\n        for(i=nImpurities-1;i>=0;i--){\n            if(this.impurities[i+1][0]!=prevImp){\n                impurityID++;\n                prevImp=this.impurities[i+1][0];\n            }\n\n            //impID, max, maxIndex, average\n            scores[i]=[impurityID,this.impurities[i+1][2],\n                this.impurities[i+1][3],0,[],0];\n            max = 0;\n            for(var j=nPeaks-1;j>=0;j--){\n                diff = 10000;//Big numnber\n                if(this.impurities[i+1][column]>0)\n                    diff = Math.abs(peakList[j][0]-this.impurities[i+1][column]);\n                if(diff<gamma*3){\n                    score=this.score(diff,gamma);\n                    if(score>max){\n                        max=score;\n                        scores[i][3]=max;\n                        scores[i][4]=[j];\n                    }\n                }\n            }\n        }\n        //Calculate the average score for each impurity set of signals\n        var prevIndex = -1, sum=0, count = 0;\n        var candidates=[];\n        var impuritiesPeaks = [];\n        var i=nImpurities-1;\n        while(i>=-1){\n            if(i==-1||scores[i][0]!=prevIndex&&prevIndex!=-1){\n                if(prevIndex!=-1){\n                    scores[i+1][5]=sum/count;\n                    //Now, lets chech the multiplicities\n                    if(scores[i+1][5]>0.9){\n                        //console.log(scores[i+1][0]+\" SS \");\n                        score=this.updateScore(candidates, peakList, maxIntensity, frequency);\n                        if(score>0.9){\n                            //console.log(candidates);\n                            //TODO: Remove peaks and add it do impuritiesPeaks\n                            for(var j=0;j<candidates.length;j++){\n                                for(var k=candidates[j][4].length-1;k>=0;k--){\n                                    impuritiesPeaks.push(peakList[candidates[j][4][k]]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if(i>=0){\n                    prevIndex=scores[i][0];\n                    sum=scores[i][3];\n                    count=1;\n                    candidates=[scores[i]];\n                }\n\n            }else{\n                prevIndex=scores[i][0];\n                candidates.push(scores[i]);\n                sum+=scores[i][3];\n                count++;\n            }\n            i--;\n        }\n        //console.log(impuritiesPeaks.length);\n\n        return impuritiesPeaks;\n    },\n    /**\n     Updates the score that a given impurity is present in the current spectrum. In this part I would expect\n     to have into account the multiplicity of the signal. Also the relative intensity of the signals.\n     THIS IS the KEY part of the algorithm!!!!!!!!!\n     */\n    updateScore:function(candidates, peakList, maxIntensity, frequency){\n        //You may do it to avoid this part.\n        //return 1;\n\n        //Check the multiplicity\n        var mul = \"\";\n        var j = 0,index, k, maxJppm=this.maxJ/frequency;\n        var min=0, indexMin=0, score=0;\n        for(var i=candidates.length-1;i>=0;i--){\n            mul = candidates[i][1];\n            j = candidates[i][2];\n            //console.log(candidates[i][4]);\n            index = candidates[i][4][0];\n            //console.log(peakList[index][0]+\" \"+mul+\" \"+j+\" \"+index);\n            //I guess we should try to identify the pattern in the nearby.\n            if(mul.indexOf(\"sep\")>=0){\n                if(peakList[index][1]>maxIntensity*0.33){\n                    candidates.splice(i,1);//Not a candidate anymore.\n                }\n            }else{\n                if(mul.indexOf(\"s\")>=0||mul.indexOf(\"X\")>=0){\n                    k=index-1;\n                    min=peakList[index][1];\n                    indexMin=index;\n                    while(k>=0&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n                        if(peakList[k][1]<min){\n                            min=peakList[k][1];\n                            indexMin=k;\n                        }\n                        k--;\n                    }\n                    k=index+1;\n                    while(k<peakList.length&&Math.abs(peakList[index][0]-peakList[k][0])<0.025){\n                        if(peakList[k][1]<min){\n                            min=peakList[k][1];\n                            indexMin=k;\n                        }\n                        k++;\n                    }\n                    candidates[i][4][0]=indexMin;\n                    score+=1;\n                }\n            }\n            if(mul.indexOf(\"d\")>=0){\n                if(index>0&&index<peakList.length-1){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index-1][0])*frequency-j);\n                    if(thisJ1<2||thisJ2<2||thisJ3<2){\n                        if(thisJ1<thisJ2){\n                            if(thisJ1<thisJ3){\n                                candidates[i][4]=[index-1,index];\n                                score+=1;\n                            }\n                            else{\n                                candidates[i][4]=[index-1,index+1];\n                                score+=1;\n                            }\n                        }\n                        else{\n                            if(thisJ2<thisJ3){\n                                candidates[i][4]=[index,index+1];\n                                score+=1;\n                            }\n                            else{\n                                candidates[i][4]=[index-1,index+1];\n                                score+=1;\n                            }\n                        }\n                    }\n                }\n            }\n            if(mul.indexOf(\"t\")>=0){\n                //console.log(\"here\");\n                if(index>0&&index<peakList.length-1){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ4 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index+2][0])*frequency-j);\n                    //console.log(\"XX \"+thisJ1+\" \"+thisJ2);\n                    if(thisJ1<2){\n                        candidates[i][4]=[index-1, index];\n                        score+=0.5;\n                    }\n                    if(thisJ2<2){\n                        candidates[i][4].push(index+1);\n                        score+=0.5;\n                    }\n                    if(thisJ3<2){\n                        candidates[i][4].push(index+2);\n                        score+=0.5;\n                    }\n\n                }\n            }\n            if(mul.indexOf(\"q\")>=0){\n                if(index>1&&index<peakList.length-2){\n                    var thisJ1 = Math.abs(Math.abs(peakList[index-2][0]-peakList[index-1][0])*frequency-j);\n                    var thisJ2 = Math.abs(Math.abs(peakList[index-1][0]-peakList[index][0])*frequency-j);\n                    var thisJ3 = Math.abs(Math.abs(peakList[index+1][0]-peakList[index][0])*frequency-j);\n                    var thisJ4= Math.abs(Math.abs(peakList[index+2][0]-peakList[index+1][0])*frequency-j);\n                    if(thisJ1<2){\n                        candidates[i][4].push(index-2);\n                        score+=0.25;\n                    }\n                    if(thisJ2<2){\n                        candidates[i][4].push(index-1);\n                        score+=0.25;\n                    }\n                    if(thisJ3<2){\n                        candidates[i][4].push(index+1);\n                        score+=0.25;\n                    }\n                    if(thisJ4<2){\n                        candidates[i][4].push(index+2);\n                        score+=0.25;\n                    }\n                }\n            }\n\n\n        }\n\n        //console.log(score/candidates.length+ \" -> \"+candidates);\n        //Lets remove the candidates to be impurities.\n        //It would be equivalent to mark the peaks as valid again\n        if(score/candidates.length < 0.5){\n            for(var i=candidates.length-1;i>=0;i--){\n                candidates.splice(i,1);\n            }\n            return 0;\n        }\n        //Check the relative intensity\n        return 1;\n    },\n\n    score:function(value, gamma){\n        return Math.exp(-Math.pow(value/gamma,2)/2.0);\n    },\n    /**\n     This function joint all the nearby peaks into single signals. We may try to\n     determine the J-couplings and the multiplicity here.\n     */\n    createSignals:function(){\n\n    }\n\n}\n\nmodule.exports = PeakPicking;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakPicking.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * This library implements the J analyser described by Cobas et al in the paper:\n * A two-stage approach to automatic determination of 1H NMR coupling constants\n * Created by acastillo on 4/5/15.\n */\nvar JAnalyzer = {\n    pascalTriangle : [[0],[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]],\n    patterns: [\"s\",\"d\",\"t\",\"q\",\"quint\",\"h\",\"sept\",\"o\",\"n\"],\n    symRatio : 1.5,\n    maxErrorIter1 : 2.5,//Hz\n    maxErrorIter2 : 1,//Hz\n    DEBUG : false,\n\n    /**\n     * The compilation process implements at the first stage a normalization procedure described by Golotvin et al.\n     * embedding in peak-component-counting method described by Hoyes et al.\n     * @param signal\n     */\n    compilePattern : function(signal){\n        if(this.DEBUG)console.log(\"Debugin...\");\n\n        signal.multiplicity=\"m\";//By default the multiplicity is massive\n        // 1.1 symmetrize\n        // It will add a set of peaks(signal.peaksComp) to the signal that will be used during\n        // the compilation process. The unit of those peaks will be in Hz\n        signal.symRank = this.symmetrizeChoiseBest(signal,this.maxErrorIter1,1);\n        signal.asymmetric = true;\n       // console.log(signal.delta1+\" \"+signal.symRank);\n        //Is the signal symmetric?\n        if(signal.symRank>=0.95&&signal.peaksComp.length<32){\n            if(this.DEBUG)console.log(signal.delta1+ \" nbPeaks \"+signal.peaksComp.length);\n            signal.asymmetric = false;\n            var i,j,min,max,k=1,P1,Jc=[],n2,maxFlagged;\n            //Loop over the possible number of coupling contributing to the multiplet\n            for(var n=0;n<9;n++){\n                if(this.DEBUG)console.log(\"Trying \"+n+\" couplings\");\n                //1.2 Normalize. It makes a deep copy of the peaks before to modify them.\n                peaks = this.normalize(signal,n);\n                //signal.peaksCompX = peaks;\n                var validPattern = false;//It will change to true, when we find the good patter\n                //Lets check if the signal could be a singulet.\n                if(peaks.length == 1 && n === 0){\n                    validPattern=true;\n                }\n                else{\n                    if(peaks.length <= 1){\n                        continue;\n                    }\n                }\n                // 1.3 Establish a range for the Heights Hi [peaks.intensity*0.85,peaks.intensity*1.15];\n                var ranges = this.getRanges(peaks);\n                n2 = Math.pow(2,n);\n\n                if(this.DEBUG){\n                    console.log(\"ranges: \"+JSON.stringify(ranges));\n                    console.log(\"Target sum: \"+n2);\n                }\n\n                // 1.4 Find a combination of integer heights Hi, one from each Si, that sums to 2^n.\n                var heights = null;\n                while(!validPattern&&(heights = this.getNextCombination(ranges, n2))!==null){\n\n                    if(this.DEBUG){\n                        console.log(\"Possible pattern found with \"+n+\" couplings!!!\");\n                        console.log(heights);\n                    }\n                    // 2.1 Number the components of the multiplet consecutively from 1 to 2n,\n                    //starting at peak 1\n                    var numbering = new Array(heights.length);\n                    k=1;\n                    for(i=0;i<heights.length;i++){\n                        numbering[i]=new Array(heights[i]);\n                        for(j=0;j<heights[i];j++){\n                            numbering[i][j]=k++;\n                        }\n                    }\n                    if(this.DEBUG){\n                        console.log(\"Numbering: \"+JSON.stringify(numbering));\n                    }\n                    Jc = []; //The array to store the detected j-coupling\n                    // 2.2 Set j = 1; J1 = P2 - P1. Flag components 1 and 2 as accounted for.\n                    j=1;\n                    Jc.push(peaks[1].x-peaks[0].x);\n                    P1 = peaks[0].x;\n                    numbering[0].splice(0,1);//Flagged\n                    numbering[1].splice(0,1);//Flagged\n                    k=1;\n                    var nFlagged = 2;\n                    maxFlagged = Math.pow(2,n)-1;\n                    while(Jc.length<n&&nFlagged<maxFlagged&&k<peaks.length){\n                        if(this.DEBUG){\n                            console.log(\"New Jc\"+JSON.stringify(Jc));\n                            console.log(\"Aval. numbering \"+JSON.stringify(numbering));\n                        }\n                        // 4.1. Increment j. Set k to the number of the first unflagged component.\n                        j++;\n                        while(k<peaks.length&&numbering[k].length===0){\n                            k++;\n                        }\n                        if(k<peaks.length){\n                            // 4.2 Jj = Pk - P1.\n                            Jc.push(peaks[k].x-peaks[0].x);\n                            //Flag component k and, for each sum of the...\n                            numbering[k].splice(0,1);//Flageed\n                            nFlagged++;\n                            //Flag the other components of the multiplet\n                            for(var u=2;u<=j;u++){\n                                //TODO improve those loops\n                                var jSum = 0;\n                                for(i=0;i<u;i++){\n                                    jSum+=Jc[i];\n                                }\n                                for(i=1;i<numbering.length;i++){\n                                    //Maybe 0.25 Hz is too much?\n                                    if(Math.abs(peaks[i].x-(P1+jSum))<0.25){\n                                        numbering[i].splice(0,1);//Flageed\n                                        nFlagged++;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    //Calculate the ideal patter by using the extracted j-couplings\n                    var pattern = this.idealPattern(Jc);\n                    //Compare the ideal pattern with the proposed intensities.\n                    // All the intensities have to match to accept the multiplet\n                    validPattern = true;\n                    for(i=0;i<pattern.length;i++){\n                        if(pattern[i].intensity != heights[i])\n                            validPattern = false;\n                    }\n                    //More verbosity of the process\n                    if(this.DEBUG){\n                        console.log(\"Jc \"+JSON.stringify(Jc));\n                        console.log(\"Heights \"+JSON.stringify(heights));\n                        console.log(\"pattern \"+JSON.stringify(pattern));\n                        console.log(\"Valid? \"+validPattern);\n                    }\n                }\n                //If we found a valid pattern we should inform about the pattern.\n                if(validPattern){\n                    this.updateSignal(signal,Jc);\n                }\n            }\n        }\n\n        //Before to return, change the units of peaksComp from Hz to PPM again\n        for(i=0;i<signal.peaksComp.length;i++){\n            signal.peaksComp[i].x/=signal.observe;\n        }\n    },\n\n    updateSignal : function(signal, Jc){\n        //Update the limits of the signal\n        var peaks = signal.peaksComp;//Always in Hz\n        var nbPeaks = peaks.length;\n        signal.startX=peaks[0].x/signal.observe+peaks[0].width;\n        signal.stopX=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width;\n        signal.integralData.to=peaks[0].x/signal.observe+peaks[0].width*3;\n        signal.integralData.from=peaks[nbPeaks-1].x/signal.observe-peaks[nbPeaks-1].width*3;\n\n        //Compile the pattern and format the constant couplings\n        signal.maskPattern = signal.mask2;\n        signal.multiplicity = this.abstractPattern(signal,Jc);\n        signal.pattern=signal.multiplicity;//Our library depends on this parameter, but it is old\n        //console.log(signal);\n        if(this.DEBUG)\n            console.log(\"Final j-couplings: \"+JSON.stringify(Jc));\n    },\n\n    /**\n     * Returns the multiplet in the compact format\n     */\n    abstractPattern : function(signal,Jc){\n        var tol = 0.05,i, pattern = \"\", cont = 1;\n        var newNmrJs = [];\n        if(Jc&&Jc.length>0){\n            Jc.sort(function(a,b){\n                return a-b;\n            });\n            for(i=0;i<Jc.length-1;i++){\n                if(Math.abs(Jc[i]-Jc[i+1])<tol){\n                    cont++;\n                }\n                else{\n                    newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n                    pattern+=this.patterns[cont];\n                    cont=1;\n                }\n            }\n            newNmrJs.push({\"coupling\":Math.abs(Jc[i]),\"multiplicity\":this.patterns[cont]});\n            pattern+=this.patterns[cont];\n            signal.nmrJs =  newNmrJs;\n        }\n        else{\n            pattern=\"s\";\n            if(Math.abs(signal.startX-signal.stopX)*signal.observe>16){\n                pattern=\"bs\"\n            }\n        }\n        return pattern;\n    },\n\n    /**\n     *This function creates an ideal pattern from the given J-couplings\n     */\n    idealPattern : function(Jc){\n        var hsum = Math.pow(2,Jc.length),i,j;\n        var pattern = [{x:0,intensity:hsum}];\n        //To split the initial height\n        for(i=0;i<Jc.length;i++){\n            for(j=pattern.length-1;j>=0;j--){\n                pattern.push({x:pattern[j].x+Jc[i]/2,\n                    intensity:pattern[j].intensity/2});\n                pattern[j].x = pattern[j].x-Jc[i]/2;\n                pattern[j].intensity = pattern[j].intensity/2;\n            }\n        }\n        //To sum the heights in the same positions\n        pattern.sort(function compare(a,b) { return a.x-b.x});\n        for(j=pattern.length-2;j>=0;j--){\n            if(Math.abs(pattern[j].x-pattern[j+1].x)<0.1){\n                pattern[j].intensity+= pattern[j+1].intensity\n                pattern.splice(j+1,1);\n            }\n        }\n        return pattern;\n    },\n\n    /**\n     * Find a combination of integer heights Hi, one from each Si, that sums to 2n.\n     */\n    getNextCombination : function(ranges, value){\n        var half = Math.ceil(ranges.values.length/2), lng = ranges.values.length;\n        var sum = 0,i;\n        while(sum!=value){\n            //Update the indexes to point at the next possible combination\n            ok = false;\n            var leftIndex = 0;\n            while(!ok){\n                ok = true;\n                ranges.currentIndex[ranges.active]++;\n                if(ranges.currentIndex[ranges.active]>=ranges.values[ranges.active].length){\n                    //In this case, there is no more possible combinations\n                    if(ranges.active+1==half){\n                        return null;\n                    }\n                    else{\n                        //If this happens we need to try the next active peak\n                        ranges.currentIndex[ranges.active]=0;\n                        ok=false;\n                        ranges.active++;\n                    }\n                }\n                else{\n                    ranges.active=0;\n                }\n            }\n            // Sum the heights for this combination\n            sum=0;\n            for(i=0;i<half;i++){\n                sum+= ranges.values[i][ranges.currentIndex[i]]*2;\n            }\n            if(ranges.values.length%2!==0){\n                sum-= ranges.values[half-1][ranges.currentIndex[half-1]];\n            }\n            if(this.DEBUG){\n                console.log(ranges.currentIndex);\n                console.log(sum+\" \"+value);\n            }\n        }\n        //If the sum is equal to the expected value, fill the array to return\n        if(sum==value){\n            var heights = new Array(lng);\n            for(i=0;i<half;i++){\n                heights[i] = ranges.values[i][ranges.currentIndex[i]];\n                heights[lng-i-1] = ranges.values[i][ranges.currentIndex[i]];\n            }\n            return heights;\n        }\n        return null;\n    },\n\n    /**\n     * This function generates the possible values that each peak can contribute\n     * to the multiplet.\n     * @param peaks\n     * @returns {{values: Array, currentIndex: Array, active: number}}\n     */\n    getRanges : function(peaks){\n        var ranges = new Array(peaks.length);\n        var currentIndex = new Array(peaks.length);\n        var min,max;\n        ranges[0] = [1];\n        ranges[peaks.length-1] = [1];\n        currentIndex[0]=-1;\n        currentIndex[peaks.length-1] = 0;\n        for(var i=1;i<peaks.length-1;i++){\n            min = Math.round(peaks[i].intensity*0.85);\n            max = Math.round(peaks[i].intensity*1.15);\n            ranges[i] =[];\n            for(var j=min;j<=max;j++){\n                ranges[i].push(j);\n            }\n            currentIndex[i]=0;\n        }\n        return {values:ranges, currentIndex:currentIndex, active:0};\n    },\n    /**\n     * Performs a symmetrization of the signal by using different aproximations to the center.\n     * It will return the result of the symmetrization that removes less peaks from the signal\n     * @param signal\n     * @param maxError\n     * @param iteration\n     * @returns {*}\n     */\n    symmetrizeChoiseBest : function(signal,maxError,iteration){\n        var symRank1 = this.symmetrize(signal,maxError,iteration);\n        var tmpPeaks = signal.peaksComp;\n        var tmpMask = signal.mask;\n        var cs = signal.delta1;\n        signal.delta1 = (signal.peaks[0].x+signal.peaks[signal.peaks.length-1].x)/2;\n        var symRank2 = this.symmetrize(signal,maxError,iteration);\n        if(signal.peaksComp.length>tmpPeaks.length)\n            return symRank2;\n        else{\n            signal.delta1 = cs;\n            signal.peaksComp = tmpPeaks;\n            signal.mask = tmpMask;\n            return symRank1;\n        }\n\n    },\n    /**\n     * This function will return a set of symmetric peaks that will\n     * be the enter point for the patter compilation process.\n     */\n    symmetrize : function(signal, maxError, iteration){\n        //Before to symmetrize we need to keep only the peaks that possibly conforms the multiplete\n        var max, min, avg, ratio, avgWidth;\n        var peaks = new Array(signal.peaks.length);\n        //Make a deep copy of the peaks and convert PPM ot HZ\n        for(j=0;j<peaks.length;j++){\n            peaks[j]= {x:signal.peaks[j].x*signal.observe,\n                intensity:signal.peaks[j].intensity,\n                width:signal.peaks[j].width};\n        }\n        //Join the peaks that are closer than 0.25 Hz\n        for(j=peaks.length-2;j>=0;j--){\n            if(Math.abs(peaks[j].x-peaks[j+1].x)<0.25){\n                peaks[j].x = (peaks[j].x*peaks[j].intensity+peaks[j+1].x*peaks[j+1].intensity);\n                peaks[j].intensity = peaks[j].intensity+peaks[j+1].intensity;\n                peaks[j].x/=peaks[j].intensity;\n                peaks[j].intensity/=2;\n                peaks[j].width+=peaks[j+1].width;\n                peaks.splice(j+1,1);\n            }\n        }\n        signal.peaksComp = peaks;\n        var nbPeaks = peaks.length;\n        var mask = new Array(nbPeaks);\n        signal.mask = mask;\n        var left=0, right=peaks.length-1, cs = signal.delta1*signal.observe, middle = [(peaks[0].x+peaks[nbPeaks-1].x)/2,1];\n        maxError = this.error(Math.abs(cs-middle[0]));\n        var heightSum = 0;\n        //We try to symmetrize the extreme peaks. We consider as candidates for symmetricing those which have\n        //ratio smaller than 3\n        for(var i=0;i<nbPeaks;i++){\n            mask[i]= true;\n            heightSum+=signal.peaks[i].intensity;\n        }\n\n        while(left<=right){\n            mask[left] = true;\n            mask[right] = true;\n            if(left==right){\n                if(nbPeaks>2&&Math.abs(peaks[left].x-cs)>maxError){\n                    mask[left] = false;\n                }\n            }\n            else{\n                max = Math.max(peaks[left].intensity,peaks[right].intensity);\n                min = Math.min(peaks[left].intensity,peaks[right].intensity);\n                ratio = max/min;\n                if(ratio>this.symRatio){\n                    if(peaks[left].intensity==min){\n                        mask[left] = false;\n                        right++;\n                    }\n                    else{\n                        mask[right] = false;\n                        left--;\n                    }\n                }\n                else{\n                    var diffL = Math.abs(peaks[left].x-cs);\n                    var diffR = Math.abs(peaks[right].x-cs);\n\n                    if(Math.abs(diffL-diffR)<maxError){\n                        //avg = (peaks[left].intensity+peaks[right].intensity)/2;\n                        avg = Math.min(peaks[left].intensity,peaks[right].intensity);\n                        avgWidth = Math.min(peaks[left].width,peaks[right].width);\n                        peaks[left].intensity=peaks[right].intensity=avg;\n                        peaks[left].width=peaks[right].width=avgWidth;\n                        middle=[middle[0]+((peaks[right].x+peaks[left].x)/2), middle[1]+1];\n                    }\n                    else{\n                        if(Math.max(diffL,diffR)==diffR){\n                            mask[right] = false;\n                            left--;\n                        }\n                        else{\n                            mask[left] = false;\n                            right++;\n                        }\n                    }\n                    if(this.DEBUG){\n                        console.log(\"MaxError: \"+maxError+\" \"+middle[0]+\" \"+middle[1]);\n                        console.log(iteration+\" CS: \"+cs+\" Hz \"+cs/signal.observe+\" PPM\");\n                        console.log(\"Middle: \"+(middle[0]/middle[1])+\" Hz \"+(middle[0]/middle[1])/signal.observe+\" PPM\");\n                        console.log(diffL+ \" \"+diffR);\n                        console.log(Math.abs(diffL-diffR));\n                        console.log(JSON.stringify(peaks));\n                        console.log(JSON.stringify(mask));\n                    }\n                }\n            }\n            left++;\n            right--;\n            //Only alter cs if it is the first iteration of the sym process.\n            if(iteration==1){\n                cs = this.chemicalShift(peaks, mask);\n                //There is not more available peaks\n                if(isNaN(cs)){ return 0;}\n            }\n            maxError = this.error(Math.abs(cs-middle[0]/middle[1]));\n        }\n        //To remove the weak peaks and recalculate the cs\n        for(i=nbPeaks-1;i>=0;i--){\n            if(mask[i]===false){\n                peaks.splice(i,1);\n            }\n        }\n        cs = this.chemicalShift(peaks);\n        if(isNaN(cs)){ return 0;}\n        signal.delta1 = cs/signal.observe;\n        //Now, the peak should be symmetric in heights, but we need to know if it is symmetric in x\n        var symFactor = 0,weight = 0;\n        if(peaks.length>1){\n            for(i=Math.ceil(peaks.length/2)-1;i>=0;i--){\n                symFactor+=(3+Math.min(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))\n                /(3+Math.max(Math.abs(peaks[i].x-cs),Math.abs(peaks[peaks.length-1-i].x-cs)))*peaks[i].intensity;\n                weight+=peaks[i].intensity;\n            }\n            symFactor/=weight;\n        }\n        else{\n            if(peaks.length==1)\n                symFactor=1;\n        }\n        var newSumHeights = 0;\n        for(i=0;i<peaks.length;i++){\n            newSumHeights+=peaks[i].intensity;\n        }\n        symFactor-=(heightSum-newSumHeights)/heightSum*0.12; //Removed peaks penalty\n        if(this.DEBUG){\n            console.log(\"Penalty \"+(heightSum-newSumHeights)/heightSum*0.12);\n            console.log(\"cs: \"+(cs/signal.observe)+\" symFactor: \"+symFactor);\n        }\n        //Sometimes we need a second opinion after the first symmetrization.\n        if(symFactor>0.8&&symFactor<0.97&&iteration<2){\n            return this.symmetrize(signal, this.maxErrorIter2, 2);\n        }{\n            //Center the given pattern at cs and symmetrize x\n            if(peaks.length>1) {\n                var weight = 0, dxi;\n                for (i = Math.ceil(peaks.length / 2) - 1; i >= 0; i--) {\n                    dxi = (peaks[i].x - peaks[peaks.length - 1 - i].x)/2.0;\n                    peaks[i].x =cs+dxi;\n                    peaks[peaks.length - 1 - i].x=cs-dxi;\n                }\n            }\n        }\n        return symFactor;\n    },\n\n    error : function(value){\n        var maxError = value*2.5;\n        if(maxError<0.75)\n            maxError = 0.75;\n        if(maxError > 3)\n            maxError = 3;\n        return maxError;\n    },\n    /**\n     * 2 stages normalizarion of the peaks heights to Math.pow(2,n).\n     * Creates a new mask with the peaks that could contribute to the multiplete\n     * @param signal\n     * @param n\n     * @returns {*}\n     */\n    normalize : function(signal, n){\n        //Perhaps this is slow\n        var peaks = JSON.parse(JSON.stringify(signal.peaksComp));\n        var norm = 0,norm2=0,i;//Math.pow(2,n);\n        for(i=0;i<peaks.length;i++){\n            norm+= peaks[i].intensity;\n        }\n        norm=Math.pow(2,n)/norm;\n        signal.mask2 = JSON.parse(JSON.stringify(signal.mask));\n        //console.log(\"Mask0 \"+JSON.stringify(signal.mask2));\n        var index=signal.mask2.length-1;\n        for(i=peaks.length-1;i>=0;i--){\n            peaks[i].intensity*= norm;\n            while(index>=0&&signal.mask2[index]===false)\n                index--;\n            if(peaks[i].intensity<0.75){\n                if(this.DEBUG)\n                    console.log(\"Peak \"+i+\" does not seem to belong to this multiplet \"+peaks[i].intensity);\n                peaks.splice(i,1);\n                signal.mask2[index]=false;\n            }\n            else{\n                norm2+= peaks[i].intensity;\n            }\n            index--;\n        }\n        norm2=Math.pow(2,n)/norm2;\n        for(i=peaks.length-1;i>=0;i--){\n            peaks[i].intensity*= norm2;\n        }\n        //console.log(\"Mask1 \"+JSON.stringify(signal.mask2));\n        if(this.DEBUG) console.log(JSON.stringify(peaks));\n        return peaks;\n    },\n\n    /**\n     * Calculates the chemical shift as the weighted sum of the peaks\n     * @param peaks\n     * @param mask\n     * @returns {number}\n     */\n    chemicalShift : function(peaks, mask){\n        var sum=0,cs= 0, i, area;\n        if(mask){\n            for(i=0;i<peaks.length;i++){\n                //console.log(mask[i]);\n                if(mask[i]===true){\n                    area = this.area(peaks[i]);\n                    sum+=area;\n                    cs+=area*peaks[i].x;\n                }\n            }\n        }\n        else{\n            for(i=0;i<peaks.length;i++){\n                area = this.area(peaks[i]);\n                sum+=area;\n                cs+=area*peaks[i].x;\n            }\n        }\n        return cs/sum;\n    },\n\n    area: function(peak){\n        return Math.abs(peak.intensity*peak.width*1.57)//1.772453851);\n    }\n}\n\nmodule.exports = JAnalyzer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/JAnalyzer.js\n ** module id = 6\n ** module chunks = 0\n **/","\nmodule.exports.optimize = require(\"../src/optimize\");\nmodule.exports.gsd = require(\"../src/gsd\");\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 9/6/15.\n */\nvar Opt = require(\"ml-optimize-lorentzian\");\n\nfunction sampleFunction(from, to, x, y, lastIndex){\n    var nbPoints = x.length;\n    var sampleX = [];\n    var sampleY = [];\n    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n    if(direction==-1){\n        lastIndex[0]= x.length-1;\n    }\n\n    var delta = Math.abs(to-from)/2;\n    var mid = (from+to)/2;\n    var stop = false;\n    var index = lastIndex[0];\n    while(!stop&&index<nbPoints&&index>=0){\n        if(Math.abs(x[index]-mid)<=delta){\n            sampleX.push(x[index]);\n            sampleY.push(y[index]);\n            index+=direction;\n        }\n        //It is outside the range.\n        else{\n\n            if(Math.sign(mid-x[index])==1){\n                //We'll reach the mid going in the current direction\n                index+=direction;\n            }\n            else{\n                //There is not more peaks in the current range\n                stop=true;\n            }\n        }\n        //console.log(sampleX);\n    }\n    lastIndex[0]=index;\n    return [sampleX, sampleY];\n}\n\nfunction optimizePeaks(peakList,x,y,n, fnType){\n    var i, j, lastIndex=[0];\n    var groups = groupPeaks(peakList,n);\n    var result = [];\n    var factor = 1;\n    if(fnType==\"gaussian\")\n        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n    for(i=0;i<groups.length;i++){\n        var peaks = groups[i].group;\n        if(peaks.length>1){\n            //Multiple peaks\n            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n            //console.log(\"here1\");\n            //console.log(groups[i].limits);\n            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n            //console.log(sampling);\n            if(sampling[0].length>5){\n                var error = peaks[0].width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                var optPeaks = [];\n                if(fnType==\"gaussian\")\n                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n                    }\n                }\n                //console.log(optPeak);\n                for(j=0;j<optPeaks.length;j++){\n                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n                }\n            }\n        }\n        else{\n            //Single peak\n            peaks = peaks[0];\n            var sampling = sampleFunction(peaks.x-n*peaks.width,\n                peaks.x+n*peaks.width,x,y,lastIndex);\n            //console.log(\"here2\");\n            //console.log(groups[i].limits);\n            if(sampling[0].length>5){\n                var error = peaks.width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n                var optPeak = [];\n                if(fnType==\"gaussian\")\n                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n                    }\n                }\n                //console.log(optPeak);\n                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n            }\n        }\n\n    }\n    return result;\n}\n\nfunction groupPeaks(peakList,nL){\n    var group = [];\n    var groups = [];\n    var i, j;\n    var limits = [peakList[0].x,nL*peakList[0].width];\n    var upperLimit, lowerLimit;\n    //Merge forward\n    for(i=0;i<peakList.length;i++){\n        //If the 2 things overlaps\n        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n            //Add the peak to the group\n            group.push(peakList[i]);\n            //Update the group limits\n            upperLimit = limits[0]+limits[1];\n            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n                upperLimit = peakList[i].x+nL*peakList[i].width;\n            }\n            lowerLimit = limits[0]-limits[1];\n            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n                lowerLimit = peakList[i].x-nL*peakList[i].width;\n            }\n            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n        }\n        else{\n            groups.push({limits:limits,group:group});\n            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n            group=[peakList[i]];\n            limits = [peakList[i].x,nL*peakList[i].width];\n        }\n    }\n    groups.push({limits:limits,group:group});\n    //Merge backward\n    for(i =groups.length-2;i>=0;i--){\n        //The groups overlaps\n        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n            for(j=0;j<groups[i+1].group.length;j++){\n                groups[i].group.push(groups[i+1].group[j]);\n            }\n            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n            }\n            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n            }\n            //console.log(limits);\n            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n            groups.splice(i+1,1);\n        }\n    }\n    return groups;\n}\n\nmodule.exports=optimizePeaks;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/optimize.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else{\n            t = new Matrix(nbPoints,1);\n            y_data = new Matrix(nbPoints,1);\n            x = xy[0];\n            y = xy[1];\n            if(typeof x[0] === \"number\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i][0]=x[i];\n                    y_data[i][0]=y[i];\n                    if(y[i]>maxY)\n                        maxY = y[i];\n                }\n            }\n            else{\n                //It is a colum matrix\n                if(typeof x[0] === \"object\"){\n                    for(i=0;i<nbPoints;i++){\n                        t[i][0]=x[i][0];\n                        y_data[i][0]=y[i][0];\n                        if(y[i][0]>maxY)\n                            maxY = y[i][0];\n                    }\n                }\n\n            }\n\n        }\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else {\n            t = new Matrix(nbPoints, 1);\n            y_data = new Matrix(nbPoints, 1);\n            for (i = 0; i < nbPoints; i++) {\n                t[i][0] = xy[i][0];\n                y_data[i][0] = xy[i][1];\n                if(y_data[i][0]>maxY)\n                    maxY = y_data[i][0];\n            }\n        }\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i][0]/=maxY;\n    }\n    return [t,y_data,maxY];\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/~/ml-optimize-lorentzian/src/index.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/~/ml-optimize-lorentzian/~/ml-curve-fitting/src/index.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/~/ml-optimize-lorentzian/~/ml-curve-fitting/src/LM.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/index.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/matrix.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/decompositions.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/svd.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/util.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/evd.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/lu.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/qr.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/cholesky.js\n ** module id = 20\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/~/ml-optimize-lorentzian/~/ml-curve-fitting/src/algebra.js\n ** module id = 21\n ** module chunks = 0\n **/","var Opt = require(\"ml-optimize-lorentzian\");\n\nfunction gsd(x, y, options){\n    var options=Object.create(options || {});\n    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n    if (options.broadRatio===undefined) options.broadRatio=0.00;\n    if (options.noiseLevel===undefined) options.noiseLevel=0;\n    if (options.maxCriteria===undefined) options.maxCriteria=true;\n    if (options.smoothY===undefined) options.smoothY=true;\n\n\n    if (options.noiseLevel>0) {\n        y=[].concat(y);\n        for (var i=0; i<y.length; i++){\n            if(Math.abs(y[i])<options.noiseLevel) {\n                y[i]=0;\n            }\n        }\n    }\n\n    // fill convolution frequency axis\n    var X = [];//x[2:(x.length-2)];\n\n    // fill Savitzky-Golay polynomes\n    var size= x.length-4;\n    var Y = new Array(size);\n    var dY = new Array(size);\n    var ddY = new Array(size);\n    //var dX = new Array(size);\n    var dx = x[1]-x[0];\n\n    for (var j = 2; j < size+2; j++) {\n        dx = x[j]-x[j-1];\n        if(options.smoothY)\n            Y[j-2]=(1/35.0)*(-3*y[j-2] + 12*y[j-1] + 17*y[j] + 12*y[j+1] - 3*y[j+2]);\n        else\n            Y[j-2]=y[j];\n        X[j-2]=x[j];\n        dY[j-2]=(1/(12*dx))*(y[j-2] - 8*y[j-1] + 8*y[j+1] - y[j+2]);\n        ddY[j-2]=(1/(7*dx*dx))*(2*y[j-2] - y[j-1] - 2*y[j] - y[j+1] + 2*y[j+2]);\n    }\n\n    var maxDdy=0;\n    var maxY = 0;\n    //console.log(Y.length);\n    for (var i = 0; i < Y.length ; i++){\n        if(Math.abs(ddY[i])>maxDdy){\n            maxDdy = Math.abs(ddY[i]);\n        }\n        if(Math.abs(Y[i])>maxY){\n            maxY = Math.abs(Y[i]);\n        }\n    }\n    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n    var minddY = [];\n    var intervals = [];\n    var lastMax = null;\n    var lastMin = null;\n    var broadMask = new Array();\n    //console.log(dx);\n    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n    for (var i = 1; i < Y.length -1 ; i++){\n        //console.log(dY[i]);\n        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n            lastMin = X[i];\n            //console.log(\"min \"+lastMin);\n            if(dx>0&&lastMax!=null){\n                intervals.push( [lastMax , lastMin] );\n            }\n        }\n\n        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n            lastMax = X[i];\n            //console.log(\"max \"+lastMax);\n            if(dx<0&&lastMin!=null){\n                intervals.push( [lastMax , lastMin] );\n            }\n        }\n\n        if(options.maxCriteria){\n            if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n                minddY.push( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n                if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n                    broadMask.push(false);\n                }\n                else{\n                    broadMask.push(true);\n                }\n            }\n        }\n        else{\n            if ((ddY[i] > ddY[i-1]) && (ddY[i] > ddY[i+1])) {\n                minddY.push( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n                if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n                    broadMask.push(false);\n                }\n                else{\n                    broadMask.push(true);\n                }\n            }\n        }\n\n    }\n    realTopDetection(minddY,X,Y);\n    //console.log(intervals);\n    //console.log(minddY.length);\n    var signals = [];\n\n    for (var j = 0; j < minddY.length; j++){\n        var f = minddY[j];\n        var frequency = f[0];\n        var possible = [];\n        for (var k=0; k<intervals.length; k++){\n            var i = intervals[k];\n            if(Math.abs(frequency-(i[0]+i[1])/2)<Math.abs(i[0]-i[1])/2)\n                possible.push(i);\n        }\n        //console.log(\"possible \"+possible.length);\n        if (possible.length > 0)\n            if (possible.length == 1)\n            {\n                var inter = possible[0];\n                var linewidth = Math.abs(inter[1] - inter[0]);\n                var height = f[1];\n                //console.log(height);\n                if (Math.abs(height) > options.minMaxRatio*maxY) {\n                    signals.push({\n                        x: frequency,\n                        y: height,\n                        width: linewidth//*widthCorrection\n                    })\n                }\n            }\n            else\n            {\n                //TODO: nested peaks\n                // console.log(\"Nested \"+possible);\n            }\n    }\n    if(options.broadRatio>0){\n        var broadLines=[[Number.MAX_VALUE,0,0]];\n        //Optimize the possible broad lines\n        var max=0, maxI=0,count=0;\n        var candidates = [],broadLinesS=[];\n        var isPartOf = false;\n\n        for(var i=broadLines.length-1;i>0;i--){\n            //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n            if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\n                candidates.push(broadLines[i]);\n                if(broadLines[i][1]>max){\n                    max = broadLines[i][1];\n                    maxI = i;\n                }\n                count++;\n            }\n            else{\n                isPartOf = true;\n                if(count>30){ // TODO, an options ?\n                    isPartOf = false;\n                    //for(var j=0;j<signals.length;j++){\n                    //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n                    //       isPartOf = true;\n                    //    }\n                    //console.log(\"Was part of \"+isPartOf);\n                }\n                if(isPartOf){\n                    for(var j=0;j<candidates.length;j++){\n                        signals.push([candidates[j][0], candidates[j][1], dx]);\n                    }\n                }\n                else{\n                    var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n                        width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n                        []);\n                    //console.log(fitted);\n                    signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n                }\n                candidates = [];\n                max = 0;\n                maxI = 0;\n                count = 0;\n            }\n        }\n    }\n\n    signals.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n\n    return signals;\n}\n\nfunction realTopDetection(peakList, x, y){\n    var listP = [];\n    var alpha, beta, gamma, p,currentPoint;\n    for(var j=0;j<peakList.length;j++){\n        currentPoint = peakList[j][2];\n        //The detected peak could be moved 1 or 2 unit to left or right.\n        if(y[currentPoint-1]>=y[currentPoint-2]\n            &&y[currentPoint-1]>=y[currentPoint]) {\n            currentPoint--;\n        }\n        else{\n            if(y[currentPoint+1]>=y[currentPoint]\n                &&y[currentPoint+1]>=y[currentPoint+2]) {\n                currentPoint++;\n            }\n            else{\n                if(y[currentPoint-2]>=y[currentPoint-3]\n                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n                    currentPoint-=2;\n                }\n                else{\n                    if(y[currentPoint+2]>=y[currentPoint+1]\n                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n                        currentPoint+=2;\n                    }\n                }\n            }\n        }\n        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n            &&y[currentPoint]>=y[currentPoint-1]\n            &&y[currentPoint]>=y[currentPoint+1]) {\n            alpha = 20 * Math.log10(y[currentPoint - 1]);\n            beta = 20 * Math.log10(y[currentPoint]);\n            gamma = 20 * Math.log10(y[currentPoint + 1]);\n            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n\n            peakList[j][0] = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n            peakList[j][1] = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n                - [currentPoint + 1]) * p;//signal.peaks[j].intensity);\n        }\n    }\n}\n\nmodule.exports=gsd;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-gsd/src/gsd.js\n ** module id = 22\n ** module chunks = 0\n **/","var SD = require('./SD');\nvar PeakPicking2D = require('./PeakPicking2D');\nvar JcampConverter=require(\"jcampconverter\");\n\nfunction NMR2D(sd) {\n    SD.call(this, sd); // Héritage\n}\n\nNMR2D.prototype = Object.create(SD.prototype);\nNMR2D.prototype.constructor = NMR2D;\n\nNMR2D.fromJcamp = function(jcamp,options) {\n    options = options || {xy:true,keepSpectra:true,keepRecordsRegExp:/^.+$/};\n    var spectrum= JcampConverter.convert(jcamp,options);\n    return new NMR2D(spectrum);\n}\n\nNMR2D.prototype.isHomoNuclear=function(){\n    return this.sd.xType==this.sd.yType;\n}\n\n//Returns the observe frequency in the direct dimension\nNMR2D.prototype.observeFrequencyX=function(){\n    return this.sd.spectra[0].observeFrequency;\n}\n\n//Returns the observe frequency in the indirect dimension\nNMR2D.prototype.observeFrequencyY=function(){\n    return this.sd.indirectFrequency;\n}\n\n/**\n * Returns the solvent name\n */\nNMR2D.prototype.getSolventName=function(){\n    return (this.sd.info[\".SOLVENTNAME\"]||this.sd.info[\"$SOLVENT\"]).replace(\"<\",\"\").replace(\">\",\"\");\n}\n\n/**\n * This function returns the units of the direct dimension. It overrides the SD getXUnits function\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getXUnits = function(){\n    return this.sd.ntuples[1].units;\n}\n/**\n * This function returns the units of the indirect dimension. It overrides the SD getYUnits function\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getYUnits = function(){\n    return this.sd.ntuples[0].units;\n}\n/**\n * Returns the units of the dependent variable\n * @returns {ntuples.units|*|b.units}\n */\nNMR2D.prototype.getZUnits = function(){\n    return this.sd.ntuples[2].units;\n}\n/**\n * Overwrite this function. Now, the Y axe refers to the indirect dimension\n * @returns {sd.minMax.maxY}\n */\nNMR2D.prototype.getLastY = function(){\n    return this.sd.minMax.maxY;\n}\n/**\n * * Overwrite this function. Now, the Y axe refers to the indirect dimension\n * @returns {sd.minMax.minY}\n */\nNMR2D.prototype.getFirstY = function(){\n    return this.sd.minMax.minY;\n}\n\n//Returns the separation between 2 consecutive points in the indirect domain\nNMR2D.prototype.getDeltaY=function(){\n    return ( this.getLastY()-this.getFirstY()) / (this.getNbSubSpectra()-1);\n}\n\n/**\n * @function nmrPeakDetection2D(options)\n * This function process the given spectraData and tries to determine the NMR signals. \n + Returns an NMRSignal2D array containing all the detected 2D-NMR Signals\n * @param\toptions:+Object\t\t\tObject containing the options\n * @option\tthresholdFactor:number\tA factor to scale the automatically determined noise threshold.\n * @returns\t+Object\tset of NMRSignal2D\n */\nNMR2D.prototype.nmrPeakDetection2D=function(options){\n    options = options||{};\n    if(!options.thresholdFactor)\n        options.thresholdFactor=1;\n    var id = Math.round(Math.random()*255);\n    if(!options.id){\n        id=options.id;\n    }\n    var peakList = PeakPicking2D.findPeaks2D(this, options.thresholdFactor);\n\n    //lets add an unique ID for each peak.\n    for(var i=0;i<peakList.length;i++){\n        peakList[i]._highlight=[id+\"_\"+i];\n    }\n    return peakList;\n}\n\n/**\n* Returns the noise factor depending on the nucleus.\n*/\nNMR2D.prototype.getNMRPeakThreshold=function(nucleus) {\n    if (nucleus == \"1H\")\n        return 3.0;\n    if (nucleus ==\"13C\")\n        return 5.0;\n    return 1.0;\n}\n\n/**\n* Returns the nucleus in the specified dimension\n*/\nNMR2D.prototype.getNucleus=function(dim){\n    if(dim==1)\n        return this.sd.xType;\n    if(dim==2)\n        return this.sd.yType;\n    return this.sd.xType;\n}\n\nmodule.exports = NMR2D;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/NMR2D.js\n ** module id = 23\n ** module chunks = 0\n **/","var lib = require(\"ml-fft\");\nvar PeakOptimizer = require(\"./PeakOptimizer\");\nvar SimpleClustering =  require(\"./SimpleClustering\");\nvar StatArray = require('ml-stat/array');\nvar FFTUtils = lib.FFTUtils;\n\nvar PeakPicking2D= {\n    DEBUG : false,\n    smallFilter : [\n        [0, 0, 1, 2, 2, 2, 1, 0, 0],\n        [0, 1, 4, 7, 7, 7, 4, 1, 0],\n        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n        [2, 7, 0, -23, -40, -23, 0, 7, 2],\n        [2, 7, 3, -12, -23, -12, 3, 7, 2],\n        [1, 4, 5, 3, 0, 3, 5, 4, 1],\n        [0, 1, 3, 7, 7, 7, 3, 1, 0],\n        [0, 0, 1, 2, 2, 2, 1, 0, 0]],\n\n\n    //How noisy is the spectrum depending on the kind of experiment.\n    getLoGnStdDevNMR : function(spectraData) {\n    if (spectraData.isHomoNuclear())\n        return 1.5\n    else\n        return 3;\n    },\n\n    findPeaks2D : function(spectraData, thresholdFactor){\n        if(thresholdFactor==0)\n            thresholdFactor=1;\n        if(thresholdFactor<0)\n            thresholdFactor=-thresholdFactor;\n        var nbPoints = spectraData.getNbPoints();\n        var nbSubSpectra = spectraData.getNbSubSpectra();\n\n        var data = new Array(nbPoints * nbSubSpectra);\n        //var data = new Array(nbPoints * nbSubSpectra/2);\n\n        var isHomonuclear = spectraData.isHomoNuclear();\n\n        //var sum = new Array(nbPoints);\n\n        for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra; iSubSpectra++) {\n            var spectrum = spectraData.getYData(iSubSpectra);\n            for (var iCol = 0; iCol < nbPoints; iCol++) {\n                if(isHomonuclear){\n                    data[iSubSpectra * nbPoints + iCol] =(spectrum[iCol]>0?spectrum[iCol]:0);\n                }\n                else{\n                    data[iSubSpectra * nbPoints + iCol] =Math.abs(spectrum[iCol]);\n                }\n            }\n        }\n\n        var nStdDev = this.getLoGnStdDevNMR(spectraData);\n        if(isHomonuclear){\n            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);//)1.5);\n            var peaksMax1 = this.findPeaks2DMax(data, convolutedSpectrum, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);//2.0);\n            for(var i=0;i<peaksMC1.length;i++)\n                peaksMax1.push(peaksMC1[i]);\n            //console.log(peaksMax1);\n            return PeakOptimizer.enhanceSymmetry(this.createSignals2D(peaksMax1,spectraData,24));\n\n        }\n        else{\n            var convolutedSpectrum = this.convoluteWithLoG(data, nbSubSpectra, nbPoints);\n            var peaksMC1 = this.findPeaks2DLoG(data, convolutedSpectrum, nbSubSpectra, nbPoints, nStdDev*thresholdFactor);\n            //Peak2D[] peaksMC1 = PeakPicking2D.findPeaks2DMax(data, nbSubSpectra, nbPoints, (nStdDev+0.5)*thresholdFactor);\n            //Remove peaks with less than 3% of the intensity of the highest peak\n            return this.createSignals2D(PeakOptimizer.clean(peaksMC1, 0.05), spectraData,24);\n        }\n\n    },\n    /**\n     Calculates the 1st derivative of the 2D matrix, using the LoG kernel approximation\n     */\n    convoluteWithLoG : function(inputSpectrum, nRows, nCols){\n        var ftSpectrum = new Array(nCols * nRows);\n        for (var i = nRows * nCols-1; i >=0; i--){\n            ftSpectrum[i] = inputSpectrum[i];\n        }\n\n        ftSpectrum = FFTUtils.fft2DArray(ftSpectrum, nRows, nCols);\n\n        var dim = this.smallFilter.length;\n        var ftFilterData = new Array(nCols * nRows);\n        for(var i=nCols * nRows-1;i>=0;i--){\n            ftFilterData[i]=0;\n        }\n\n        var iRow, iCol;\n        var shift = (dim - 1) / 2;\n        //console.log(dim);\n        for (var ir = 0; ir < dim; ir++) {\n            iRow = (ir - shift + nRows) % nRows;\n            for (var ic = 0; ic < dim; ic++) {\n                iCol = (ic - shift + nCols) % nCols;\n                ftFilterData[iRow * nCols + iCol] = this.smallFilter[ir][ic];\n            }\n        }\n\n        ftFilterData = FFTUtils.fft2DArray(ftFilterData, nRows, nCols);\n\n        var ftRows = nRows * 2;\n        var ftCols = nCols / 2 + 1;\n        FFTUtils.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\n        return  FFTUtils.ifft2DArray(ftSpectrum, ftRows, ftCols);\n    },\n    /**\n     Detects all the 2D-peaks in the given spectrum based on center of mass logic.\n     */\n    findPeaks2DLoG : function(inputSpectrum, convolutedSpectrum, nRows, nCols, nStdDev) {\n        var threshold = 0;\n        for(var i=nCols*nRows-2;i>=0;i--)\n            threshold+=Math.pow(convolutedSpectrum[i]-convolutedSpectrum[i+1],2);\n        threshold=-Math.sqrt(threshold);\n        threshold*=nStdDev/nRows;\n\n        var bitmask = new Array(nCols * nRows);\n        for(var i=nCols * nRows-1;i>=0;i--){\n            bitmask[i]=0;\n        }\n        var nbDetectedPoints = 0;\n        var lasti=-1;\n        for (var i = convolutedSpectrum.length-1; i >=0 ; i--) {\n            if (convolutedSpectrum[i] < threshold) {\n                bitmask[i] = 1;\n                nbDetectedPoints++;\n            }\n        }\n        var iStart = 0;\n        //int ranges = 0;\n        var peakList = [];\n\n        while (nbDetectedPoints != 0) {\n            for (iStart; iStart < bitmask.length && bitmask[iStart]==0; iStart++){};\n            //\n            if (iStart == bitmask.length)\n                break;\n\n            nbDetectedPoints -= this.extractArea(inputSpectrum, convolutedSpectrum,\n                bitmask, iStart, nRows, nCols, peakList, threshold);\n        }\n\n        if (peakList.length > 0&&this.DEBUG) {\n            console.log(\"No peak found\");\n        }\n        return peakList;\n    },\n    /**\n     Detects all the 2D-peaks in the given spectrum based on the Max logic.\n     */\n    findPeaks2DMax : function(inputSpectrum, cs, nRows, nCols, nStdDev) {\n        var threshold = 0;\n        for(var i=nCols*nRows-2;i>=0;i--)\n            threshold+=Math.pow(cs[i]-cs[i+1],2);\n        threshold=-Math.sqrt(threshold);\n        threshold*=nStdDev/nRows;\n\n        var rowI,colI;\n        var peakListMax = [];\n        var tmpIndex = 0;\n        for (var i = 0; i < cs.length; i++) {\n            if (cs[i] < threshold) {\n                //It is a peak?\n                rowI=Math.floor(i/nCols);\n                colI=i%nCols;\n                //Verifies if this point is a peak;\n                if(rowI>0&&rowI+1<nRows&&colI+1<nCols&&colI>0){\n                    //It is the minimum in the same row\n                    if(cs[i]<cs[i+1]&&cs[i]<cs[i-1]){\n                        //It is the minimum in the previous row\n                        tmpIndex=(rowI-1)*nCols+colI;\n                        if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n                            //It is the minimum in the next row\n                            tmpIndex=(rowI+1)*nCols+colI;\n                            if(cs[i]<cs[tmpIndex-1]&&cs[i]<cs[tmpIndex]&&cs[i]<cs[tmpIndex+1]){\n                                peakListMax.push({x:colI,y:rowI,z:inputSpectrum[i]});\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return peakListMax;\n    },\n    /*\n     This function detects the peaks\n     */\n    extractArea : function(spectrum, convolutedSpectrum, bitmask, iStart,\n                                                   nRows, nCols, peakList, threshold) {\n        var iRow = Math.floor(iStart / nCols);\n        var iCol = iStart % nCols;\n        var peakPoints =[];\n        //console.log(iStart+\" \"+iRow+\" \"+iCol);\n        // scanBitmask(bitmask, convolutedSpectrum, nRows, nCols, iRow, iCol,\n        // peakPoints);\n        this.scanBitmask(bitmask, nRows, nCols, iRow, iCol, peakPoints);\n        //console.log(\"extractArea.lng \"+peakPoints.length);\n        var x = new Array(peakPoints.length);\n        var y = new Array(peakPoints.length);\n        var z = new Array(peakPoints.length);\n        var nValues = peakPoints.length;\n        var xAverage = 0.0;\n        var yAverage = 0.0;\n        var zSum = 0.0;\n        if (nValues >= 9) {\n            if (this.DEBUG)\n                console.log(\"nValues=\" + nValues);\n            var maxValue = Number.NEGATIVE_INFINITY;\n            var maxIndex = -1;\n            for (var i = 0; i < nValues; i++) {\n                var pt = (peakPoints.splice(0,1))[0];\n                x[i] = pt[0];\n                y[i] = pt[1];\n                z[i] = spectrum[pt[1] * nCols + pt[0]];\n                xAverage += x[i] * z[i];\n                yAverage += y[i] * z[i];\n                zSum += z[i];\n                if (z[i] > maxValue) {\n                    maxValue = z[i];\n                    maxIndex = i;\n                }\n            }\n            if (maxIndex != -1) {\n                xAverage /= zSum;\n                yAverage /= zSum;\n                var newPeak = {x:xAverage, y:yAverage, z:zSum};\n                var minmax;\n                minmax =StatArray.minMax(x);\n                newPeak.minX=minmax.min;\n                newPeak.maxX=minmax.max;\n                minmax = StatArray.minMax(y);\n                newPeak.minY=minmax.min;\n                newPeak.maxY=minmax.max;\n                peakList.push(newPeak);\n            }\n        }\n        return nValues;\n    },\n    /*\n     Return all the peaks(x,y points) that composes a signal.\n     */\n    scanBitmask : function(bitmask, nRows, nCols, iRow, iCol, peakPoints) {\n        //console.log(nRows+\" \"+iRow+\" \"+nCols+\" \"+iCol);\n        if (iRow < 0 || iCol < 0 || iCol == nCols || iRow == nRows)\n            return;\n        if (bitmask[iRow * nCols + iCol]) {\n            bitmask[iRow * nCols + iCol] = 0;\n            peakPoints.push([iCol, iRow]);\n            this.scanBitmask(bitmask, nRows, nCols, iRow + 1, iCol, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow - 1, iCol, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol + 1, peakPoints);\n            this.scanBitmask(bitmask, nRows, nCols, iRow, iCol - 1, peakPoints);\n        }\n    },\n    /**\n     This function converts a set of 2D-peaks in 2D-signals. Each signal could be composed\n     of many 2D-peaks, and it has some additional information related to the NMR spectrum.\n     */\n    createSignals2D : function(peaks, spectraData, tolerance){\n        //console.log(peaks.length);\n        var signals=[];\n        var nbSubSpectra = spectraData.getNbSubSpectra();\n\n        var bf1=spectraData.observeFrequencyX();\n        var bf2=spectraData.observeFrequencyY();\n\n        var firstY = spectraData.getFirstY();\n        var lastY = spectraData.getLastY();\n        var dy = spectraData.getDeltaY();\n\n        //console.log(firstY+\" \"+lastY+\" \"+dy+\" \"+nbSubSpectra);\n        //spectraData.setActiveElement(0);\n        var noValid=0;\n        for (var i = peaks.length-1; i >=0 ; i--) {\n            //console.log(peaks[i].x+\" \"+spectraData.arrayPointToUnits(peaks[i].x));\n            //console.log(peaks[i].y+\" \"+(firstY + dy * (peaks[i].y)));\n            peaks[i].x=(spectraData.arrayPointToUnits(peaks[i].x));\n            peaks[i].y=(firstY + dy * (peaks[i].y));\n\n            //console.log(peaks[i])\n            //Still having problems to correctly detect peaks on those areas. So I'm removing everything there.\n            if(peaks[i].y<-1||peaks[i].y>=210){\n                peaks.splice(i,1);\n            }\n        }\n        //console.log(peaks);\n        //The connectivity matrix is an square and symmetric matrix, so we'll only store the upper diagonal in an\n        //array like form\n        var connectivity = [];\n        var tmp=0;\n        tolerance*=tolerance;\n        //console.log(tolerance);\n        for (var i = 0; i < peaks.length; i++) {\n            for (var j = i; j < peaks.length; j++) {\n                tmp=Math.pow((peaks[i].x-peaks[j].x)*bf1,2)+Math.pow((peaks[i].y-peaks[j].y)*bf2,2);\n                //Console.log(peaks[i].getX()+\" \"+peaks[j].getX()+\" \"+tmp);\n                if(tmp<tolerance){//30*30Hz We cannot distinguish peaks with less than 20 Hz of separation\n                    connectivity.push(1);\n                }\n                else{\n                    connectivity.push(0);\n                }\n            }\n        }\n\n        //console.log(connectivity);\n\n        var clusters = SimpleClustering.fullClusterGenerator(connectivity);\n\n        //console.log(clusters)\n\n        var signals = [];\n        if (peaks != null) {\n            var xValue, yValue;\n            for (var iCluster = 0; iCluster < clusters.length; iCluster++) {\n                var signal={nucleusX:spectraData.getNucleus(1),nucleusY:spectraData.getNucleus(2)};\n                signal.resolutionX=( spectraData.getLastX()-spectraData.getFirstX()) / spectraData.getNbPoints();\n                signal.resolutionY=dy;\n                var peaks2D = [];\n                signal.shiftX = 0;\n                signal.shiftY = 0;\n                var sumZ = 0;\n                for(var jPeak = clusters[iCluster].length-1;jPeak>=0;jPeak--){\n                    if(clusters[iCluster][jPeak]==1){\n                        peaks2D.push(peaks[jPeak]);\n                        signal.shiftX+=peaks[jPeak].x*peaks[jPeak].z;\n                        signal.shiftY+=peaks[jPeak].y*peaks[jPeak].z;\n                        sumZ+=peaks[jPeak].z;\n                    }\n                }\n                signal.shiftX/=sumZ;\n                signal.shiftY/=sumZ;\n                signal.peaks = peaks2D;\n                signals.push(signal);\n            }\n        }\n        //console.log(signals);\n        return signals;\n    }\n}\n\nmodule.exports = PeakPicking2D;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakPicking2D.js\n ** module id = 24\n ** module chunks = 0\n **/","'use strict';\n\nexports.FFTUtils = require(\"./FFTUtils\");\nexports.FFT = require('./fftlib');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/index.js\n ** module id = 25\n ** module chunks = 0\n **/","var FFT = require('./fftlib');\n\nvar FFTUtils= {\n    DEBUG : false,\n\n    /**\n     * Calculates the inverse of a 2D Fourier transform\n     *\n     * @param ft\n     * @param ftRows\n     * @param ftCols\n     * @return\n     */\n    ifft2DArray : function(ft, ftRows, ftCols){\n        var tempTransform = new Array(ftRows * ftCols);\n        var nRows = ftRows / 2;\n        var nCols = (ftCols - 1) * 2;\n        // reverse transform columns\n        FFT.init(nRows);\n        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n        for (var iCol = 0; iCol < ftCols; iCol++) {\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tmpCols.re[iRow] = ft[(iRow * 2) * ftCols + iCol];\n                tmpCols.im[iRow] = ft[(iRow * 2 + 1) * ftCols + iCol];\n            }\n            //Unnormalized inverse transform\n            FFT.bt(tmpCols.re, tmpCols.im);\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tempTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n                tempTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n            }\n        }\n\n        // reverse row transform\n        var finalTransform = new Array(nRows * nCols);\n        FFT.init(nCols);\n        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n        var scale = nCols * nRows;\n        for (var iRow = 0; iRow < ftRows; iRow += 2) {\n            tmpRows.re[0] = tempTransform[iRow * ftCols];\n            tmpRows.im[0] = tempTransform[(iRow + 1) * ftCols];\n            for (var iCol = 1; iCol < ftCols; iCol++) {\n                tmpRows.re[iCol] = tempTransform[iRow * ftCols + iCol];\n                tmpRows.im[iCol] = tempTransform[(iRow + 1) * ftCols + iCol];\n                tmpRows.re[nCols - iCol] = tempTransform[iRow * ftCols + iCol];\n                tmpRows.im[nCols - iCol] = -tempTransform[(iRow + 1) * ftCols + iCol];\n            }\n            //Unnormalized inverse transform\n            FFT.bt(tmpRows.re, tmpRows.im);\n\n            var indexB = (iRow / 2) * nCols;\n            for (var iCol = nCols - 1; iCol >= 0; iCol--) {\n                finalTransform[indexB + iCol] = tmpRows.re[iCol] / scale;\n            }\n        }\n        return finalTransform;\n    },\n    /**\n     * Calculates the fourier transform of a matrix of size (nRows,nCols) It is\n     * assumed that both nRows and nCols are a power of two\n     *\n     * On exit the matrix has dimensions (nRows * 2, nCols / 2 + 1) where the\n     * even rows contain the real part and the odd rows the imaginary part of the\n     * transform\n     * @param data\n     * @param nRows\n     * @param nCols\n     * @return\n     */\n    fft2DArray:function(data, nRows, nCols) {\n        var ftCols = (nCols / 2 + 1);\n        var ftRows = nRows * 2;\n        var tempTransform = new Array(ftRows * ftCols);\n        FFT.init(nCols);\n        // transform rows\n        var tmpRows = {re: new Array(nCols), im: new Array(nCols)};\n        var row1 = {re: new Array(nCols), im: new Array(nCols)}\n        var row2 = {re: new Array(nCols), im: new Array(nCols)}\n        var index, iRow0, iRow1, iRow2, iRow3;\n        for (var iRow = 0; iRow < nRows / 2; iRow++) {\n            index = (iRow * 2) * nCols;\n            tmpRows.re = data.slice(index, index + nCols);\n\n            index = (iRow * 2 + 1) * nCols;\n            tmpRows.im = data.slice(index, index + nCols);\n\n            FFT.fft1d(tmpRows.re, tmpRows.im);\n\n            this.reconstructTwoRealFFT(tmpRows, row1, row2);\n            //Now lets put back the result into the output array\n            iRow0 = (iRow * 4) * ftCols;\n            iRow1 = (iRow * 4 + 1) * ftCols;\n            iRow2 = (iRow * 4 + 2) * ftCols;\n            iRow3 = (iRow * 4 + 3) * ftCols;\n            for (var k = ftCols - 1; k >= 0; k--) {\n                tempTransform[iRow0 + k] = row1.re[k];\n                tempTransform[iRow1 + k] = row1.im[k];\n                tempTransform[iRow2 + k] = row2.re[k];\n                tempTransform[iRow3 + k] = row2.im[k];\n            }\n        }\n\n        //console.log(tempTransform);\n        row1 = null;\n        row2 = null;\n        // transform columns\n        var finalTransform = new Array(ftRows * ftCols);\n        FFT.init(nRows);\n        var tmpCols = {re: new Array(nRows), im: new Array(nRows)};\n        for (var iCol = ftCols - 1; iCol >= 0; iCol--) {\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                tmpCols.re[iRow] = tempTransform[(iRow * 2) * ftCols + iCol];\n                tmpCols.im[iRow] = tempTransform[(iRow * 2 + 1) * ftCols + iCol];\n            }\n            FFT.fft1d(tmpCols.re, tmpCols.im);\n            for (var iRow = nRows - 1; iRow >= 0; iRow--) {\n                finalTransform[(iRow * 2) * ftCols + iCol] = tmpCols.re[iRow];\n                finalTransform[(iRow * 2 + 1) * ftCols + iCol] = tmpCols.im[iRow];\n            }\n        }\n\n        //console.log(finalTransform);\n        return finalTransform;\n\n    },\n    /**\n     *\n     * @param fourierTransform\n     * @param realTransform1\n     * @param realTransform2\n     *\n     * Reconstructs the individual Fourier transforms of two simultaneously\n     * transformed series. Based on the Symmetry relationships (the asterisk\n     * denotes the complex conjugate)\n     *\n     * F_{N-n} = F_n^{*} for a purely real f transformed to F\n     *\n     * G_{N-n} = G_n^{*} for a purely imaginary g transformed to G\n     *\n     */\n    reconstructTwoRealFFT:function(fourierTransform, realTransform1, realTransform2) {\n        var length = fourierTransform.re.length;\n\n        // the components n=0 are trivial\n        realTransform1.re[0] = fourierTransform.re[0];\n        realTransform1.im[0] = 0.0;\n        realTransform2.re[0] = fourierTransform.im[0];\n        realTransform2.im[0] = 0.0;\n        var rm, rp, im, ip, j;\n        for (var i = length / 2; i > 0; i--) {\n            j = length - i;\n            rm = 0.5 * (fourierTransform.re[i] - fourierTransform.re[j]);\n            rp = 0.5 * (fourierTransform.re[i] + fourierTransform.re[j]);\n            im = 0.5 * (fourierTransform.im[i] - fourierTransform.im[j]);\n            ip = 0.5 * (fourierTransform.im[i] + fourierTransform.im[j]);\n            realTransform1.re[i] = rp;\n            realTransform1.im[i] = im;\n            realTransform1.re[j] = rp;\n            realTransform1.im[j] = -im;\n            realTransform2.re[i] = ip;\n            realTransform2.im[i] = -rm;\n            realTransform2.re[j] = ip;\n            realTransform2.im[j] = rm;\n        }\n    },\n\n    /**\n     * In place version of convolute 2D\n     *\n     * @param ftSignal\n     * @param ftFilter\n     * @param ftRows\n     * @param ftCols\n     * @return\n     */\n    convolute2DI:function(ftSignal, ftFilter, ftRows, ftCols) {\n        var re, im;\n        for (var iRow = 0; iRow < ftRows / 2; iRow++) {\n            for (var iCol = 0; iCol < ftCols; iCol++) {\n                //\n                re = ftSignal[(iRow * 2) * ftCols + iCol]\n                * ftFilter[(iRow * 2) * ftCols + iCol]\n                - ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n                * ftFilter[(iRow * 2 + 1) * ftCols + iCol];\n                im = ftSignal[(iRow * 2) * ftCols + iCol]\n                * ftFilter[(iRow * 2 + 1) * ftCols + iCol]\n                + ftSignal[(iRow * 2 + 1) * ftCols + iCol]\n                * ftFilter[(iRow * 2) * ftCols + iCol];\n                //\n                ftSignal[(iRow * 2) * ftCols + iCol] = re;\n                ftSignal[(iRow * 2 + 1) * ftCols + iCol] = im;\n            }\n        }\n    },\n    /**\n     *\n     * @param data\n     * @param kernel\n     * @param nRows\n     * @param nCols\n     * @returns {*}\n     */\n    convolute:function(data, kernel, nRows, nCols){\n        var ftSpectrum = new Array(nCols * nRows);\n        for (var i = 0; i<nRows * nCols; i++){\n            ftSpectrum[i] = data[i];\n        }\n\n        ftSpectrum = this.fft2DArray(ftSpectrum, nRows, nCols);\n\n        var dim = kernel.length;\n        var ftFilterData = new Array(nCols * nRows);\n        for(var i=0;i<nCols * nRows;i++){\n            ftFilterData[i]=0;\n        }\n\n        var iRow, iCol;\n        var shift = (dim - 1) / 2;\n        //console.log(dim);\n        for (var ir = 0; ir < dim; ir++) {\n            iRow = (ir - shift + nRows) % nRows;\n            for (var ic = 0; ic < dim; ic++) {\n                iCol = (ic - shift + nCols) % nCols;\n                ftFilterData[iRow * nCols + iCol] = kernel[ir][ic];\n            }\n        }\n\n        ftFilterData = this.fft2DArray(ftFilterData, nRows, nCols);\n\n        var ftRows = nRows * 2;\n        var ftCols = nCols / 2 + 1;\n        this.convolute2DI(ftSpectrum, ftFilterData, ftRows, ftCols);\n\n        return  this.ifft2DArray(ftSpectrum, ftRows, ftCols);\n    }\n}\n\nmodule.exports = FFTUtils;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/FFTUtils.js\n ** module id = 26\n ** module chunks = 0\n **/","/**\n * Fast Fourier Transform module\n * 1D-FFT/IFFT, 2D-FFT/IFFT (radix-2)\n */\nvar FFT = (function(){\n  var FFT;  \n  \n  if(typeof exports !== 'undefined') {\n    FFT = exports;   // for CommonJS\n  } else {\n    FFT = {};\n  }\n  \n  var version = {\n    release: '0.3.0',\n    date: '2013-03'\n  };\n  FFT.toString = function() {\n    return \"version \" + version.release + \", released \" + version.date;\n  };\n\n  // core operations\n  var _n = 0,          // order\n      _bitrev = null,  // bit reversal table\n      _cstb = null;    // sin/cos table\n\n  var core = {\n    init : function(n) {\n      if(n !== 0 && (n & (n - 1)) === 0) {\n        _n = n;\n        core._initArray();\n        core._makeBitReversalTable();\n        core._makeCosSinTable();\n      } else {\n        throw new Error(\"init: radix-2 required\");\n      }\n    },\n    // 1D-FFT\n    fft1d : function(re, im) {\n      core.fft(re, im, 1);\n    },\n    // 1D-IFFT\n    ifft1d : function(re, im) {\n      var n = 1/_n;\n      core.fft(re, im, -1);\n      for(var i=0; i<_n; i++) {\n        re[i] *= n;\n        im[i] *= n;\n      }\n    },\n     // 1D-IFFT\n    bt1d : function(re, im) {\n      core.fft(re, im, -1);\n    },\n    // 2D-FFT Not very useful if the number of rows have to be equal to cols\n    fft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.fft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.fft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // 2D-IFFT\n    ifft2d : function(re, im) {\n      var tre = [],\n          tim = [],\n          i = 0;\n      // x-axis\n      for(var y=0; y<_n; y++) {\n        i = y*_n;\n        for(var x1=0; x1<_n; x1++) {\n          tre[x1] = re[x1 + i];\n          tim[x1] = im[x1 + i];\n        }\n        core.ifft1d(tre, tim);\n        for(var x2=0; x2<_n; x2++) {\n          re[x2 + i] = tre[x2];\n          im[x2 + i] = tim[x2];\n        }\n      }\n      // y-axis\n      for(var x=0; x<_n; x++) {\n        for(var y1=0; y1<_n; y1++) {\n          i = x + y1*_n;\n          tre[y1] = re[i];\n          tim[y1] = im[i];\n        }\n        core.ifft1d(tre, tim);\n        for(var y2=0; y2<_n; y2++) {\n          i = x + y2*_n;\n          re[i] = tre[y2];\n          im[i] = tim[y2];\n        }\n      }\n    },\n    // core operation of FFT\n    fft : function(re, im, inv) {\n      var d, h, ik, m, tmp, wr, wi, xr, xi,\n          n4 = _n >> 2;\n      // bit reversal\n      for(var l=0; l<_n; l++) {\n        m = _bitrev[l];\n        if(l < m) {\n          tmp = re[l];\n          re[l] = re[m];\n          re[m] = tmp;\n          tmp = im[l];\n          im[l] = im[m];\n          im[m] = tmp;\n        }\n      }\n      // butterfly operation\n      for(var k=1; k<_n; k<<=1) {\n        h = 0;\n        d = _n/(k << 1);\n        for(var j=0; j<k; j++) {\n          wr = _cstb[h + n4];\n          wi = inv*_cstb[h];\n          for(var i=j; i<_n; i+=(k<<1)) {\n            ik = i + k;\n            xr = wr*re[ik] + wi*im[ik];\n            xi = wr*im[ik] - wi*re[ik];\n            re[ik] = re[i] - xr;\n            re[i] += xr;\n            im[ik] = im[i] - xi;\n            im[i] += xi;\n          }\n          h += d;\n        }\n      }\n    },\n    // initialize the array (supports TypedArray)\n    _initArray : function() {\n      if(typeof Uint32Array !== 'undefined') {\n        _bitrev = new Uint32Array(_n);\n      } else {\n        _bitrev = [];\n      }\n      if(typeof Float64Array !== 'undefined') {\n        _cstb = new Float64Array(_n*1.25);\n      } else {\n        _cstb = [];\n      }\n    },\n    // zero padding\n    _paddingZero : function() {\n      // TODO\n    },\n    // makes bit reversal table\n    _makeBitReversalTable : function() {\n      var i = 0,\n          j = 0,\n          k = 0;\n      _bitrev[0] = 0;\n      while(++i < _n) {\n        k = _n >> 1;\n        while(k <= j) {\n          j -= k;\n          k >>= 1;\n        }\n        j += k;\n        _bitrev[i] = j;\n      }\n    },\n    // makes trigonometiric function table\n    _makeCosSinTable : function() {\n      var n2 = _n >> 1,\n          n4 = _n >> 2,\n          n8 = _n >> 3,\n          n2p4 = n2 + n4,\n          t = Math.sin(Math.PI/_n),\n          dc = 2*t*t,\n          ds = Math.sqrt(dc*(2 - dc)),\n          c = _cstb[n4] = 1,\n          s = _cstb[0] = 0;\n      t = 2*dc;\n      for(var i=1; i<n8; i++) {\n        c -= dc;\n        dc += t*c;\n        s += ds;\n        ds -= t*s;\n        _cstb[i] = s;\n        _cstb[n4 - i] = c;\n      }\n      if(n8 !== 0) {\n        _cstb[n8] = Math.sqrt(0.5);\n      }\n      for(var j=0; j<n4; j++) {\n        _cstb[n2 - j]  = _cstb[j];\n      }\n      for(var k=0; k<n2p4; k++) {\n        _cstb[k + n2] = -_cstb[k];\n      }\n    }\n  };\n  // aliases (public APIs)\n  var apis = ['init', 'fft1d', 'ifft1d', 'fft2d', 'ifft2d'];\n  for(var i=0; i<apis.length; i++) {\n    FFT[apis[i]] = core[apis[i]];\n  }\n  FFT.bt = core.bt1d;\n  FFT.fft = core.fft1d;\n  FFT.ifft = core.ifft1d;\n  \n  return FFT;\n}).call(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fft/src/fftlib.js\n ** module id = 27\n ** module chunks = 0\n **/","var PeakOptimizer={\n\tdiagonalError:0.05,\n\ttolerance:0.05,\n\tDEBUG:false,\n    toleranceX : 0.025,\n    toleranceY : 0.5,\n\n    clean: function(peaks, threshold){\n        var max = Number.NEGATIVE_INFINITY;\n        var i,peak;\n        //double min = Double.MAX_VALUE;\n        for(i=peaks.length-1;i>=0;i--){\n            if(Math.abs(peaks[i].z)>max)\n                max=Math.abs(peaks[i].z);\n        }\n        max*=threshold;\n        for(i=peaks.length-1;i>=0;i--){\n            if(Math.abs(peaks[i].z)<max)\n                peaks.splice(i,1);\n        }\n        return peaks;\n    },\n\t\n\tenhanceSymmetry: function(signals){\n\t\t\n\t\tvar properties = this.initializeProperties(signals);\n\t\tvar output = signals;\n\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"Before optimization size: \"+output.size());\n\t\t\n\t\t//First step of the optimization: Symmetry validation\n\t\tvar i,hits,index;\n\t\tvar signal;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(signal.peaks.length>1)\n\t\t\t\tproperties[i][1]++;\n\t\t\tif(properties[i][0]==1){\n\t\t\t\tindex = this.exist(output, properties, signal,-1,true);\n\t\t\t\tif(index>=0){\n\t\t\t\t\tproperties[i][1]+=2;\n\t\t\t\t\tproperties[index][1]+=2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Second step of the optimization: Diagonal image existence\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tsignal = output[i];\n\t\t\tif(properties[i][0]==0){\n\t\t\t\thits = this.checkCrossPeaks(output, properties, signal, true);\n\t\t\t\tproperties[i][1]+=hits;\n\t\t\t\t//checkCrossPeaks(output, properties, signal, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Now, each peak have a score between 0 and 4, we can complete the patterns which\n\t\t//contains peaks with high scores, and finally, we can remove peaks with scores 0 and 1\n\t\tvar count = 0;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!==0&&properties[i][1]>2){\n\t\t\t\tcount++;\n\t\t\t\tcount+=this.completeMissingIfNeeded(output,properties,output[i],properties[i]);\n\t\t\t}\n\t\t\tif(properties[i][1]>=2&&properties[i][0]===0)\n\t\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif(this.DEBUG)\n\t\t\tconsole.log(\"After optimization size: \"+count);\n\t\tvar  toReturn = new Array(count);\n\t\tcount--;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]!==0&&properties[i][1]>2\n\t\t\t\t\t||properties[i][0]===0&&properties[i][1]>1){\n\t\t\t\ttoReturn[count--]=output[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"Removed \"+i+\" \"+output[i].peaks.length);\n\t\t\t}\n\t\t\t//if(properties.get(i)[1]>=2)\n\t\t\t//\ttoReturn[count--]=output.get(i);\n\t\t}\n\t\treturn toReturn;\n\t},\n\t\n\tcompleteMissingIfNeeded: function(output, properties, thisSignal, thisProp) {\n\t\t//Check for symmetry\n\t\tvar index = this.exist(output, properties, thisSignal,-thisProp[0],true);\n\t\tvar addedPeaks=0;\n\t\tvar newSignal = null, tmpProp=null;\n\t\tif(index<0){//If this signal have no a symmetry image, we have to include it\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [-thisProp[0],thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\t//Check for diagonal peaks\n\t\tvar j=0;\n\t\tvar diagX=false, diagY=false;\n\t\tvar signal;\n\t\tfor(j=output.length-1;j>=0;j--){\n\t\t\tsignal = output[j];\n\t\t\tif(properties[j][0]===0){\n\t\t\t\tif(Math.abs(signal.shiftX-thisSignal.shiftX)<this.diagonalError)\n\t\t\t\t\tdiagX=true;\n\t\t\t\tif(Math.abs(signal.shiftY-thisSignal.shiftY)<this.diagonalError)\n\t\t\t\t\tdiagY=true;\n\t\t\t}\n\t\t}\n\t\tif(diagX===false){\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftX;\n\t\t\tnewSignal.shiftY=thisSignal.shiftX;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftX,y:thisSignal.shiftX,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\tif(diagY===false){\n\t\t\tnewSignal = {nucleusX:thisSignal.nucleusX,nucleusY:thisSignal.nucleusY};\n\t\t\tnewSignal.resolutionX=thisSignal.resolutionX;\n\t\t\tnewSignal.resolutionY=thisSignal.resolutionY;\n\t\t\tnewSignal.shiftX=thisSignal.shiftY;\n\t\t\tnewSignal.shiftY=thisSignal.shiftY;\n\t\t\tnewSignal.peaks = [{x:thisSignal.shiftY,y:thisSignal.shiftY,z:1}];\n\t\t\toutput.push(newSignal);\n\t\t\ttmpProp = [0,thisProp[1]];\n\t\t\tproperties.push(tmpProp);\n\t\t\taddedPeaks++;\n\t\t}\n\t\treturn addedPeaks;\n\t\t\n\t},\n\t\n\t//Check for any diagonal peak that match this cross peak\n\tcheckCrossPeaks: function(output, properties, signal, updateProperties) {\n\t\tvar hits = 0, i=0, shift=signal.shiftX*4;\n\t\tvar crossPeaksX = [],crossPeaksY = [];\n\t\tvar cross;\n\t\tfor(i=output.length-1;i>=0;i--){\n\t\t\tcross = output[i];\n\t\t\tif(properties[i][0]!==0){\n\t\t\t\tif(Math.abs(cross.shiftX-signal.shiftX)<this.diagonalError){\n\t\t\t\t\thits++;\n\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\tcrossPeaksX.push(i);\n\t\t\t\t\tshift+=cross.shiftX;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(Math.abs(cross.shiftY-signal.shiftY)<this.diagonalError){\n\t\t\t\t\t\thits++;\n\t\t\t\t\t\tif(updateProperties)\n\t\t\t\t\t\t\tproperties[i][1]++;\n\t\t\t\t\t\tcrossPeaksY.push(i);\n\t\t\t\t\t\tshift+=cross.shiftY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Update found crossPeaks and diagonal peak\n\t\tshift/=(crossPeaksX.length+crossPeaksY.length+4);\n\t\tif(crossPeaksX.length>0){\n\t\t\tfor( i=crossPeaksX.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksX[i]].shiftX=shift;\n\t\t\t}\n\t\t}\n\t\tif(crossPeaksY.length>0){\n\t\t\tfor( i=crossPeaksY.length-1;i>=0;i--){\n\t\t\t\toutput[crossPeaksY[i]].shiftY=shift;\n\t\t\t}\n\t\t}\n\t\tsignal.shiftX=shift;\n\t\tsignal.shiftY=shift;\n\t\treturn hits;\n\t},\n\n\texist: function(output, properties, signal, type, symmetricSearch) {\n\t\tfor(var i=output.length-1;i>=0;i--){\n\t\t\tif(properties[i][0]==type){\n\t\t\t\tif(this.distanceTo(signal, output[i], symmetricSearch)<this.tolerance){\n\t\t\t\t\tif(!symmetricSearch){\n\t\t\t\t\t\tvar shiftX=(output[i].shiftX+signal.shiftX)/2.0;\n\t\t\t\t\t\tvar shiftY=(output[i].shiftY+signal.shiftY)/2.0;\n\t\t\t\t\t\toutput[i].shiftX=shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftY;\n\t\t\t\t\t\tsignal.shiftX=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tvar shiftX=signal.shiftX;\n\t\t\t\t\t\tvar shiftY=output[i].shiftX;\n\t\t\t\t\t\toutput[i].shiftY=shiftX;\n\t\t\t\t\t\tsignal.shiftY=shiftY;\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\t/**\n\t * We try to determine the position of each signal within the spectrum matrix.\n\t * Peaks could be of 3 types: upper diagonal, diagonal or under diagonal 1,0,-1\n\t * respectively.\n\t * @param Signals\n\t * @return A matrix containing the properties of each signal\n\t */\n\tinitializeProperties: function(signals){\n\t\tvar signalsProperties = new Array(signals.length);\n\t\tfor(var i=signals.length-1;i>=0;i--){\n\t\t\tsignalsProperties[i]=[0,0];\n\t\t\t//We check if it is a diagonal peak\n\t\t\tif(Math.abs(signals[i].shiftX-signals[i].shiftY)<=this.diagonalError){\n\t\t\t\tsignalsProperties[i][1]=1;\n\t\t\t\t//We adjust the x and y value to be symmetric.\n\t\t\t\t//In general chemical shift in the direct dimension is better than in the other one,\n\t\t\t\t//so, we believe more to the shiftX than to the shiftY.\n\t\t\t\tvar shift = (signals[i].shiftX*2+signals[i].shiftY)/3.0;\n\t\t\t\tsignals[i].shiftX=shift;\n\t\t\t\tsignals[i].shiftY=shift;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(signals[i].shiftX-signals[i].shiftY>0)\n\t\t\t\t\tsignalsProperties[i][0]=1;\n\t\t\t\telse\n\t\t\t\t\tsignalsProperties[i][0]=-1;\n\t\t\t}\n\t\t}\n\t\treturn signalsProperties;\n\t},\n\t\n\t/**\n\t * This function calculates the distance between 2 nmr signals . If toImage is true, \n\t * it will interchange x by y in the distance calculation for the second signal.\n\t */\n\tdistanceTo: function(a, b, toImage){\n\t\tif(!toImage){\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftX, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftY, 2));\n\t\t}\n\t\telse{\n\t\t\treturn Math.sqrt(Math.pow(a.shiftX-b.shiftY, 2)\n\t\t\t\t\t+Math.pow(a.shiftY-b.shiftX, 2));\n\t\t}\n\t}\n};\n\nmodule.exports = PeakOptimizer;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/PeakOptimizer.js\n ** module id = 28\n ** module chunks = 0\n **/","var SimpleClustering={\n\n\t/*This function returns the cluster list for a given connectivity matrix.\n\t*To improve the performance, the connectivity(square and symmetric) matrix \n\t*is given as a single vector containing  the upper diagonal of the matrix\n\t*Note: This algorithm is O(n*n) complexity. I wonder if there is something better. \n\t*acastillo\n\t*/\n\tfullClusterGenerator:function(conn){\n\t\tvar nRows = Math.sqrt(conn.length*2+0.25)-0.5;\n\t\t//console.log(\"nRows: \"+nRows+\" - \"+conn.length);\n\t\tvar clusterList = [];\n\t\tvar available = new Array(nRows);\n\t\tvar remaining = nRows, i=0;\n\t\tvar cluster = [];\n\t\t//Mark all the elements as available\n\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\tavailable[i]=1;\n\t\t}\n\t\tvar nextAv=-1;\n\t\tvar toInclude = [];\n\t\twhile(remaining>0){\n\t\t\tif(toInclude.length===0){\n\t\t\t\t//If there is no more elements to include. Start a new cluster\n\t\t\t\tcluster = new Array(nRows);\n\t\t\t\tfor(i=nRows-1;i>=0;i--)\n\t\t\t\t\tcluster[i]=0;\n\t\t\t\tclusterList.push(cluster);\n\t\t    \tfor(nextAv = nRows-1;available[nextAv]==0;nextAv--){};\n\t\t    }\n\t\t    else{\n\t\t    \tnextAv=toInclude.splice(0,1);\n\t\t    }\n\t\t    //console.log(\"row: \"+nextAv);\n\t\t    cluster[nextAv]=1;\n\t\t    available[nextAv]=0;\n\t\t    remaining--;\n\t\t    //Copy the next available row\n\t\t    var row = new Array(nRows);\n\t\t\tfor(i=nRows-1;i>=0;i--){\n\t\t\t\tvar c=Math.max(nextAv,i);\n\t\t\t\tvar r=Math.min(nextAv,i);\n\t\t\t\t//The element in the conn matrix\n\t\t\t\t//console.log(\"index: \"+r*(2*nRows-r-1)/2+c)\n\t\t\t\trow[i]=conn[r*(2*nRows-r-1)/2+c];\n\t\t\t\t//console.log(\"col: \"+i+\":\"+row[i]);\n\t\t\t\t//There is new elements to include in this row?\n\t\t\t\t//Then, include it to the current cluster\n\t\t\t\tif(row[i]==1&&available[i]==1&&cluster[i]==0){\n\t\t\t\t\ttoInclude.push(i);\n\t\t\t\t\tcluster[i]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn clusterList;\n\t}\n}\n\nmodule.exports = SimpleClustering;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/SimpleClustering.js\n ** module id = 29\n ** module chunks = 0\n **/","/**\n * This library formats a set of nmr1D signals to the ACS format.\n * Created by acastillo on 3/11/15. p\n */\nvar ACS=ACS || {};\nACS.formater =(function() {\n    var acsString=\"\";\n    var parenthesis=\"\";\n    var spectro=\"\";\n    rangeForMultiplet=false;\n\n    function fromNMRSignal1D2ACS(spectrum, options){\n        acsString=\"\";\n        parenthesis=\"\";\n        spectro=\"\";\n        var solvent = null;\n        if(options&&options.solvent)\n            solvent = options.solvent;\n        //options.rangeForMultiplet=false;\n        if(options&&options.rangeForMultiplet!=undefined)\n            rangeForMultiplet = options.rangeForMultiplet;\n\n        //console.log(\"Range1: \"+options.rangeForMultiplet);\n\n        spectrum.type=\"NMR SPEC\";\n        if (spectrum[0][\"nucleus\"]==\"1H\") {\n            formatAcs_default(spectrum, false, 2, 1, solvent);\n        } else if (spectrum[0][\"nucleus\"]==\"13C\") {\n            formatAcs_default(spectrum, false, 1, 0, solvent);\n        }\n\n        if (acsString.length>0) acsString+=\".\";\n\n        return acsString;\n    }\n\n    /*function formatAcs_default_IR(spectra, ascending, decimalValue, smw) {\n     appendSeparator();\n     appendSpectroInformation(spectra);\n     if (spectra[\"peakLabels\"]) {\n     var numberPeakLabels=spectra[\"peakLabels\"].length;\n     var minIntensity= 9999999;\n     var maxIntensity=-9999999;\n     for (var i=0; i<numberPeakLabels; i++) {\n     if (spectra[\"peakLabels\"][i].intensity<minIntensity) minIntensity=spectra[\"peakLabels\"][i].intensity;\n     if (spectra[\"peakLabels\"][i].intensity>maxIntensity) maxIntensity=spectra[\"peakLabels\"][i].intensity;\n     }\n     for (var i=0; i<numberPeakLabels; i++) {\n     if (ascending) {\n     var peakLabel=spectra[\"peakLabels\"][i];\n     } else {\n     var peakLabel=spectra[\"peakLabels\"][numberPeakLabels-i-1];\n     }\n     if (peakLabel) {\n     appendSeparator();\n     appendValue(peakLabel,decimalValue);\n     if (smw) { // we need to add small / medium / strong\n     if (peakLabel.intensity<((maxIntensity-minIntensity)/3+minIntensity)) acsString+=\" (s)\";\n     else if (peakLabel.intensity>(maxIntensity-(maxIntensity-minIntensity)/3)) acsString+=\" (w)\";\n     else acsString+=\" (m)\";\n     }\n     }\n     }\n     }\n     }*/\n\n    function formatAcs_default(spectra, ascending, decimalValue, decimalJ, solvent) {\n        appendSeparator();\n        appendSpectroInformation(spectra, solvent);\n        var numberSmartPeakLabels=spectra.length;\n        //console.log(\"SP \"+spectra);\n        //console.log(\"# \"+numberSmartPeakLabels);\n        for (var i=0; i<numberSmartPeakLabels; i++) {\n            if (ascending) {\n                var signal=spectra[i];\n            } else {\n                var signal=spectra[numberSmartPeakLabels-i-1];\n            }\n            if (signal) {\n                //console.log(\"X2X\"+i+JSON.stringify(signal));\n                appendSeparator();\n                appendDelta(signal,decimalValue);\n                appendParenthesis(signal,decimalJ);\n                //console.log(\"S2S\"+i);\n            }\n        }\n    }\n\n    function appendSpectroInformation(spectrum, solvent) {\n        if (spectrum.type==\"NMR SPEC\") {\n            if (spectrum[0].nucleus) {\n                acsString+=formatNucleus(spectrum[0].nucleus);\n            }\n            acsString+=\" NMR\";\n            if ((solvent) || (spectrum[0].observe)) {\n                acsString+=\" (\";\n                if (spectrum[0].observe) {\n                    acsString+=(spectrum[0].observe*1).toFixed(0)+\" MHz\";\n                    if (solvent) acsString+=\", \";\n                }\n                if (solvent) {\n                    acsString+=formatMF(solvent);\n                }\n                acsString+=\")\";\n            }\n            acsString+=\" δ \";\n        } else if (spectrum.type==\"IR\") {\n            acsString+=\" IR \";\n        } else if (spectrum.type==\"MASS\") {\n            acsString+=\" MASS \";\n        }\n    }\n\n    function appendDelta(line, nbDecimal) {\n        //console.log(\"appendDelta1\");\n        var startX = 0,stopX=0,delta1=0;\n        if(line.startX){\n            if((typeof line.startX)==\"string\"){\n                startX=parseFloat(line.startX);\n            }\n            else\n                startX=line.startX;\n        }\n        if(line.stopX){\n            if((typeof line.stopX)==\"string\"){\n                stopX=parseFloat(line.stopX);\n            }\n            else\n                stopX=line.stopX;\n        }\n        if(line.delta1){\n            if((typeof line.delta1)==\"string\"){\n                delta1=parseFloat(line.delta1);\n            }\n            else\n                delta1=line.delta1;\n\n        }\n        //console.log(\"Range2: \"+rangeForMultiplet+\" \"+line.multiplicity);\n        if (line.asymmetric===true||(line.multiplicity==\"m\"&&rangeForMultiplet===true)) {//Is it massive??\n            if (line.startX&&line.stopX) {\n                if (startX<stopX) {\n                    acsString+=startX.toFixed(nbDecimal)+\"-\"+stopX.toFixed(nbDecimal);\n                } else {\n                    acsString+=stopX.toFixed(nbDecimal)+\"-\"+startX.toFixed(nbDecimal);\n                }\n            } else {\n                if(line.delta1)\n                    acsString+=delta1.toFixed(nbDecimal);\n            }\n        }\n        else{\n            if(line.delta1)\n                acsString+=delta1.toFixed(nbDecimal);\n            else{\n                if(line.startX&&line.stopX){\n                    acsString+=((startX+stopX)/2).toFixed(nbDecimal);\n                }\n            }\n        }\n    }\n\n    function appendValue(line, nbDecimal) {\n        if (line.xPosition) {\n            acsString+=line.xPosition.toFixed(nbDecimal);\n        }\n    }\n\n    function appendParenthesis(line, nbDecimal) {\n        //console.log(\"appendParenthesis1\");\n        // need to add assignment - coupling - integration\n        parenthesis=\"\";\n        appendMultiplicity(line);\n        appendIntegration(line);\n        appendCoupling(line,nbDecimal);\n        appendAssignment(line);\n\n\n        if (parenthesis.length>0) {\n            acsString+=\" (\"+parenthesis+\")\";\n        }\n        //console.log(\"appendParenthesis2\");\n    }\n\n    function appendIntegration(line) {\n        if (line.pubIntegration) {\n            appendParenthesisSeparator();\n            parenthesis+=line.pubIntegration;\n        } else if (line.integralData) {\n            appendParenthesisSeparator();\n            parenthesis+=line.integralData.value.toFixed(0)+\" H\";\n        }\n    }\n\n    function appendAssignment(line) {\n        if (line.pubAssignment) {\n            appendParenthesisSeparator();\n            parenthesis+=formatAssignment(line.pubAssignment);\n        }\n        else{\n            if (line.assignment) {\n                appendParenthesisSeparator();\n                parenthesis+=formatAssignment(line.assignment);\n            }\n        }\n    }\n\n    function appendMultiplicity(line) {\n        if (line.pubMultiplicity) {\n            appendParenthesisSeparator();\n            parenthesis+=line.pubMultiplicity;\n        } else if (line.multiplicity) {\n            appendParenthesisSeparator();\n            parenthesis+=line.multiplicity;\n        }\n    }\n\n    function appendCoupling(line, nbDecimal) {\n        if (line.nmrJs) {\n            var j=\"<i>J</i> = \";\n            for (var i=0; i<line.nmrJs.length; i++) {\n                var coupling=line.nmrJs[i].coupling;\n                if (j.length>11) j+=\", \";\n                j+=coupling.toFixed(nbDecimal);\n            }\n            appendParenthesisSeparator();\n            parenthesis+=j+\" Hz\";\n        }\n\n    }\n\n    function formatAssignment(assignment) {\n        assignment=assignment.replace(/([0-9])/g,\"<sub>$1</sub>\");\n        assignment=assignment.replace(/\\\"([^\\\"]*)\\\"/g,\"<i>$1</i>\");\n        return assignment;\n    }\n\n    function formatMF(mf) {\n        mf=mf.replace(/([0-9])/g,\"<sub>$1</sub>\");\n        return mf;\n    }\n\n    function formatNucleus(nucleus) {\n        nucleus=nucleus.replace(/([0-9])/g,\"<sup>$1</sup>\");\n        return nucleus;\n    }\n\n    function appendSeparator() {\n        if ((acsString.length>0) && (! acsString.match(/ $/))) {\n            acsString+=\", \";\n        }\n    }\n\n    function appendParenthesisSeparator() {\n        if ((parenthesis.length>0) && (! parenthesis.match(\", $\"))) parenthesis+=\", \";\n    }\n\n    function fromACS2NMRSignal1D(acsString){\n        return JSON.parse(SDAPI.AcsParserAsJSONString(acsString));\n    }\n\n    return {\n        toACS:fromNMRSignal1D2ACS,\n        toNMRSignal:fromACS2NMRSignal1D\n    }\n})();\n\nmodule.exports=ACS;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/AcsParser.js\n ** module id = 30\n ** module chunks = 0\n **/"],"sourceRoot":""}